/**
*     Copyright (c) 2025, Nations Technologies Inc.
* 
*     All rights reserved.
*
*     This software is the exclusive property of Nations Technologies Inc. (Hereinafter 
* referred to as NATIONS). This software, and the product of NATIONS described herein 
* (Hereinafter referred to as the Product) are owned by NATIONS under the laws and treaties
* of the People's Republic of China and other applicable jurisdictions worldwide.
*
*     NATIONS does not grant any license under its patents, copyrights, trademarks, or other 
* intellectual property rights. Names and brands of third party may be mentioned or referred 
* thereto (if any) for identification purposes only.
*
*     NATIONS reserves the right to make changes, corrections, enhancements, modifications, and 
* improvements to this software at any time without notice. Please contact NATIONS and obtain 
* the latest version of this software before placing orders.

*     Although NATIONS has attempted to provide accurate and reliable information, NATIONS assumes 
* no responsibility for the accuracy and reliability of this software.
* 
*     It is the responsibility of the user of this software to properly design, program, and test 
* the functionality and safety of any application made of this information and any resulting product. 
* In no event shall NATIONS be liable for any direct, indirect, incidental, special,exemplary, or 
* consequential damages arising in any way out of the use of this software or the Product.
*
*     NATIONS Products are neither intended nor warranted for usage in systems or equipment, any
* malfunction or failure of which may cause loss of human life, bodily injury or severe property 
* damage. Such applications are deemed, "Insecure Usage".
*
*     All Insecure Usage shall be made at user's risk. User shall indemnify NATIONS and hold NATIONS 
* harmless from and against all claims, costs, damages, and other liabilities, arising from or related 
* to any customer's Insecure Usage.

*     Any express or implied warranty with regard to this software or the Product, including,but not 
* limited to, the warranties of merchantability, fitness for a particular purpose and non-infringement
* are disclaimed to the fullest extent permitted by law.

*     Unless otherwise explicitly permitted by NATIONS, anyone may not duplicate, modify, transcribe
* or otherwise distribute this software for any purposes, in whole or in part.
*
*     NATIONS products and technologies shall not be used for or incorporated into any products or systems
* whose manufacture, use, or sale is prohibited under any applicable domestic or foreign laws or regulations. 
* User shall comply with any applicable export control laws and regulations promulgated and administered by 
* the governments of any countries asserting jurisdiction over the parties or transactions.
**/

/**
*\*\file n32h76x_78x.h
*\*\author Nations
*\*\version v1.0.0
*\*\copyright Copyright (c) 2025, Nations Technologies Inc. All rights reserved.
 */
#ifndef __N32H76X_78X_H__
#define __N32H76X_78X_H__

#ifdef __cplusplus
extern "C" {
#endif

/**  N32H76x_78x_Library_Basic **/

#if !defined USE_STDPERIPH_DRIVER
/*
 * Comment the line below if you will not use the peripherals drivers.
   In this case, these drivers will not be included and the application code will
   be based on direct access to peripherals registers
   */
#define USE_STDPERIPH_DRIVER
#endif

/*
 * In the following line adjust the value of External High Speed oscillator (HSE)
   used in your application

   Tip: To avoid modifying this file each time you need to use different HSE, you
        can define the HSE value in your toolchain compiler preprocessor.
  */
#if !defined HSE_VALUE
#define HSE_VALUE (25000000U) /* Value of the External oscillator in Hz */
#endif                      /* HSE_VALUE */

/** In the following line adjust the HSE\HSI\LSI\LSE Startup
   Timeout value **/
#define HSE_STARTUP_TIMEOUT ((uint32_t)0xF0000000)  /* SYSCLK= 600M Time out for HSE start up */
#define HSI_STARTUP_TIMEOUT ((uint16_t)0x1800)  /* SYSCLK= 600M Time out for HSI start up */
#define MSI_STARTUP_TIMEOUT ((uint16_t)0x1800)  /* SYSCLK= 600M Time out for HSI start up */
#define LSI_STARTUP_TIMEOUT ((uint16_t)0xF000)  /* SYSCLK= 600M Time out for LSI start up */
#define SECLSI_STARTUP_TIMEOUT ((uint16_t)0xF000)  /* SYSCLK= 600M Time out for LSI start up */
#define LSE_STARTUP_TIMEOUT ((uint32_t)0x18000000)  /* SYSCLK= 600M Time out for LSE start up */

#define HSI_VALUE (64000000U) /* Value of the Internal oscillator in Hz*/
#define MSI_VALUE (16000000U) /* Value of the Internal Medium Speed oscillator in Hz*/
#define LSI_VALUE (32000U) /* Value of the Internal Low Speed oscillator in Hz*/

#define __N32H76x_78x_STDPERIPH_VERSION_MAIN (0x00) /* [31:24] main version */
#define __N32H76x_78x_STDPERIPH_VERSION_SUB1 (0x00) /* [23:16] sub1 version */
#define __N32H76x_78x_STDPERIPH_VERSION_SUB2 (0x01) /* [15:8]  sub2 version */
#define __N32H76x_78x_STDPERIPH_VERSION_RC   (0x00) /* [7:0]  release candidate */

/**  N32H76x_78x Standard Peripheral Library version number  */
#define __N32H76x_78x_STDPERIPH_VERSION                                                                                    \
    ((__N32H76x_78x_STDPERIPH_VERSION_MAIN << 24) | (__N32H76x_78x_STDPERIPH_VERSION_SUB1 << 16)                               \
     | (__N32H76x_78x_STDPERIPH_VERSION_SUB2 << 8) | (__N32H76x_78x_STDPERIPH_VERSION_RC))

/*
 * Configuration of the Cortex-M7 Processor and Core Peripherals
 */
#if defined (N32H76x) || defined (N32H78x)
#define __MPU_PRESENT 1          /* MPU present*/
#define __FPU_PRESENT 1          /* FPU present                            */
#else
#define  __MPU_PRESENT             1 /*!< CORE CM7 devices provide an MPU */
#define __FPU_PRESENT              1 /*!< FPU present  */
#endif                            /* N32H76x_78x */

#if defined (N32H78x)
#define DUAL_CORE
#endif 
#define __NVIC_PRIO_BITS       4 /* N32H76x_78x uses 4 Bits for the Priority Levels    */
#define __Vendor_SysTickConfig 0 /* Set to 1 if different SysTick Config is used */


/**
 * N32H76x_78x Interrupt Number Definition
 */
typedef enum IRQn
{
    /******  Processor Exceptions Numbers ***********************************************************/
    NonMaskableInt_IRQn           = -14,             /* 2 Non Maskable Interrupt                              */
    HardFault_IRQn                = -13,             /* 3 Hard Fault Interrupt                                */
    MemoryManagement_IRQn         = -12,             /* 4 Memory Management Interrupt                         */
    BusFault_IRQn                 = -11,             /* 5 Bus Fault Interrupt                                 */
    UsageFault_IRQn               = -10,             /* 6 Usage Fault Interrupt                               */
    SVCall_IRQn                   = -5,              /* 11 SV Call Interrupt                                  */
    DebugMonitor_IRQn             = -4,              /* 12 Debug Monitor Interrupt                            */
    PendSV_IRQn                   = -2,              /* 14 Pend SV Interrupt                                  */
    SysTick_IRQn                  = -1,              /* 15 System Tick Interrupt                              */
#ifdef CORE_CM4                                                                                               
    WWDG2_IRQn                    = 0,               /* Window2 Watchdog interrupt                          */
#endif /* CORE_CM4 */                                                                                         
#ifdef CORE_CM7                                                                                               
    WWDG1_IRQn                    = 0,               /* Window1 Watchdog interrupt                          */
#endif /* CORE_CM7 */                                                                                         
    PVD_IRQn                      = 1,               /* PVD through EXTI Line16 detection interrupt         */
    RTC_TAMPER_IRQn               = 2,               /* RTC Tamper_Timestamp_Overflow or LSE-CSS through EXTI Line18 interrupt */
    RTC_WKUP_IRQn                 = 3,               /* RTC Wakeup timer through EXTI line 19 interrupt     */
    RCC_IRQn                      = 4,               /* RCC interrupt                                       */
    EXTI0_IRQn                    = 5,               /* EXTI Line 0 interrupt                               */
    EXTI1_IRQn                    = 6,               /* EXTI Line 1 interrupt                               */
    EXTI2_IRQn                    = 7,               /* EXTI Line 2 interrupt                               */
    EXTI3_IRQn                    = 8,               /* EXTI Line 3 interrupt                               */
    EXTI4_IRQn                    = 9,               /* EXTI Line 4 interrupt                               */
    EXTI9_5_IRQn                  = 10,              /* EXTI Line[9:5] interrupt                            */
    EXTI15_10_IRQn                = 11,              /* EXTI Line[15:10] interrupt                          */
    DMA1_Channel0_IRQn            = 12,              /* DMA1 Channel 0 global interrupt                     */
    DMA1_Channel1_IRQn            = 13,              /* DMA1 Channel 1 global interrupt                     */
    DMA1_Channel2_IRQn            = 14,              /* DMA1 Channel 2 global interrupt                     */
    DMA1_Channel3_IRQn            = 15,              /* DMA1 Channel 3 global interrupt                     */
    DMA1_Channel4_IRQn            = 16,              /* DMA1 Channel 4 global interrupt                     */
    DMA1_Channel5_IRQn            = 17,              /* DMA1 Channel 5 global interrupt                     */
    DMA1_Channel6_IRQn            = 18,              /* DMA1 Channel 6 global interrupt                     */
    DMA1_Channel7_IRQn            = 19,              /* DMA1 Channel 7 global interrupt                     */
    DMA2_Channel0_IRQn            = 20,              /* DMA2 Channel 0 global interrupt                     */
    DMA2_Channel1_IRQn            = 21,              /* DMA2 Channel 1 global interrupt                     */
    DMA2_Channel2_IRQn            = 22,              /* DMA2 Channel 2 global interrupt                     */
    DMA2_Channel3_IRQn            = 23,              /* DMA2 Channel 3 global interrupt                     */
    DMA2_Channel4_IRQn            = 24,              /* DMA2 Channel 4 global interrupt                     */
    DMA2_Channel5_IRQn            = 25,              /* DMA2 Channel 5 global interrupt                     */
    DMA2_Channel6_IRQn            = 26,              /* DMA2 Channel 6 global interrupt                     */
    DMA2_Channel7_IRQn            = 27,              /* DMA2 Channel 7 global interrupt                     */
    DMA3_Channel0_IRQn            = 28,              /* DMA3 Channel 0 global interrupt                     */
    DMA3_Channel1_IRQn            = 29,              /* DMA3 Channel 1 global interrupt                     */
    DMA3_Channel2_IRQn            = 30,              /* DMA3 Channel 2 global interrupt                     */
    DMA3_Channel3_IRQn            = 31,              /* DMA3 Channel 3 global interrupt                     */
    DMA3_Channel4_IRQn            = 32,              /* DMA3 Channel 4 global interrupt                     */
    DMA3_Channel5_IRQn            = 33,              /* DMA3 Channel 5 global interrupt                     */
    DMA3_Channel6_IRQn            = 34,              /* DMA3 Channel 6 global interrupt                     */
    DMA3_Channel7_IRQn            = 35,              /* DMA3 Channel 7 global interrupt                     */
    MDMA_Channel0_IRQn            = 36,              /* MDMA Channel 0 global interrupt                     */
    MDMA_Channel1_IRQn            = 37,              /* MDMA Channel 1 global interrupt                     */
    MDMA_Channel2_IRQn            = 38,              /* MDMA Channel 2 global interrupt                     */
    MDMA_Channel3_IRQn            = 39,              /* MDMA Channel 3 global interrupt                     */
    MDMA_Channel4_IRQn            = 40,              /* MDMA Channel 4 global interrupt                     */
    MDMA_Channel5_IRQn            = 41,              /* MDMA Channel 5 global interrupt                     */
    MDMA_Channel6_IRQn            = 42,              /* MDMA Channel 6 global interrupt                     */
    MDMA_Channel7_IRQn            = 43,              /* MDMA Channel 7 global interrupt                     */
    MDMA_Channel8_IRQn            = 44,              /* MDMA Channel 8 global interrupt                     */
    MDMA_Channel9_IRQn           = 45,               /* MDMA Channel 9 global interrupt                    */
    MDMA_Channel10_IRQn           = 46,              /* MDMA Channel 10 global interrupt                    */
    MDMA_Channel11_IRQn           = 47,              /* MDMA Channel 11 global interrupt                    */
    MDMA_Channel12_IRQn           = 48,              /* MDMA Channel 12 global interrupt                    */
    MDMA_Channel13_IRQn           = 49,              /* MDMA Channel 13 global interrupt                    */
    MDMA_Channel14_IRQn           = 50,              /* MDMA Channel 14 global interrupt                    */
    MDMA_Channel15_IRQn           = 51,              /* MDMA Channel 15 global interrupt                    */
    SDPU_IRQn                     = 52,              /* SDPU global interruptSDPU global interrupt          */
#ifdef CORE_CM4                                                                                               
    AHB_ICACHE_IRQn               = 53,              /*!< CM4 AHB iCache interrupt                            */
    AHB_DCACHE_IRQn               = 54,              /*!< CM4 AHB dCache interrupt                            */
    FPU_CPU2_IRQn                 = 55,              /*!< FPU_CM4 global interrupt                            */
#endif /* CORE_CM4 */                                                                                         
#ifdef CORE_CM7                                                                                               
    FPU_CPU1_IRQn                 = 55,              /*!< FPU_CM7 global interrupt                            */
#endif /* CORE_CM7 */                                                                                         
    ECCMON_IRQn                   = 56,              /*!< ECCMON global interrupt                             */
    RTC_ALARM_IRQn                = 57,              /*!< RTC Alarm via EXTI17 interrupt                      */
    I2C1_EV_IRQn                  = 58,              /*!< I2C1 event interrupt                                */
    I2C1_ER_IRQn                  = 59,              /*!< I2C1 error interrupt                                */
    I2C2_EV_IRQn                  = 60,              /*!< I2C2 event interrupt                                */
    I2C2_ER_IRQn                  = 61,              /*!< I2C2 error interrupt                                */
    I2C3_EV_IRQn                  = 62,              /*!< I2C3 event interrupt                                */
    I2C3_ER_IRQn                  = 63,              /*!< I2C3 error interrupt                                */
    I2C4_EV_IRQn                  = 64,              /*!< I2C4 event interrupt                                */
    I2C4_ER_IRQn                  = 65,              /*!< I2C4 error interrupt                                */
    I2C5_EV_IRQn                  = 66,              /*!< I2C5 event interrupt                                */
    I2C5_ER_IRQn                  = 67,              /*!< I2C5 error interrupt                                */
    I2C6_EV_IRQn                  = 68,              /*!< I2C6 event interrupt                                */
    I2C6_ER_IRQn                  = 69,              /*!< I2C6 error interrupt                                */
    I2C7_EV_IRQn                  = 70,              /*!< I2C7 event interrupt                                */
    I2C7_ER_IRQn                  = 71,              /*!< I2C7 error interrupt                                */
    I2C8_EV_IRQn                  = 72,              /*!< I2C8 event interrupt                                */
    I2C8_ER_IRQn                  = 73,              /*!< I2C8 error interrupt                                */
    I2C9_EV_IRQn                  = 74,              /*!< I2C9 event interrupt                                */
    I2C9_ER_IRQn                  = 75,              /*!< I2C9 error interrupt                                */
    I2C10_EV_IRQn                 = 76,              /*!< I2C10 event interrupt                               */
    I2C10_ER_IRQn                 = 77,              /*!< I2C10 error interrupt                               */
    I2S1_IRQn                     = 78,              /*!< I2S1 global interrupt                               */
    I2S2_IRQn                     = 79,              /*!< I2S1 global interrupt                               */
    I2S3_IRQn                     = 80,              /*!< I2S1 global interrupt                               */
    I2S4_IRQn                     = 81,              /*!< I2S1 global interrupt                               */
    xSPI1_IRQn                    = 82,              /*!< xSPI1 global interrupt                              */
    xSPI2_IRQn                    = 83,              /*!< xSPI1 global interrupt                              */
    SPI1_IRQn                     = 84,              /*!< SPI1 global interrupt                               */
    SPI2_IRQn                     = 85,              /*!< SPI2 global interrupt                               */
    SPI3_IRQn                     = 86,              /*!< SPI3 global interrupt                               */
    SPI4_IRQn                     = 87,              /*!< SPI4 global interrupt                               */
    SPI5_IRQn                     = 88,              /*!< SPI5 global interrupt                               */
    SPI6_IRQn                     = 89,              /*!< SPI6 global interrupt                               */
    SPI7_IRQn                     = 90,              /*!< SPI7 global interrupt                               */
    LCD_EV_IRQn                   = 91,              /*!< TFT LCD Controller event interrupt                  */
    LCD_ER_IRQn                   = 92,              /*!< TFT LCD Controller error interrupt                  */
    DVP1_IRQn                     = 93,              /*!< DVP1 global interrupt                               */
    DVP2_IRQn                     = 94,              /*!< DVP1 global interrupt                               */
    DMAMUX2_IRQn                  = 95,              /*!< DMAMUX2 (MDMA MUX) global interrupt                 */
    USB1_HS_EPx_OUT_IRQn          = 96,              /*!< USB1_HS endpoint out global interrupt               */
    USB1_HS_EPx_IN_IRQn           = 97,              /*!< USB1_HS endpoint in global interrupt                */
    USB1_HS_WKUP_IRQn             = 98,              /*!< USB1_HS WKUP interrupt through EXTI line 62         */
    USB1_HS_IRQn                  = 99,              /*!< USB1_HS global interrupt                            */
    USB2_HS_EPx_OUT_IRQn          = 100,             /*!< USB2_HS  endpoint out global interrupt              */
    USB2_HS_EPx_IN_IRQn           = 101,             /*!< USB2_HS  endpoint in global interrupt               */
    USB2_HS_WKUP_IRQn             = 102,             /*!< USB2_HS WKUP interrupt through EXTI line 63         */
    USB2_HS_IRQn                  = 103,             /*!< USB2_HS global interrupt                            */
    ETH1_IRQn                     = 104,             /*!< Ethernet 1 global interrupt                         */
    ETH1_PMT_LPI_IRQn             = 105,             /*!< Ethernet 1 PMT wakeup interrupt and LPI interrupt through EXTI line 83    */
    ETH2_IRQn                     = 106,             /*!< Ethernet 2 global interrupt                                               */
    ETH2_PMT_LPI_IRQn             = 107,             /*!< Ethernet 2  PMT wakeup interrupt and LPI interrupt through EXTI line 84   */
    FDCAN1_INT0_IRQn              = 108,             /*!< FDCAN1 global interrupt line 0                      */                                    
    FDCAN2_INT0_IRQn              = 109,             /*!< FDCAN2 global interrupt line 0                      */
    FDCAN3_INT0_IRQn              = 110,             /*!< FDCAN3 global interrupt line 0                      */
    FDCAN4_INT0_IRQn              = 111,             /*!< FDCAN4 global interrupt line 0                      */
    FDCAN1_INT1_IRQn              = 112,             /*!< FDCAN1 global interrupt line 1                      */
    FDCAN2_INT1_IRQn              = 113,             /*!< FDCAN2 global interrupt line 1                      */
    FDCAN3_INT1_IRQn              = 114,             /*!< FDCAN3 global interrupt line 1                      */
    FDCAN4_INT1_IRQn              = 115,             /*!< FDCAN4 global interrupt line 1                      */
    USART1_IRQn                   = 116,             /*!< USART1 global interrupt                             */
    USART2_IRQn                   = 117,             /*!< USART2 global interrupt                             */
    USART3_IRQn                   = 118,             /*!< USART3 global interrupt                             */
    USART4_IRQn                   = 119,             /*!< USART4 global interrupt                             */
    USART5_IRQn                   = 120,             /*!< USART5 global interrupt                             */
    USART6_IRQn                   = 121,             /*!< USART6 global interrupt                             */
    USART7_IRQn                   = 122,             /*!< USART7 global interrupt                             */
    USART8_IRQn                   = 123,             /*!< USART8 global interrupt                             */
    UART9_IRQn                    = 124,             /*!< UART9 global interrupt                              */
    UART10_IRQn                   = 125,             /*!< UART10 global interrupt                             */
    UART11_IRQn                   = 126,             /*!< UART11 global interrupt                             */
    UART12_IRQn                   = 127,             /*!< UART12 global interrupt                             */
    UART13_IRQn                   = 128,             /*!< UART13 global interrupt                             */
    UART14_IRQn                   = 129,             /*!< UART14 global interrupt                             */
    UART15_IRQn                   = 130,             /*!< UART15 global interrupt                             */
    LPUART1_IRQn                  = 131,             /*!< LPUART1 global interrupt + wakeup through EXTI line 49 */
    LPUART2_IRQn                  = 132,             /*!< LPUART2 global interrupt + wakeup through EXTI line 52 */
    GPU_IRQn                      = 133,             /*!< GPU global interrupt                                */
    SDMMC1_IRQn                   = 135,             /*!< SDMMC1_IRQ + WKUP through EXTI line 24              */
    SDMMC2_IRQn                   = 136,             /*!< SDMMC2_IRQ + WKUP  through EXTI line 25             */
    ADC1_IRQn                     = 137,             /*!< ADC1 global interrupt                               */
    ADC2_IRQn                     = 138,             /*!< ADC2 global interrupt                               */
    ADC3_IRQn                     = 139,             /*!< ADC3 global interrupt                               */
    COMP1_2_IRQn                  = 140,             /*!< COMP1 and COMP2 through EXTI line 20 and 21         */
    COMP3_4_IRQn                  = 141,             /*!< COMP3 and COMP4  through EXTI line 22 and 23        */
    SHRTIM1_INT1_IRQn             = 142,             /*!< High Resolution timer 1 interrupt 1                 */
    SHRTIM1_INT2_IRQn             = 143,             /*!< High Resolution timer 1 interrupt 2                 */
    SHRTIM1_INT3_IRQn             = 144,             /*!< High Resolution timer 1 interrupt 3                 */
    SHRTIM1_INT4_IRQn             = 145,             /*!< High Resolution timer 1 interrupt 4                 */
    SHRTIM1_INT5_IRQn             = 146,             /*!< High Resolution timer 1 interrupt 5                 */
    SHRTIM1_INT6_IRQn             = 147,             /*!< High Resolution timer 1 interrupt 6                 */
    SHRTIM1_INT7_IRQn             = 148,             /*!< High Resolution timer 1 interrupt 7                 */
    SHRTIM1_INT8_IRQn             = 149,             /*!< High Resolution timer 1 interrupt 8                 */
    SHRTIM2_INT1_IRQn             = 150,             /*!< High Resolution timer 1 interrupt 1                 */
    SHRTIM2_INT2_IRQn             = 151,             /*!< High Resolution timer 1 interrupt 2                 */
    SHRTIM2_INT3_IRQn             = 152,             /*!< High Resolution timer 1 interrupt 3                 */
    SHRTIM2_INT4_IRQn             = 153,             /*!< High Resolution timer 1 interrupt 4                 */
    SHRTIM2_INT5_IRQn             = 154,             /*!< High Resolution timer 1 interrupt 5                 */
    SHRTIM2_INT6_IRQn             = 155,             /*!< High Resolution timer 1 interrupt 6                 */
    SHRTIM2_INT7_IRQn             = 156,             /*!< High Resolution timer 1 interrupt 7                 */
    SHRTIM2_INT8_IRQn             = 157,             /*!< High Resolution timer 1 interrupt 8                 */
    FDCAN5_INT0_IRQn              = 158,             /*!< FDCAN5 global interrupt line 0                      */
    FDCAN6_INT0_IRQn              = 159,             /*!< FDCAN6 global interrupt  line 0                     */
    FDCAN7_INT0_IRQn              = 160,             /*!< FDCAN7 global interrupt line 0                      */
    FDCAN8_INT0_IRQn              = 161,             /*!< FDCAN8 global interrupt line 0                      */
    FDCAN5_INT1_IRQn              = 162,             /*!< FDCAN5 global interrupt line 1                      */
    FDCAN6_INT1_IRQn              = 163,             /*!< FDCAN6 global interrupt line 1                      */
    FDCAN7_INT1_IRQn              = 164,             /*!< FDCAN7 global interrupt line 1                      */
    FDCAN8_INT1_IRQn              = 165,             /*!< FDCAN8 global interrupt line 1                      */
    DSI_IRQn                      = 166,             /*!< MIPI DSI Interrupt through EXTI line 87             */
#ifdef CORE_CM4                                                                                               
    AHB_CACHE_PARMON_IRQn          = 167,             /*!< AHB i/dCACHE parity error intertupt                 */
#endif /* CORE_CM4 */                                                                                         
    LPTIM5_WKUP_IRQn              = 168,             /*!< LPTIM5 wakeup  through EXTI 86                      */
    JPEG_SGDMA_H2P_IRQn           = 169,             /*!< JPEG SGDMA Host to Peripheral Interrupt             */
    JPEG_SGDMA_P2H_IRQn           = 170,             /*!< JPEG SGDMA Peripheral to Host Interrupt             */
    WAKEUP_IO_IRQn                = 171,             /*!< 6 WAKEUP IOs through EXTI line 70-75                */
                                                                                                              
#ifdef CORE_CM4                                                                                               
    SEMA4_INT2_IRQn               = 173,             /*!< SEMA4 interrupt2                                    */
    WWDG1_RST_IRQn                = 174,             /*!< WWDG1 reset interrupt through EXTI line 81          */
#endif /* CORE_CM4 */                                                                                         
#ifdef CORE_CM7                                                                                               
    SEMA4_INT1_IRQn               = 172,             /*!< SEMA4 interrupt1                                    */
    WWDG2_RST_IRQn                = 174,             /*!< WWDG2 reset interrupt through EXTI line 82          */
#endif /* CORE_CM7 */                                                                                         
    OTPC_IRQn                     = 175,             /*!< OTPC interrupt                                      */
    FEMC_IRQn                     = 176,             /*!< FEMC interrupt                                      */
#ifdef CORE_CM4                                                                                               
    DCMUA_IRQn                    = 177,             /*!< DCMUA interrupt                                     */
#endif /* CORE_CM4 */                                                                                         
#ifdef CORE_CM7                                                                                               
    DCMUB_IRQn                    = 177,             /*!< DCMUB interrupt                                     */
#endif /* CORE_CM7 */                                                                                         
    DAC1_IRQn                     = 178,             /*!< DAC1 IRQ                                            */
    DAC2_IRQn                     = 179,             /*!< DAC2 IRQ                                            */
    MDMA_AHBS_ER_IRQn             = 180,             /*!< MDMA AHBS ERROR through EXTI line 90               */
    CM7_CATCH_READ_ER_IRQn        = 181,             /*!< CM7 Error on Cache Read  through EXTI line 64-65    */
    DAC3_IRQn                     = 182,             /*!< DAC3 interrupt                                      */
    DAC4_IRQn                     = 183,             /*!< DAC4 interrupt                                      */
    EMC_IRQn                      = 184,             /*!< EMC event interrupt through EXTI line 88-89         */
    DAC5_IRQn                     = 185,             /*!< DAC5 interrupt                                      */
    DAC6_IRQn                     = 186,             /*!< DAC6 interrupt                                      */
    ESC_OPB_IRQn                  = 187,             /*!< ETHERCAT OPB Interrupt                              */
    ESC_SYNC0_IRQn                = 188,             /*!< ETHERCAT SYNC0 Interrupt                            */
    ESC_SYNC1_IRQn                 = 189,             /*!< ETHERCAT SYNC1 Interrupt                            */
    ESC_WRP_IRQn                  = 190,             /*!< ETHERCAT WRAPPER Interrupt                          */
    ATIM1_BRK_IRQn                = 192,             /*!< Advanced timer 1 break interrupt                    */
    ATIM1_TRG_COM_IRQn            = 193,             /*!< Advanced timer 1 trigger and commutation interrupts */
    ATIM1_CC_IRQn                 = 194,             /*!< Advanced timer 1 capture/compare interrupt          */
    ATIM1_UP_IRQn                 = 195,             /*!< Advanced timer 1 update interrupt                   */
    ATIM2_BRK_IRQn                = 196,             /*!< Advanced timer 2 break interrupt                    */
    ATIM2_TRG_COM_IRQn            = 197,             /*!< advanced timer 2 trigger and commutation interrupts */
    ATIM2_CC_IRQn                 = 198,             /*!< Advanced timer 2 capture/compare interrupt          */
    ATIM2_UP_IRQn                 = 199,             /*!< Advanced timer 2 update interrupt                   */
    ATIM3_BRK_IRQn                = 200,             /*!< Advanced timer 3 break interrupt                    */
    ATIM3_TRG_COM_IRQn            = 201,             /*!< Advanced timer 3 trigger and commutation interrupts */
    ATIM3_CC_IRQn                 = 202,             /*!< Advanced timer 3 capture/compare interrupt          */
    ATIM3_UP_IRQn                 = 203,             /*!< Advanced timer 3 update interrupt                   */
    ATIM4_BRK_IRQn                = 204,             /*!< Advanced timer 4 break interrupt                    */
    ATIM4_TRG_COM_IRQn            = 205,             /*!< Advanced timer 4 trigger and commutation interrupts */
    ATIM4_CC_IRQn                 = 206,             /*!< Advanced timer 4 capture/compare interrupt          */
    ATIM4_UP_IRQn                 = 207,             /*!< Advanced timer 4 update interrupt                   */
    GTIMA1_IRQn                   = 208,             /*!< General timer A 1 global interrupt                    */
    GTIMA2_IRQn                   = 209,             /*!< General timer A 2 global interrupt                    */
    GTIMA3_IRQn                   = 210,             /*!< General timer A 3 global interrupt                    */
    GTIMA4_IRQn                   = 211,             /*!< General timer A 4 global interrupt                    */
    GTIMA5_IRQn                   = 212,             /*!< General timer A 5 global interrupt                    */
    GTIMA6_IRQn                   = 213,             /*!< General timer A 6 global interrupt                    */
    GTIMA7_IRQn                   = 214,             /*!< General timer A 7 global interrupt                    */
    GTIMB1_IRQn                   = 215,             /*!< General timer B 1 global interrupt                    */
    GTIMB2_IRQn                   = 216,             /*!< General timer B 2 global interrupt                    */
    GTIMB3_IRQn                   = 217,             /*!< General timer B 3 global interrupt                   */
    BTIM1_IRQn                    = 218,             /*!< Base timer 1 global interrupt                       */
    BTIM2_IRQn                    = 219,             /*!< Base timer 2 global interrupt                       */
    BTIM3_IRQn                    = 220,             /*!< Base timer 3 global interrupt                       */
    BTIM4_IRQn                    = 221,             /*!< Base timer 4 global interrupt                       */
    LPTIM1_WKUP_IRQn              = 222,             /*!< LPTIM1 wakeup interrupt                             */
    LPTIM2_WKUP_IRQn              = 223,             /*!< LPTIM2 wakeup interrupt                             */
    LPTIM3_WKUP_IRQn              = 224,             /*!< LPTIM3 wakeup interrupt                             */
    LPTIM4_WKUP_IRQn              = 225,             /*!< LPTIM4 wakeup interrupt                             */
    DSMU_FLT0_IRQn                = 226,             /*!< DSMU_FLT0                                           */
    DSMU_FLT1_IRQn                = 227,             /*!< DSMU_FLT1                                           */
    DSMU_FLT2_IRQn                = 228,             /*!< DSMU_FLT2                                           */
    DSMU_FLT3_IRQn                = 229,             /*!< DSMU_FLT3                                           */
    FMAC_IRQn                     = 230,             /*!< FMAC global interrupt                               */
    CORDIC_IRQn                   = 231,             /*!< CORDIC global interrupt                             */
    DMAMUX_IRQn                   = 232,             /*!< DMAMUX interrupt                                    */
    MMU_INT_IRQn                  = 233,             /*!< MMU interrupt                                       */
} IRQn_Type;

#if defined (CORE_CM4)
#include "core_cm4.h"
#endif
#if defined (CORE_CM7)
#include "core_cm7.h"
#endif

#include "system_n32h76x_78x.h"
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>

typedef int32_t s32;
typedef int16_t s16;
typedef int8_t s8;

typedef const int32_t sc32; /* Read Only */
typedef const int16_t sc16; /* Read Only */
typedef const int8_t sc8;   /* Read Only */

typedef __IO int32_t vs32;
typedef __IO int16_t vs16;
typedef __IO int8_t vs8;

typedef __I int32_t vsc32; /* Read Only */
typedef __I int16_t vsc16; /* Read Only */
typedef __I int8_t vsc8;   /* Read Only */

typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t u8;

typedef const uint32_t uc32; /* Read Only */
typedef const uint16_t uc16; /* Read Only */
typedef const uint8_t uc8;   /* Read Only */

typedef __IO uint32_t vu32;
typedef __IO uint16_t vu16;
typedef __IO uint8_t vu8;

typedef __I uint32_t vuc32; /* Read Only */
typedef __I uint16_t vuc16; /* Read Only */
typedef __I uint8_t vuc8;   /* Read Only */
typedef enum
{
    RESET = 0,
    SET   = !RESET
} FlagStatus,ITStatus,
    INTStatus;

typedef enum
{
    DISABLE = 0,
    ENABLE  = !DISABLE
} FunctionalState,FunctionalStatus;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))

typedef enum
{
    ERROR   = 0,
    SUCCESS = !ERROR
} ErrorStatus;

/* N32H76x_78x Standard Peripheral Library old definitions (maintained for legacy purpose) */
#define HSEStartUp_TimeOut HSE_STARTUP_TIMEOUT
#define HSE_Value          HSE_VALUE
#define HSI_Value          HSI_VALUE

/*** Analog to Digital Converter ***/
typedef struct
{
    __IO uint32_t STS;          //0x00
    __IO uint32_t CTRL1;        //0x04
    __IO uint32_t CTRL2;        //0x08
    __IO uint32_t CTRL3;        //0x0C
    __IO uint32_t SAMPT1;       //0x10
    __IO uint32_t SAMPT2;       //0x14
    __IO uint32_t SAMPT3;       //0x18
    __IO uint32_t DIFSEL;       //0x1C
    __IO uint32_t AWDCTRL;      //0x20
    __IO uint32_t OFFSET1;      //0x24
    __IO uint32_t OFFSET2;      //0x28
    __IO uint32_t OFFSET3;      //0x2C
    __IO uint32_t OFFSET4;      //0x30
    __IO uint32_t AWD1HIGH;     //0x34
    __IO uint32_t AWD1LOW;      //0x38
    __IO uint32_t AWD2HIGH;     //0x3C
    __IO uint32_t AWD2LOW;      //0x40
    __IO uint32_t AWD3HIGH;     //0x44
    __IO uint32_t AWD3LOW;      //0x48
    __IO uint32_t AWD2EN;       //0x4C
    __IO uint32_t AWD3EN;       //0x50
    __IO uint32_t AWD2INTEN;    //0x54
    __IO uint32_t AWD3INTEN;    //0x58
    __IO uint32_t AWD2STS;      //0x5C
    __IO uint32_t AWD3STS;      //0x60
    __IO uint32_t RSEQ1;        //0x64
    __IO uint32_t RSEQ2;        //0x68
    __IO uint32_t RSEQ3;        //0x6C
    __IO uint32_t RSEQ4;        //0x70
    __IO uint32_t JSEQ;         //0x74
    __IO uint32_t JDAT1;        //0x78
    __IO uint32_t JDAT2;        //0x7C
    __IO uint32_t JDAT3;        //0x80 
    __IO uint32_t JDAT4;        //0x84
    __IO uint32_t DAT;          //0x88 
    __IO uint32_t FIFOCFG;      //0x8C
    __IO uint32_t FIFOSTS;      //0x90
    __IO uint32_t DLYSMP;       //0x94
    __IO uint32_t OSCFG;        //0x98
    __IO uint32_t INTLRCFG;     //0x9C
    __IO uint32_t GCOMP;        //0xA0
}ADC_Module;

   
/*** LCDC Register ***/
typedef struct
{
    __I  uint32_t RESERVED0[2];     /* Reserved, 0x00, 0x04 */
    __IO uint32_t SYNCCTRL;         /* LCDC Synchronization Size Conctrl Register,    Address offset: 0x08 */
    __IO uint32_t BPCTRL;           /* LCDC Back Porch Conctrl Register,              Address offset: 0x0C */
    __IO uint32_t AWCTRL;           /* LCDC Active Width Conctrl Register,            Address offset: 0x10 */
    __IO uint32_t TWCTRL;           /* LCDC Total Width Conctrl Register,             Address offset: 0x14 */
    __IO uint32_t GCTRL;            /* LCDC Global Control Register ,                 Address offset: 0x18 */
    __I  uint32_t RESERVED1[2];     /* Reserved, 0x1C, 0x20 */
    __IO uint32_t SRCTRL;           /* LCDC Shadow Reload Conctrl Register,           Address offset: 0x24 */
    __I  uint32_t RESERVED2;        /* Reserved, 0x28 */                
    __IO uint32_t BGCCTRL;          /* LCDC Background Color Conctrl Register,        Address offset: 0x2C */
    __I  uint32_t RESERVED3;        /* Reserved, 0x30 */
    __IO uint32_t INTEN;            /* LCDC Interrupt Enable Register,                Address offset: 0x34 */
    __IO uint32_t INTSTS;           /* LCDC Interrupt Status Register,                Address offset: 0x38 */
    __IO uint32_t INTCLR;           /* LCDC Interrupt Clear Register,                 Address offset: 0x3C */
    __IO uint32_t LINTPCTRL;        /* LCDC Line Interrupt Position Conctrl Register, Address offset: 0x40 */
    __IO uint32_t CPSTS;            /* LCDC Current Position Status Register,         Address offset: 0x44 */
    __IO uint32_t CDSTS;            /* LCDC Current Display Status Register,          Address offset: 0x48 */
    __I  uint32_t RESERVED4[5];     /* Reserved, 0x4C ~ 0x5C */
    __IO uint32_t EXTDCTRL;         /* LCDC External Display Control Register,        Address offset: 0x60 */
} LCDC_Module;  
      
typedef struct
{  
    __I  uint32_t RESERVED0[2];     /* Reserved, 0x00 0x04                                                                 */
    __IO uint32_t LSRCTRL;          /* LCDC Layerx Reload Control Register                           Address offset: 0x08  */
    __IO uint32_t LCTRL;            /* LCDC Layerx Control Register                                  Address offset: 0x0C  */
    __IO uint32_t WHPCTRL;          /* LCDC Layerx Window Horizontal Position Configuration Register Address offset: 0x10  */
    __IO uint32_t WVPCTRL;          /* LCDC Layerx Window Vertical Position Configuration Register   Address offset: 0x14  */
    __IO uint32_t CKCTRL;           /* LCDC Layerx Color Keying Configuration Register               Address offset: 0x18  */
    __IO uint32_t PFCTRL;           /* LCDC Layerx Pixel Format Configuration Register               Address offset: 0x1C  */
    __IO uint32_t CACTRL;           /* LCDC Layerx Constant Alpha Configuration Register             Address offset: 0x20  */
    __IO uint32_t DCCTRL;           /* LCDC Layerx Default Color Configuration Register              Address offset: 0x24  */
    __IO uint32_t BFCTRL;           /* LCDC Layerx Blending Factors Configuration Register           Address offset: 0x28  */
    __IO uint32_t FBBCTRL;          /* LCDC Layerx Frame Buffer Bus Control Register                 Address offset: 0x2C  */
    __IO uint32_t AFBCTRL;          /* LCDC Layerx Auxiliary Frame Buffer Control Register           Address offset: 0x30  */
    __IO uint32_t CFBADDR;          /* LCDC Layerx Color Frame Buffer Address Register               Address offset: 0x34  */
    __IO uint32_t CFBLEN;           /* LCDC Layerx Color Frame Buffer Length Register                Address offset: 0x38  */
    __IO uint32_t CFBLNUM;          /* LCDC Layerx Color Frame Buffer Line Number Register           Address offset: 0x3C  */
    __IO uint32_t AFBADDR0;         /* LCDC Layerx Auxiliary 0 Fram Buffer Address Register          Address offset: 0x40  */
    __IO uint32_t AFBADDR1;         /* LCDC Layerx Auxiliary 1 Fram Buffer Address Register          Address offset: 0x44  */
    __IO uint32_t AFBLEN;           /* LCDC Layerx Auxiliary Fram Buffer Length(pitch) Register      Address offset: 0x48  */
    __IO uint32_t AFBLNUM;          /* LCDC Layerx Auxiliary Fram Buffer Lines Register              Address offset: 0x4C  */
    __IO uint32_t CLUTWR;           /* LCDC Layerx CLUT Write Register                               Address offset: 0x50  */
    __IO uint32_t SINS;             /* LCDC Layerx Scaler Input Size Register                        Address offset: 0x54  */
    __IO uint32_t SOUTS;            /* LCDC Layerx Scaler Output Size Register                       Address offset: 0x58  */
    __IO uint32_t VSF;              /* LCDC Layerx Vertical Scaling Factor Register                  Address offset: 0x5C  */
    __IO uint32_t VSP;              /* LCDC Layerx Vertical Scaling Phase Register                   Address offset: 0x60  */
    __IO uint32_t HSF;              /* LCDC Layerx Horizontal Scaling Factor Register                Address offset: 0x64  */
    __IO uint32_t HSP;              /* LCDC Layerx Horizontal Scaling Phase Register                 Address offset: 0x68  */
    __IO uint32_t YUVS1;            /* LCDC Layerx YCbCr Scale 1 Register                            Address offset: 0x6c  */
    __IO uint32_t YUVS2;            /* LCDC Layerx YCbCr Scale 2 Register                            Address offset: 0x70  */
    __IO uint32_t FCF1;             /* LCDC Layerx Flexible color format 1 Register                  Address offset: 0x74  */
    __IO uint32_t FCF2;             /* LCDC Layerx Flexible color format 2 Register                  Address offset: 0x78  */
} LCDC_Layer_Module;

/* JPEG Module */

typedef struct
{
    __IO uint32_t CTRL;       //0x0
}JPEG_CTRL_Module;

typedef struct
{
    __IO uint32_t INIT;       //0x0
    __IO uint32_t EN;         //0x4
    __IO uint32_t BUFBADDR;   //0x8
    __IO uint32_t BUFSIZE;    //0xc
    uint32_t      RESERVED1[13]; //0x10
    __IO uint32_t USMODE;     //0x44
}JPEG_BRC_Module;

typedef struct
{
    __IO uint32_t INIT;       //0x0
    __IO uint32_t EN;         //0x4
    __IO uint32_t SWITCH;     //0x8
    __IO uint32_t FRMW;       //0xc
    __IO uint32_t FRMH;       //0x10
    uint32_t      RESERVED0;  //0x14
    __IO uint32_t PFORM;      //0x18
    __IO uint32_t CNAME;      //0x1c
    __IO uint32_t C0SADD;     //0x20
    __IO uint32_t C0EADD;     //0x24
    uint32_t      RESERVED1[14]; //0x28
    __IO uint32_t BPS0;       //0x60
    __IO uint32_t BPS12;      //0x64
    __IO uint32_t ROWS0;      //0x68
    __IO uint32_t ROWS12;     //0x6c
    __IO uint32_t HHALF;      //0x70
    __IO uint32_t BLSS0;      //0x74
    __IO uint32_t BLSS12;     //0x78
    __IO uint32_t BPRS0;      //0x7c
    __IO uint32_t BPRS12;     //0x80
    __IO uint32_t MAXW;       //0x84
    __IO uint32_t MAXH;       //0x88
    __IO uint32_t MBSIZE;     //0x8c
}JPEG_RBC_Module;

typedef struct
{
    __IO uint32_t CTRL;       //0x0
    __IO uint32_t STS;        //0x4
    __IO uint32_t IE;         //0x8
    __IO uint32_t INTSTS;     //0xc
    __IO uint32_t AOODT;      //0x10
    __IO uint32_t MBSIZE;     //0x14
    __IO uint32_t SGLPL;      //0x18
    __IO uint32_t SGLPM;      //0x1c
    __IO uint32_t SGL_SIZE;   //0x20
    __IO uint32_t SGL_HEAD;   //0x24
    __IO uint32_t SGL_TAIL;   //0x28
    __IO uint32_t MRADDL;     //0x2c
    __IO uint32_t MRADDM;     //0x30
    __IO uint32_t MWADDL;     //0x34
    __IO uint32_t MWADDM;     //0x38
    __IO uint32_t DESCF;      //0x3c
    __IO uint32_t DESC_MBSIZE;    //0x40
    __IO uint32_t DESC_MUS;       //0x44
    __IO uint32_t DESC_MBADDL;    //0x48
    __IO uint32_t DESC_MBADDH;    //0x4c
    uint32_t      RESERVED0;      //0x50
    __IO uint32_t DESC_LINKL;     //0x54
    __IO uint32_t DESC_LINKH;     //0x58
    __IO uint32_t PARACFG;        //0x5c
    __IO uint32_t FIFODP;         //0x60
}JPEG_SGDMA_Module;

typedef struct
{
    __IO uint32_t MODE;           //0x0
    __IO uint32_t ERROR;          //0x4
    __IO uint32_t UNLOC;          //0x8
    __IO uint32_t UELOC;          //0xc
    __IO uint32_t HESYM;          //0x10
    __IO uint32_t HESYMECS;       //0x14
    __IO uint32_t HUF_SELOC;      //0x18
    __IO uint32_t TAB_ACCREQ;     //0x1c
    __IO uint32_t HUFTAB0_EOB;    //0x20
    __IO uint32_t HUFTAB1_EOB;    //0x24
    __IO uint32_t HUFTAB2_EOB;    //0x28
    __IO uint32_t HUFTAB3_EOB;    //0x2c
    uint32_t      RESERVED0[20];  //0x30
    __IO uint32_t HUF_ADDR;       //0x80
    __IO uint32_t HUF_DATA;       //0x84
    __IO uint32_t HUF_REM;        //0x88
    uint32_t      RESERVED1[221]; //0x8C
    __IO uint32_t QT0[64];        //0x400
    __IO uint32_t QT1[64];        //0x500
    __IO uint32_t QT2[64];        //0x600
    __IO uint32_t QT3[64];        //0x700
}JPEG_DEC_Module;


/*** Huffman tables ***/
typedef struct
{
    __IO uint32_t DCOL[16];
    __IO uint32_t ACOL[240];
    __IO uint32_t DCCODE[16];
    __IO uint32_t ACCODE[16];
    __IO uint32_t EOBS;
    __IO uint32_t ZRLS;
    __IO uint32_t RESERVED[222];
} Huffmantables_Type;

/* JPEG Encoder */
typedef struct
{
    Huffmantables_Type HT0;       //0x00
    Huffmantables_Type HT1;       //0x800
    Huffmantables_Type HT2;       //0x1000
    Huffmantables_Type HT3;       //0x1800
    __IO uint32_t QT0[64];        //0x2000
    __IO uint32_t QT1[64];        //0x2100
    __IO uint32_t QT2[64];        //0x2200
    __IO uint32_t QT3[64];        //0x2300
    uint32_t      RESERVED1[1792];//0x2400
    __IO uint32_t HFBUFFER[512];  //0x4000
    __IO uint32_t HEADD;          //0x4800
    __IO uint32_t RESERVED2[4];   //0x4804
    __IO uint32_t HUFTAB0E;       //0x4814
    __IO uint32_t HUFTAB1E;       //0x4818
    __IO uint32_t HUFTAB2E;       //0x481c
    __IO uint32_t HUFTAB3E;       //0x4820
    __IO uint32_t FEADD;          //0x4824
    __IO uint32_t RESERVED3[502]; //0x4828
    __IO uint32_t CTRL;           //0x5000
    __IO uint32_t DYNRCFG;        //0x5004
    __IO uint32_t RESERVED4[13];  //0x5008
    __IO uint32_t HSEL;           //0x503c
    __IO uint32_t RESERVED5[48];  //0x5040
    __IO uint32_t PIPESTS;        //0x5100
    __IO uint32_t RESERVED6[959]; //0x5104
    __IO uint32_t RICTRL;         //0x6000
    __IO uint32_t RESERVED7[4096];//0x6004
    __IO uint32_t HFSIZE;         //0xa004
    __IO uint32_t IPNUM;          //0xa008
    __IO uint32_t RESERVED8[3];   //0xa00c
    __IO uint32_t PBSIZE;         //0xa018
    __IO uint32_t RESERVED9[2];   //0xa01c
    __IO uint32_t OBSIZE;         //0xa024
}JPEG_ENC_Module;

/*** COMP_Single ***/
typedef struct
{
    __IO uint32_t CTRL;
    __IO uint32_t FILC;
    __IO uint32_t FILP;
    __IO uint32_t RES;
} COMP_SingleType;

/*** Comparator ***/
typedef struct
{
    __IO uint32_t RES[4]; 
    COMP_SingleType Cmp[4]; //0x10
    __IO uint32_t LPR;      //0x50
    __IO uint32_t WINMODE;  //0x54
    __IO uint32_t RES1;     //0x58
    __IO uint32_t LOCK;     //0x5C
    __IO uint32_t INTEN;    //0x60
    __IO uint32_t INTSTS;   //0x64
    __IO uint32_t OTIMEN;   //0x68
}COMP_Module;


/*** Digital to Analog Converter ***/
typedef struct
{
    __IO uint32_t CTRL;     //0x00
    __IO uint32_t SOTTR;    //0x04
    __IO uint32_t DATO1;    //0x08
    __IO uint32_t DATO2;    //0x0C
    __IO uint32_t DR8CH1;   //0x10
    __IO uint32_t DL12CH1;  //0x14
    __IO uint32_t DR12CH1;  //0x18
    __IO uint32_t DR8CH2;   //0x1C
    __IO uint32_t DL12CH2;  //0x20
    __IO uint32_t DR12CH2;  //0x24
    __IO uint32_t DR8DCH;   //0x28
    __IO uint32_t DL12DCH;  //0x2C
    __IO uint32_t DR12DCH;  //0x30
    __IO uint32_t RES0;     //0x34
    __IO uint32_t SELCTRL;  //0x38
    __IO uint32_t STS;      //0x3C
    __IO uint32_t GCTRL;    //0x40
    __IO uint32_t STINC;    //0x44
    __IO uint32_t STRST;    //0x48
    __IO uint32_t RES1[4];  
    __IO uint32_t CALC;     //0x5C
} DAC_Module;


/*** CRC ***/
typedef struct
{
    __IO uint32_t   DAT;        //0x00
    __IO uint32_t   IDAT;       //0x04
    __IO uint32_t   CTRL;       //0x08
    __IO uint32_t   LRC;        //0x0C
    __IO uint32_t   INIT;       //0x10
    __IO uint32_t   POL;        //0x14
    __IO uint32_t   INXORDAT;   //0x18
    __IO uint32_t   OUTXORDAT;  //0x1C
} CRC_Module;

/**
  * @brief TCM Configuration
  */
typedef struct
{
    __IO uint32_t  TCM_CR;                  /*!< (offset 0x000) TCM configuration Register              */
} TCMSRAMC_TypeDef;



/*** DMA Controller on AHB Bus (DMA1,DMA2,DMA3) ***/
typedef struct
{
    __IO uint32_t  SA;           /* (offset 0x0000) Source Address Register */
    __I  uint32_t  RESERVED0;
    __IO uint32_t  DA;           /* (offset 0x0008) Destination Address Register */
    __I  uint32_t  RESERVED1;
    __IO uint32_t  LLP;          /* (offset 0x0010) Linked List Pointer Register */
    __I  uint32_t  RESERVED2;
    __IO uint64_t  CTRL;         /* (offset 0x0018) Control Register Low */
    __I  uint32_t  RESERVED3[8];
    __IO uint64_t  CFG;          /* (offset 0x0040) Configuration Register Low */
    __IO uint32_t  SG;           /* (offset 0x0048) Source Gather Register */
    __I  uint32_t  RESERVED4;
    __IO uint32_t  DS;           /* (offset 0x0050) Destination Scatter Register */
    __I  uint32_t  RESERVED5;
} DMA_ChannelType;

typedef struct
{
    /** DMA Channel Registers **/
    __IO DMA_ChannelType CH[8];    /* (offset 0x0000 + x * 0x58 ) Channel x from 0 to 7 */

    /** DMA Interrupt Registers **/
    __IO uint32_t  RAWTCINTSTS;    /* (offset 0x02C0) Raw IntTfr Status */
    __I  uint32_t  RESERVED0;
    __IO uint32_t  RAWBTCINTSTS;   /* (offset 0x02C8) Raw IntBlock Status */
    __I  uint32_t  RESERVED1;
    __IO uint32_t  RAWSTCINTSTS;   /* (offset 0x02D0) Raw IntSrcTran Status */
    __I  uint32_t  RESERVED2;
    __IO uint32_t  RAWDTCINTSTS;   /* (offset 0x02D8) Raw IntDstTran Status */
    __I  uint32_t  RESERVED3;
    __IO uint32_t  RAWERRINTSTS;   /* (offset 0x02E0) Raw IntErr Status */
    __I  uint32_t  RESERVED4;
    __I  uint32_t  TCINTSTS;       /* (offset 0x02E8) IntTfr Status */
    __I  uint32_t  RESERVED5;
    __I  uint32_t  BTCINTSTS;      /* (offset 0x02F0) IntBlock Status */
    __I  uint32_t  RESERVED6;
    __I  uint32_t  STCINTSTS;      /* (offset 0x02F8) IntSrcTran Status */
    __I  uint32_t  RESERVED7;
    __I  uint32_t  DTCINTSTS;      /* (offset 0x0300) IntDstTran Status */
    __I  uint32_t  RESERVED8;
    __I  uint32_t  ERRINTSTS;      /* (offset 0x0308) IntErr Status */
    __I  uint32_t  RESERVED9;
    __IO uint32_t  TCINTMSK;       /* (offset 0x0310) Mask for Raw IntTfr Status */
    __I  uint32_t  RESERVED10;
    __IO uint32_t  BTCINTMSK;      /* (offset 0x0318) Mask for Raw IntBlock Status */
    __I  uint32_t  RESERVED11;
    __IO uint32_t  STCINTMSK;      /* (offset 0x0320) Mask for Raw IntSrcTran Status */
    __I  uint32_t  RESERVED12;
    __IO uint32_t  DTCINTMSK;      /* (offset 0x0328) Mask for Raw IntDstTran Status */
    __I  uint32_t  RESERVED13;
    __IO uint32_t  ERRINTMSK;      /* (offset 0x0330) Mask for Raw IntErr Status */
    __I  uint32_t  RESERVED14;
    __O  uint32_t  TCINTCLR;       /* (offset 0x0338) Clear IntTfr Interrupt */
    __I  uint32_t  RESERVED15;
    __O  uint32_t  BTCINTCLR;      /* (offset 0x0340) Clear IntBlock Interrupt */
    __I  uint32_t  RESERVED16;
    __O  uint32_t  STCINTCLR;      /* (offset 0x0348) Clear IntSrcTran Interrupt */
    __I  uint32_t  RESERVED17;
    __O  uint32_t  DTCINTCLR;      /* (offset 0x0350) Clear IntDstTran Interrupt */
    __I  uint32_t  RESERVED18;
    __O  uint32_t  ERRINTCLR;      /* (offset 0x0358) Clear IntErr Interrupt */
    __I  uint32_t  RESERVED19;
    __I  uint32_t  INTCBESTS;      /* (offset 0x0360) Combined Interrupt Status Register */

    /** DMA Software Handshake Registers **/
    __I  uint32_t  RESERVED20;
    __IO uint32_t  SRCSWTREQ;      /* (offset 0x0368) Source Software Transaction Request Register */
    __I  uint32_t  RESERVED21;
    __IO uint32_t  DSTSWTREQ;      /* (offset 0x0370) Destination Software Transaction Request Register */
    __I  uint32_t  RESERVED22;
    __IO uint32_t  SRCSGTREQ;      /* (offset 0x0378) Single Source Transaction Request Register */
    __I  uint32_t  RESERVED23;
    __IO uint32_t  DSTSGTREQ;      /* (offset 0x0380) Single Destination Transaction Request Register */
    __I  uint32_t  RESERVED24;
    __IO uint32_t  SRCLTREQ;       /* (offset 0x0388) Last Source Transaction Request Register */
    __I  uint32_t  RESERVED25;
    __IO uint32_t  DSTLTREQ;       /* (offset 0x0390) Last Destination Transaction Request Register */

    /** DMA Miscellaneous Registers **/
    __I  uint32_t  RESERVED26;
    __IO uint32_t  CFG;            /* (offset 0x0398) DMA Configuration Register */
    __I  uint32_t  RESERVED27;
    __IO uint32_t  CHEN;           /* (offset 0x03A0) DMA Channel Enable Register */
    __I  uint32_t  RESERVED28;
    __I  uint32_t  ID;             /* (offset 0x03A8) DMA ID Register */
    __I  uint32_t  RESERVED29[19];
    __I  uint32_t  TYPE;           /* (offset 0x03F8) DMA Component Type */
    __I  uint32_t  VERSION;        /* (offset 0x03FC) DMA Component Version */
} DMA_Module;


/*** DMA AXI Bus Controller (MDMA) ***/
typedef struct
{
    __IO uint64_t  SA;             /* (offset 0x0100) Source Address */
    __IO uint64_t  DA;             /* (offset 0x0108) Destination Address */
    __IO uint32_t  BTS;            /* (offset 0x0110) Block Transfer Size */
    __I  uint32_t  RESERVED0;
    __IO uint64_t  CTRL;           /* (offset 0x0118) Control */
    __IO uint64_t  CFG;            /* (offset 0x0120) Configuration */
    __IO uint64_t  LLP;            /* (offset 0x0128) Linked List Pointer */
    __I  uint64_t  STS;            /* (offset 0x0130) Status */
    __IO uint32_t  SHSRC;          /* (offset 0x0138) Software Handshake Source */
    __I  uint32_t  RESERVED1;
    __IO uint32_t  SHDST;          /* (offset 0x0140) Software Handshake Destination */
    __I  uint32_t  RESERVED2;
    __O  uint32_t  BTRR;           /* (offset 0x0148)  Block Transfer Resume Request */
    __I  uint32_t  RESERVED3[3];
    __I  uint32_t  AXIQOS;         /* (offset 0x0158) AXI QOS */
    __I  uint32_t  RESERVED4[9];
    __IO uint32_t  INTSTSEN;       /* (offset 0x0180) Interrupt Status Enable */
    __I  uint32_t  RESERVED5;
    __I  uint32_t  INTSTS;         /* (offset 0x0188) Interrupt Status */
    __I  uint32_t  RESERVED6;
    __IO uint32_t  INTSGLEN;       /* (offset 0x0190) Interrupt Signal Enable */
    __I  uint32_t  RESERVED7;
    __O  uint32_t  INTCLR;         /* (offset 0x0198) Interrupt Clear */
    __I  uint32_t  RESERVED8[25];
} MDMA_ChannelType;

typedef struct
{
    /** MDMA Common Registers **/
    __I  uint32_t  ID;             /* (offset 0x0000) DMAC ID */
    __I  uint32_t  RESERVED0;
    __I  uint32_t  VERSION;        /* (offset 0x0008) DMAC Component Version */
    __I  uint32_t  RESERVED1;
    __IO uint32_t  CFG;            /* (offset 0x0010) DMAC Configuration */
    __I  uint32_t  RESERVED2;
    __IO uint32_t  CHEN;           /* (offset 0x0018) DMAC Channel Enable */
    __I  uint32_t  RESERVED3;
    __IO uint32_t  CHSUSP;         /* (offset 0x0020) DMAC Channel Suspend */
    __I  uint32_t  RESERVED4[3]; 
    __I  uint64_t  INTSTS;         /* (offset 0x0030) DMAC Interrupt Status */
    __O  uint32_t  CRINTCLR;       /* (offset 0x0038) DMAC Interrupt Clear */
    __I  uint32_t  RESERVED5;
    __IO uint32_t  CRINTSTSEN;     /* (offset 0x0040) DMAC Interrupt Status Enable */
    __I  uint32_t  RESERVED6;
    __IO uint32_t  CRINTSGLEN;     /* (offset 0x0048) DMAC Interrupt Signal Enable */
    __I  uint32_t  RESERVED7;
    __I  uint32_t  CRINTSTS;       /* (offset 0x0050) DMAC Interrupt Status */
    __I  uint32_t  RESERVED8;
    __IO uint32_t  SWRST;          /* (offset 0x0058) DMAC Software Reset Register */
    __I  uint32_t  RESERVED9;
    __IO uint64_t  LPCFG;          /* (offset 0x0060) DMAC Low Power Configuration Register */
    __I  uint32_t  RESERVED10[38];

    /** MDMA Channel Registers **/
    MDMA_ChannelType CH[16];       /* (offset 0x0100 + x * 0x100) Channel x from 0 to 15 */

} MDMA_Module;

/***  DMAMUX1 ***/
typedef struct
{
    __IO uint32_t  CHxCTRL[24]; /*  DMA Multiplexer Channel x Control Register */
    __IO uint32_t  STS;         /*  DMA Channel Status Register */
    __IO uint32_t  CLR;         /*  DMA Channel Clear Flag Register */
    __IO uint32_t  CHxCFG[24];  /*  DMA Request Generator x Control Register */
    __IO uint32_t  RGSTS;       /*  DMA Request Generator x Interrupt Status Register */
    __IO uint32_t  RGCLR;       /*  DMA Request Generator x Interrupt Clear Register */
}DMAMUX1_Module;

/***  DMAMUX2 ***/
typedef struct
{
    __IO uint32_t  CHxCTRL[15]; /*  DMA Multiplexer Channel x Control Register */
    __IO uint32_t  STS;         /*  DMA Channel Status Register */
    __IO uint32_t  CLR;         /*  DMA Channel Clear Flag Register */
    __IO uint32_t  CHxCFG[15];  /*  DMA Request Generator x Control Register */
    __IO uint32_t  RGSTS;       /*  DMA Request Generator x Interrupt Status Register */
    __IO uint32_t  RGCLR;       /*  DMA Request Generator x Interrupt Clear Register */
}DMAMUX2_Module;

typedef struct
{
  __IO uint32_t  CHCTRL;        /*!< DMA Multiplexer Channel x Control Register   */
}DMAMUX_Channel_TypeDef;

typedef struct
{
  __IO uint32_t  STS;      /*!< DMA Channel Status Register     */
  __IO uint32_t  CLR;      /*!< DMA Channel Clear Flag Register */
}DMAMUX_ChannelStatus_TypeDef;

typedef struct
{
  __IO uint32_t  CHCFG;        /*!< DMA Request Generator x Control Register   */
}DMAMUX_RequestGen_TypeDef;

typedef struct
{
  __IO uint32_t  RGSTS;        /*!< DMA Request Generator Status Register       */
  __IO uint32_t  RGCLR;       /*!< DMA Request Generator Clear Flag Register   */
}DMAMUX_RequestGenStatus_TypeDef;


/***  DCMU ***/
typedef struct
{
  __O  uint32_t TXMSG[4];   /*!< DCMU messaging transmit registers ,            Address offset: 00h-0Ch  */
  __I  uint32_t RCVMSG[4];  /*!< DCMU messaging receive registers ,             Address offset: 10h-1Ch  */
  __IO uint32_t STS;        /*!< DCMU messaging status register ,               Address offset: 20h      */
  __IO uint32_t CTRL;       /*!< DCMU messaging control register ,              Address offset: 24h      */

} DCMU_Module;

/***  SEMA4 ***/
typedef struct
{
    __IO uint32_t R[32];         /* 2-step write lock and read back registers,                Address offset: 00h-7Ch    */
    __IO uint32_t RL[32];        /* 1-step read lock registers,                               Address offset: 80h-FCh    */
    __IO uint32_t C1IEN;         /* SEMA4 Interrupt 0 enable register ,                       Address offset: 100h       */
    __IO uint32_t C1ICLR;        /* SEMA4 Interrupt 0 clear register ,                        Address offset: 104h       */
    __IO uint32_t C1ISTS;        /* SEMA4 Interrupt 0 Status register ,                       Address offset: 108h       */
    __IO uint32_t C1MISTS;       /* SEMA4 Interrupt 0 Masked Status register ,                Address offset: 10Ch       */
    __IO uint32_t C2IEN;         /* SEMA4 Interrupt 1 enable register ,                       Address offset: 110h       */
    __IO uint32_t C2ICLR;        /* SEMA4 Interrupt 1 clear register ,                        Address offset: 114h       */
    __IO uint32_t C2ISTS;        /* SEMA4 Interrupt 1 Status register ,                       Address offset: 118h       */
    __IO uint32_t C2MISTS;       /* SEMA4 Interrupt 1 Masked Status register ,                Address offset: 11Ch       */
    __IO uint32_t C1ILFSTS;      /* SEMA4 Interrupt 0 Interrupt Lock Fail Status register     Address offset: 0x120      */ 
    __IO uint32_t C2ILFSTS;      /* SEMA4 Interrupt 1 Interrupt Lock Fail Status register     Address offset: 0x124      */ 
    __IO uint32_t Res0[2];       /* Reserved                                                  Address offset: 128h-12Fh  */
    __IO uint32_t C1ILFEN;       /* SEMA4 Interrupt 0 Interrupt Lock Fail Enable register     Address offset: 0x130      */ 
    __IO uint32_t C2ILFEN;       /* SEMA4 Interrupt 1 Interrupt Lock Fail Enable register     Address offset: 0x134      */    
    __IO uint32_t Res1[2];       /* Reserved                                                  Address offset: 138h-13Fh  */
    __IO uint32_t CLR;           /* SEMA4 Semaphore clear register ,                          Address offset: 140h       */
    __IO uint32_t KEYCLR;        /* SEMA4 Semaphore clear key register ,                      Address offset: 144h       */
} SEMA4_Module;


    /**
      * @brief FLASH Registers
      */

    typedef struct
    {
        __IO uint32_t ACR;
        __IO uint32_t KEYR;
        __IO uint32_t OPTKEYR;
        __IO uint32_t SR;
        __IO uint32_t CR;
        __IO uint32_t AR;
        __IO uint32_t OBR2;
        __IO uint32_t OBR;
        __IO uint32_t WRPR;
        __IO uint32_t CR2;
        __IO uint32_t TIMR;
        __IO uint32_t RESERVED1;
        __IO uint32_t CAHR;
    } FLASH_TypeDef;

    /**
      * @brief Option Bytes Registers
      */

    typedef struct
    {
        __IO uint32_t USER_RDP;
        __IO uint32_t Data1_Data0;
        __IO uint32_t WRP1_WRP0;
        __IO uint32_t WRP3_WRP2;
        __IO uint32_t RDP2;
    } OB_TypeDef;

   


/**
 * @brief Digital to Analog Converter
 */

/**
 * @brief USB
 */

/** Flexible Extended Memory Controller SRAM/NOR Flash **/
typedef struct
{
    __IO uint32_t  FEMC_SNTSTS;
    __IO uint32_t  FEMC_SNOMSTS;
    uint32_t       RESERVED[6];
}FEMC_SN_Bank_Block;

/** Flexible Extended Memory Controller NAND **/
typedef struct
{
    __IO uint32_t  FEMC_NTSTS;
    __IO uint32_t  FEMC_NOMSTS;
    uint32_t       RESERVED[6];
}FEMC_NAND_Bank;


typedef struct 
{
    __IO uint32_t  FEMC_STS;        /* FEMC Status Register                     Address offset: 0x000 */
    __IO uint32_t  FEMC_STS1;       /* FEMC Status Register1                    Address offset: 0x004 */
    __IO uint32_t  FEMC_CFG;        /* FEMC Configuration Register              Address offset: 0x008 */
    __IO uint32_t  FEMC_CCFG;       /* FEMC Configuration clear Register        Address offset: 0x00C */
    __IO uint32_t  FEMC_CTRL;       /* FEMC Control Register1                   Address offset: 0x010 */
    __IO uint32_t  FEMC_TCFG;       /* FEMC Timing Configuration Register       Address offset: 0x014 */
    __IO uint32_t  FEMC_OMCFG;      /* FEMC Operate Mode Register               Address offset: 0x018 */
    uint32_t       RESERVED1C;
    __IO uint32_t  FEMC_RPE;        /* FEMC Refresh Period Register             Address offset: 0x020 */
    uint32_t       RESERVED24[55];  /* 0x24 ~ 0xFC */
    FEMC_SN_Bank_Block  block1;     /* 0x100 ~ 0x11C */
    FEMC_SN_Bank_Block  block2;     /* 0x120 ~ 0x13C */
    FEMC_SN_Bank_Block  block3;     /* 0x140 ~ 0x15C */
    FEMC_SN_Bank_Block  block4;     /* 0x160 ~ 0x17C */
    FEMC_NAND_Bank      bank1;      /* 0x180 ~ 0x18C */
    FEMC_NAND_Bank      bank2;      /* 0x1A0 ~ 0x1BC */
    uint32_t       RESERVED1B0[16]; /* 0x1C0 ~ 0x1FC */
    uint32_t       RESERVED125[128];/* 0x200 ~ 0x3FC */
    __IO uint32_t  FEMC_ECCSTS;     /* FEMC ECC Status Register                 Address offset: 0x400 */
    __IO uint32_t  FEMC_ECCCFG;     /* FEMC ECC Configure Register              Address offset: 0x404 */
    __IO uint32_t  FEMC_ECCMD0;     /* FEMC ECC Command0 Register               Address offset: 0x408 */
    __IO uint32_t  FEMC_ECCMD1;     /* FEMC ECC Command1 Register               Address offset: 0x40C */
    __IO uint32_t  FEMC_ECCADDR0;   /* FEMC ECC Address0 Register               Address offset: 0x410 */
    __IO uint32_t  FEMC_ECCADDR1;   /* FEMC ECC Address1 Register               Address offset: 0x414 */
    __IO uint32_t  FEMC_ECCBLK[4];   /* FEMC ECC Block0 Register                Address offset: 0x418 */
    __IO uint32_t  FEMC_ECCEBLK;    /* FEMC ECC Extra Block Register            Address offset: 0x428 */
    uint32_t       RESERVED42C[53]; /* 0x42C ~ 0x4FC */
    __IO uint32_t  FEMC_SNADD1;     /* FEMC SRAM/NOR Set Address1 Register      Address offset: 0x500 */
    __IO uint32_t  FEMC_SNADD2;     /* FEMC SRAM/NOR Set Address2 Register      Address offset: 0x504 */
    __IO uint32_t  FEMC_SNADD3;     /* FEMC SRAM/NOR Set Address3 Register      Address offset: 0x508 */
    __IO uint32_t  FEMC_SNADD4;     /* FEMC SRAM/NOR Set Address4 Register      Address offset: 0x50C */
    __IO uint32_t  FEMC_NADD1;      /* FEMC NAND Set Address1 Register          Address offset: 0x510 */
    __IO uint32_t  FEMC_NADD2;      /* FEMC NAND Set Address2 Register          Address offset: 0x514 */
    uint32_t       RESERVED518[2];  /* 0x518 ~ 0x51C */
    __IO uint32_t  FEMC_SNMOD;     /* FEMC SRAM/NOR Mode Register               Address offset: 0x520 */
    __IO uint32_t  FEMC_NMOD;      /* FEMC NAND Mode Register                   Address offset: 0x524 */
    __IO uint32_t  FEMC_REMAP;      /* FEMC Remap Register                      Address offset: 0x528 */
} FEMC_Module;


/*** USB High Speed Global Register ***/

typedef struct
{
    __IO uint32_t GCTRLSTS;                 /* USBHS global Control and Status Register     Address offset: 0x000 */
    uint32_t Reserved04;                    /* Reserved04                                   Address offset: 0x004 */
    __IO uint32_t GAHBCFG;                  /* Core AHB Configuration Register              Address offset: 0x008 */
    __IO uint32_t GCFG;                     /* Core USB Configuration Register              Address offset: 0x00C */
    __IO uint32_t GRSTCTRL;                 /* Core Reset Register                          Address offset: 0x010 */
    __IO uint32_t GINTSTS;                  /* Core Interrupt Register                      Address offset: 0x014 */
    __IO uint32_t GINTEN;                   /* Core Interrupt Mask Register                 Address offset: 0x018 */
    __IO uint32_t GRXSTS;                   /* Receive Sts Q Read Register                  Address offset: 0x01C */
    __IO uint32_t GRXSTSP;                  /* Receive Sts Q Read & POP Register            Address offset: 0x020 */
    __IO uint32_t GRXFSIZ;                  /* Receive FIFO Size Register                   Address offset: 0x024 */
    __IO uint32_t GNPTXFSIZ_DINEP0TXFSIZ;   /* Non Periodic/EP0 Tx FIFO Size/ Register      Address offset: 0x028 */
    __IO uint32_t GNPTXFSTS;                /* Non Periodic Tx FIFO/Queue Sts reg           Address offset: 0x02C */
    uint32_t Reserved30[3];                 /* Reserved                                     Address offset: 0x030 */
    __IO uint32_t CID;                      /* User ID Register                             Address offset: 0x03C */
    __IO uint32_t Reserved40[6];            /* Reserved40                                   Address offset: 0x040 */
    __IO uint32_t GPD;                      /* Power Down Register                          Address offset: 0x058 */
    __IO uint32_t GDFCFG;                   /* DFIFO Software Config Register               Address offset: 0x05C */
    uint32_t  Reserved58[40];               /* Reserved                                     Address offset: 0x60-0xFC */
    __IO uint32_t HPTXFSIZ;                 /* Host Periodic Tx FIFO Size Reg               Address offset: 0x100 */
    __IO uint32_t DINEPPTXFSIZ[16];         /* Device IN EP Periodic Transmit FIFO */
} USB_Global_Registers;

/*** USBHS Host Mode Register ***/
typedef struct 
{
    __IO uint32_t HCFG;                     /* Host Configuration Register                  Address offset: 0x400 */
    __IO uint32_t HFRI;                     /* Host Frame Interval Register                 Address offset: 0x404 */
    __IO uint32_t HFNUM;                    /* Host Frame number and Frame Remaining        Address offset: 0x408 */
    uint32_t Reserved0C;                    /* Reserved                                     Address offset: 0x40C */
    __IO uint32_t HPTXFQSTS;                /* Host Periodic Tx FIFO/Queue Status register  Address offset: 0x410 */
    __IO uint32_t HACHINT;                  /* Host All Channels Interrupt Register         Address offset: 0x414 */
    __IO uint32_t HACHINTEN;                /* Host All Channels Interrupt Enable           Address offset: 0x418 */
    uint32_t Reserved1C[0x0A];              /* Reserved                                     Address offset: 0x41C */
} USB_Host_Registers;

/*** USBHS Host Channel Register ***/

typedef struct
{
    __IO uint32_t HCHCTRL;                    /* Host Channel Control Register             Address offset: 0x500 */
    __IO uint32_t HCSCTRL;                    /* Host Channel Split Control Register       Address offset: 0x504 */
    __IO uint32_t HCHINTSTS;                  /* Host Channel Interrupt Register           Address offset: 0x508 */
    __IO uint32_t HCHINTEN;                   /* Host Channel Interrupt Enable Register    Address offset: 0x50C */
    __IO uint32_t HCHTXSIZ;                   /* Host Channel Transfer Size Register       Address offset: 0x510 */
    __IO uint32_t HCHDMADD;                   /* Host Channel DMA Address Register         Address offset: 0x514 */
    uint32_t Reserved[2];                     /* Reserved  */
} USB_HostCH_Registers;


/*** USBHS Device Register ***/

typedef struct 
{
    __IO uint32_t DCFG;                       /* dev Configuration Register                Address offset: 0x800 */
    __IO uint32_t DCTRL;                      /* dev Control Register                      Address offset: 0x804 */
    __IO uint32_t DSTS;                       /* dev Status Register                       Address offset: 0x808 */
    uint32_t Reserved0C;                      /* Reserved                                  Address offset: 0x80C */
    __IO uint32_t DINEPINTEN;                 /* dev IN Endpoint Interrupt Enable          Address offset: 0x810 */
    __IO uint32_t DOUTEPINTEN;                /* dev OUT Endpoint Interrupt Enable         Address offset: 0x814 */
    __IO uint32_t DAEPINTSTS;                 /* dev All Endpoints Interrupt Status        Address offset: 0x818 */
    __IO uint32_t DAEPINTEN;                  /* dev All Endpoints Interrupt Enable        Address offset: 0x81C */
    uint32_t  Reserved20[4];                  /* Reserved                                  Address offset: 0x820-0x82C*/
    __IO uint32_t DTHRCTRL;                   /* dev threshold Contrl register             Address offset: 0x830 */
    __IO uint32_t DINEPFEINTEN;               /* dev IN EP fifo empty interrupt enable     Address offset: 0x834 */
    __IO uint32_t DEEPINTSTS;                 /* Each EP interrupt Status register         Address offset: 0x838 */
    __IO uint32_t DEEPINTEN;                  /* Each EP interrupt enable                  Address offset: 0x83C */  
    __IO uint32_t DINEPXINTEN[9];             /* dedicated EP mask                         Address offset: 0x840-0x860 */
    uint32_t  Reserved64[7];                  /* Reserved                                  Address offset: 0x864-0x87C */
    __IO uint32_t DOUTEPXINTEN[9];            /* dedicated EP msk                          Address offset: 0x880-0x8A0 */   
} USB_Device_Registers;

/*** USBHS IN Endpoint Register ***/

typedef struct 
{
    __IO uint32_t DINEPCTRL;                    /* dev IN Endpoint Control Register       Address offset: 0x900 + (ep_num * 0x20) + 0x00 */
    uint32_t Reserved04;                        /* Reserved                               Address offset: 0x900 + (ep_num * 0x20) + 0x04 */
    __IO uint32_t DINEPINTSTS;                  /* dev IN Endpoint Interrupt Stauts       Address offset: 0x900 + (ep_num * 0x20) + 0x08 */
    uint32_t Reserved0C;                        /* Reserved                               Address offset: 0x900 + (ep_num * 0x20) + 0x0C */
    __IO uint32_t DINEPTXSIZ;                   /* dev IN Endpoint Txfer Size             Address offset: 0x900 + (ep_num * 0x20) + 0x10 */
    __IO uint32_t DINEPDMADD;                   /* dev IN Endpoint DMA Address            Address offset: 0x900 + (ep_num * 0x20) + 0x14 */
    __IO uint32_t DINEPTXFSTS;                  /* dev IN Endpoint Tx FIFO Status         Address offset: 0x900 + (ep_num * 0x20) + 0x18 */
    uint32_t Reserved1C;                        /* Reserved                               Address offset: 0x900 + (ep_num * 0x20) + 0x1C */
} USB_INEP_Registers;


/*** USBHS OUT Endpoint Register ***/

typedef struct 
{  
    __IO uint32_t DOUTEPCTRL;                   /* dev OUT Endpoint Control Register      Address offset: 0xB00 + (ep_num * 0x20) + 00 */
    uint32_t Reserved0;                         /* Reserved                               Address offset: 0xB00 + (ep_num * 0x20) + 04 */
    __IO uint32_t DOUTEPINTSTS;                 /* dev OUT Endpoint Interrupt Stauts      Address offset: 0xB00 + (ep_num * 0x20) + 08 */
    uint32_t Reserved1;                         /* Reserved                               Address offset: 0xB00 + (ep_num * 0x20) + 0C */
    __IO uint32_t DOUTEPTXSIZ;                  /* dev OUT Endpoint Txfer Size            Address offset: 0xB00 + (ep_num * 0x20) + 10 */
    __IO uint32_t DOUTEPDMADD;                  /* dev OUT Endpoint DMA Address           Address offset: 0xB00 + (ep_num * 0x20) + 14 */
    uint32_t Reserved18[2];                     /* Reserved */
} USB_OUTEP_Registers;

/*** USBHS PWR Control Register ***/

typedef struct 
{
    __IO uint32_t PWRCTRL;                     /* USBHS Power Control Register          Address offset: 0xE00 */
    __IO uint32_t PWRCTRL1;                    /* USBHS Power Control1 Register         Address offset: 0xE04 */
} USB_PWR_Registers;

/*** USBHS Wrapper Register ***/

typedef struct 
{
    __IO uint32_t WRPCTRL;                    /* USBHS Wrapper Control Register            Address offset: 0x000 */
    __IO uint32_t WRPCFG;                     /* USBHS Wrapper Configuration Register      Address offset: 0x004 */
} USB_Wrapper_Registers;

/*** DSI Wrapper Register ***/
typedef struct
{
    __IO uint32_t DSI_WRPCTRL;                /* DSI Wrapper Control Register            Address offset: 0x000 */
    __IO uint32_t DSI_WRPSTS;                 /* DSI Wrapper Status Register             Address offset: 0x004 */
    __IO uint32_t DSIPHY_CTRL1;               /* DSI PHY Control Register1               Address offset: 0x008 */
    __IO uint32_t DSIPHY_CTRL2;               /* DSI PHY Control Register2               Address offset: 0x00C */
    __IO uint32_t DSIPHY_CTRL3;               /* DSI PHY Control Register3               Address offset: 0x010 */
    __IO uint32_t DSIPHY_CTRL4;               /* DSI PHY Control Register4               Address offset: 0x014 */
    uint32_t Reserved0[19];                   /* Reserved                                Address offset: 0x018~0x060 */
    __IO uint32_t DSIPHY_PLLCTRL1;            /* DSI PHY PLL Control Register1           Address offset: 0x064 */
    __IO uint32_t DSIPHY_PLLCTRL2;            /* DSI PHY PLL Control Register2           Address offset: 0x068 */
    __IO uint32_t DSIPHY_PLLCTRL3;            /* DSI PHY PLL Control Register3           Address offset: 0x06C */
    __IO uint32_t DSIPHY_PLLCTRL4;            /* DSI PHY PLL Control Register4           Address offset: 0x070 */
    __IO uint32_t DSIPHY_PLLCTRL5;            /* DSI PHY PLL Control Register5           Address offset: 0x074 */
    __IO uint32_t DSIPHY_PLLSTS;              /* DSI PHY PLL Status Register5            Address offset: 0x078 */
}DSI_Wrapper_Module;

/*** DSI Register ***/
typedef struct
{
    __IO uint32_t DSI_NUMLANES;                 /* DSI Set number of active lanes Register        Address offset: 0x000 */
    __IO uint32_t DSI_CONTHSCLK;                /* DSI Set Host Continuous MIPI clock mode        Address offset: 0x004 */
    __IO uint32_t DSI_TPRE;                     /* DSI Set wait clock after enabling clock lane   Address offset: 0x008 */
    __IO uint32_t DSI_TPOST;                    /* DSI Set Wait clock before enter LP mode after data lane in Stop State    Address offset: 0x00C */
    __IO uint32_t DSI_TXGAP;                    /* DSI Set Wait clock after clock lane in LP mode before enabling clock     Address offset: 0x010 */
    __IO uint32_t DSI_AUTOINSERT_EOTP;          /* DSI enable automatically insert an EoTp short packet                     Address offset: 0x014 */
    __IO uint32_t DSI_DISRXCRCCHK;              /* DSI disable check payload CRC from longs packets                         Address offset: 0x018 */
    __IO uint32_t DSI_HSTXTOCNT;                /* DSI Set HS TX timeout count              Address offset: 0x01C */
    __IO uint32_t DSI_LRXTOCNT;                 /* DSI Set low power RX timeout count       Address offset: 0x020 */    
    __IO uint32_t DSI_BTATOCNT;                 /* DSI set host bus turn around timeout     Address offset: 0x024 */
    __IO uint32_t DSI_TWAKEUP;                  /* DSI set DPHY Twakeup timing              Address offset: 0x028 */
    __IO uint32_t DSI_DISBST;                   /* DSI Disable host bursting                Address offset: 0x02C */
    uint32_t Reserved0[3];                      /* Reserved                 Address offset: 0x030~0x038 */
    __IO uint32_t DSI_STS;                      /* DSI Status Register                      Address offset: 0x03C */
    __IO uint32_t DSI_ERRSTS;                   /* DSI Error Status Register                Address offset: 0x040 */
    uint32_t Reserved1[7];                      /* Reserved                 Address offset: 0x044~0x05C */
    __IO uint32_t DSI_CLKLANEN;                 /* DSI enable clock lane    Address offset: 0x060 */
    __IO uint32_t DSI_DATLANEN;                 /* DSI enable data lane     Address offset: 0x064 */
    uint32_t Reserved2[22];                     /* DSI Register5            Address offset: 0x068~0x0BC */
    __IO uint32_t DSI_SKEWCALTIMI;              /* DSI Register5            Address offset: 0x0C0 */
    __IO uint32_t DSI_SKEWCALTIMP;              /* DSI Register5            Address offset: 0x0C4 */
    __IO uint32_t DSI_ALTCALTIM;                /* DSI Register5            Address offset: 0x0C8 */
    __IO uint32_t DSI_SKEWCALINE;               /* DSI Register5            Address offset: 0x0CC */
    uint32_t Reserved3[76];                     /* DSI Register5            Address offset: 0x0D0~0x1FC */
    __IO uint32_t VID_EN;                       /* DSI Register5            Address offset: 0x200 */
    __IO uint32_t VID_PIXPERPKT;                /* DSI Register5            Address offset: 0x204 */
    __IO uint32_t VID_PIXPLDSIZ;                /* DSI Register5            Address offset: 0x208 */
    __IO uint32_t VID_PIXALIGN;                 /* DSI Register5            Address offset: 0x20C */
    __IO uint32_t VID_PIXFMT;                   /* DSI Register5            Address offset: 0x210 */
    __IO uint32_t VID_VSYNCPOL;                 /* DSI Register5            Address offset: 0x214 */
    __IO uint32_t VID_HSYNCPOL;                 /* DSI Register5            Address offset: 0x218 */
    __IO uint32_t VID_VIDEOMOD;                 /* DSI Register5            Address offset: 0x21C */
    __IO uint32_t VID_OVERIDE;                  /* DSI Register5            Address offset: 0x220 */
    __IO uint32_t VID_STD;                      /* DSI Register5            Address offset: 0x224 */
    __IO uint32_t VID_HFP;                      /* DSI Register5            Address offset: 0x228 */
    __IO uint32_t VID_HBP;                      /* DSI Register5            Address offset: 0x22C */
    __IO uint32_t VID_HSA;                      /* DSI Register5            Address offset: 0x230 */
    __IO uint32_t VID_PKTPERLINE;               /* DSI Register5            Address offset: 0x234 */
    __IO uint32_t VID_VBP;                      /* DSI Register5            Address offset: 0x238 */
    __IO uint32_t VID_VFP;                      /* DSI Register5            Address offset: 0x23C */
    __IO uint32_t VID_BLLPMOD;                  /* DSI Register5            Address offset: 0x240 */
    __IO uint32_t VID_NULLPKTBLLP;              /* DSI Register5            Address offset: 0x244 */
    __IO uint32_t VID_VACT;                     /* DSI Register5            Address offset: 0x248 */
    __IO uint32_t VID_VC;                       /* DSI Register5            Address offset: 0x24C */
    __IO uint32_t VID_EXTPKTEN;                 /* DSI Register5            Address offset: 0x250 */
    __IO uint32_t VID_VSSPLD;                   /* DSI Register5            Address offset: 0x254 */
    __IO uint32_t VID_PLDPERPKT;                /* DSI Register5            Address offset: 0x258 */
    uint32_t Reserved4[9];                      /* DSI Register5            Address offset: 0x25C~0x27C */
    __IO uint32_t DSI_TXPLD;                    /* DSI Register5            Address offset: 0x280 */
    __IO uint32_t DSI_PKTCTRL;                  /* DSI Register5            Address offset: 0x284 */
    __IO uint32_t DSI_SENDPKT;                  /* DSI Register5            Address offset: 0x288 */
    __IO uint32_t DSI_PKTSTS;                   /* DSI Register5            Address offset: 0x28C */
    __IO uint32_t DSI_PKTFWRLVL;                /* DSI Register5            Address offset: 0x290 */
    __IO uint32_t DSI_PKTFRDLVL;                /* DSI Register5            Address offset: 0x294 */
    __IO uint32_t DSI_PKTRXPLD;                 /* DSI Register5            Address offset: 0x298 */
    __IO uint32_t DSI_PKTRXHDR;                 /* DSI Register5            Address offset: 0x29C */
    uint32_t Reserved5[4];                      /* DSI Register5            Address offset: 0x2A0~0x2AC */
    __IO uint32_t DSI_IFPRIOSEL;                /* DSI Register5            Address offset: 0x2B0 */
}DSI_Module;


typedef struct
{
__IO uint32_t C1_PWR_CR;    //0x00
__IO uint32_t C1_PWR_CSR;   //0x04
__IO uint32_t C1_PWR_CR2;   //0x08
uint32_t RESERVE0[5];   
__IO uint32_t C2_PWR_CR;    //0x20
__IO uint32_t C2_PWR_CSR;   //0x24
__IO uint32_t C2_PWR_CR2;   //0x28
uint32_t RESERVE1[5];   
__IO uint32_t SYS_PWR_CR;   //0x40
__IO uint32_t SYS_PWR_CSR;  //0x44
__IO uint32_t SYS_PWR_CR2;  //0x48
__IO uint32_t SYS_PWR_CR3;  //0x4C
__IO uint32_t SYS_PWR_CR4;  //0x50
__IO uint32_t SYS_PWR_BOR_CR;   //0x54
__IO uint32_t IP_MEMPWR_CR; //0x58
__IO uint32_t IP_MEMPWR_CSR;    //0x5C
__IO uint32_t C1_MEM_LPCR1; //0x60
__IO uint32_t C1_MEM_LPSR1; //0x64
__IO uint32_t C1_TCM_PG0;   //0x68
__IO uint32_t C1_TCM_PG1;   //0x6C
__IO uint32_t C1_TCM_RET1N0;    //0x70
__IO uint32_t C1_TCM_RET1N1;    //0x74
__IO uint32_t C1_TCM_RET2N0;    //0x78
__IO uint32_t C1_TCM_RET2N1;    //0x7C
uint32_t RESERVE2[4];   
__IO uint32_t C2_MEM_LPCR;  //0x90
uint32_t RESERVE3[3];   
__IO uint32_t SYS_MEM_LPCR; //0xA0
uint32_t RESERVE4[3];   
__IO uint32_t SYS_PWR_SHRT_CR;  //0xB0
__IO uint32_t SYS_PWR_MDMA_CR;  //0xB4
__IO uint32_t SYS_PWR_ETHCAT_CR;    //0xB8
uint32_t RESERVE5[17];  
__IO uint32_t PWR_EMC_CR0;  //0x100
__IO uint32_t PWR_EMC_CR1;  //0x104
__IO uint32_t PWR_EMC_CR2;  //0x108
__IO uint32_t PWR_EMC_CR3;  //0x10C
__IO uint32_t PWR_EMC_CR4;  //0x110
__IO uint32_t PWR_EMC_CR5;  //0x114
__IO uint32_t PWR_EMC_CR6;  //0x118
__IO uint32_t PWR_EMC_CR7;  //0x11C
__IO uint32_t PWR_BKP_EMC_CR0;  //0x120
__IO uint32_t PWR_BKP_EMC_CR1;  //0x124
    } PWR_TypeDef;
    
    /** Reset and Clock Control **/
    typedef struct
    {
        __IO uint32_t PLL1CTRL1;    //0x00
        __IO uint32_t PLL1CTRL2;    //0x04
        uint32_t RESERVED1; //0x08
        uint32_t RESERVED2; //0x0C
        __IO uint32_t PLL2CTRL1;    //0x10
        __IO uint32_t PLL2CTRL2;    //0x14
        uint32_t RESERVED3; //0x18
        uint32_t RESERVED4; //0x1C
        __IO uint32_t PLL3CTRL1;    //0x20
        __IO uint32_t PLL3CTRL2;    //0x24
        uint32_t RESERVED5; //0x28
        uint32_t RESERVED6; //0x2C
        __IO uint32_t SRCCTRL1; //0x30
        __IO uint32_t PLL1DIV;  //0x34
        __IO uint32_t PLL2DIV;  //0x38
        __IO uint32_t PLL3DIV;  //0x3C
        __IO uint32_t SYSBUSDIV1;   //0x40
        __IO uint32_t SYSBUSDIV2;   //0x44
        __IO uint32_t BOOTMODE; //0x48
        __IO uint32_t AHB1DIV1; //0x4C
        __IO uint32_t AHB1SEL1; //0x50
        __IO uint32_t AHB1EN1;  //0x54
        __IO uint32_t AHB1EN2;  //0x58
        __IO uint32_t AHB1EN3;  //0x5C
        __IO uint32_t AHB1EN4;  //0x60
        __IO uint32_t AHB1RST1; //0x64
        __IO uint32_t AHB1RST2; //0x68
        __IO uint32_t AHB1RST3; //0x6C
        __IO uint32_t AHB1RST4; //0x70
        __IO uint32_t APB1DIV1; //0x74
        __IO uint32_t APB1SEL1; //0x78
        __IO uint32_t APB1SEL2; //0x7C
        __IO uint32_t APB1EN1;  //0x80
        __IO uint32_t APB1EN2;  //0x84
        __IO uint32_t APB1EN3;  //0x88
        __IO uint32_t APB1EN4;  //0x8C
        __IO uint32_t APB1EN5;  //0x90
        __IO uint32_t APB1RST1; //0x94
        __IO uint32_t APB1RST2; //0x98
        __IO uint32_t APB1RST3; //0x9C
        __IO uint32_t APB1RST4; //0xA0
        __IO uint32_t APB1RST5; //0xA4
        __IO uint32_t AHB2DIV1; //0xA8
        __IO uint32_t AHB2SEL1; //0xAC
        __IO uint32_t AHB2EN1;  //0xB0
        __IO uint32_t AHB2RST1; //0xB4
        __IO uint32_t APB2DIV1; //0xB8
        __IO uint32_t APB2SEL1; //0xBC
        __IO uint32_t APB2SEL2; //0xC0
        __IO uint32_t APB2EN1;  //0xC4
        __IO uint32_t APB2EN2;  //0xC8
        __IO uint32_t APB2EN3;  //0xCC
        __IO uint32_t APB2EN4;  //0xD0
        __IO uint32_t APB2RST1; //0xD4
        __IO uint32_t APB2RST2; //0xD8
        __IO uint32_t APB2RST3; //0xDC
        __IO uint32_t APB2RST4; //0xE0
        __IO uint32_t AHB5EN1;  //0xE4
        __IO uint32_t AHB5EN2;  //0xE8
        __IO uint32_t AHB5RST1; //0xEC
        __IO uint32_t AHB5RST2; //0xF0
        __IO uint32_t APB5DIV1; //0xF4
        __IO uint32_t APB5SEL1; //0xF8
        __IO uint32_t APB5EN1;  //0xFC
        __IO uint32_t APB5EN2;  //0x100
        __IO uint32_t APB5RST1; //0x104
        __IO uint32_t APB5RST2; //0x108
        __IO uint32_t RDDIV1;   //0x10C       
        __IO uint32_t RDSEL1;   //0x110
        __IO uint32_t RDEN1;    //0x114
        __IO uint32_t RDEN2;    //0x118
        __IO uint32_t RDRST1;   //0x11C
        __IO uint32_t RDRST2;   //0x120
        __IO uint32_t BDCTRL;   //0x124
        __IO uint32_t CTRLSTS;  //0x128
        __IO uint32_t CLKINT1;  //0x12C
        __IO uint32_t CLKINT2;  //0x130
        __IO uint32_t CFG1; //0x134
        __IO uint32_t AXIDIV1;  //0x138
        __IO uint32_t AXISEL1;  //0x13C
        __IO uint32_t AXIEN1;   //0x140
        __IO uint32_t AXIEN2;   //0x144
        __IO uint32_t AXIEN3;   //0x148
        __IO uint32_t AXIEN4;   //0x14C
        __IO uint32_t AXIRST1;  //0x150
        __IO uint32_t AXIRST2;  //0x154
        __IO uint32_t AXIRST3;  //0x158
        __IO uint32_t AXIRST4;  //0x15C
        __IO uint32_t CFG2; //0x160
        __IO uint32_t CFG3; //0x164
        __IO uint32_t CFG4; //0x168
        __IO uint32_t SRCCTRL2; //0x16C
        __IO uint32_t CFG5; //0x170
        __IO uint32_t M4RSTREL; //0x174
        __IO uint32_t AXIDIV2;  //0x178
        __IO uint32_t AXISEL2;  //0x17C
        uint32_t RESERVED7; //0x180
        uint32_t RESERVED8; //0x184
        uint32_t RESERVED9;       //0x188
        __IO uint32_t SHRPLLCTRL1;  //0x18C
        __IO uint32_t SHRPLLCTRL2;  //0x190
        __IO uint32_t AHB1DIV2; //0x194
        __IO uint32_t LSERDDL;  //0x198
        __IO uint32_t MSIRDDL;  //0x19C
        __IO uint32_t HSERDDL;  //0x1A0
        __IO uint32_t PLLSFTLK; //0x1A4
        __IO uint32_t RDCTRL1;  //0x1A8
        __IO uint32_t RDCTRL2;  //0x1AC
        __IO uint32_t RDCTRL3;  //0x1B0
        __IO uint32_t AHB2EN2;  //0x1B4
        __IO uint32_t AHB9DIV1; //0x1B8
        __IO uint32_t AHB9SEL1; //0x1BC
        __IO uint32_t AHB9EN1;  //0x1C0
        __IO uint32_t AHB9RST1; //0x1C4
        __IO uint32_t HSEOS;    //0x1C8
        __IO uint32_t LSEOS;    //0x1CC
        __IO uint32_t HSECAL;   //0x1D0
        __IO uint32_t CLKINT3;  //0x1D4
        __IO uint32_t PLLFD;    //0x1D8
        __IO uint32_t SRCCTRL3; //0x1DC
        __IO uint32_t LSICSSDL; //0x1E0
    } RCC_Module;





/*** @brief Debug MCU ***/

typedef struct
{
    __IO uint32_t ID;        //0x00
    __IO uint32_t CTRL;      //0x04
    __IO uint32_t M7APB1FZ;  //0x08
    __IO uint32_t M4APB1FZ;  //0x0C
    __IO uint32_t M7APB2FZ;  //0x10
    __IO uint32_t M4APB2FZ;  //0x14
    __IO uint32_t M7APB5FZ;  //0x18
    __IO uint32_t M4APB5FZ;  //0x1C
    __IO uint32_t M7APB6FZ;  //0x20
    __IO uint32_t M4APB6FZ;  //0x24
}DBG_Module;

/*** Ethernet MAC ***/
typedef struct
{
    __IO uint32_t MACCFG;         /* Offset: 0x0000 */
    __IO uint32_t MACEXTCFG;      /* Offset: 0x0004 */
    __IO uint32_t MACPFLT;        /* Offset: 0x0008 */
    __IO uint32_t MACWDGTO;       /* Offset: 0x000C */
    __IO uint32_t MACHASHTR0;     /* Offset: 0x0010 */
    __IO uint32_t MACHASHTR1;     /* Offset: 0x0014 */
    uint32_t      RESERVED0[14];
    __IO uint32_t MACVLANTAG;     /* Offset: 0x0050 */
    uint32_t      RESERVED1;
    __IO uint32_t MACVHASHT;      /* Offset: 0x0058 */
    uint32_t      RESERVED2;
    __IO uint32_t MACVLANINC;     /* Offset: 0x0060 */
    __IO uint32_t MACIVLANINC;    /* Offset: 0x0064 */
    uint32_t      RESERVED3[2];
    __IO uint32_t MACTXFLWCTRL;   /* Offset: 0x0070 */
    uint32_t      RESERVED4[7];
    __IO uint32_t MACRXFLWCTRL;   /* Offset: 0x0090 */
    uint32_t      RESERVED5[7];
    __IO uint32_t MACINTSTS;      /* Offset: 0x00B0 */
    __IO uint32_t MACINTEN;       /* Offset: 0x00B4 */
    __IO uint32_t MACRXTXSTS;     /* Offset: 0x00B8 */
    uint32_t      RESERVED6;
    __IO uint32_t MACPMTCTRLSTS;  /* Offset: 0x00C0 */
    __IO uint32_t MACRWUPFLT;     /* Offset: 0x00C4 */
    uint32_t      RESERVED7[2];
    __IO uint32_t MACLPICTRLSTS;  /* Offset: 0x00D0 */
    __IO uint32_t MACLPITIMCTRL;  /* Offset: 0x00D4 */
    __IO uint32_t MACLPIETYTIM;   /* Offset: 0x00D8 */
    __IO uint32_t MAC1USTICCNT;   /* Offset: 0x00DC */
    uint32_t      RESERVED8[12];
    __IO uint32_t MACVER;         /* Offset: 0x0110 */
    __IO uint32_t MACDBG;         /* Offset: 0x0114 */
    uint32_t      RESERVED9;
    __IO uint32_t MACHWF0;        /* Offset: 0x011C */
    __IO uint32_t MACHWF1;        /* Offset: 0x0120 */
    __IO uint32_t MACHWF2;        /* Offset: 0x0124 */
    __IO uint32_t MACHWF3;        /* Offset: 0x0128 */
    uint32_t      RESERVED10[53];
    __IO uint32_t MACMDIOADDR;    /* Offset: 0x0200 */
    __IO uint32_t MACMDIODATA;    /* Offset: 0x0204 */
    uint32_t      RESERVED11[2];
    __IO uint32_t MACARPADDR;     /* Offset: 0x0210 */
    uint32_t      RESERVED12[7];
    __IO uint32_t MACCSRSWCTRL;   /* Offset: 0x0230 */
    uint32_t      RESERVED13[3];
    __IO uint32_t MACPTNS;        /* Offset: 0x0240 */
    __IO uint32_t MACPTUPDT;      /* Offset: 0x0244 */
    uint32_t      RESERVED14[46];
    __IO uint32_t MACADDR0H;      /* Offset: 0x0300 */
    __IO uint32_t MACADDR0L;      /* Offset: 0x0304 */
    __IO uint32_t MACADDR1H;      /* Offset: 0x0308 */
    __IO uint32_t MACADDR1L;      /* Offset: 0x030C */
    __IO uint32_t MACADDR2H;      /* Offset: 0x0310 */
    __IO uint32_t MACADDR2L;      /* Offset: 0x0314 */
    __IO uint32_t MACADDR3H;      /* Offset: 0x0318 */
    __IO uint32_t MACADDR3L;      /* Offset: 0x031C */
    uint32_t      RESERVED15[248];
    __IO uint32_t MMCCTRL;        /* Offset: 0x0700 */
    __IO uint32_t MMCRXINT;       /* Offset: 0x0704 */
    __IO uint32_t MMCTXINT;       /* Offset: 0x0708 */
    __IO uint32_t MMCRXINTMSK;    /* Offset: 0x070C */
    __IO uint32_t MMCTXINTMSK;    /* Offset: 0x0710 */
    uint32_t      RESERVED16[14];
    __IO uint32_t MMCTXSCGP;      /* Offset: 0x074C */
    __IO uint32_t MMCTXMCGP;      /* Offset: 0x0750 */
    uint32_t      RESERVED17[5];
    __IO uint32_t MMCTXPCG;       /* Offset: 0x0768 */
    uint32_t      RESERVED18[8];
    __IO uint32_t MMCRXBPG;       /* Offset: 0x078C */
    __IO uint32_t MMCRXMPG;       /* Offset: 0x0790 */
    __IO uint32_t MMCRXCRCEP;     /* Offset: 0x0794 */
    __IO uint32_t MMCRXAEP;       /* Offset: 0x0798 */
    uint32_t      RESERVED19[10];
    __IO uint32_t MMCRXUPG;       /* Offset: 0x07C4 */
    uint32_t      RESERVED20[9];
    __IO uint32_t MMCTXLPIUS;     /* Offset: 0x07EC */
    __IO uint32_t MMCTXLPITRAN;   /* Offset: 0x07F0 */
    __IO uint32_t MMCRXLPIUS;     /* Offset: 0x07F4 */
    __IO uint32_t MMCRXLPITRAN;   /* Offset: 0x07F8 */
    uint32_t      RESERVED21;
    __IO uint32_t MMCIPCRXINTMSK; /* Offset: 0x0800 */
    uint32_t      RESERVED22;
    __IO uint32_t MMCIPCRXINT;    /* Offset: 0x0808 */
    uint32_t      RESERVED23;
    __IO uint32_t MMCRXIPV4GP;    /* Offset: 0x0810 */
    uint32_t      RESERVED24[4];
    __IO uint32_t MMCRXIPV6GP;    /* Offset: 0x0824 */
    uint32_t      RESERVED25[2];
    __IO uint32_t MMCRXUDPGP;     /* Offset: 0x0830 */
    __IO uint32_t MMCRXUDPEP;     /* Offset: 0x0834 */
    __IO uint32_t MMCRXTCPGP;     /* Offset: 0x0838 */
    __IO uint32_t MMCRXTCPEP;     /* Offset: 0x083C */
    __IO uint32_t MMCRXICMPGP;    /* Offset: 0x0840 */
    __IO uint32_t MMCRXICMPEP;    /* Offset: 0x0844 */
    uint32_t      RESERVED26[46];
    __IO uint32_t MACL3L4F0CTRL;  /* Offset: 0x0900 */
    __IO uint32_t MACL4F0PORT;    /* Offset: 0x0904 */
    uint32_t      RESERVED27[2];
    __IO uint32_t MACL3F0ADDR0;   /* Offset: 0x0910 */
    __IO uint32_t MACL3F0ADDR1;   /* Offset: 0x0914 */
    __IO uint32_t MACL3F0ADDR2;   /* Offset: 0x0918 */
    __IO uint32_t MACL3F0ADDR3;   /* Offset: 0x091C */
    uint32_t      RESERVED28[4];
    __IO uint32_t MACL3L4F1CTRL;  /* Offset: 0x0930 */
    __IO uint32_t MACL4F1PORT;    /* Offset: 0x0934 */
    uint32_t      RESERVED29[2];
    __IO uint32_t MACL3F1ADDR0;   /* Offset: 0x0940 */
    __IO uint32_t MACL3F1ADDR1;   /* Offset: 0x0944 */
    __IO uint32_t MACL3F1ADDR2;   /* Offset: 0x0948 */
    __IO uint32_t MACL3F1ADDR3;   /* Offset: 0x094C */
    uint32_t      RESERVED30[108];
    __IO uint32_t MACTSCTRL;      /* Offset: 0x0B00 */
    __IO uint32_t MACSUBSINC;     /* Offset: 0x0B04 */
    __IO uint32_t MACSYSTS;       /* Offset: 0x0B08 */
    __IO uint32_t MACSYSTNS;      /* Offset: 0x0B0C */
    __IO uint32_t MACSYSTSUP;     /* Offset: 0x0B10 */
    __IO uint32_t MACSYSTNSUP;    /* Offset: 0x0B14 */
    __IO uint32_t MACTSADD;       /* Offset: 0x0B18 */
    __IO uint32_t MACSYSTHWS;     /* Offset: 0x0B1C */
    __IO uint32_t MACTSSTS;       /* Offset: 0x0B20 */
    uint32_t      RESERVED31[3];
    __IO uint32_t MACTXTSSTSNS;   /* Offset: 0x0B30 */
    __IO uint32_t MACTXTSSTSS;    /* Offset: 0x0B34 */
    uint32_t      RESERVED32[2];
    __IO uint32_t MACAUXCTRL;     /* Offset: 0x0B40 */
    uint32_t      RESERVED33;
    __IO uint32_t MACAUXTSNS;     /* Offset: 0x0B48 */
    __IO uint32_t MACAUXTSS;      /* Offset: 0x0B4C */
    __IO uint32_t MACTSIGASYC;    /* Offset: 0x0B50 */
    __IO uint32_t MACTSEGASYC;    /* Offset: 0x0B54 */
    __IO uint32_t MACTSIGCNS;     /* Offset: 0x0B58 */
    __IO uint32_t MACTSEGCNS;     /* Offset: 0x0B5C */
    uint32_t      RESERVED34[2];
    __IO uint32_t MACTSIGLAT;     /* Offset: 0x0B68 */
    __IO uint32_t MACTSEGLAT;     /* Offset: 0x0B6C */
    __IO uint32_t MACPPSCTRL;     /* Offset: 0x0B70 */
    uint32_t      RESERVED35[3];
    __IO uint32_t MACPPSTTS;      /* Offset: 0x0B80 */
    __IO uint32_t MACPPSTTNS;     /* Offset: 0x0B84 */
    __IO uint32_t MACPPSINTE;     /* Offset: 0x0B88 */
    __IO uint32_t MACPPSWID;      /* Offset: 0x0B8C */
    uint32_t      RESERVED36[12];
    __IO uint32_t MACPTOCTRL;     /* Offset: 0x0BC0 */
    __IO uint32_t MACSRCPID0;     /* Offset: 0x0BC4 */
    __IO uint32_t MACSRCPID1;     /* Offset: 0x0BC8 */
    __IO uint32_t MACSRCPID2;     /* Offset: 0x0BCC */
    __IO uint32_t MACLOGMINTE;    /* Offset: 0x0BD0 */
    uint32_t      RESERVED37[11];

    __IO uint32_t MTLOPMOD;       /* Offset: 0x0C00 */
    uint32_t      RESERVED38[7];
    __IO uint32_t MTLINTSTS;      /* Offset: 0x0C20 */
    uint32_t      RESERVED39[55];
    __IO uint32_t MTLTXQOPMOD;    /* Offset: 0x0D00 */
    __IO uint32_t MTLTXQUDF;      /* Offset: 0x0D04 */
    __IO uint32_t MTLTXQDBG;      /* Offset: 0x0D08 */
    uint32_t      RESERVED40[8];
    __IO uint32_t MTLQINTCTRLSTS; /* Offset: 0x0D2C */
    __IO uint32_t MTLRXQOPMOD;    /* Offset: 0x0D30 */
    __IO uint32_t MTLRXQMPOFCNT;  /* Offset: 0x0D34 */
    __IO uint32_t MTLRXQDBG;      /* Offset: 0x0D38 */
    uint32_t      RESERVED41[177];

    __IO uint32_t DMAMODE;        /* Offset: 0x1000 */
    __IO uint32_t DMASBMODE;      /* Offset: 0x1004 */
    __IO uint32_t DMAINTSTS;      /* Offset: 0x1008 */
    __IO uint32_t DMADBGSTS;      /* Offset: 0x100C */
    uint32_t      RESERVED42[60];
    __IO uint32_t DMACH0CTRL;     /* Offset: 0x1100 */
    __IO uint32_t DMACH0TXCTRL;   /* Offset: 0x1104 */
    __IO uint32_t DMACH0RXCTRL;   /* Offset: 0x1108 */
    uint32_t      RESERVED43[2];
    __IO uint32_t DMACH0TXDLA;    /* Offset: 0x1114 */
    uint32_t      RESERVED44;
    __IO uint32_t DMACH0RXDLA;    /* Offset: 0x111C */
    __IO uint32_t DMACH0TXDTP;    /* Offset: 0x1120 */
    uint32_t      RESERVED45;
    __IO uint32_t DMACH0RXDTP;    /* Offset: 0x1128 */
    __IO uint32_t DMACH0TXDRLEN;  /* Offset: 0x112C */
    __IO uint32_t DMACH0RXCTRL2;  /* Offset: 0x1130 */
    __IO uint32_t DMACH0INTEN;    /* Offset: 0x1134 */
    __IO uint32_t DMACH0RXINTWT;  /* Offset: 0x1138 */
    uint32_t      RESERVED46[2];
    __IO uint32_t DMACH0CATXD;    /* Offset: 0x1144 */
    uint32_t      RESERVED47;
    __IO uint32_t DMACH0CARXD;    /* Offset: 0x114C */
    uint32_t      RESERVED48;
    __IO uint32_t DMACH0CATXB;    /* Offset: 0x1154 */
    uint32_t      RESERVED49;
    __IO uint32_t DMACH0CARXB;    /* Offset: 0x115C */
    __IO uint32_t DMACH0STS;      /* Offset: 0x1160 */
    __IO uint32_t DMACH0DPCNT;    /* Offset: 0x1164 */
    uint32_t      RESERVED50;
    __IO uint32_t DMACH0RXERICNT; /* Offset: 0x116C */
} ETH_Module;

/***  EXTI(External Interrupt/Event Controller) Regiters ***/
typedef struct
{
    __IO uint32_t RT_CFG[2];       //0x00
    __IO uint32_t RESERVED0[6];
    __IO uint32_t FT_CFG[2];       //0x20
    __IO uint32_t RESERVED1[6];
    __IO uint32_t SWIE[2];         //0x40
    __IO uint32_t RESERVED2[6];
    __IO uint32_t M7IMASK[2];      //0x60
    __IO uint32_t RESERVED3[6];
    __IO uint32_t M4IMASK[2];      //0x80
    __IO uint32_t RESERVED4[6];
    __IO uint32_t M7EMASK[2];      //0xA0
    __IO uint32_t RESERVED5[6];
    __IO uint32_t M4EMASK[2];      //0xC0
    __IO uint32_t RESERVED6[6];
    __IO uint32_t M7PEND[2];       //0xE0
    __IO uint32_t RESERVED7[6];
    __IO uint32_t M4PEND[2];       //0x100
    __IO uint32_t RESERVED8[6];
    __IO uint32_t M7IMASK_DRC[2];  //0x120
    __IO uint32_t RESERVED9[6];
    __IO uint32_t M4IMASK_DRC[2];  //0x140
    __IO uint32_t RESERVED10[6];
    __IO uint32_t M7EMASK_DRC[2];  //0x160
    __IO uint32_t RESERVED11[6];
    __IO uint32_t M4EMASK_DRC[2];  //0x180
    __IO uint32_t RESERVED12[14];
    __IO uint32_t TSSEL;           //0x1C0
}EXTI_Module;

/*** FDCAN(Flexible Datarate Controller Area Network) Registers ***/
typedef struct
{
    __IO uint32_t CREL;         //0x000
    __IO uint32_t ENDN;         //0x004
    __IO uint32_t RESERVED1;    //0x008
    __IO uint32_t DBTP;         //0x00C
    __IO uint32_t TEST;         //0x010
    __IO uint32_t RWD;          //0x014
    __IO uint32_t CCCR;         //0x018
    __IO uint32_t NBTP;         //0x01C
    __IO uint32_t TSCC;         //0x020
    __IO uint32_t TSCV;         //0x024
    __IO uint32_t TOCC;         //0x028
    __IO uint32_t TOCV;         //0x02C
    __IO uint32_t RESERVED2[4]; //0x030
    __IO uint32_t ECR;          //0x040
    __IO uint32_t PSR;          //0x044
    __IO uint32_t TDCR;         //0x048
    __IO uint32_t RESERVED3;    //0x04C
    __IO uint32_t IR;           //0x050
    __IO uint32_t IE;           //0x054
    __IO uint32_t ILS;          //0x058
    __IO uint32_t ILE;          //0x05C
    __IO uint32_t RESERVED4[8]; //0x060
    __IO uint32_t GFC;          //0x080
    __IO uint32_t SIDFC;        //0x084
    __IO uint32_t XIDFC;        //0x088
    __IO uint32_t RESERVED5;    //0x08C
    __IO uint32_t XIDAM;        //0x090
    __IO uint32_t HPMS;         //0x094
    __IO uint32_t NDAT1;        //0x098
    __IO uint32_t NDAT2;        //0x09C
    __IO uint32_t RXF0C;        //0x0A0
    __IO uint32_t RXF0S;        //0x0A4
    __IO uint32_t RXF0A;        //0x0A8
    __IO uint32_t RXBC;         //0x0AC
    __IO uint32_t RXF1C;        //0x0B0
    __IO uint32_t RXF1S;        //0x0B4
    __IO uint32_t RXF1A;        //0x0B8
    __IO uint32_t RXESC;        //0x0BC
    __IO uint32_t TXBC;         //0x0C0
    __IO uint32_t TXFQS;        //0x0C4
    __IO uint32_t TXESC;        //0x0C8
    __IO uint32_t TXBRP;        //0x0CC
    __IO uint32_t TXBAR;        //0x0D0
    __IO uint32_t TXBCR;        //0x0D4
    __IO uint32_t TXBTO;        //0x0D8
    __IO uint32_t TXBCF;        //0x0DC
    __IO uint32_t TXBTIE;       //0x0E0
    __IO uint32_t TXBCIE;       //0x0E4
    __IO uint32_t RESERVED6[2]; //0x0E8
    __IO uint32_t TXEFC;        //0x0F0
    __IO uint32_t TXEFS;        //0x0F4
    __IO uint32_t TXEFA;        //0x0F8
    __IO uint32_t RESERVED7[1]; //0x0FC
    __IO uint32_t TTTMC;        //0x100
    __IO uint32_t TTRMC;        //0x104
    __IO uint32_t TTOCF;        //0x108
    __IO uint32_t TTMLM;        //0x10c
    __IO uint32_t TURCF;        //0x110
    __IO uint32_t TTOCN;        //0x114
    __IO uint32_t TTGTP;        //0x118
    __IO uint32_t TTTMK;        //0x11c
    __IO uint32_t TTIR;         //0x120
    __IO uint32_t TTIE;         //0x124
    __IO uint32_t TTILS;        //0x128
    __IO uint32_t TTOST;        //0x12c
    __IO uint32_t TURNA;        //0x130
    __IO uint32_t TTLGT;        //0x134
    __IO uint32_t TTCTC;        //0x138
    __IO uint32_t TTCPT;        //0x13C
    __IO uint32_t TTCSM;        //0x140
    __IO uint32_t TTSS;         //0x144
} FDCAN_Module;

/*** FLASH Registers ***/
typedef struct
{
    __IO uint32_t AC;           //0x00
    __IO uint32_t CTRL;         //0x04
    __IO uint32_t STS;          //0x08
    __IO uint32_t ADD;          //0x0C
    __IO uint32_t KEY;          //0x10
    __IO uint32_t OPTKEY;       //0x14
    __IO uint32_t OB;           //0x18
    __IO uint32_t WRP;          //0x1C
    __IO uint32_t ECC;          //0x20
    __IO uint32_t RESERVED0[2];
    __IO uint32_t RDN;          //0x2C
    __IO uint32_t CAHR;         //0x30
    __IO uint32_t ROWP;         //0x34
    __IO uint32_t CCM_WRP1;     //0x38
    __IO uint32_t CCM_KEY;      //0x3C
    __IO uint32_t CCM_ERASE;    //0x40
    __IO uint32_t CCM_WRP2;     //0x44
    __IO uint32_t CCM_MODE;     //0x48
    __IO uint32_t XSPI_DSTRADD; //0x4C
    __IO uint32_t XSPI_DENDADD; //0x50
    __IO uint32_t FEMC_DSTRADD; //0x54
    __IO uint32_t FEMC_DENDADD; //0x58
    __IO uint32_t RTPD_KEY;     //0x5C
    __IO uint32_t JTAG_SEAL;    //0x60
    __IO uint32_t RTPD_KEY_WCNT;//0x64
    __IO uint32_t RESERVED1;
    __IO uint32_t XSPI_FEMC_DEN;//0x6C
    __IO uint32_t XUID;         //0x70
} FLASH_Module;

/*** Option Bytes Registers ***/

typedef struct
{
    __IO uint32_t USER_RDP;     //0x00 
    __IO uint32_t Data1_Data0;  //0x04
    __IO uint32_t WRP1_WRP0;    //0x08
    __IO uint32_t WRP3_WRP2;    //0x0C
    __IO uint32_t USER2_RDP2;   //0x10
    __IO uint32_t USER3;        //0x14
    __IO uint32_t CCMSRAM_RST;  //0x18
    __IO uint32_t RESERVED;
} OB_Module;

/*** GPIO(General Purpose I/O) Registers ***/
typedef struct
{
    __IO uint32_t PMODE;           //0x00
    __IO uint32_t POTYPE;          //0x04
    __IO uint32_t SR;              //0x08
    __IO uint32_t PUPD;            //0x0C
    __IO uint32_t PID;             //0x10
    __IO uint32_t POD;             //0x14
    __IO uint32_t PBSC;            //0x18
    __IO uint32_t PLOCK;           //0x1C
    __IO uint32_t AFL;             //0x20
    __IO uint32_t AFH;             //0x24
    __IO uint32_t PBC;             //0x28
    __IO uint32_t DS;              //0x2C
} GPIO_Module;

/*** AFIO(Alternate Function I/O) Registers ***/
typedef struct
{
    __IO uint32_t RMP_CFG;           //0x00
    __IO uint32_t FILTER_CFG;        //0x04
    __IO uint32_t XSPI1_NONCE0;      //0x08
    __IO uint32_t XSPI1_NONCE1;      //0x0C
    __IO uint32_t XSPI1_NONCE2;      //0x10
    __IO uint32_t ADCRMP_CFG;        //0x14
    __IO uint32_t EXTI_CFG[4];       //0x18
    __IO uint32_t TOL5V_CFG1;        //0x28
    __IO uint32_t TOL5V_CFG2;        //0x2C
    __IO uint32_t TOL5V_CFG3;        //0x30
    __IO uint32_t SHRT1_FALT_CFG;    //0x34
    __IO uint32_t SHRT2_FALT_CFG;    //0x38
    __IO uint32_t TOL5V_CFG4;        //0x3C
    __IO uint32_t RESERVED40;        //0x40
    __IO uint32_t TOL5V_CFG5;        //0x44
    __IO uint32_t TOL5V_CFG6;        //0x48
    __IO uint32_t TOL5V_CFG7;        //0x4C
    __IO uint32_t RESERVED50;        //0x50
    __IO uint32_t EFT_CFG[6];        //0x54
    __IO uint32_t DIGEFT_CFG[6];     //0x6C
    __IO uint32_t SHRT1_EXEV_CFG[2]; //0x84
    __IO uint32_t SHRT2_EXEV_CFG[2]; //0x8C
    __IO uint32_t SIP_PUPD;          //0x94
    __IO uint32_t HSMODE_CFG[5];     //0x98
    __IO uint32_t RESERVEDAC;        //0xAC
    __IO uint32_t SIPSR;             //0xB0
    __IO uint32_t SIPDS;             //0xB4
    __IO uint32_t RESERVEDB8[6];     //0xB8~0xCC
    __IO uint32_t ADCSW_CFG;         //0xD0
    __IO uint32_t RESERVEDD4;        //0xD4
    __IO uint32_t SDRAM_VREF_EN[3];  //0xD8
    __IO uint32_t SDRAMDSN_CFG[3];   //0xE4
    __IO uint32_t SDRAMDSP_CFG[3];   //0xF0
}AFIO_Module;

/*** Low-Power Timer ***/
typedef struct
{
    __IO uint32_t INTSTS; /* Offset: 0x0000 */
    __IO uint32_t INTCLR; /* Offset: 0x0004 */
    __IO uint32_t INTEN;  /* Offset: 0x0008 */
    __IO uint32_t CFG;    /* Offset: 0x000C */
    __IO uint32_t CTRL;   /* Offset: 0x0010 */
    __IO uint32_t CMP;    /* Offset: 0x0014 */
    __IO uint32_t ARR;    /* Offset: 0x0018 */
    __IO uint32_t CNT;    /* Offset: 0x001C */
    __IO uint32_t OPT;    /* Offset: 0x0020 */
} LPTIM_Module;

/*** Inter Integrated Circuit Interface ***/

typedef struct
{
		__IO uint32_t CTRL1;     				//0x00 
		__IO uint32_t CTRL2;       			//0x04 
		__IO uint32_t ADR1;     				//0x08 
		__IO uint32_t ADR2;    					//0x0C 
		__IO uint32_t BUSTM;  					//0x10 
		__IO uint32_t TMOUTR;  					//0x14 
		__IO uint32_t STSINT;      			//0x18 
		__IO uint32_t INTCLR;      			//0x1C 
		__IO uint32_t CRCR;      				//0x20 
		__IO uint32_t RDR;      				//0x24 
		__IO uint32_t WDR;      				//0x28 
		__IO uint32_t HSBUSTM;  				//0x2C 
		__IO uint32_t FIFOCSR;  				//0x30 
		__IO uint32_t QCMD; 	  				//0x34 
		__IO uint32_t GFLTRCTRL; 				//0x38 
} I2C_Module;


/**
 * @brief Independent WATCHDOG
 */

typedef struct
{
    __IO uint32_t KEY;
    __IO uint32_t STS;
    __IO uint32_t PREDIV; /* IWDG PREDIV */
    __IO uint32_t RELV;
} IWDG_Module;

/** Power Control **/
typedef struct
{
    __IO uint32_t M7CTRL1;         //0x00
    __IO uint32_t M7CTRLSTS;       //0x04
    __IO uint32_t M7CTRL2;         //0x08
    __IO uint32_t RES1[5];         //0x0C
    __IO uint32_t M4CTRL1;         //0x20
    __IO uint32_t M4CTRLSTS;       //0x24
    __IO uint32_t M4CTRL2;         //0x28
    __IO uint32_t RES2[5];         //0x2C
    __IO uint32_t SYSCTRL1;        //0x40
    __IO uint32_t SYSCTRLSTS;      //0x44
    __IO uint32_t SYSCTRL2;        //0x48
    __IO uint32_t SYSCTRL3;        //0x4C
    __IO uint32_t SYSCTRL4;        //0x50
    __IO uint32_t BORCTRL;         //0x54
    __IO uint32_t IPMEMCTRL;       //0x58
    __IO uint32_t IPMEMCTRLSTS;    //0x5C
    __IO uint32_t M7MEMLPCTRL;     //0x60
    __IO uint32_t M7MEMLPSTS;      //0x64
    __IO uint32_t M7TCMPG0;        //0x68
    __IO uint32_t M7TCMPG1;        //0x6C
    __IO uint32_t M7TCMRET1N0;     //0x70
    __IO uint32_t M7TCMRET1N1;     //0x74
    __IO uint32_t M7TCMRET2N0;     //0x78
    __IO uint32_t M7TCMRET2N1;     //0x7C
    __IO uint32_t M7TCMPRDY0;      //0x80
    __IO uint32_t M7TCMPRDY1;      //0x84
    __IO uint32_t RES3[2];         //0x88
    __IO uint32_t M4MEMLPCTRL;     //0x90
    __IO uint32_t RES4[3];         //0x94
    __IO uint32_t SYSMEMLPCTRL;    //0xA0
    __IO uint32_t RES5[3];         //0xA4
    __IO uint32_t SHRTIMCTRL;      //0xB0
    __IO uint32_t MDMACTRL;        //0xB4
    __IO uint32_t ESCCTRL;         //0xB8
    __IO uint32_t RES6[17];        //0xBC
    __IO uint32_t EMCRETCTRL1;     //0x100
    __IO uint32_t EMCCTRLSTS1;     //0x104
    __IO uint32_t EMCRETCTRL2;     //0x108
    __IO uint32_t EMCRETSTS2;      //0x10C
    __IO uint32_t EMCRETCTRL3;     //0x110
    __IO uint32_t EMCRETSTS3;      //0x114
    __IO uint32_t EMCRETCTRL4;     //0x118
    __IO uint32_t EMCRETSTS4;      //0x11C
    __IO uint32_t EMCBKPCTRL;      //0x120
    __IO uint32_t EMCBKPSTS;       //0x124
}PWR_Module;

/** Real-Time Clock **/
typedef struct
{
    __IO uint32_t TSH;         /* RTC time register,                                         Address offset: 0x00 */
    __IO uint32_t DATE;        /* RTC date register,                                         Address offset: 0x04 */
    __IO uint32_t CTRL;        /* RTC control register,                                      Address offset: 0x08 */
    __IO uint32_t INITSTS;     /* RTC initialization and status register,                    Address offset: 0x0C */
    __IO uint32_t PRE;         /* RTC prescaler register,                                    Address offset: 0x10 */
    __IO uint32_t WKUPT;       /* RTC wakeup timer register,                                 Address offset: 0x14 */
    uint32_t reserved18;       /* Reserved  */
    __IO uint32_t ALARMA;      /* RTC alarm A register,                                      Address offset: 0x1C */
    __IO uint32_t ALARMB;      /* RTC alarm B register,                                      Address offset: 0x20 */
    __IO uint32_t WRP;         /* RTC write protection register,                             Address offset: 0x24 */
    __IO uint32_t SUBS;        /* RTC sub second register,                                   Address offset: 0x28 */
    __IO uint32_t SCTRL;       /* RTC shift control register,                                Address offset: 0x2C */
    __IO uint32_t TST;         /* RTC time stamp time register,                              Address offset: 0x30 */
    __IO uint32_t TSD;         /* RTC time stamp date register,                              Address offset: 0x34 */
    __IO uint32_t TSSS;        /* RTC time-stamp sub second register,                        Address offset: 0x38 */
    __IO uint32_t CALIB;       /* RTC calibration register,                                  Address offset: 0x3C */
    uint32_t reserved40;       /* Reserved  */
    __IO uint32_t ALRMASS;     /* RTC alarm A sub second register,                           Address offset: 0x44 */
    __IO uint32_t ALRMBSS;     /* RTC alarm B sub second register,                           Address offset: 0x48 */
    __IO uint32_t OPT;         /* RTC option register,                                       Address offset: 0x4C */
    __IO uint32_t BKP1;        /* RTC backup register 1,                                     Address offset: 0x50 */
    __IO uint32_t BKP2;        /* RTC backup register 2,                                     Address offset: 0x54 */
    __IO uint32_t BKP3;        /* RTC backup register 3,                                     Address offset: 0x58 */
    __IO uint32_t BKP4;        /* RTC backup register 4,                                     Address offset: 0x5C */
    __IO uint32_t BKP5;        /* RTC backup register 5,                                     Address offset: 0x60 */
    __IO uint32_t BKP6;        /* RTC backup register 6,                                     Address offset: 0x64 */
    __IO uint32_t BKP7;        /* RTC backup register 7,                                     Address offset: 0x68 */
    __IO uint32_t BKP8;        /* RTC backup register 8,                                     Address offset: 0x6C */
    __IO uint32_t BKP9;        /* RTC backup register 9,                                     Address offset: 0x70 */
    __IO uint32_t BKP10;       /* RTC backup register 10,                                    Address offset: 0x74 */
    __IO uint32_t BKP11;       /* RTC backup register 11,                                    Address offset: 0x78 */
    __IO uint32_t BKP12;       /* RTC backup register 12,                                    Address offset: 0x7C */
    __IO uint32_t BKP13;       /* RTC backup register 13,                                    Address offset: 0x80 */
    __IO uint32_t BKP14;       /* RTC backup register 14,                                    Address offset: 0x84 */
    __IO uint32_t BKP15;       /* RTC backup register 15,                                    Address offset: 0x88 */
    __IO uint32_t BKP16;       /* RTC backup register 16,                                    Address offset: 0x8C */
    __IO uint32_t BKP17;       /* RTC backup register 17,                                    Address offset: 0x90 */
    __IO uint32_t BKP18;       /* RTC backup register 18,                                    Address offset: 0x94 */
    __IO uint32_t BKP19;       /* RTC backup register 19,                                    Address offset: 0x98 */
    __IO uint32_t BKP20;       /* RTC backup register 20,                                    Address offset: 0x9C */
    __IO uint32_t BKP21;       /* RTC backup register 21,                                    Address offset: 0xA0 */
    __IO uint32_t BKP22;       /* RTC backup register 22,                                    Address offset: 0xA4 */
    __IO uint32_t BKP23;       /* RTC backup register 23,                                    Address offset: 0xA8 */
    __IO uint32_t BKP24;       /* RTC backup register 24,                                    Address offset: 0xAC */
    __IO uint32_t BKP25;       /* RTC backup register 25,                                    Address offset: 0xB0 */
    __IO uint32_t BKP26;       /* RTC backup register 26,                                    Address offset: 0xB4 */
    __IO uint32_t BKP27;       /* RTC backup register 27,                                    Address offset: 0xB8 */
    __IO uint32_t BKP28;       /* RTC backup register 28,                                    Address offset: 0xBC */
    __IO uint32_t BKP29;       /* RTC backup register 29,                                    Address offset: 0xC0 */
    __IO uint32_t BKP30;       /* RTC backup register 30,                                    Address offset: 0xC4 */
    __IO uint32_t BKP31;       /* RTC backup register 31,                                    Address offset: 0xC8 */
    __IO uint32_t BKP32;       /* RTC backup register 31,                                    Address offset: 0xCC */
    uint32_t reservedD0;       /* Reserved  */
    __IO uint32_t TMPCFG;      /* RTC tamper configuration register,                         Address offset: 0xD4 */
    __IO uint32_t TMPCTRL[8];  /* RTC tamper configuration register,                         Address offset: 0xD8~0xF4 */

} RTC_Module;

/** SDMMC Interface **/

typedef struct
{
	__IO uint32_t CFG1;          //0x00
	__IO uint32_t CFG2;          //0x04
	__IO uint32_t CFG3;          //0x08
	__IO uint32_t PV0CTRL;       //0x0C
	__IO uint32_t PV1CTRL;       //0x10
	__IO uint32_t PV2CTRL;       //0x14
	__IO uint32_t PV3CTRL;       //0x18
    uint32_t RESERVED;                 //0x1C
	__IO uint32_t DLYCTRL;       //0x20
}SDMMC_Module;

/** SD host Interface **/
typedef struct
{
	__IO uint32_t DSADD;        //0x00
	__IO uint32_t BLKCFG;       //0x04
	__IO uint32_t CMDARG1;      //0x08
	__IO uint32_t TMODE;        //0x0C
	__IO uint32_t CMDRSP0;      //0x10
	__IO uint32_t CMDRSP1;      //0x14
	__IO uint32_t CMDRSP2;      //0x18
	__IO uint32_t CMDRSP3;      //0x1C
	__IO uint32_t BUFDAT;       //0x20
	__IO uint32_t PRESTS;       //0x24
	__IO uint32_t CTRL1;        //0x28
	__IO uint32_t CTRL2;        //0x2C
	__IO uint32_t INTSTS;       //0x30
	__IO uint32_t IE;           //0x34
	__IO uint32_t ISE;          //0x38
	__IO uint32_t CTRLSTS;      //0x3C
	__IO uint32_t CAP0STS;      //0x40
	__IO uint32_t CAP1STS;      //0x44
    uint32_t RESERVED0[2];             //0x48
	__IO uint32_t STSFE;        //0x50
	__IO uint32_t ADMAESTS;     //0x54
	__IO uint32_t ASADD0;       //0x58
	__IO uint32_t ASADD1;       //0x5C
	__IO uint32_t PV0STS;       //0x60
	__IO uint32_t PV1STS;       //0x64
	__IO uint32_t PV2STS;       //0x68
	__IO uint32_t PV3STS;       //0x6C
	__IO uint32_t BOOTTCTRL;    //0x70
}SDHOST_Module;


/*** TIM ***/

typedef struct
{
    __IO uint32_t CTRL1;    //0x00
    __IO uint32_t CTRL2;    //0x04
    __IO uint32_t STS;      //0x08
    __IO uint32_t EVTGEN;   //0x0C
    __IO uint32_t SMCTRL;   //0x10
    __IO uint32_t DINTEN;   //0x14
    __IO uint32_t CCMOD1;   //0x18
    __IO uint32_t CCMOD2;   //0x1C
    __IO uint32_t CCMOD3;   //0x20
    __IO uint32_t CCEN;     //0x24
    __IO uint32_t CCDAT1;   //0x28
    __IO uint32_t CCDAT2;   //0x2C
    __IO uint32_t CCDAT3;   //0x30
    __IO uint32_t CCDAT4;   //0x34
    __IO uint32_t CCDAT5;   //0x38
    __IO uint32_t CCDAT6;   //0x3C    
    __IO uint32_t PSC;      //0x40   
    __IO uint32_t AR;       //0x44
    __IO uint32_t CNT;      //0x48
    __IO uint32_t REPCNT;   //0x4C
    __IO uint32_t BKDT;     //0x50
    __IO uint32_t CCDAT7;   //0x54
    __IO uint32_t CCDAT8;   //0x58
    __IO uint32_t CCDAT9;   //0x5C
    __IO uint32_t BKFR;     //0x60
    __IO uint32_t C1FILT;   //0x64
    __IO uint32_t C2FILT;   //0x68
    __IO uint32_t C3FILT;   //0x6C
    __IO uint32_t C4FILT;   //0x70
    __IO uint32_t FILTO;    //0x74
    __IO uint32_t INSEL;    //0x78
    __IO uint32_t AF1;      //0x7C
    __IO uint32_t AF2;      //0x80
    __IO uint32_t BKFR2;    //0x84
    __IO uint32_t RESERVED0[3]; 
    __IO uint32_t DCTRL;    //0x94
    __IO uint32_t DADDR;    //0x98
} TIM_Module;


/** Universal Synchronous Asynchronous Receiver Transmitter **/

typedef struct
{
    __IO uint32_t CTRL1;    //0x00
    __IO uint32_t CTRL2;    //0x04
    __IO uint32_t CTRL3;    //0x08
    __IO uint32_t STS;      //0x0C
    __IO uint32_t DAT;      //0x10
    __IO uint32_t BRCF;     //0x14
    __IO uint32_t GTP;      //0x18
    __IO uint32_t FIFO;     //0x1C
    __IO uint32_t IFW;      //0x20
    __IO uint32_t RTO;      //0x24
} USART_Module;

/**
 * @brief Window WATCHDOG
 */

typedef struct
{
    __IO uint32_t CFG;      /* WWDG Configuration Register      Address offset: 0x00 */
    __IO uint32_t CTRL;     /* WWDG Control Register            Address offset: 0x04 */
    __IO uint32_t STS;      /* WWDG Stauts Register             Address offset: 0x08 */
} WWDG_Module;

/*** xSPI ***/

typedef struct
{
    __IO uint32_t CTRL0;                /* xSPI Control Register 0,                                    Address offset: 0x00  */
    __IO uint32_t CTRL1;                /* xSPI Control Register 1,                                    Address offset: 0x04  */ 
    __IO uint32_t SSIENR;                   /* xSPI Enable Register,                                       Address offset: 0x08  */
    __IO uint32_t MW_CTRL;              /* xSPI Microwire Control Register,                            Address offset: 0x0C  */
    __IO uint32_t SLAVE_EN;             /* xSPI Slave Enable Register,                                 Address offset: 0x10  */ 
    __IO uint32_t BAUD;                 /* xSPI Baud Rate Select Register,                             Address offset: 0x14  */
    __IO uint32_t TXFT;                 /* xSPI Transmit FIFO Threshold Level,                         Address offset: 0x18  */
    __IO uint32_t RXFT;                 /* xSPI Receive FIFO Threshold Level,                          Address offset: 0x1C  */
    __IO uint32_t TXFN;                 /* xSPI Transmit FIFO Level Register,                          Address offset: 0x20  */ 
    __IO uint32_t RXFN;                 /* xSPI Receive FIFO Level Register,                           Address offset: 0x24  */
    __IO uint32_t STS;                  /* xSPI Status Register,                                       Address offset: 0x28  */
    __IO uint32_t IMASK;                /* xSPI Interrupt Mask Register,                               Address offset: 0x2C  */
    __IO uint32_t ISTS;                 /* xSPI Interrupt Status Register,                             Address offset: 0x30  */
    __IO uint32_t RISTS;                /* xSPI Raw Interrupt Status Register,                         Address offset: 0x34  */
    __IO uint32_t TXEICR_CLR;           /* xSPI Transmit FIFO Error Interrupt Clear Registers,         Address offset: 0x38  */ 
    __IO uint32_t RXFOI_CLR;            /* xSPI Receive FIFO Overflow Interrupt Clear Register,        Address offset: 0x3C  */
    __IO uint32_t RXFUI_CLR;            /* xSPI Receive FIFO Underflow Interrupt Clear Register,       Address offset: 0x40  */
    __IO uint32_t MMCI_CLR;             /* xSPI Multi-Master Interrupt Clear Register,                 Address offset: 0x44  */
    __IO uint32_t ICLR;                 /* xSPI Interrupt Clear Register,                              Address offset: 0x48  */ 
    __IO uint32_t DMA_CTRL;             /* xSPI DMA Control Register,                                  Address offset: 0x4C  */
    __IO uint32_t DMATDL_CTRL;          /* xSPI DMA Transmit Data Level,                               Address offset: 0x50  */
    __IO uint32_t DMARDL_CTRL;          /* xSPI DMA Receive Data Level,                                Address offset: 0x54  */
    __IO uint32_t IDR;                  /* xSPI Identification Register,                               Address offset: 0x58  */
    __IO uint32_t VERSION_ID;           /* xSPI component version,                                     Address offset: 0x5C  */
    __IO uint32_t DAT0;                 /* xSPI Data Register 0,                                       Address offset: 0x60  */             
    __IO uint32_t DAT1;                 /* xSPI Data Register 1,                                       Address offset: 0x64  */
    __IO uint32_t DAT2;                 /* xSPI Data Register 2,                                       Address offset: 0x68  */
    __IO uint32_t DAT3;                 /* xSPI Data Register 3,                                       Address offset: 0x6C  */
    __IO uint32_t DAT4;                 /* xSPI Data Register 4,                                       Address offset: 0x70  */
    __IO uint32_t DAT5;                 /* xSPI Data Register 5,                                       Address offset: 0x74  */
    __IO uint32_t DAT6;                 /* xSPI Data Register 6,                                       Address offset: 0x78  */
    __IO uint32_t DAT7;                 /* xSPI Data Register 7,                                       Address offset: 0x7C  */
    __IO uint32_t DAT8;                 /* xSPI Data Register 8,                                       Address offset: 0x80  */
    __IO uint32_t DAT9;                 /* xSPI Data Register 9,                                       Address offset: 0x84  */
    __IO uint32_t DAT10;                /* xSPI Data Register 10,                                      Address offset: 0x88  */
    __IO uint32_t DAT11;                /* xSPI Data Register 11,                                      Address offset: 0x8C  */
    __IO uint32_t DAT12;                /* xSPI Data Register 12,                                      Address offset: 0x90  */
    __IO uint32_t DAT13;                /* xSPI Data Register 13,                                      Address offset: 0x94  */
    __IO uint32_t DAT14;                /* xSPI Data Register 14,                                      Address offset: 0x98  */
    __IO uint32_t DAT15;                /* xSPI Data Register 15,                                      Address offset: 0x9C  */
    __IO uint32_t DAT16;                /* xSPI Data Register 16,                                      Address offset: 0xA0  */
    __IO uint32_t DAT17;                /* xSPI Data Register 17,                                      Address offset: 0xA4  */
    __IO uint32_t DAT18;                /* xSPI Data Register 18,                                      Address offset: 0xA8  */
    __IO uint32_t DAT19;                /* xSPI Data Register 19,                                      Address offset: 0xAC  */
    __IO uint32_t DAT20;                /* xSPI Data Register 20,                                      Address offset: 0xB0  */
    __IO uint32_t DAT21;                /* xSPI Data Register 21,                                      Address offset: 0xB4  */
    __IO uint32_t DAT22;                /* xSPI Data Register 22,                                      Address offset: 0xB8  */
    __IO uint32_t DAT23;                /* xSPI Data Register 23,                                      Address offset: 0xBC  */
    __IO uint32_t DAT24;                /* xSPI Data Register 24,                                      Address offset: 0xC0  */
    __IO uint32_t DAT25;                /* xSPI Data Register 25,                                      Address offset: 0xC4  */
    __IO uint32_t DAT26;                /* xSPI Data Register 26,                                      Address offset: 0xC8  */
    __IO uint32_t DAT27;                /* xSPI Data Register 27,                                      Address offset: 0xCC  */
    __IO uint32_t DAT28;                /* xSPI Data Register 28,                                      Address offset: 0xD0  */
    __IO uint32_t DAT29;                /* xSPI Data Register 29,                                      Address offset: 0xD4  */
    __IO uint32_t DAT30;                /* xSPI Data Register 30,                                      Address offset: 0xD8  */
    __IO uint32_t DAT31;                /* xSPI Data Register 31,                                      Address offset: 0xDC  */
    __IO uint32_t DAT32;            /* xSPI Data Register 32,                                      Address offset: 0xE0  */
    __IO uint32_t DAT33;            /* xSPI Data Register 33,                                      Address offset: 0xE4  */
    __IO uint32_t DAT34;            /* xSPI Data Register 34,                                      Address offset: 0xE8  */
    __IO uint32_t DAT35;            /* xSPI Data Register 35,                                      Address offset: 0xEC  */
    __IO uint32_t RX_DELAY;             /* xSPI RX Sample Delay Register,                              Address offset: 0xF0  */
    __IO uint32_t ENH_CTRL0;            /* xSPI Control Register,                                      Address offset: 0xF4  */ 
    __IO uint32_t DDR_TXDE;             /* xSPI Transmit Drive Edge Register,                          Address offset: 0xF8  */ 
    __IO uint32_t XIP_MODE;             /* xSPI eXecute in Place - Mode bits,                          Address offset: 0xFC  */
    __IO uint32_t XIP_INCR_TOC;         /* xSPI XIP INCR transfer opcode,                              Address offset: 0x100 */ 
    __IO uint32_t XIP_WRAP_TOC;         /* xSPI XIP WRAP transfer opcode,                              Address offset: 0x104 */
    __IO uint32_t XIP_CTRL;             /* xSPI XIP Control Register,                                  Address offset: 0x108 */
    __IO uint32_t XIP_SLAVE_EN;         /* xSPI Slave Enable Register,                                 Address offset: 0x10C */
    __IO uint32_t XIP_RXFOI_CLR;        /* xSPI XIP Receive FIFO Overflow Interrupt Clear Register,    Address offset: 0x110 */ 
      __IO uint32_t XIP_TOUT;               /* xSPI XIP time out register for continuous transfers,        Address offset: 0x114 */
      __IO uint32_t RESERVED0[10];
        __IO uint32_t XIP_WRITE_INCR_INST;  /* xSPI XIP Write INCR transfer opcode,                        Address offset: 0x140 */
      __IO uint32_t XIP_WRITE_WRAP_INST;  /* xSPI XIP Write WRAP transfer opcode,                        Address offset: 0x144 */
      __IO uint32_t XIP_WRITE_CTRL;         /* xSPI XIP Write Control Register,                         Address offset: 0x148 */
    __IO uint32_t RESERVED1[13];
        __IO uint32_t XIP_WRITE_TIMING;     /* xSPI XIP Write Timing Register,                            Address offset: 0x180 */
      __IO uint32_t RXDS_DELAY_CTRL;      /* xSPI RXDS Delay line control,                               Address offset: 0x184 */
} XSPI_Module;



/*** DVP ***/
typedef struct
{
    __IO uint32_t CTRL;    /* DVP control register */
    __IO uint32_t INTEN;   /* DVP interrupt enable register */
    __IO uint32_t INTSTS;  /* DVP interrupt flag and status register */
    __IO uint32_t PORTCFG; /* DVP control port configuration register */
    __IO uint32_t FIFOCFG; /* DVP control fifo configuration register */
    __IO uint32_t SMADDR1; /* DVP frame 1 start memory address register */
    __IO uint32_t SMADDR2; /* DVP frame 2 start memory address register */
    __IO uint32_t FBS;     /* DVP frame buffer size register */
    __IO uint32_t FPBC1;   /* DVP frame 1 PIXEL byte count register */
    __IO uint32_t FPBC2;   /* DVP frame 2 PIXEL byte count register */
    __IO uint32_t CSXY;    /* DVP crop start XY register */
    __IO uint32_t CEXY;    /* DVP crop end XY register */
    __IO uint32_t EMSC;    /* DVP embedded sync code marker register */
    __IO uint32_t EMSCM;   /* DVP embedded sync code mask register */
} DVP_Module;

/** FMAC **/
typedef struct
{
    __IO uint32_t X1BUFCFG;     //0x00
    __IO uint32_t X2BUFCFG;     //0x04
    __IO uint32_t YBUFCFG;      //0x08
    __IO uint32_t PARAMCFG;     //0x0C
    __IO uint32_t CTRL;         //0x10
    __IO uint32_t STS;          //0x14
    __IO uint32_t WDAT;         //0x18
    __IO uint32_t RDAT;         //0x1C 
} FMAC_Module;  


/** CORDIC **/
typedef struct
{
    __IO uint32_t CTRLSTS;      //0x00
    __IO uint32_t WDAT;         //0x04
    __IO uint32_t RDAT;         //0x08
} CORDIC_Module;

/** DSMU module registers **/
typedef struct
{
  __IO uint32_t FLTCTRL1;       //0x00
  __IO uint32_t FLTCTRL2;       //0x04
  __IO uint32_t FLTSTS;         //0x08
  __IO uint32_t FLTINTCLR;      //0x0C
  __IO uint32_t FLTJCHG;        //0x10
  __IO uint32_t FLTFCTRL;       //0x14
  __IO uint32_t FLTJDATA;       //0x18
  __IO uint32_t FLTRDATA;       //0x1C
  __IO uint32_t FLTAWDHT;       //0x20
  __IO uint32_t FLTAWDLT;       //0x24
  __IO uint32_t FLTAWDSTS;      //0x28
  __IO uint32_t FLTAWDCLR;      //0x2C
  __IO uint32_t FLTEXDETMAX;    //0x30
  __IO uint32_t FLTEXDETMIN;    //0x34
  __IO uint32_t FLTCOVTIM;      //0x38
} DSMU_Filter_Submodule;

/** DSMU channel configuration registers **/
typedef struct
{
  __IO uint32_t CHCFG1;         //0x00
  __IO uint32_t CHCFG2;         //0x04
  __IO uint32_t CHAWDSCDET;     //0x08
  __IO uint32_t CHAWDDAT;       //0x0C
  __IO uint32_t CHDATIN;        //0x10
} DSMU_Channel_Submodule;


typedef struct
{
    __IO uint32_t MCTRL;    /* SHRTIM configuration register for master timer, address offset: 0x00 */
    __IO uint32_t MINTSTS;  /* SHRTIM status register for master timer interrupt, address offset: 0x04 */
    __IO uint32_t MINTCLR;  /* SHRTIM master timer interrupt clear register, address offset: 0x08 */
    __IO uint32_t MIDEN;    /* SHRTIM master timer interrupt and DMA request enable register, address offset: 0x0C */
    __IO uint32_t MCNT;     /* SHRTIM master timer counter register, address offset: 0x10 */
    __IO uint32_t MPRD;     /* SHRTIM master timer period register, address offset: 0x14 */
    __IO uint32_t MREPT;    /* SHRTIM master timer repetition register, address offset: 0x18 */
    __IO uint32_t MCMP1DAT; /* SHRTIM master timer compare 1 register, address offset: 0x1C */
    uint32_t      RESERVED0;/* Reserved, address offset: 0x20 */
    __IO uint32_t MCMP2DAT; /* SHRTIM master timer compare 2 register, address offset: 0x24 */
    __IO uint32_t MCMP3DAT; /* SHRTIM master timer compare 3 register, address offset: 0x28 */
    __IO uint32_t MCMP4DAT; /* SHRTIM master timer compare 4 register, address offset: 0x2C */
    __IO uint32_t SYNCOUT;   /* SHRTIM SYNCOUT configure register, address offset: 0x30 */
    __IO uint32_t FRZDIS;   /* SHRTIM Timer behavior during CPU freeze, address offset: 0x34 */
    uint32_t      RESERVED1[18];  /* Reserved, 0x30..0x7C */
}SHRTIM_Master_Submodule;

/* SHRTIM Timer A to F registers definition */
typedef struct
{
    __IO uint32_t TxCTRL;      /* SHRTIM timer x control register, address offset: 0x00 */
    __IO uint32_t TxINTSTS;    /* SHRTIM timer x interrupt status register, address offset: 0x04 */
    __IO uint32_t TxINTCLR;    /* SHRTIM timer x interrupt clear register, address offset: 0x08 */
    __IO uint32_t TxIDEN;      /* SHRTIM timer x interrupt DMA  enable register, address offset: 0x0C */
    __IO uint32_t TxCNT;       /* SHRTIM timer x counter register, address offset: 0x10 */
    __IO uint32_t TxPRD;       /* SHRTIM timer x period register, address offset: 0x14 */
    __IO uint32_t TxREPT;      /* SHRTIM timer x repetition register, address offset: 0x18 */
    __IO uint32_t TxCMP1DAT;   /* SHRTIM timer x compare 1 register, address offset: 0x1C */
    __IO uint32_t TxRCMP1DAT;  /* SHRTIM timer x compare 1 repetition alias register, address offset: 0x20 */
    __IO uint32_t TxCMP2DAT;   /* SHRTIM timer x compare 2 register, address offset: 0x24 */
    __IO uint32_t TxCMP3DAT;   /* SHRTIM timer x compare 3 register, address offset: 0x28 */
    __IO uint32_t TxCMP4DAT;   /* SHRTIM timer x compare 4 register, address offset: 0x2C */
    __IO uint32_t TxCPT1;      /* SHRTIM timer x compare 1 register, address offset: 0x30 */
    __IO uint32_t TxCPT2;      /* SHRTIM timer x compare 2 register, address offset: 0x34 */
    __IO uint32_t TxDT;        /* SHRTIM timer x deadtime register, address offset: 0x38 */
    __IO uint32_t TxSET1;      /* SHRTIM timer x set register 1, address offset: 0x3C */
    __IO uint32_t TxRST1;      /* SHRTIM timer x reset register 1, address offset: 0x40 */
    __IO uint32_t TxSET2;      /* SHRTIM timer x set register 2, address offset: 0x44 */
    __IO uint32_t TxRST2;      /* SHRTIM timer x reset register 2, address offset: 0x48 */
    __IO uint32_t TxEXEVFLT1;  /* SHRTIM timer x external event filtering register 1, address offset: 0x4C */
    __IO uint32_t TxEXEVFLT2;  /* SHRTIM timer x external event filtering register 1, address offset: 0x50 */
    __IO uint32_t TxCNTRST;    /* SHRTIM timer x reset, address offset: 0x54 */
    __IO uint32_t TxCHOP;      /* SHRTIM timer x chopper register, address offset: 0x58 */
    __IO uint32_t TxCPT1CTRL;  /* SHRTIM timer x capture 1 control register, address offset: 0x5C */
    __IO uint32_t TxCPT2CTRL;  /* SHRTIM timer x capture 2 control register, address offset: 0x60 */
    __IO uint32_t TxOUT;       /* SHRTIM timer x output register, address offset: 0x64 */
    __IO uint32_t TxFALT;      /* SHRTIM timer x fault register, address offset: 0x68 */
    __IO uint32_t TxCTRL2;     /* SHRTIM timer x control register 2, address offset: 0x6C */
    __IO uint32_t TxEXEVFLT3;  /* SHRTIM timer x external event filter register 3, address offset: 0x70 */
    __IO uint32_t TxCMP5DAT;   /* SHRTIM timer x compare 5 register, address offset: 0x74 */
    uint32_t RESERVED0[2];     /* Reserved, address offset:0x78...0x7c */
}SHRTIM_Timerx_Submodule;


/* SHRTIM common register definition */
typedef struct
{
    __IO uint32_t CTRL1;        /* SHRTIM control register 1, address offset: 0x00 */
    __IO uint32_t CTRL2;        /* SHRTIM control register 2, address offset: 0x04 */
    __IO uint32_t INTSTS;       /* SHRTIM interrupt status register, address offset: 0x08 */
    __IO uint32_t INTCLR;       /* SHRTIM interrupt clear register, address offset: 0x0C */
    __IO uint32_t INTEN;        /* SHRTIM interrupt enable register, address offset: 0x10 */
    __IO uint32_t OEN;        /* SHRTIM output channel enable register, address offset: 0x14 */
    __IO uint32_t ODIS;       /* SHRTIM output channel disable register, address offset: 0x18 */
    __IO uint32_t ODISSTS;    /* SHRTIM output channel disable status register, address offset: 0x1C */
    __IO uint32_t BMCTRL;       /* SHRTIM burst mode control register, address offset: 0x20 */
    __IO uint32_t BMTG;         /* SHRTIM burst mode trigger register, address offset: 0x24 */
    __IO uint32_t BMCMP;        /* SHRTIM burst mode compare register, address offset: 0x28 */
    __IO uint32_t BMPRD;        /* SHRTIM burst mode period register, address offset: 0x2C */
    __IO uint32_t EXEVCTRL1;    /* SHRTIM external event control register 1, address offset: 0x30 */
    __IO uint32_t EXEVCTRL2;    /* SHRTIM external event control register 2, address offset: 0x34 */
    __IO uint32_t EXEVCTRL3;    /* SHRTIM external event control register 4, address offset: 0x38 */
    __IO uint32_t EXEVCTRL4;    /* SHRTIM external event control register 3, address offset: 0x3C */
    __IO uint32_t ADTG1SRC1;  /* SHRTIM ADC trigger 1's source group1 register, address offset: 0x40 */
    __IO uint32_t ADTG1SRC2;  /* SHRTIM ADC trigger 1's source group2 register, address offset: 0x44 */
    __IO uint32_t ADTG2SRC1;  /* SHRTIM ADC trigger 2's source group1 register, address offset: 0x48 */
    __IO uint32_t ADTG2SRC2;  /* SHRTIM ADC trigger 2's source group2 register, address offset: 0x4C */
    __IO uint32_t ADTG3SRC1;  /* SHRTIM ADC trigger 3's source group1 register, address offset: 0x50 */
    __IO uint32_t ADTG3SRC2;  /* SHRTIM ADC trigger 3's source group2 register, address offset: 0x54 */
    __IO uint32_t ADTG4SRC1;  /* SHRTIM ADC trigger 4's source group1 register, address offset: 0x58 */
    __IO uint32_t ADTG4SRC2;  /* SHRTIM ADC trigger 4's source group2 register, address offset: 0x5C */
    __IO uint32_t FALTIN1;      /* SHRTIM fault input register 1, address offset: 0x60 */
    __IO uint32_t FALTIN2;      /* SHRTIM fault input register 2, address offset: 0x64 */
    __IO uint32_t FALTIN3;      /* SHRTIM fault input register 3, address offset: 0x68 */
    __IO uint32_t FALTIN4;      /* SHRTIM fault input register 4, address offset: 0x6C */
    __IO uint32_t BDMTUPD;      /* SHRTIM burst DMA master timer update register, address offset: 0x70 */
    __IO uint32_t BDTAUPD;      /* SHRTIM burst DMA timer A update register, address offset: 0x74 */
    __IO uint32_t BDTBUPD;      /* SHRTIM burst DMA timer B update register, address offset: 0x78 */
    __IO uint32_t BDTCUPD;      /* SHRTIM burst DMA timer C update register, address offset: 0x7C */
    __IO uint32_t BDTDUPD;      /* SHRTIM burst DMA timer D update register, address offset: 0x80 */
    __IO uint32_t BDTEUPD;      /* SHRTIM burst DMA timer E update register, address offset: 0x84 */
    __IO uint32_t BDTFUPD;      /* SHRTIM burst DMA timer F update register, address offset: 0x88 */
    __IO uint32_t BDDAT;        /* SHRTIM burst DMA data register, address offset: 0x8C */
    __IO uint32_t ADTRGEX1;     /* SHRTIM ADC extended trigger register 1, address offset: 0x90 */
    __IO uint32_t ADTRGEX2;     /* SHRTIM ADC extended trigger register 2, address offset: 0x94 */
    __IO uint32_t ADTRGUPD;     /* SHRTIM ADC trigger update register, address offset: 0x98 */
    __IO uint32_t ADCPSC1;      /* SHRTIM ADC post scaler register 1, address offset: 0x9C */
    __IO uint32_t ADCPSC2;      /* SHRTIM ADC post scaler register 2, address offset: 0xA0 */
    uint32_t RESERVED0;         /* address offset: 0xA4 */
    __IO uint32_t SFTFALT;      /* SHRTIM soft fault trigger register, address offset: 0xA8 */
    __IO uint32_t SFTDP;        /* SHRTIM soft  delayed protection trigger register, address offset: 0xAC */
    __IO uint32_t FALTIN5;      /* SHRTIM fault input register 5, address offset: 0xB0 */
    __IO uint32_t EXEVCTRL5;    /* SHRTIM external event control register 5, address offset: 0xB4 */
    __IO uint32_t EXTEND;       /* SHRTIM extend register: 0xB8 */
}SHRTIM_Common_Submodule;

/* SHRTIM  register definition */
typedef struct {
  SHRTIM_Master_Submodule sMasterRegs;
  SHRTIM_Timerx_Submodule sTimerxRegs[6];
  SHRTIM_Common_Submodule sCommonRegs;
}SHRTIM_Module;

/**
 * @brief Serial Peripheral Interface
 */

typedef struct
{
    __IO uint16_t CTRL1;            /* SPI Control Register 1,                       Address offset: 0x00 */ 
    uint16_t RESERVED0;
    __IO uint16_t CTRL2;            /* SPI Control Register 2,                       Address offset: 0x04 */  
    uint16_t RESERVED1;
    __IO uint16_t STS;              /* SPI Status Register,                          Address offset: 0x08 */
    uint16_t RESERVED2; 
    __IO uint16_t DAT;              /* SPI Data Register,                            Address offset: 0x0C */
    uint16_t RESERVED3;
    __IO uint16_t CRCTDAT;          /* SPI Transmit CRC Register,                    Address offset: 0x10 */
    uint16_t RESERVED4;
    __IO uint16_t CRCRDAT;          /* SPI Receive CRC Register,                     Address offset: 0x14 */
    uint16_t RESERVED5;  
    __IO uint16_t CRCPOLY;          /* SPI CRC Polynomial Register,                  Address offset: 0x18 */
    uint16_t RESERVED6;             
    __IO uint16_t SPI_I2S_CFGR;     /* SPI_I2S Configuration Register,               Address offset: 0x1C */ 
    uint16_t RESERVED7;             
    __IO uint16_t I2SPREDIV;        /* SPI_I2S Prescaler Register,                   Address offset: 0x20 */ 
    uint16_t RESERVED8;             
    __IO uint16_t RX_FIFO;          /* SPI Receive FIFO,                             Address offset: 0x24 */ 
    uint16_t RESERVED9;             
    __IO uint16_t FIFONUM;          /* SPI FIFO Configuration register,              Address offset: 0x28 */ 
    uint16_t RESERVED10;
    uint16_t RESERVED11;        /* SPI FIFO Configuration register,              Address offset: 0x2C */ 
    uint16_t RESERVED12;        
    __IO uint16_t FIFOCNT;          /* SPI FIFO Count Register,                      Address offset: 0x30 */
    uint16_t RESERVED13;  
    __IO uint16_t TRANSNUM;         /* SPI Transfer Number Configuration Register,   Address offset: 0x34 */
    uint16_t RESERVED14;
    __IO uint16_t CR3;              /* SPI RX Sample Delay Register,                 Address offset: 0x38 */
} SPI_Module;

/**
	* @brief I2S
	*/
typedef struct
{
		__IO uint16_t CR1;
		uint16_t  RESERVED0;
		__IO uint16_t CR2;
		uint16_t  RESERVED1;
		__IO uint16_t SR;
		uint16_t  RESERVED2;
		__IO uint16_t DR;
		uint16_t  RESERVED3;
		__IO uint16_t TXCRCR;
		uint16_t  RESERVED4;
		__IO uint16_t RXCRCR;
		uint16_t  RESERVED5;
		__IO uint16_t CRCPR;
		uint16_t  RESERVED6;
		__IO uint16_t I2SCFGR;
		uint16_t  RESERVED7;
		__IO uint16_t I2SPR;
		uint16_t  RESERVED8;
		__IO uint16_t RXFIFO;
		uint16_t  RESERVED9;
		__IO uint16_t FIFONUM;
		uint16_t  RESERVED10;
		uint32_t  RESERVED11;
		__IO uint16_t FIFOCNT;
		uint16_t  RESERVED12;
		__IO uint32_t TRANSNUM;
} I2S_Module;


typedef struct
{
    uint32_t RESERVED0; 
    __IO uint16_t I2S_CTRL2;        /* I2S_EXT Control Register,                     Address offset: 0x04 */  
    uint16_t RESERVED1;             
    __IO uint16_t I2S_STS;          /* I2S_EXT Status Register,                      Address offset: 0x08 */
    uint16_t RESERVED2;             
    __IO uint16_t I2S_DAT;          /* I2S_EXT Data Register,                        Address offset: 0x0C */ 
    uint16_t RESERVED3;             
    uint32_t RESERVED4;             
    uint32_t RESERVED5;             
    uint32_t RESERVED6;             
    __IO uint16_t I2S_CFGR;         /* I2S_EXT Configuration Register                Address offset: 0x1C */ 
    uint16_t RESERVED17; 

}I2S_EXT_Module; 
 



typedef struct
{
    __IO uint32_t STS;         //0x00
    __IO uint32_t INTEN;       //0x04
    __IO uint32_t CTRL;        //0x08
    __IO uint32_t BRCFG1;      //0x0C
    __IO uint32_t TXDAT;       //0x10
    __IO uint32_t BRCFG2;      //0x14
    __IO uint32_t WUDAT1;      //0x18
    __IO uint32_t WUDAT2;      //0x1C
    __IO uint32_t RXDAT;       //0x20
}LPUART_Module;

typedef struct
{
    __IO uint32_t CTRL1;       //0x00
    __IO uint32_t CTRL2;       //0x04
    __IO uint32_t EINJ;       //0x08
    __IO uint32_t INTFS;       //0x0C
    __IO uint32_t INTF1;       //0x10
    __IO uint32_t FEADR1;       //0x14
    __IO uint32_t FEDATL1;       //0x18
    __IO uint32_t FEDATH1;       //0x1C
    __IO uint32_t FECOD1;       //0x20
    __IO uint32_t INTF2;       //0x24
    __IO uint32_t FEADR2;       //0x28
    __IO uint32_t FEDATL2;       //0x2C
    __IO uint32_t FEDATH2;       //0x30
    __IO uint32_t FECOD2;       //0x34
    __IO uint32_t INTF3;       //0x38
    __IO uint32_t FEADR3;       //0x3C
    __IO uint32_t FEDATL3;       //0x40
    __IO uint32_t FEDATH3;       //0x44
    __IO uint32_t FECOD3;       //0x48
    __IO uint32_t INTF4;       //0x4C
    __IO uint32_t FEADR4;       //0x50
    __IO uint32_t FEDATL4;       //0x54
    __IO uint32_t FEDATH4;       //0x58
    __IO uint32_t FECOD4;       //0x5C
    __IO uint32_t INTF5;       //0x60
    __IO uint32_t FEADR5;       //0x64
    __IO uint32_t FEDATL5;       //0x68
    __IO uint32_t FEDATH5;       //0x6C
    __IO uint32_t FECOD5;       //0x70
    __IO uint32_t INTF6;       //0x74
    __IO uint32_t FEADR6;       //0x78
    __IO uint32_t FEDATL6;       //0x7C
    __IO uint32_t FEDATH6;       //0x80
    __IO uint32_t FECOD6;       //0x84
}ECCMON_TypeDef;

typedef struct
{
    __IO uint32_t CTRL;           //0x00
    __IO uint32_t STS;            //0x04
    __IO uint32_t KEY;            //0x08
    __IO uint32_t USC;            //0x0C
    __IO uint32_t ADDR;           //0x10
    __IO uint32_t RDATA;          //0x14
    __IO uint32_t WDATA;          //0x18
    __IO uint32_t RESERVED0;      //0x1c
    __IO uint32_t SECJVLD;        //0x20
    __IO uint32_t RESERVED1;      //0x24
    __IO uint32_t SECMDVLD;       //0x28
    __IO uint32_t RESERVED2;      //0x2c
    __IO uint32_t RDP2PVLD;       //0x30
    __IO uint32_t RESERVED3;      //0x34
    __IO uint32_t BTMVLD;         //0x38
    __IO uint32_t BORVLD;         //0x3c
    __IO uint32_t IWDGVLD;        //0x40
    __IO uint32_t TCMSZVLD;       //0x44
    __IO uint32_t RESERVED4[2];   //0x48
    __IO uint32_t JTAGKVLD;       //0x50
    __IO uint32_t REKU1VLD;       //0x54
    __IO uint32_t REKU2VLD;       //0x58
    __IO uint32_t REKU3VLD;       //0x5c
    __IO uint32_t REKU4VLD;       //0x60
    __IO uint32_t IDKU1VLD;       //0x64
    __IO uint32_t IDKU2VLD;       //0x68
    __IO uint32_t IDKU3VLD;       //0x6c
    __IO uint32_t IDKU4VLD;       //0x70
    __IO uint32_t UMUU0;          //0x74
    __IO uint32_t UMUU1;          //0x78
    __IO uint32_t UMUU2;          //0x7c
    __IO uint32_t UMUU3;          //0x80
    __IO uint32_t UMUU4;          //0x84
    __IO uint32_t UMUU5;          //0x88
    __IO uint32_t UMUU6;          //0x8c
    __IO uint32_t UMUU7;          //0x90
    __IO uint32_t RESERVED5[9];   //0x94
    __IO uint32_t CRLD1;          //0xb8
    __IO uint32_t CRLD2;          //0xbc
}OTPC_Module;

typedef struct
{
    __IO uint32_t CTRL;         //0x00
    __IO uint32_t STS;          //0x04
    __IO uint32_t RESERVED0[11];//0x08
    __IO uint32_t RTADC1;       //0x34
    __IO uint32_t RTADC2;       //0x38
    __IO uint32_t RTADC3;       //0x3C
    __IO uint32_t RTADC4;       //0x40
    __IO uint32_t RTK1P0;       //0x44
    __IO uint32_t RTK1P1;       //0x48
    __IO uint32_t RTK1P2;       //0x4C
    __IO uint32_t RTK1P3;       //0x50
    __IO uint32_t RTK2P0;       //0x54
    __IO uint32_t RTK2P1;       //0x58
    __IO uint32_t RTK2P2;       //0x5c
    __IO uint32_t RTK2P3;       //0x60
    __IO uint32_t RTK3P0;       //0x64
    __IO uint32_t RTK3P1;       //0x68
    __IO uint32_t RTK3P2;       //0x6c
    __IO uint32_t RTK3P3;       //0x70
    __IO uint32_t RTK4P0;       //0x74
    __IO uint32_t RTK4P1;       //0x78
    __IO uint32_t RTK4P2;       //0x7c
    __IO uint32_t RTK4P3;       //0x80
    __IO uint32_t RTR1;         //0x84
    __IO uint32_t RTR2;         //0x88
    __IO uint32_t RTR3;         //0x8c
    __IO uint32_t RTR4;         //0x90
    __IO uint32_t RESERVED1[9]; //0x94
    __IO uint32_t RTCRC;        //0xb8
    __IO uint32_t RESERVED2[28];//0xbc
    __IO uint32_t ETH1ME;       //0x12c
    __IO uint32_t ETH2ME;       //0x130
    __IO uint32_t USB1ME;       //0x134
    __IO uint32_t USB2ME;       //0x138
    __IO uint32_t SD1ME;        //0x13c
    __IO uint32_t SD2ME;        //0x140
    __IO uint32_t DVP1ME;       //0x144
    __IO uint32_t DVP2ME;       //0x148
    __IO uint32_t DMA1ME;       //0x14c
    __IO uint32_t DMA2ME;       //0x150
    __IO uint32_t DMA3ME;       //0x154
    __IO uint32_t MDMAME;       //0x158
    __IO uint32_t JPEGME;       //0x15c
    __IO uint32_t LCDME;        //0x160
    __IO uint32_t GPUME;        //0x164
    __IO uint32_t SDPUME;       //0x168
    __IO uint32_t RESERVED3;    //0x16c
    __IO uint32_t XRD;          //0x170
    __IO uint32_t RESERVED4;    //0x174
    __IO uint32_t XRAD;         //0x178
    __IO uint32_t X1WD;         //0x17c
    __IO uint32_t X1RD;         //0x180
    __IO uint32_t X1WAD;        //0x184
    __IO uint32_t X1RAD;        //0x188
    __IO uint32_t X2WD;         //0x18c
    __IO uint32_t X2RD;         //0x190
    __IO uint32_t X2WAD;        //0x194
    __IO uint32_t X2RAD;        //0x198
    __IO uint32_t X3WD;         //0x19c
    __IO uint32_t X3RD;         //0x1A0
    __IO uint32_t X3WAD;        //0x1A4
    __IO uint32_t X3RAD;        //0x1A8
    __IO uint32_t RESERVED5[25];//0x1AC
    __IO uint32_t H1WD;         //0x210
    __IO uint32_t H1RD;         //0x214
    __IO uint32_t H1WAD;        //0x218
    __IO uint32_t H1RAD;        //0x21c
    __IO uint32_t H2WD;         //0x220
    __IO uint32_t H2RD;         //0x224
    __IO uint32_t H2WAD;        //0x228
    __IO uint32_t H2RAD;        //0x22c
    __IO uint32_t H3WD;         //0x230
    __IO uint32_t H3RD;         //0x234
    __IO uint32_t H3WAD;        //0x238
    __IO uint32_t H3RAD;        //0x23c
    __IO uint32_t H4WD;         //0x240
    __IO uint32_t H4RD;         //0x244
    __IO uint32_t H4WAD;        //0x248
    __IO uint32_t H4RAD;        //0x24c
    __IO uint32_t H5WD;         //0x250
    __IO uint32_t H5RD;         //0x254
    __IO uint32_t H5WAD;        //0x258
    __IO uint32_t H5RAD;        //0x25c
    __IO uint32_t BKWD;         //0x260
    __IO uint32_t BKRD;         //0x264
    __IO uint32_t BKWAD;        //0x268
    __IO uint32_t BKRAD;        //0x26c
    __IO uint32_t ITWD;         //0x270
    __IO uint32_t ITRD;         //0x274
    __IO uint32_t ITWAD;        //0x278
    __IO uint32_t ITRAD;        //0x27c
}MMU_Module;

typedef struct
{
    uint32_t      RESERVED0[32];
    __IO uint32_t BADD1;           // 0x80   
    __IO uint32_t ADDMASK1;        // 0x84
    __IO uint32_t BADD2;           // 0x88
    __IO uint32_t ADDMASK2;        // 0x8C
    uint32_t      RESERVED1[4];
    __IO uint32_t CFG1;            // 0xA0
    __IO uint32_t CFG2;            // 0xA4
    uint32_t      RESERVED2[2];
    __IO uint32_t RAT;             // 0xB0
    __IO uint32_t RCT;             // 0xB4
    __IO uint32_t RRDLY;           // 0xB8
    __IO uint32_t PT;              // 0xBC
    __IO uint32_t WRT;             // 0xC0
    __IO uint32_t RFCT;            // 0xC4
    __IO uint32_t RCDLY;           // 0xC8
    __IO uint32_t RI;              // 0xCC
    uint32_t      RESERVED3[4];
    __IO uint32_t CBO;             // 0xE0
    __IO uint32_t OR;              // 0xE4
    __IO uint32_t OS;              // 0xE8
    uint32_t      RESERVED4[1];
    __IO uint32_t IINFO;           // 0xF0
    uint32_t      RESERVED5[3];
    __IO uint32_t WP;              // 0x100
} SDRAM_Module;

/**
* @brief AFEC
*/
typedef struct
{
    __IO uint32_t TRIMR0;
    __IO uint32_t TRIMR1;
    __IO uint32_t TRIMR2;
    __IO uint32_t TRIMR3;
    __IO uint32_t TRIMR4;
    __IO uint32_t TRIMR5;
    __IO uint32_t TRIMR6;
    __IO uint32_t TRIMR7;
    __IO uint32_t TRIMR8;
    __IO uint32_t TRIMR9;
    __IO uint32_t TRIMR10;
    __IO uint32_t TRIMR11;
    __IO uint32_t TRIMR12;
    __IO uint32_t TESTR0;
    __IO uint32_t TESTR1;
    __IO uint32_t TESTR2;
    __IO uint32_t TESTR3;
    __IO uint32_t TESTR4;
    __IO uint32_t TESTR5;
    __IO uint32_t TESTR6;
    __IO uint32_t TESTR7;
    __IO uint32_t TESTR8;
    __IO uint32_t TESTR9;
    __IO uint32_t TESTR10;
    __IO uint32_t TESTR11;
    __IO uint32_t TESTR12;
    __IO uint32_t TESTR13;
    __IO uint32_t TESTR14;
    __IO uint32_t TESTR15;
    __IO uint32_t TESTR16;
    __IO uint32_t TESTR17;
    __IO uint32_t TESTR18;
    __IO uint32_t TESTR19;
    __IO uint32_t TESTR20;
    __IO uint32_t TESTR21;
    __IO uint32_t TESTR22;
    __IO uint32_t TESTR23;
    __IO uint32_t TESTR24;
    __IO uint32_t TESTR25;
    __IO uint32_t TESTR26;
    __IO uint32_t TESTR27;
    __IO uint32_t TESTR28;
    __IO uint32_t TESTR29;
    __IO uint32_t TESTR30;
    __IO uint32_t TESTR31;
    __IO uint32_t TESTR32;
    __IO uint32_t TESTR33;
    __IO uint32_t TESTR34;
    __IO uint32_t TESTR35;
    __IO uint32_t TESTR36;
    __IO uint32_t TESTR37;
    __IO uint32_t TESTR38;
    __IO uint32_t TESTR39;
    __IO uint32_t TESTR40;
    __IO uint32_t TESTR41;
    __IO uint32_t TESTR42;
    __IO uint32_t TESTR43;
    __IO uint32_t TESTR44;
    __IO uint32_t TRIMR13;
    __IO uint32_t TRIMR14;
    __IO uint32_t TESTR45;
} AFEC_TypeDef;

#define FLASH_BASE            ((uint32_t)0x15000000UL) /*!< FLASH base address in the alias region */
#define SRAM_BASE             ((uint32_t)0x24000000UL) /*!< AXI SRAM base address in the alias region */
#define DTCM_BASE             ((uint32_t)0x20000000UL) /*!< DTCM base address in the alias region */
#define ITCM_BASE             ((uint32_t)0x00000000UL) /*!< ITCM base address in the alias region */
#define AHBSRAM_BASE          ((uint32_t)0x30000000UL) /*!< AHB SRAM base address in the alias region */
#define PERIPH_BASE           ((uint32_t)0x40000000UL) /*!< Peripheral base address in the alias region */

#define SRAM_BB_BASE          ((uint32_t)0x22000000) /*!< SRAM base address in the bit-band region */
#define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band region */

#define UCID_BASE             ((uint32_t)0x1FFFC238U) /* UCID Address : 0x1FFF_F238 */
#define UCID_LENGTH           ((uint32_t)0x10U)       /* UCID Length  : 16Bytes */
// #define UID_BASE              ((uint32_t)0x1FFFC760U) /* UID Address  : 0x1FFF_C760 */
// #define UID_LENGTH            ((uint32_t)0x0CU)       /* UID Length   : 12Bytes */
#define DBGMCU_ID_BASE        ((uint32_t)0x1FFFF248U) /* DBGMCU_ID Address: 0x1FFF_F248 */
#define DBGMCU_ID_LENGTH      ((uint32_t)0x04U)       /* DBGMCU_ID Length : 4 Bytes */

    /*!< Peripheral memory map */
#define APB1PERIPH_BASE       (PERIPH_BASE)
#define AHB1PERIPH_BASE       (PERIPH_BASE + 0x40000)
#define AHB9PERIPH_BASE       (PERIPH_BASE + 0xB0000)
#define APB2PERIPH_BASE       (PERIPH_BASE + 0xD0000)
#define AHB2PERIPH_BASE       (PERIPH_BASE + 0xF0000)
#define APB6PERIPH_BASE       (PERIPH_BASE + 0x10000000)
#define AHB6PERIPH_BASE       (PERIPH_BASE + 0x11000000)
#define APB5PERIPH_BASE       (PERIPH_BASE + 0x18000000)
#define AHB5PERIPH_BASE       (PERIPH_BASE + 0x18030000)

    /* APB1 */
#define BTIM4_BASE          (APB1PERIPH_BASE + 0x10C00)
#define BTIM3_BASE          (APB1PERIPH_BASE + 0x10800)
#define WWDG2_BASE            (APB1PERIPH_BASE + 0x10000)
#define DAC12_BASE            (APB1PERIPH_BASE + 0xFC00)
#define I2S4EXT_BASE          (APB1PERIPH_BASE + 0xFA00)
#define I2S3EXT_BASE          (APB1PERIPH_BASE + 0xF600)
#define I2S4_BASE             (APB1PERIPH_BASE + 0xF800)
#define I2S3_BASE             (APB1PERIPH_BASE + 0xF400)
#define I2C3_BASE             (APB1PERIPH_BASE + 0xF000)
#define I2C2_BASE             (APB1PERIPH_BASE + 0xEC00)
#define I2C1_BASE             (APB1PERIPH_BASE + 0xE800)
#define SPI3_BASE             (APB1PERIPH_BASE + 0xE400)
#define UART12_BASE           (APB1PERIPH_BASE + 0xE000)
#define UART11_BASE           (APB1PERIPH_BASE + 0xDC00)
#define UART10_BASE           (APB1PERIPH_BASE + 0xD800)
#define UART9_BASE            (APB1PERIPH_BASE + 0xD400)
#define USART4_BASE           (APB1PERIPH_BASE + 0xD000)
#define USART3_BASE           (APB1PERIPH_BASE + 0xCC00)
#define USART2_BASE           (APB1PERIPH_BASE + 0xC800)
#define USART1_BASE           (APB1PERIPH_BASE + 0xC400)
#define GTIMA7_BASE          (APB1PERIPH_BASE + 0xC000)
#define GTIMA6_BASE          (APB1PERIPH_BASE + 0xBC00)
#define GTIMA5_BASE          (APB1PERIPH_BASE + 0xB800)
#define GTIMA4_BASE          (APB1PERIPH_BASE + 0xB400)
#define GTIMB1_BASE         (APB1PERIPH_BASE + 0xA800)
#define GTIMB2_BASE          (APB1PERIPH_BASE + 0xAC00)
#define GTIMB3_BASE          (APB1PERIPH_BASE + 0xB000)
#define BTIM2_BASE          (APB1PERIPH_BASE + 0xA400)
#define BTIM1_BASE          (APB1PERIPH_BASE + 0xA000)
#define AHBdCache_BASE        (APB1PERIPH_BASE + 0x9000)
#define AHBiCache_BASE        (APB1PERIPH_BASE + 0x8000)
#define FDCAN6_BASE           (APB1PERIPH_BASE + 0xC00)
#define FDCAN5_BASE           (APB1PERIPH_BASE + 0x800)
#define FDCAN2_BASE           (APB1PERIPH_BASE + 0x400)
#define FDCAN1_BASE           (APB1PERIPH_BASE)


    /* APB2 */
#define UART15_BASE           (APB2PERIPH_BASE + 0xF800)
#define UART14_BASE           (APB2PERIPH_BASE + 0xF400)
#define UART13_BASE           (APB2PERIPH_BASE + 0xF000)
#define USART8_BASE           (APB2PERIPH_BASE + 0xEC00)
#define USART7_BASE           (APB2PERIPH_BASE + 0xE800)
#define USART6_BASE           (APB2PERIPH_BASE + 0xE400)
#define USART5_BASE           (APB2PERIPH_BASE + 0xE000)
#define I2C6_BASE             (APB2PERIPH_BASE + 0xDC00)
#define I2C5_BASE             (APB2PERIPH_BASE + 0xD800)
#define I2C4_BASE             (APB2PERIPH_BASE + 0xD400)
#define GTIMA3_BASE          (APB2PERIPH_BASE + 0xD000)
#define GTIMA2_BASE          (APB2PERIPH_BASE + 0xCC00)
#define GTIMA1_BASE          (APB2PERIPH_BASE + 0xC800)
#define SPI2_BASE             (APB2PERIPH_BASE + 0xC400)
#define SPI1_BASE             (APB2PERIPH_BASE + 0xC000)
#define I2S2_BASE             (APB2PERIPH_BASE + 0xBC00)
#define I2S1_BASE             (APB2PERIPH_BASE + 0xB800)
#define I2S2EXT_BASE          (APB2PERIPH_BASE + 0xBE00)
#define I2S1EXT_BASE          (APB2PERIPH_BASE + 0xBA00) 

#define ATIM2_BASE          (APB2PERIPH_BASE + 0xB400)
#define ATIM1_BASE          (APB2PERIPH_BASE + 0xB000)
#define DSMU_BASE             (APB2PERIPH_BASE + 0xA000)
#define DSMU_Channel0_BASE    (DSMU_BASE + 0x00UL)
#define DSMU_Channel1_BASE    (DSMU_BASE + 0x20UL)
#define DSMU_Channel2_BASE    (DSMU_BASE + 0x40UL)
#define DSMU_Channel3_BASE    (DSMU_BASE + 0x60UL)
#define DSMU_Channel4_BASE    (DSMU_BASE + 0x80UL)
#define DSMU_Channel5_BASE    (DSMU_BASE + 0xA0UL)
#define DSMU_Channel6_BASE    (DSMU_BASE + 0xC0UL)
#define DSMU_Channel7_BASE    (DSMU_BASE + 0xE0UL)
#define DSMU_Filter0_BASE     (DSMU_BASE + 0x100UL)
#define DSMU_Filter1_BASE     (DSMU_BASE + 0x180UL)
#define DSMU_Filter2_BASE     (DSMU_BASE + 0x200UL)
#define DSMU_Filter3_BASE     (DSMU_BASE + 0x280UL)

#define SHRTIM2_BASE          (APB2PERIPH_BASE + 0x9000)
#define SHRTIM1_BASE          (APB2PERIPH_BASE + 0x8000)
#define FDCAN8_BASE           (APB2PERIPH_BASE + 0x0C00)
#define FDCAN7_BASE           (APB2PERIPH_BASE + 0x0800)
#define FDCAN4_BASE           (APB2PERIPH_BASE + 0x0400)
#define FDCAN3_BASE           (APB2PERIPH_BASE)

    /* APB5 */
#define LPTIM5_BASE           (APB5PERIPH_BASE + 0x5800)
#define RTC_BASE              (APB5PERIPH_BASE + 0x5400)
#define IWDG2_BASE            (APB5PERIPH_BASE + 0x5000)
#define IWDG1_BASE            (APB5PERIPH_BASE + 0x4C00)
#define COMP_BASE             (APB5PERIPH_BASE + 0x4800)
#define ATIM4_BASE            (APB5PERIPH_BASE + 0x4400)
#define ATIM3_BASE            (APB5PERIPH_BASE + 0x4000)
#define I2C10_BASE            (APB5PERIPH_BASE + 0x3C00)
#define I2C9_BASE             (APB5PERIPH_BASE + 0x3800)
#define I2C8_BASE             (APB5PERIPH_BASE + 0x3400)
#define I2C7_BASE             (APB5PERIPH_BASE + 0x3000)
#define SPI7_BASE             (APB5PERIPH_BASE + 0x2C00)
#define SPI6_BASE             (APB5PERIPH_BASE + 0x2800)
#define SPI5_BASE             (APB5PERIPH_BASE + 0x2400)
#define SPI4_BASE             (APB5PERIPH_BASE + 0x2000)
#define LPTIM4_BASE           (APB5PERIPH_BASE + 0x1C00)
#define LPTIM3_BASE           (APB5PERIPH_BASE + 0x1800)
#define LPTIM2_BASE           (APB5PERIPH_BASE + 0x1400)
#define LPTIM1_BASE           (APB5PERIPH_BASE + 0x1000)
#define LPUART2_BASE          (APB5PERIPH_BASE + 0x0C00)
#define LPUART1_BASE          (APB5PERIPH_BASE + 0x0800)
#define AFEC_BASE             (APB5PERIPH_BASE + 0x0400)
#define EXTI_BASE             (APB5PERIPH_BASE)

    /* APB6 */
#define JPEG_CTRL_BASE        (APB6PERIPH_BASE + 0x90800)
#define JPEG_SGDMA_P2H_BASE   (APB6PERIPH_BASE + 0x90400)
#define JPEG_BRC_BASE         (APB6PERIPH_BASE + 0x90000)
#define JPEG_DEC_BASE         (APB6PERIPH_BASE + 0x80000)
#define JPEG_SGDMA_H2P_BASE   (APB6PERIPH_BASE + 0x70400)
#define JPEG_RBC_BASE         (APB6PERIPH_BASE + 0x70000)
#define JPEG_ENC_BASE         (APB6PERIPH_BASE + 0x60000)
#define FEMC_BASE             (APB6PERIPH_BASE + 0x4C000)
#define TCMSRAMC_BASE         (APB6PERIPH_BASE + 0x4B000)
#define DSI_HOST_WRAPPER_BASE (APB6PERIPH_BASE + 0x4AC00)
#define WWDG1_BASE            (APB6PERIPH_BASE + 0x4A800)
#define LCDC_BASE             (APB6PERIPH_BASE + 0x4A000)
#define LCDC_Layer1_BASE      (LCDC_BASE + 0x100)   
#define LCDC_Layer2_BASE      (LCDC_BASE + 0x200)   
#define LCDC_Layer3_BASE      (LCDC_BASE + 0x300)   
#define LCDC_Layer4_BASE      (LCDC_BASE + 0x400)
#define DVP2_BASE             (APB6PERIPH_BASE + 0x49000)
#define DVP1_BASE             (APB6PERIPH_BASE + 0x48000)
#define GPU_BASE              (APB6PERIPH_BASE + 0x40000)
#define DSI_HOST_BASE         (APB6PERIPH_BASE)

    /* AHB1 */
#define USB_CTRL2_WRAPPER_BASE (AHB1PERIPH_BASE + 0x60000)
#define USB_CTRL2_BASE        (AHB1PERIPH_BASE + 0x20000)
#define SDHOST2_BASE          (AHB1PERIPH_BASE + 0x10000)
#define SDMMC2_BASE           (AHB1PERIPH_BASE + 0xA000)
#define DMA3_BASE             (AHB1PERIPH_BASE + 0x7000)
#define DMA2_BASE             (AHB1PERIPH_BASE + 0x6C00)
#define DMA1_BASE             (AHB1PERIPH_BASE + 0x6800)
#define DMAMUX1_BASE          (AHB1PERIPH_BASE + 0x6400)
#define ECCMON_AHB_CACHE_BASE (AHB1PERIPH_BASE + 0x5000)
#define ADC1_BASE             (AHB1PERIPH_BASE + 0x4000)
#define ADC2_BASE             (AHB1PERIPH_BASE + 0x4400)
#define ADC3_BASE             (AHB1PERIPH_BASE + 0x4800)
#define ETH2_BASE             (AHB1PERIPH_BASE + 0x2000)

    /* AHB2 */
#define USB_CTRL1_WRAPPER_BASE (AHB1PERIPH_BASE + 0x50000)
#define USB_CTRL1_BASE        (AHB1PERIPH_BASE + 0x10000)
#define DCMUB_CM4_BASE        (AHB2PERIPH_BASE + 0x8000)
#define DCMUA_CM7_BASE        (AHB2PERIPH_BASE + 0x7000)
#define SEMA4_BASE            (AHB2PERIPH_BASE + 0x6000)
#define ETH1_BASE             (AHB2PERIPH_BASE + 0x4000)
#define SDPU_BASE             (AHB2PERIPH_BASE + 0x2000)
#define DAC56_BASE            (AHB2PERIPH_BASE + 0x1C00)
#define DAC34_BASE            (AHB2PERIPH_BASE + 0x1800)
#define FMAC_BASE             (AHB2PERIPH_BASE + 0x1400)
#define CORDIC_BASE           (AHB2PERIPH_BASE + 0x1000)
#define ECCMON2_BASE          (AHB2PERIPH_BASE )

/* AHB5 */
#define ECCMON3_BASE          (AHB5PERIPH_BASE + 0x6000)
#define DBGMCU_BASE           (AHB5PERIPH_BASE + 0x5400)
#define GPIOK_BASE            (AHB5PERIPH_BASE + 0x5000)
#define GPIOJ_BASE            (AHB5PERIPH_BASE + 0x4C00)
#define GPIOI_BASE            (AHB5PERIPH_BASE + 0x4800)
#define GPIOH_BASE            (AHB5PERIPH_BASE + 0x4400)
#define GPIOG_BASE            (AHB5PERIPH_BASE + 0x4000)
#define GPIOF_BASE            (AHB5PERIPH_BASE + 0x3C00)
#define GPIOE_BASE            (AHB5PERIPH_BASE + 0x3800)
#define GPIOD_BASE            (AHB5PERIPH_BASE + 0x3400)
#define GPIOC_BASE            (AHB5PERIPH_BASE + 0x3000)
#define GPIOB_BASE            (AHB5PERIPH_BASE + 0x2C00)
#define GPIOA_BASE            (AHB5PERIPH_BASE + 0x2800)
#define AFIO_BASE             (AHB5PERIPH_BASE + 0x2400)
#define CRC_BASE              (AHB5PERIPH_BASE + 0x2000)
#define PWR_BASE              (AHB5PERIPH_BASE + 0x1000)
#define RCC_BASE              (AHB5PERIPH_BASE)

/* AHB6 */
#define MDMA_WRAPPER_BASE     (AHB6PERIPH_BASE + 0x120800)
#define DMAMUX2_MDMA_BASE     (AHB6PERIPH_BASE + 0x120000)
#define OTPC_BASE             (AHB6PERIPH_BASE + 0x118000)
#define SDHOST1_BASE          (AHB6PERIPH_BASE + 0x110000)
#define SDMMC1_BASE           (AHB6PERIPH_BASE + 0x107000)
#define SDRAM_BASE            (AHB6PERIPH_BASE + 0x106000)
#define MMU_BASE              (AHB6PERIPH_BASE + 0x105000)
#define ECCMON1P1_BASE        (AHB6PERIPH_BASE + 0x104000)
#define ECCMON1P2_BASE        (AHB6PERIPH_BASE + 0x104400)
#define ECCMON1P3_BASE        (AHB6PERIPH_BASE + 0x104800)
#define ECCMON1P4_BASE        (AHB6PERIPH_BASE + 0x104c00)
#define MDMA_BASE             (AHB6PERIPH_BASE + 0x102000)
#define xSPI2_BASE            (AHB6PERIPH_BASE + 0x101000)
#define xSPI1_BASE            (AHB6PERIPH_BASE + 0x100000)
#define GPV_BASE              (AHB6PERIPH_BASE)

/*AHB9*/
#define ETHERCAT_WRAPPER_BASE  (AHB9PERIPH_BASE + 0x10000)
#define ETHERCAT_BASE          (AHB9PERIPH_BASE)


#define DMA1_CH0_BASE                 ( DMA1_BASE +0*0x58)
#define DMA1_CH1_BASE                 ( DMA1_BASE +1*0x58)
#define DMA1_CH2_BASE                 ( DMA1_BASE +2*0x58)
#define DMA1_CH3_BASE                 ( DMA1_BASE +3*0x58)
#define DMA1_CH4_BASE                 ( DMA1_BASE +4*0x58)
#define DMA1_CH5_BASE                 ( DMA1_BASE +5*0x58)
#define DMA1_CH6_BASE                 ( DMA1_BASE +6*0x58)
#define DMA1_CH7_BASE                 ( DMA1_BASE +7*0x58)

#define DMA2_CH0_BASE                 ( DMA2_BASE +0*0x58)
#define DMA2_CH1_BASE                 ( DMA2_BASE +1*0x58)
#define DMA2_CH2_BASE                 ( DMA2_BASE +2*0x58)
#define DMA2_CH3_BASE                 ( DMA2_BASE +3*0x58)
#define DMA2_CH4_BASE                 ( DMA2_BASE +4*0x58)
#define DMA2_CH5_BASE                 ( DMA2_BASE +5*0x58)
#define DMA2_CH6_BASE                 ( DMA2_BASE +6*0x58)
#define DMA2_CH7_BASE                 ( DMA2_BASE +7*0x58)

#define DMA3_CH0_BASE                 ( DMA3_BASE +0*0x58)
#define DMA3_CH1_BASE                 ( DMA3_BASE +1*0x58)
#define DMA3_CH2_BASE                 ( DMA3_BASE +2*0x58)
#define DMA3_CH3_BASE                 ( DMA3_BASE +3*0x58)
#define DMA3_CH4_BASE                 ( DMA3_BASE +4*0x58)
#define DMA3_CH5_BASE                 ( DMA3_BASE +5*0x58)
#define DMA3_CH6_BASE                 ( DMA3_BASE +6*0x58)
#define DMA3_CH7_BASE                 ( DMA3_BASE +7*0x58)

/** MDMA channel register base address: 0x0100 + 0x100 * n (n = 0 to 15) **/
#define MDMA_CH0_BASE                 ( MDMA_BASE +1*0x100)
#define MDMA_CH1_BASE                 ( MDMA_BASE +2*0x100)
#define MDMA_CH2_BASE                 ( MDMA_BASE +3*0x100)
#define MDMA_CH3_BASE                 ( MDMA_BASE +4*0x100)
#define MDMA_CH4_BASE                 ( MDMA_BASE +5*0x100)
#define MDMA_CH5_BASE                 ( MDMA_BASE +6*0x100)
#define MDMA_CH6_BASE                 ( MDMA_BASE +7*0x100)
#define MDMA_CH7_BASE                 ( MDMA_BASE +8*0x100)
#define MDMA_CH8_BASE                 ( MDMA_BASE +9*0x100)
#define MDMA_CH9_BASE                 ( MDMA_BASE +10*0x100)
#define MDMA_CH10_BASE                ( MDMA_BASE +11*0x100)
#define MDMA_CH11_BASE                ( MDMA_BASE +12*0x100)
#define MDMA_CH12_BASE                ( MDMA_BASE +13*0x100)
#define MDMA_CH13_BASE                ( MDMA_BASE +14*0x100)
#define MDMA_CH14_BASE                ( MDMA_BASE +15*0x100)
#define MDMA_CH15_BASE                ( MDMA_BASE +16*0x100)


//somema TBD
#define DMAMUX1_Channel0_BASE    (DMAMUX1_BASE + 0x0000UL)
#define DMAMUX1_Channel1_BASE    (DMAMUX1_BASE + 0x0004UL)
#define DMAMUX1_Channel2_BASE    (DMAMUX1_BASE + 0x0008UL)
#define DMAMUX1_Channel3_BASE    (DMAMUX1_BASE + 0x000CUL)
#define DMAMUX1_Channel4_BASE    (DMAMUX1_BASE + 0x0010UL)
#define DMAMUX1_Channel5_BASE    (DMAMUX1_BASE + 0x0014UL)
#define DMAMUX1_Channel6_BASE    (DMAMUX1_BASE + 0x0018UL)
#define DMAMUX1_Channel7_BASE    (DMAMUX1_BASE + 0x001CUL)
#define DMAMUX1_Channel8_BASE    (DMAMUX1_BASE + 0x0020UL)
#define DMAMUX1_Channel9_BASE    (DMAMUX1_BASE + 0x0024UL)
#define DMAMUX1_Channel10_BASE   (DMAMUX1_BASE + 0x0028UL)
#define DMAMUX1_Channel11_BASE   (DMAMUX1_BASE + 0x002CUL)
#define DMAMUX1_Channel12_BASE   (DMAMUX1_BASE + 0x0030UL)
#define DMAMUX1_Channel13_BASE   (DMAMUX1_BASE + 0x0034UL)
#define DMAMUX1_Channel14_BASE   (DMAMUX1_BASE + 0x0038UL)
#define DMAMUX1_Channel15_BASE   (DMAMUX1_BASE + 0x003CUL)
#define DMAMUX1_Channel16_BASE   (DMAMUX1_BASE + 0x0040UL)
#define DMAMUX1_Channel17_BASE   (DMAMUX1_BASE + 0x0044UL)
#define DMAMUX1_Channel18_BASE   (DMAMUX1_BASE + 0x0048UL)
#define DMAMUX1_Channel19_BASE   (DMAMUX1_BASE + 0x004CUL)
#define DMAMUX1_Channel20_BASE   (DMAMUX1_BASE + 0x0050UL)
#define DMAMUX1_Channel21_BASE   (DMAMUX1_BASE + 0x0044UL)
#define DMAMUX1_Channel22_BASE   (DMAMUX1_BASE + 0x0058UL)
#define DMAMUX1_Channel23_BASE   (DMAMUX1_BASE + 0x005CUL)

#define DMAMUX1_RequestGenerator0_BASE   (DMAMUX1_BASE + 0x0100UL)
#define DMAMUX1_RequestGenerator1_BASE   (DMAMUX1_BASE + 0x0104UL)
#define DMAMUX1_RequestGenerator2_BASE   (DMAMUX1_BASE + 0x0108UL)
#define DMAMUX1_RequestGenerator3_BASE   (DMAMUX1_BASE + 0x010CUL)
#define DMAMUX1_RequestGenerator4_BASE   (DMAMUX1_BASE + 0x0110UL)
#define DMAMUX1_RequestGenerator5_BASE   (DMAMUX1_BASE + 0x0114UL)
#define DMAMUX1_RequestGenerator6_BASE   (DMAMUX1_BASE + 0x0118UL)
#define DMAMUX1_RequestGenerator7_BASE   (DMAMUX1_BASE + 0x011CUL)
#define DMAMUX1_RequestGenerator8_BASE   (DMAMUX1_BASE + 0x0120UL)
#define DMAMUX1_RequestGenerator9_BASE   (DMAMUX1_BASE + 0x0124UL)
#define DMAMUX1_RequestGenerator10_BASE  (DMAMUX1_BASE + 0x0128UL)
#define DMAMUX1_RequestGenerator11_BASE  (DMAMUX1_BASE + 0x012CUL)
#define DMAMUX1_RequestGenerator12_BASE  (DMAMUX1_BASE + 0x0130UL)
#define DMAMUX1_RequestGenerator13_BASE  (DMAMUX1_BASE + 0x0134UL)
#define DMAMUX1_RequestGenerator14_BASE  (DMAMUX1_BASE + 0x0138UL)
#define DMAMUX1_RequestGenerator15_BASE  (DMAMUX1_BASE + 0x013CUL)
#define DMAMUX1_RequestGenerator16_BASE  (DMAMUX1_BASE + 0x0140UL)
#define DMAMUX1_RequestGenerator17_BASE  (DMAMUX1_BASE + 0x0144UL)
#define DMAMUX1_RequestGenerator18_BASE  (DMAMUX1_BASE + 0x0148UL)
#define DMAMUX1_RequestGenerator19_BASE  (DMAMUX1_BASE + 0x014CUL)
#define DMAMUX1_RequestGenerator20_BASE  (DMAMUX1_BASE + 0x0150UL)
#define DMAMUX1_RequestGenerator21_BASE  (DMAMUX1_BASE + 0x0154UL)
#define DMAMUX1_RequestGenerator22_BASE  (DMAMUX1_BASE + 0x0158UL)
#define DMAMUX1_RequestGenerator23_BASE  (DMAMUX1_BASE + 0x015CUL)

//somema TBD
#define DMAMUX1_ChannelStatus_BASE      (DMAMUX1_BASE + 0x0080UL)
#define DMAMUX1_RequestGenStatus_BASE   (DMAMUX1_BASE + 0x0140UL)

//somema TBD
#define DMAMUX1_RGISR_BASE               (DMAMUX1_BASE + 0x0180UL)
#define DMAMUX1_RGICF_BASE               (DMAMUX1_BASE + 0x0184UL)

#define DMAMUX_MDMA_RequestGenerator0_BASE   (DMAMUX_MDMA_BASE + 0x0100UL)
#define DMAMUX_MDMA_RequestGenerator1_BASE   (DMAMUX_MDMA_BASE + 0x0104UL)
#define DMAMUX_MDMA_RequestGenerator2_BASE   (DMAMUX_MDMA_BASE + 0x0108UL)
#define DMAMUX_MDMA_RequestGenerator3_BASE   (DMAMUX_MDMA_BASE + 0x010CUL)
#define DMAMUX_MDMA_RequestGenerator4_BASE   (DMAMUX_MDMA_BASE + 0x0110UL)
#define DMAMUX_MDMA_RequestGenerator5_BASE   (DMAMUX_MDMA_BASE + 0x0114UL)
#define DMAMUX_MDMA_RequestGenerator6_BASE   (DMAMUX_MDMA_BASE + 0x0118UL)
#define DMAMUX_MDMA_RequestGenerator7_BASE   (DMAMUX_MDMA_BASE + 0x011CUL)
//somema, TBD to confirm that MDMA only support 8 channel request generator
// #define DMAMUX_MDMA_RequestGenerator8_BASE   (DMAMUX_MDMA_BASE + 0x0120UL)
// #define DMAMUX_MDMA_RequestGenerator9_BASE   (DMAMUX_MDMA_BASE + 0x0124UL)
// #define DMAMUX_MDMA_RequestGenerator10_BASE  (DMAMUX_MDMA_BASE + 0x0128UL)
// #define DMAMUX_MDMA_RequestGenerator11_BASE  (DMAMUX_MDMA_BASE + 0x012CUL)
// #define DMAMUX_MDMA_RequestGenerator12_BASE  (DMAMUX_MDMA_BASE + 0x0130UL)
// #define DMAMUX_MDMA_RequestGenerator13_BASE  (DMAMUX_MDMA_BASE + 0x0134UL)
// #define DMAMUX_MDMA_RequestGenerator14_BASE  (DMAMUX_MDMA_BASE + 0x0138UL)
// #define DMAMUX_MDMA_RequestGenerator15_BASE  (DMAMUX_MDMA_BASE + 0x013CUL)
// #define DMAMUX_MDMA_RequestGenerator16_BASE  (DMAMUX_MDMA_BASE + 0x0140UL)
// #define DMAMUX_MDMA_RequestGenerator17_BASE  (DMAMUX_MDMA_BASE + 0x0144UL)
// #define DMAMUX_MDMA_RequestGenerator18_BASE  (DMAMUX_MDMA_BASE + 0x0148UL)
// #define DMAMUX_MDMA_RequestGenerator19_BASE  (DMAMUX_MDMA_BASE + 0x014CUL)
// #define DMAMUX_MDMA_RequestGenerator20_BASE  (DMAMUX_MDMA_BASE + 0x0150UL)
// #define DMAMUX_MDMA_RequestGenerator21_BASE  (DMAMUX_MDMA_BASE + 0x0154UL)
// #define DMAMUX_MDMA_RequestGenerator22_BASE  (DMAMUX_MDMA_BASE + 0x0158UL)
// #define DMAMUX_MDMA_RequestGenerator23_BASE  (DMAMUX_MDMA_BASE + 0x015CUL)

#define DMAMUX_MDMA_RGISR_BASE               (DMAMUX_MDMA_BASE + 0x0180UL)
#define DMAMUX_MDMA_RGICF_BASE               (DMAMUX_MDMA_BASE + 0x0184UL)

#if defined(CORE_CM7)
#define DCMU_BASE           ((DCMU_Module *) (DCMUA_CM7_BASE))
#else  /* CORE_CM4 */
#define DCMU_BASE           ((DCMU_Module *) (DCMUB_CM4_BASE))
#endif /* CORE_CM7 */


//#define JPEG IPs here
//#define GPU here






#define BTIM4                 ((TIM_Module *) BTIM4_BASE)
#define BTIM3                 ((TIM_Module *) BTIM3_BASE)
#define MMU                   ((MMU_Module *) MMU_BASE)
#define WWDG2                 ((WWDG_Module *) WWDG2_BASE)
#define DAC12                 ((DAC_Module *) DAC12_BASE)
#define DAC34                 ((DAC_Module *) DAC34_BASE)
#define DAC56                 ((DAC_Module *) DAC56_BASE)
#define I2S4_EXT              ((I2S_EXT_Module *) I2S4EXT_BASE)
#define I2S3_EXT              ((I2S_EXT_Module *) I2S3EXT_BASE)
#define I2S4                  ((I2S_Module *) I2S4_BASE)
#define I2S3                  ((I2S_Module *) I2S3_BASE)
#define I2C3                  ((I2C_Module *) I2C3_BASE)
#define I2C2                  ((I2C_Module *) I2C2_BASE)
#define I2C1                  ((I2C_Module *) I2C1_BASE)
#define SPI3                  ((SPI_Module *) SPI3_BASE)
#define UART12                ((USART_Module *) UART12_BASE)
#define UART11                ((USART_Module *) UART11_BASE)
#define UART10                ((USART_Module *) UART10_BASE)
#define UART9                 ((USART_Module *) UART9_BASE)
#define USART4                ((USART_Module *) USART4_BASE)
#define USART3                ((USART_Module *) USART3_BASE)
#define USART2                ((USART_Module *) USART2_BASE)
#define USART1                ((USART_Module *) USART1_BASE)
#define GTIMA7                ((TIM_Module *) GTIMA7_BASE)
#define GTIMA6                ((TIM_Module *) GTIMA6_BASE)
#define GTIMA5                ((TIM_Module *) GTIMA5_BASE)
#define GTIMA4                ((TIM_Module *) GTIMA4_BASE)
#define GTIMA3                ((TIM_Module *) GTIMA3_BASE)
#define GTIMA2                ((TIM_Module *) GTIMA2_BASE)
#define GTIMA1                ((TIM_Module *) GTIMA1_BASE)
#define BTIM2                 ((TIM_Module *) BTIM2_BASE)
#define BTIM1                 ((TIM_Module *) BTIM1_BASE)
#define FDCAN6                ((FDCAN_Module *) FDCAN6_BASE)
#define FDCAN5                ((FDCAN_Module *) FDCAN5_BASE)
#define FDCAN2                ((FDCAN_Module *) FDCAN2_BASE)
#define FDCAN1                ((FDCAN_Module *) FDCAN1_BASE)

#define UART15                ((USART_Module *) UART15_BASE)
#define UART14                ((USART_Module *) UART14_BASE)
#define UART13                ((USART_Module *) UART13_BASE)
#define USART8                ((USART_Module *) USART8_BASE)
#define USART7                ((USART_Module *) USART7_BASE)
#define USART6                ((USART_Module *) USART6_BASE)
#define USART5                ((USART_Module *) USART5_BASE)
#define I2C6                  ((I2C_Module *) I2C6_BASE)
#define I2C5                  ((I2C_Module *) I2C5_BASE)
#define I2C4                  ((I2C_Module *) I2C4_BASE)
#define GTIMB1                ((TIM_Module *) GTIMB1_BASE)
#define GTIMB2                ((TIM_Module *) GTIMB2_BASE)
#define GTIMB3                ((TIM_Module *) GTIMB3_BASE)
#define SPI2                  ((SPI_Module *) SPI2_BASE)
#define SPI1                  ((SPI_Module *) SPI1_BASE)
#define I2S2                  ((I2S_Module *) I2S2_BASE)
#define I2S1                  ((I2S_Module *) I2S1_BASE)
#define I2S2_EXT              ((I2S_EXT_Module *) I2S2EXT_BASE)
#define I2S1_EXT              ((I2S_EXT_Module *) I2S1EXT_BASE)
#define ATIM4                 ((TIM_Module *) ATIM4_BASE)
#define ATIM3                 ((TIM_Module *) ATIM3_BASE)
#define ATIM2                 ((TIM_Module *) ATIM2_BASE)
#define ATIM1                 ((TIM_Module *) ATIM1_BASE)
#define DSMU                  ((DSMU_TypeDef *) DSMU_BASE)
#define SHRTIM2               ((SHRTIM_Module *) SHRTIM2_BASE)
#define SHRTIM1               ((SHRTIM_Module *) SHRTIM1_BASE)
#define FDCAN8                ((FDCAN_Module *) FDCAN8_BASE)
#define FDCAN7                ((FDCAN_Module *) FDCAN7_BASE)
#define FDCAN4                ((FDCAN_Module *) FDCAN4_BASE)
#define FDCAN3                ((FDCAN_Module *) FDCAN3_BASE)

#define RTC                   ((RTC_Module *) RTC_BASE)
#define IWDG2                 ((IWDG_Module *) IWDG2_BASE)
#define IWDG1                 ((IWDG_Module *) IWDG1_BASE)
#define COMP                  ((COMP_Module *) COMP_BASE)
#define ATIMER4               ((ATIMER_TypeDef *) ATIMER4_BASE)
#define ATIMER3               ((ATIMER_TypeDef *) ATIMER3_BASE)
#define I2C10                 ((I2C_Module *) I2C10_BASE)
#define I2C9                  ((I2C_Module *) I2C9_BASE)
#define I2C8                  ((I2C_Module *) I2C8_BASE)
#define I2C7                  ((I2C_Module *) I2C7_BASE)
#define SPI7                  ((SPI_Module *) SPI7_BASE)
#define SPI6                  ((SPI_Module *) SPI6_BASE)
#define SPI5                  ((SPI_Module *) SPI5_BASE)
#define SPI4                  ((SPI_Module *) SPI4_BASE)
#define LPTIM5                ((LPTIM_Module *) LPTIM5_BASE)
#define LPTIM4                ((LPTIM_Module *) LPTIM4_BASE)
#define LPTIM3                ((LPTIM_Module *) LPTIM3_BASE)
#define LPTIM2                ((LPTIM_Module *) LPTIM2_BASE)
#define LPTIM1                ((LPTIM_Module *) LPTIM1_BASE)
#define LPUART2               ((LPUART_Module *) LPUART2_BASE)
#define LPUART1               ((LPUART_Module *) LPUART1_BASE)
#define AFEC                  ((AFEC_TypeDef *) AFEC_BASE)
#define EXTI                  ((EXTI_Module *) EXTI_BASE)

#define JPEG_CTRL             ((JPEG_CTRL_Module *) JPEG_CTRL_BASE)
#define JPEG_SGDMA_P2H        ((JPEG_SGDMA_Module *) JPEG_SGDMA_P2H_BASE)
#define JPEG_BRC              ((JPEG_BRC_Module *) JPEG_BRC_BASE)
#define JPEG_DEC              ((JPEG_DEC_Module *) JPEG_DEC_BASE)
#define JPEG_SGDMA_H2P        ((JPEG_SGDMA_Module *) JPEG_SGDMA_H2P_BASE)
#define JPEG_RBC              ((JPEG_RBC_Module *) JPEG_RBC_BASE)
#define JPEG_ENC              ((JPEG_ENC_Module *) JPEG_ENC_BASE)
#define FEMC                  ((FEMC_Module *) FEMC_BASE)
#define TCMSRAMC              ((TCMSRAMC_TypeDef *) TCMSRAMC_BASE)
#define WWDG1                 ((WWDG_Module *) WWDG1_BASE)
#define LCDC                  ((LCDC_Module *) LCDC_BASE)
#define LCDC_Layer1           ((LCDC_Layer_Module *)LCDC_Layer1_BASE)
#define LCDC_Layer2           ((LCDC_Layer_Module *)LCDC_Layer2_BASE)
#define LCDC_Layer3           ((LCDC_Layer_Module *)LCDC_Layer3_BASE)
#define LCDC_Layer4           ((LCDC_Layer_Module *)LCDC_Layer4_BASE)
#define DVP2                  ((DVP_Module *) DVP2_BASE)
#define DVP1                  ((DVP_Module *) DVP1_BASE)
#define OTPC                  ((OTPC_Module *) OTPC_BASE)
#define GPU                   ((GPU_TypeDef *) GPU_BASE)
#define DSI_HOST              ((DSI_Module *) DSI_HOST_BASE)
#define DSI_HOST_WRAPPER      ((DSI_Wrapper_Module *)DSI_HOST_WRAPPER_BASE)

#define SDMMC2                ((SDMMC_Module *) SDMMC2_BASE)
#define SDHOST2               ((SDHOST_Module *) SDHOST2_BASE)
#define USB2OTG_HS            ((USBOTG_HS_TypeDef *) USB2OTG_HS_BASE)
#define USB1OTG_HS            ((USBOTG_HS_TypeDef *) USBOTG_HS_BASE)
#define DMA3                  ((DMA_Module *) DMA3_BASE)
#define DMA3_CH0              ((DMA_ChannelType *) DMA3_CH0_BASE)
#define DMA3_CH1              ((DMA_ChannelType *) DMA3_CH1_BASE)
#define DMA3_CH2              ((DMA_ChannelType *) DMA3_CH2_BASE)
#define DMA3_CH3              ((DMA_ChannelType *) DMA3_CH3_BASE)
#define DMA3_CH4              ((DMA_ChannelType *) DMA3_CH4_BASE)
#define DMA3_CH5              ((DMA_ChannelType *) DMA3_CH5_BASE)
#define DMA3_CH6              ((DMA_ChannelType *) DMA3_CH6_BASE)
#define DMA3_CH7              ((DMA_ChannelType *) DMA3_CH7_BASE)

#define DMA2                  ((DMA_Module *) DMA2_BASE)
#define DMA2_CH0              ((DMA_ChannelType *) DMA2_CH0_BASE)
#define DMA2_CH1              ((DMA_ChannelType *) DMA2_CH1_BASE)
#define DMA2_CH2              ((DMA_ChannelType *) DMA2_CH2_BASE)
#define DMA2_CH3              ((DMA_ChannelType *) DMA2_CH3_BASE)
#define DMA2_CH4              ((DMA_ChannelType *) DMA2_CH4_BASE)
#define DMA2_CH5              ((DMA_ChannelType *) DMA2_CH5_BASE)
#define DMA2_CH6              ((DMA_ChannelType *) DMA2_CH6_BASE)
#define DMA2_CH7              ((DMA_ChannelType *) DMA2_CH7_BASE)
#define DMA1                  ((DMA_Module *) DMA1_BASE)

#define DMA1_CH0              ((DMA_ChannelType *) DMA1_CH0_BASE)
#define DMA1_CH1              ((DMA_ChannelType *) DMA1_CH1_BASE)
#define DMA1_CH2              ((DMA_ChannelType *) DMA1_CH2_BASE)
#define DMA1_CH3              ((DMA_ChannelType *) DMA1_CH3_BASE)
#define DMA1_CH4              ((DMA_ChannelType *) DMA1_CH4_BASE)
#define DMA1_CH5              ((DMA_ChannelType *) DMA1_CH5_BASE)
#define DMA1_CH6              ((DMA_ChannelType *) DMA1_CH6_BASE)
#define DMA1_CH7              ((DMA_ChannelType *) DMA1_CH7_BASE)
#define DMAMUX1             ((DMAMUX1_Module *) DMAMUX1_BASE)
#define ADC1                ((ADC_Module *) ADC1_BASE)
#define ADC2                ((ADC_Module *) ADC2_BASE)
#define ADC3                ((ADC_Module *) ADC3_BASE)
#define ETH1                ((ETH_Module *) ETH1_BASE)
#define ETH2                ((ETH_Module *) ETH2_BASE)


//#define DCMUB_CM4             ((DCMUB_CM4_TypeDef *) DCMUB_CM4_BASE)
//#define DCMUA_CM7             ((DCMUA_CM7_TypeDef *) DCMUA_CM7_BASE)
#define DCMU                ((DCMU_Module *) DCMU_BASE)

#define SEMA4                 ((SEMA4_Module *) SEMA4_BASE)
#define CUSTOM                ((CUSTOM_TypeDef *) CUSTOM_BASE)
#define SDPU                  ((SDPU_TypeDef *) SDPU_BASE)
#define FMAC                  ((FMAC_Module *) FMAC_BASE)
#define CORDIC                ((CORDIC_Module *) CORDIC_BASE)
#define ECCMON2               ((ECCMON_TypeDef *) ECCMON2_BASE)

#define ECCMON3               ((ECCMON_TypeDef *) ECCMON3_BASE)
#define GPIOK                 ((GPIO_Module *) GPIOK_BASE)
#define GPIOJ                 ((GPIO_Module *) GPIOJ_BASE)
#define GPIOI                 ((GPIO_Module *) GPIOI_BASE)
#define GPIOH                 ((GPIO_Module *) GPIOH_BASE)
#define GPIOG                 ((GPIO_Module *) GPIOG_BASE)
#define GPIOF                 ((GPIO_Module *) GPIOF_BASE)
#define GPIOE                 ((GPIO_Module *) GPIOE_BASE)
#define GPIOD                 ((GPIO_Module *) GPIOD_BASE)
#define GPIOC                 ((GPIO_Module *) GPIOC_BASE)
#define GPIOB                 ((GPIO_Module *) GPIOB_BASE)
#define GPIOA                 ((GPIO_Module *) GPIOA_BASE)
#define AFIO                  ((AFIO_Module *) AFIO_BASE)
#define CRC                   ((CRC_Module *) CRC_BASE)
#define PWR                   ((PWR_Module *) PWR_BASE)
#define RCC                   ((RCC_Module *) RCC_BASE)

#define SDRAM                      ((SDRAM_Module*)SDRAM_BASE)
#define DMAMUX_MDMA           ((DMAMUX2_Module *) DMAMUX_MDMA_BASE)
#define SDMMC1                ((SDMMC_Module *) SDMMC1_BASE)
#define SDHOST1               ((SDHOST_Module *) SDHOST1_BASE)
#define ECCMON1P1          	  ((ECCMON_TypeDef *) ECCMON1P1_BASE)
#define ECCMON1P2             ((ECCMON_TypeDef *) ECCMON1P2_BASE)
#define ECCMON1P3             ((ECCMON_TypeDef *) ECCMON1P3_BASE)
#define ECCMON1P4             ((ECCMON_TypeDef *) ECCMON1P4_BASE)
#define MDMA                  ((MDMA_Module *) MDMA_BASE)
#define xSPI2                 ((XSPI_Module *) xSPI2_BASE)
#define xSPI1                 ((XSPI_Module *) xSPI1_BASE)
#define GPV                   ((GPV_TypeDef *) GPV_BASE  )

#define DBG                   ((DBG_Module *) DBGMCU_BASE)

#define DSMU_Channel0         ((DSMU_Channel_Submodule *) DSMU_Channel0_BASE)
#define DSMU_Channel1         ((DSMU_Channel_Submodule *) DSMU_Channel1_BASE)
#define DSMU_Channel2         ((DSMU_Channel_Submodule *) DSMU_Channel2_BASE)
#define DSMU_Channel3         ((DSMU_Channel_Submodule *) DSMU_Channel3_BASE)
#define DSMU_Channel4         ((DSMU_Channel_Submodule *) DSMU_Channel4_BASE)
#define DSMU_Channel5         ((DSMU_Channel_Submodule *) DSMU_Channel5_BASE)
#define DSMU_Channel6         ((DSMU_Channel_Submodule *) DSMU_Channel6_BASE)
#define DSMU_Channel7         ((DSMU_Channel_Submodule *) DSMU_Channel7_BASE)
#define DSMU_Filter0          ((DSMU_Filter_Submodule *) DSMU_Filter0_BASE)
#define DSMU_Filter1          ((DSMU_Filter_Submodule *) DSMU_Filter1_BASE)
#define DSMU_Filter2          ((DSMU_Filter_Submodule *) DSMU_Filter2_BASE)
#define DSMU_Filter3          ((DSMU_Filter_Submodule *) DSMU_Filter3_BASE)

/*** SystemTick ***/

/** Bit definition for SysTick_CTRL register **/
#define SysTick_CTRL_ENABLE    ((uint32_t)0x00000001U) /* Counter enable */
#define SysTick_CTRL_TICKINT   ((uint32_t)0x00000002U) /* Counting down to 0 pends the SysTick handler */
#define SysTick_CTRL_CLKSOURCE ((uint32_t)0x00000004U) /* Clock source */
#define SysTick_CTRL_COUNTFLAG ((uint32_t)0x00010000U) /* Count Flag */

/** Bit definition for SysTick_LOAD register **/
#define SysTick_LOAD_RELOAD ((uint32_t)0x00FFFFFFU) /* Value to load into the SysTick Current Value Register when the counter reaches 0 */
/** Bit definition for SysTick_VAL register **/
#define SysTick_VAL_CURRENT ((uint32_t)0x00FFFFFFU) /* Current value at the time the register is accessed */

/** Bit definition for SysTick_CALIB register **/
#define SysTick_CALIB_TENMS ((uint32_t)0x00FFFFFFU) /* Reload value to use for 10ms timing */
#define SysTick_CALIB_SKEW  ((uint32_t)0x40000000U) /* Calibration value is not exactly 10 ms */
#define SysTick_CALIB_NOREF ((uint32_t)0x80000000U) /* The reference clock is not provided */

/*** Nested Vectored Interrupt Controller ***/

/** Bit definition for NVIC_ISER register **/
#define NVIC_ISER_SETENA    ((uint32_t)0xFFFFFFFFU) /* Interrupt set enable bits */
#define NVIC_ISER_SETENA_0  ((uint32_t)0x00000001U) /* bit 0 */
#define NVIC_ISER_SETENA_1  ((uint32_t)0x00000002U) /* bit 1 */
#define NVIC_ISER_SETENA_2  ((uint32_t)0x00000004U) /* bit 2 */
#define NVIC_ISER_SETENA_3  ((uint32_t)0x00000008U) /* bit 3 */
#define NVIC_ISER_SETENA_4  ((uint32_t)0x00000010U) /* bit 4 */
#define NVIC_ISER_SETENA_5  ((uint32_t)0x00000020U) /* bit 5 */
#define NVIC_ISER_SETENA_6  ((uint32_t)0x00000040U) /* bit 6 */
#define NVIC_ISER_SETENA_7  ((uint32_t)0x00000080U) /* bit 7 */
#define NVIC_ISER_SETENA_8  ((uint32_t)0x00000100U) /* bit 8 */
#define NVIC_ISER_SETENA_9  ((uint32_t)0x00000200U) /* bit 9 */
#define NVIC_ISER_SETENA_10 ((uint32_t)0x00000400U) /* bit 10 */
#define NVIC_ISER_SETENA_11 ((uint32_t)0x00000800U) /* bit 11 */
#define NVIC_ISER_SETENA_12 ((uint32_t)0x00001000U) /* bit 12 */
#define NVIC_ISER_SETENA_13 ((uint32_t)0x00002000U) /* bit 13 */
#define NVIC_ISER_SETENA_14 ((uint32_t)0x00004000U) /* bit 14 */
#define NVIC_ISER_SETENA_15 ((uint32_t)0x00008000U) /* bit 15 */
#define NVIC_ISER_SETENA_16 ((uint32_t)0x00010000U) /* bit 16 */
#define NVIC_ISER_SETENA_17 ((uint32_t)0x00020000U) /* bit 17 */
#define NVIC_ISER_SETENA_18 ((uint32_t)0x00040000U) /* bit 18 */
#define NVIC_ISER_SETENA_19 ((uint32_t)0x00080000U) /* bit 19 */
#define NVIC_ISER_SETENA_20 ((uint32_t)0x00100000U) /* bit 20 */
#define NVIC_ISER_SETENA_21 ((uint32_t)0x00200000U) /* bit 21 */
#define NVIC_ISER_SETENA_22 ((uint32_t)0x00400000U) /* bit 22 */
#define NVIC_ISER_SETENA_23 ((uint32_t)0x00800000U) /* bit 23 */
#define NVIC_ISER_SETENA_24 ((uint32_t)0x01000000U) /* bit 24 */
#define NVIC_ISER_SETENA_25 ((uint32_t)0x02000000U) /* bit 25 */
#define NVIC_ISER_SETENA_26 ((uint32_t)0x04000000U) /* bit 26 */
#define NVIC_ISER_SETENA_27 ((uint32_t)0x08000000U) /* bit 27 */
#define NVIC_ISER_SETENA_28 ((uint32_t)0x10000000U) /* bit 28 */
#define NVIC_ISER_SETENA_29 ((uint32_t)0x20000000U) /* bit 29 */
#define NVIC_ISER_SETENA_30 ((uint32_t)0x40000000U) /* bit 30 */
#define NVIC_ISER_SETENA_31 ((uint32_t)0x80000000U) /* bit 31 */

/** Bit definition for NVIC_ICER register ***/
#define NVIC_ICER_CLRENA    ((uint32_t)0xFFFFFFFFU) /* Interrupt clear-enable bits */
#define NVIC_ICER_CLRENA_0  ((uint32_t)0x00000001U) /* bit 0 */
#define NVIC_ICER_CLRENA_1  ((uint32_t)0x00000002U) /* bit 1 */
#define NVIC_ICER_CLRENA_2  ((uint32_t)0x00000004U) /* bit 2 */
#define NVIC_ICER_CLRENA_3  ((uint32_t)0x00000008U) /* bit 3 */
#define NVIC_ICER_CLRENA_4  ((uint32_t)0x00000010U) /* bit 4 */
#define NVIC_ICER_CLRENA_5  ((uint32_t)0x00000020U) /* bit 5 */
#define NVIC_ICER_CLRENA_6  ((uint32_t)0x00000040U) /* bit 6 */
#define NVIC_ICER_CLRENA_7  ((uint32_t)0x00000080U) /* bit 7 */
#define NVIC_ICER_CLRENA_8  ((uint32_t)0x00000100U) /* bit 8 */
#define NVIC_ICER_CLRENA_9  ((uint32_t)0x00000200U) /* bit 9 */
#define NVIC_ICER_CLRENA_10 ((uint32_t)0x00000400U) /* bit 10 */
#define NVIC_ICER_CLRENA_11 ((uint32_t)0x00000800U) /* bit 11 */
#define NVIC_ICER_CLRENA_12 ((uint32_t)0x00001000U) /* bit 12 */
#define NVIC_ICER_CLRENA_13 ((uint32_t)0x00002000U) /* bit 13 */
#define NVIC_ICER_CLRENA_14 ((uint32_t)0x00004000U) /* bit 14 */
#define NVIC_ICER_CLRENA_15 ((uint32_t)0x00008000U) /* bit 15 */
#define NVIC_ICER_CLRENA_16 ((uint32_t)0x00010000U) /* bit 16 */
#define NVIC_ICER_CLRENA_17 ((uint32_t)0x00020000U) /* bit 17 */
#define NVIC_ICER_CLRENA_18 ((uint32_t)0x00040000U) /* bit 18 */
#define NVIC_ICER_CLRENA_19 ((uint32_t)0x00080000U) /* bit 19 */
#define NVIC_ICER_CLRENA_20 ((uint32_t)0x00100000U) /* bit 20 */
#define NVIC_ICER_CLRENA_21 ((uint32_t)0x00200000U) /* bit 21 */
#define NVIC_ICER_CLRENA_22 ((uint32_t)0x00400000U) /* bit 22 */
#define NVIC_ICER_CLRENA_23 ((uint32_t)0x00800000U) /* bit 23 */
#define NVIC_ICER_CLRENA_24 ((uint32_t)0x01000000U) /* bit 24 */
#define NVIC_ICER_CLRENA_25 ((uint32_t)0x02000000U) /* bit 25 */
#define NVIC_ICER_CLRENA_26 ((uint32_t)0x04000000U) /* bit 26 */
#define NVIC_ICER_CLRENA_27 ((uint32_t)0x08000000U) /* bit 27 */
#define NVIC_ICER_CLRENA_28 ((uint32_t)0x10000000U) /* bit 28 */
#define NVIC_ICER_CLRENA_29 ((uint32_t)0x20000000U) /* bit 29 */
#define NVIC_ICER_CLRENA_30 ((uint32_t)0x40000000U) /* bit 30 */
#define NVIC_ICER_CLRENA_31 ((uint32_t)0x80000000U) /* bit 31 */

/** Bit definition for NVIC_ISPR register **/
#define NVIC_ISPR_SETPEND    ((uint32_t)0xFFFFFFFFU) /* Interrupt set-pending bits */
#define NVIC_ISPR_SETPEND_0  ((uint32_t)0x00000001U) /* bit 0 */
#define NVIC_ISPR_SETPEND_1  ((uint32_t)0x00000002U) /* bit 1 */
#define NVIC_ISPR_SETPEND_2  ((uint32_t)0x00000004U) /* bit 2 */
#define NVIC_ISPR_SETPEND_3  ((uint32_t)0x00000008U) /* bit 3 */
#define NVIC_ISPR_SETPEND_4  ((uint32_t)0x00000010U) /* bit 4 */
#define NVIC_ISPR_SETPEND_5  ((uint32_t)0x00000020U) /* bit 5 */
#define NVIC_ISPR_SETPEND_6  ((uint32_t)0x00000040U) /* bit 6 */
#define NVIC_ISPR_SETPEND_7  ((uint32_t)0x00000080U) /* bit 7 */
#define NVIC_ISPR_SETPEND_8  ((uint32_t)0x00000100U) /* bit 8 */
#define NVIC_ISPR_SETPEND_9  ((uint32_t)0x00000200U) /* bit 9 */
#define NVIC_ISPR_SETPEND_10 ((uint32_t)0x00000400U) /* bit 10 */
#define NVIC_ISPR_SETPEND_11 ((uint32_t)0x00000800U) /* bit 11 */
#define NVIC_ISPR_SETPEND_12 ((uint32_t)0x00001000U) /* bit 12 */
#define NVIC_ISPR_SETPEND_13 ((uint32_t)0x00002000U) /* bit 13 */
#define NVIC_ISPR_SETPEND_14 ((uint32_t)0x00004000U) /* bit 14 */
#define NVIC_ISPR_SETPEND_15 ((uint32_t)0x00008000U) /* bit 15 */
#define NVIC_ISPR_SETPEND_16 ((uint32_t)0x00010000U) /* bit 16 */
#define NVIC_ISPR_SETPEND_17 ((uint32_t)0x00020000U) /* bit 17 */
#define NVIC_ISPR_SETPEND_18 ((uint32_t)0x00040000U) /* bit 18 */
#define NVIC_ISPR_SETPEND_19 ((uint32_t)0x00080000U) /* bit 19 */
#define NVIC_ISPR_SETPEND_20 ((uint32_t)0x00100000U) /* bit 20 */
#define NVIC_ISPR_SETPEND_21 ((uint32_t)0x00200000U) /* bit 21 */
#define NVIC_ISPR_SETPEND_22 ((uint32_t)0x00400000U) /* bit 22 */
#define NVIC_ISPR_SETPEND_23 ((uint32_t)0x00800000U) /* bit 23 */
#define NVIC_ISPR_SETPEND_24 ((uint32_t)0x01000000U) /* bit 24 */
#define NVIC_ISPR_SETPEND_25 ((uint32_t)0x02000000U) /* bit 25 */
#define NVIC_ISPR_SETPEND_26 ((uint32_t)0x04000000U) /* bit 26 */
#define NVIC_ISPR_SETPEND_27 ((uint32_t)0x08000000U) /* bit 27 */
#define NVIC_ISPR_SETPEND_28 ((uint32_t)0x10000000U) /* bit 28 */
#define NVIC_ISPR_SETPEND_29 ((uint32_t)0x20000000U) /* bit 29 */
#define NVIC_ISPR_SETPEND_30 ((uint32_t)0x40000000U) /* bit 30 */
#define NVIC_ISPR_SETPEND_31 ((uint32_t)0x80000000U) /* bit 31 */

/** Bit definition for NVIC_ICPR register **/
#define NVIC_ICPR_CLRPEND    ((uint32_t)0xFFFFFFFFU) /* Interrupt clear-pending bits */
#define NVIC_ICPR_CLRPEND_0  ((uint32_t)0x00000001U) /* bit 0 */
#define NVIC_ICPR_CLRPEND_1  ((uint32_t)0x00000002U) /* bit 1 */
#define NVIC_ICPR_CLRPEND_2  ((uint32_t)0x00000004U) /* bit 2 */
#define NVIC_ICPR_CLRPEND_3  ((uint32_t)0x00000008U) /* bit 3 */
#define NVIC_ICPR_CLRPEND_4  ((uint32_t)0x00000010U) /* bit 4 */
#define NVIC_ICPR_CLRPEND_5  ((uint32_t)0x00000020U) /* bit 5 */
#define NVIC_ICPR_CLRPEND_6  ((uint32_t)0x00000040U) /* bit 6 */
#define NVIC_ICPR_CLRPEND_7  ((uint32_t)0x00000080U) /* bit 7 */
#define NVIC_ICPR_CLRPEND_8  ((uint32_t)0x00000100U) /* bit 8 */
#define NVIC_ICPR_CLRPEND_9  ((uint32_t)0x00000200U) /* bit 9 */
#define NVIC_ICPR_CLRPEND_10 ((uint32_t)0x00000400U) /* bit 10 */
#define NVIC_ICPR_CLRPEND_11 ((uint32_t)0x00000800U) /* bit 11 */
#define NVIC_ICPR_CLRPEND_12 ((uint32_t)0x00001000U) /* bit 12 */
#define NVIC_ICPR_CLRPEND_13 ((uint32_t)0x00002000U) /* bit 13 */
#define NVIC_ICPR_CLRPEND_14 ((uint32_t)0x00004000U) /* bit 14 */
#define NVIC_ICPR_CLRPEND_15 ((uint32_t)0x00008000U) /* bit 15 */
#define NVIC_ICPR_CLRPEND_16 ((uint32_t)0x00010000U) /* bit 16 */
#define NVIC_ICPR_CLRPEND_17 ((uint32_t)0x00020000U) /* bit 17 */
#define NVIC_ICPR_CLRPEND_18 ((uint32_t)0x00040000U) /* bit 18 */
#define NVIC_ICPR_CLRPEND_19 ((uint32_t)0x00080000U) /* bit 19 */
#define NVIC_ICPR_CLRPEND_20 ((uint32_t)0x00100000U) /* bit 20 */
#define NVIC_ICPR_CLRPEND_21 ((uint32_t)0x00200000U) /* bit 21 */
#define NVIC_ICPR_CLRPEND_22 ((uint32_t)0x00400000U) /* bit 22 */
#define NVIC_ICPR_CLRPEND_23 ((uint32_t)0x00800000U) /* bit 23 */
#define NVIC_ICPR_CLRPEND_24 ((uint32_t)0x01000000U) /* bit 24 */
#define NVIC_ICPR_CLRPEND_25 ((uint32_t)0x02000000U) /* bit 25 */
#define NVIC_ICPR_CLRPEND_26 ((uint32_t)0x04000000U) /* bit 26 */
#define NVIC_ICPR_CLRPEND_27 ((uint32_t)0x08000000U) /* bit 27 */
#define NVIC_ICPR_CLRPEND_28 ((uint32_t)0x10000000U) /* bit 28 */
#define NVIC_ICPR_CLRPEND_29 ((uint32_t)0x20000000U) /* bit 29 */
#define NVIC_ICPR_CLRPEND_30 ((uint32_t)0x40000000U) /* bit 30 */
#define NVIC_ICPR_CLRPEND_31 ((uint32_t)0x80000000U) /* bit 31 */

/** Bit definition for NVIC_IABR register **/
#define NVIC_IABR_ACTIVE    ((uint32_t)0xFFFFFFFFU) /* Interrupt active flags */
#define NVIC_IABR_ACTIVE_0  ((uint32_t)0x00000001U) /* bit 0 */
#define NVIC_IABR_ACTIVE_1  ((uint32_t)0x00000002U) /* bit 1 */
#define NVIC_IABR_ACTIVE_2  ((uint32_t)0x00000004U) /* bit 2 */
#define NVIC_IABR_ACTIVE_3  ((uint32_t)0x00000008U) /* bit 3 */
#define NVIC_IABR_ACTIVE_4  ((uint32_t)0x00000010U) /* bit 4 */
#define NVIC_IABR_ACTIVE_5  ((uint32_t)0x00000020U) /* bit 5 */
#define NVIC_IABR_ACTIVE_6  ((uint32_t)0x00000040U) /* bit 6 */
#define NVIC_IABR_ACTIVE_7  ((uint32_t)0x00000080U) /* bit 7 */
#define NVIC_IABR_ACTIVE_8  ((uint32_t)0x00000100U) /* bit 8 */
#define NVIC_IABR_ACTIVE_9  ((uint32_t)0x00000200U) /* bit 9 */
#define NVIC_IABR_ACTIVE_10 ((uint32_t)0x00000400U) /* bit 10 */
#define NVIC_IABR_ACTIVE_11 ((uint32_t)0x00000800U) /* bit 11 */
#define NVIC_IABR_ACTIVE_12 ((uint32_t)0x00001000U) /* bit 12 */
#define NVIC_IABR_ACTIVE_13 ((uint32_t)0x00002000U) /* bit 13 */
#define NVIC_IABR_ACTIVE_14 ((uint32_t)0x00004000U) /* bit 14 */
#define NVIC_IABR_ACTIVE_15 ((uint32_t)0x00008000U) /* bit 15 */
#define NVIC_IABR_ACTIVE_16 ((uint32_t)0x00010000U) /* bit 16 */
#define NVIC_IABR_ACTIVE_17 ((uint32_t)0x00020000U) /* bit 17 */
#define NVIC_IABR_ACTIVE_18 ((uint32_t)0x00040000U) /* bit 18 */
#define NVIC_IABR_ACTIVE_19 ((uint32_t)0x00080000U) /* bit 19 */
#define NVIC_IABR_ACTIVE_20 ((uint32_t)0x00100000U) /* bit 20 */
#define NVIC_IABR_ACTIVE_21 ((uint32_t)0x00200000U) /* bit 21 */
#define NVIC_IABR_ACTIVE_22 ((uint32_t)0x00400000U) /* bit 22 */
#define NVIC_IABR_ACTIVE_23 ((uint32_t)0x00800000U) /* bit 23 */
#define NVIC_IABR_ACTIVE_24 ((uint32_t)0x01000000U) /* bit 24 */
#define NVIC_IABR_ACTIVE_25 ((uint32_t)0x02000000U) /* bit 25 */
#define NVIC_IABR_ACTIVE_26 ((uint32_t)0x04000000U) /* bit 26 */
#define NVIC_IABR_ACTIVE_27 ((uint32_t)0x08000000U) /* bit 27 */
#define NVIC_IABR_ACTIVE_28 ((uint32_t)0x10000000U) /* bit 28 */
#define NVIC_IABR_ACTIVE_29 ((uint32_t)0x20000000U) /* bit 29 */
#define NVIC_IABR_ACTIVE_30 ((uint32_t)0x40000000U) /* bit 30 */
#define NVIC_IABR_ACTIVE_31 ((uint32_t)0x80000000U) /* bit 31 */

/** Bit definition for NVIC_PRI0 register **/
#define NVIC_IPR0_PRI_0 ((uint32_t)0x000000FFU) /* Priority of interrupt 0 */
#define NVIC_IPR0_PRI_1 ((uint32_t)0x0000FF00U) /* Priority of interrupt 1 */
#define NVIC_IPR0_PRI_2 ((uint32_t)0x00FF0000U) /* Priority of interrupt 2 */
#define NVIC_IPR0_PRI_3 ((uint32_t)0xFF000000U) /* Priority of interrupt 3 */

/** Bit definition for NVIC_PRI1 register **/
#define NVIC_IPR1_PRI_4 ((uint32_t)0x000000FFU) /* Priority of interrupt 4 */
#define NVIC_IPR1_PRI_5 ((uint32_t)0x0000FF00U) /* Priority of interrupt 5 */
#define NVIC_IPR1_PRI_6 ((uint32_t)0x00FF0000U) /* Priority of interrupt 6 */
#define NVIC_IPR1_PRI_7 ((uint32_t)0xFF000000U) /* Priority of interrupt 7 */

/** Bit definition for NVIC_PRI2 register **/
#define NVIC_IPR2_PRI_8  ((uint32_t)0x000000FFU) /* Priority of interrupt 8 */
#define NVIC_IPR2_PRI_9  ((uint32_t)0x0000FF00U) /* Priority of interrupt 9 */
#define NVIC_IPR2_PRI_10 ((uint32_t)0x00FF0000U) /* Priority of interrupt 10 */
#define NVIC_IPR2_PRI_11 ((uint32_t)0xFF000000U) /* Priority of interrupt 11 */

/** Bit definition for NVIC_PRI3 register **/
#define NVIC_IPR3_PRI_12 ((uint32_t)0x000000FFU) /* Priority of interrupt 12 */
#define NVIC_IPR3_PRI_13 ((uint32_t)0x0000FF00U) /* Priority of interrupt 13 */
#define NVIC_IPR3_PRI_14 ((uint32_t)0x00FF0000U) /* Priority of interrupt 14 */
#define NVIC_IPR3_PRI_15 ((uint32_t)0xFF000000U) /* Priority of interrupt 15 */

/** Bit definition for NVIC_PRI4 register **/
#define NVIC_IPR4_PRI_16 ((uint32_t)0x000000FFU) /* Priority of interrupt 16 */
#define NVIC_IPR4_PRI_17 ((uint32_t)0x0000FF00U) /* Priority of interrupt 17 */
#define NVIC_IPR4_PRI_18 ((uint32_t)0x00FF0000U) /* Priority of interrupt 18 */
#define NVIC_IPR4_PRI_19 ((uint32_t)0xFF000000U) /* Priority of interrupt 19 */

/** Bit definition for NVIC_PRI5 register **/
#define NVIC_IPR5_PRI_20 ((uint32_t)0x000000FFU) /* Priority of interrupt 20 */
#define NVIC_IPR5_PRI_21 ((uint32_t)0x0000FF00U) /* Priority of interrupt 21 */
#define NVIC_IPR5_PRI_22 ((uint32_t)0x00FF0000U) /* Priority of interrupt 22 */
#define NVIC_IPR5_PRI_23 ((uint32_t)0xFF000000U) /* Priority of interrupt 23 */

/** Bit definition for NVIC_PRI6 register **/
#define NVIC_IPR6_PRI_24 ((uint32_t)0x000000FFU) /* Priority of interrupt 24 */
#define NVIC_IPR6_PRI_25 ((uint32_t)0x0000FF00U) /* Priority of interrupt 25 */
#define NVIC_IPR6_PRI_26 ((uint32_t)0x00FF0000U) /* Priority of interrupt 26 */
#define NVIC_IPR6_PRI_27 ((uint32_t)0xFF000000U) /* Priority of interrupt 27 */

/** Bit definition for NVIC_PRI7 register **/
#define NVIC_IPR7_PRI_28 ((uint32_t)0x000000FFU) /* Priority of interrupt 28 */
#define NVIC_IPR7_PRI_29 ((uint32_t)0x0000FF00U) /* Priority of interrupt 29 */
#define NVIC_IPR7_PRI_30 ((uint32_t)0x00FF0000U) /* Priority of interrupt 30 */
#define NVIC_IPR7_PRI_31 ((uint32_t)0xFF000000U) /* Priority of interrupt 31 */

/** Bit definition for SCB_CPUID register **/
#define SCB_CPUID_REVISION    ((uint32_t)0x0000000FU) /* Implementation defined revision number */
#define SCB_CPUID_PARTNO      ((uint32_t)0x0000FFF0U) /* Number of processor within family */
#define SCB_CPUID_Constant    ((uint32_t)0x000F0000U) /* Reads as 0x0F */
#define SCB_CPUID_VARIANT     ((uint32_t)0x00F00000U) /* Implementation defined variant number */
#define SCB_CPUID_IMPLEMENTER ((uint32_t)0xFF000000U) /* Implementer code. ARM is 0x41 */

/** Bit definition for SCB_ICSR register **/
#define SCB_ICSR_VECTACTIVE  ((uint32_t)0x000001FFU) /* Active INTSTS number field */
#define SCB_ICSR_RETTOBASE   ((uint32_t)0x00000800U) /* All active exceptions minus the IPSR_current_exception yields the empty set */
#define SCB_ICSR_VECTPENDING ((uint32_t)0x003FF000U) /* Pending INTSTS number field */
#define SCB_ICSR_ISRPENDING  ((uint32_t)0x00400000U) /* Interrupt pending flag */
#define SCB_ICSR_ISRPREEMPT  ((uint32_t)0x00800000U) /* It indicates that a pending interrupt becomes active in the next running cycle */
#define SCB_ICSR_PENDSTCLR   ((uint32_t)0x02000000U) /* Clear pending SysTick bit */
#define SCB_ICSR_PENDSTSET   ((uint32_t)0x04000000U) /* Set pending SysTick bit */
#define SCB_ICSR_PENDSVCLR   ((uint32_t)0x08000000U) /* Clear pending pendSV bit */
#define SCB_ICSR_PENDSVSET   ((uint32_t)0x10000000U) /* Set pending pendSV bit */
#define SCB_ICSR_NMIPENDSET  ((uint32_t)0x80000000U) /* Set pending NMI bit */

/** Bit definition for SCB_VTOR register **/
#define SCB_VTOR_TBLOFF  ((uint32_t)0x1FFFFF80U) /* Vector table base offset field */
#define SCB_VTOR_TBLBASE ((uint32_t)0x20000000U) /* Table base in code(0) or RAM(1) */

/** Bit definition for SCB_AIRCR register **/
#define SCB_AIRCR_VECTRESET     ((uint32_t)0x00000001U) /* System Reset bit */
#define SCB_AIRCR_VECTCLRACTIVE ((uint32_t)0x00000002U) /* Clear active vector bit */
#define SCB_AIRCR_SYSRESETREQ   ((uint32_t)0x00000004U) /* Requests chip control logic to generate a reset */

#define SCB_AIRCR_PRIGROUP   ((uint32_t)0x00000700U) /* PRIGROUP[2:0] bits (Priority group) */
#define SCB_AIRCR_PRIGROUP_0 ((uint32_t)0x00000100U) /* Bit 0 */
#define SCB_AIRCR_PRIGROUP_1 ((uint32_t)0x00000200U) /* Bit 1 */
#define SCB_AIRCR_PRIGROUP_2 ((uint32_t)0x00000400U) /* Bit 2  */

/** prority group configuration **/
#define SCB_AIRCR_PRIGROUP0   ((uint32_t)0x00000000U) /* Priority group=0 (7 bits of pre-emption priority, 1 bit of subpriority) */
#define SCB_AIRCR_PRIGROUP1   ((uint32_t)0x00000100U) /* Priority group=1 (6 bits of pre-emption priority, 2 bits of subpriority) */
#define SCB_AIRCR_PRIGROUP2   ((uint32_t)0x00000200U) /* Priority group=2 (5 bits of pre-emption priority, 3 bits of subpriority) */
#define SCB_AIRCR_PRIGROUP3   ((uint32_t)0x00000300U) /* Priority group=3 (4 bits of pre-emption priority, 4 bits of subpriority) */
#define SCB_AIRCR_PRIGROUP4   ((uint32_t)0x00000400U) /* Priority group=4 (3 bits of pre-emption priority, 5 bits of subpriority) */
#define SCB_AIRCR_PRIGROUP5   ((uint32_t)0x00000500U) /* Priority group=5 (2 bits of pre-emption priority, 6 bits of subpriority) */
#define SCB_AIRCR_PRIGROUP6   ((uint32_t)0x00000600U) /* Priority group=6 (1 bit of pre-emption priority, 7 bits of subpriority) */
#define SCB_AIRCR_PRIGROUP7   ((uint32_t)0x00000700U) /* Priority group=7 (no pre-emption priority, 8 bits of subpriority) */

#define SCB_AIRCR_ENDIANESS ((uint32_t)0x00008000U) /* Data endianness bit */
#define SCB_AIRCR_VECTKEY   ((uint32_t)0xFFFF0000U) /* Register key (VECTKEY) - Reads as 0xFA05 (VECTKEYSTAT) */

/** Bit definition for SCB_SCR register **/
#define SCB_SCR_SLEEPONEXIT ((uint8_t)0x02U) /* Sleep on exit bit */
#define SCB_SCR_SLEEPDEEP   ((uint8_t)0x04U) /* Sleep deep bit */
#define SCB_SCR_SEVONPEND   ((uint8_t)0x10U) /* Wake up from WFE */

/** Bit definition for SCB_CCR register **/
#define SCB_CCR_NONBASETHRDENA   ((uint16_t)0x0001U) /* Thread mode can be entered from any level in Handler mode by controlled return value */
#define SCB_CCR_USERSETMPEND     ((uint16_t)0x0002U) /* Enables user code to write the Software Trigger Interrupt register to trigger (pend) a     \
                          Main exception */
#define SCB_CCR_UNALIGN_TRP ((uint16_t)0x0008U) /* Trap for unaligned access */
#define SCB_CCR_DIV_0_TRP   ((uint16_t)0x0010U) /* Trap on Divide by 0 */
#define SCB_CCR_BFHFNMIGN   ((uint16_t)0x0100U) /* Handlers running at priority -1 and -2 */
#define SCB_CCR_STKALIGN    ((uint16_t)0x0200U) /* On exception entry, the SP used prior to the exception is adjusted to be 8-byte aligned */

/** Bit definition for SCB_SHPR register **/
#define SCB_SHPR_PRI_N    ((uint32_t)0x000000FFU) /* Priority of system handler 4,8, and 12. Mem Manage, reserved and Debug Monitor */
#define SCB_SHPR_PRI_N1   ((uint32_t)0x0000FF00U) /* Priority of system handler 5,9, and 13. Bus Fault, reserved and reserved */
#define SCB_SHPR_PRI_N2   ((uint32_t)0x00FF0000U) /* Priority of system handler 6,10, and 14. Usage Fault, reserved and PendSV */
#define SCB_SHPR_PRI_N3   ((uint32_t)0xFF000000U) /* Priority of system handler 7,11, and 15. Reserved, SVCall and SysTick */

/** Bit definition for SCB_SHCSR register **/
#define SCB_SHCSR_MEMFAULTACT    ((uint32_t)0x00000001U) /* MemManage is active */
#define SCB_SHCSR_BUSFAULTACT    ((uint32_t)0x00000002U) /* BusFault is active */
#define SCB_SHCSR_USGFAULTACT    ((uint32_t)0x00000008U) /* UsageFault is active */
#define SCB_SHCSR_SVCALLACT      ((uint32_t)0x00000080U) /* SVCall is active */
#define SCB_SHCSR_MONITORACT     ((uint32_t)0x00000100U) /* Monitor is active */
#define SCB_SHCSR_PENDSVACT      ((uint32_t)0x00000400U) /* PendSV is active */
#define SCB_SHCSR_SYSTICKACT     ((uint32_t)0x00000800U) /* SysTick is active */
#define SCB_SHCSR_USGFAULTPENDED ((uint32_t)0x00001000U) /* Usage Fault is pended */
#define SCB_SHCSR_MEMFAULTPENDED ((uint32_t)0x00002000U) /* MemManage is pended */
#define SCB_SHCSR_BUSFAULTPENDED ((uint32_t)0x00004000U) /* Bus Fault is pended */
#define SCB_SHCSR_SVCALLPENDED   ((uint32_t)0x00008000U) /* SVCall is pended */
#define SCB_SHCSR_MEMFAULTENA    ((uint32_t)0x00010000U) /* MemManage enable */
#define SCB_SHCSR_BUSFAULTENA    ((uint32_t)0x00020000U) /* Bus Fault enable */
#define SCB_SHCSR_USGFAULTENA    ((uint32_t)0x00040000U) /* UsageFault enable */

/*** Bit definition for SCB_CFSR register ***/
/** MFSR **/
#define SCB_CFSR_IACCVIOL  ((uint32_t)0x00000001U) /* Instruction access violation */
#define SCB_CFSR_DACCVIOL  ((uint32_t)0x00000002U) /* Data access violation */
#define SCB_CFSR_MUNSTKERR ((uint32_t)0x00000008U) /* Unstacking error */
#define SCB_CFSR_MSTKERR   ((uint32_t)0x00000010U) /* Stacking error */
#define SCB_CFSR_MMARVALID ((uint32_t)0x00000080U) /* Memory Manage Address Register address valid flag */
/** BFSR **/
#define SCB_CFSR_IBUSERR     ((uint32_t)0x00000100U) /* Instruction bus error flag */
#define SCB_CFSR_PRECISERR   ((uint32_t)0x00000200U) /* Precise data bus error */
#define SCB_CFSR_IMPRECISERR ((uint32_t)0x00000400U) /* Imprecise data bus error */
#define SCB_CFSR_UNSTKERR    ((uint32_t)0x00000800U) /* Unstacking error */
#define SCB_CFSR_STKERR      ((uint32_t)0x00001000U) /* Stacking error */
#define SCB_CFSR_BFARVALID   ((uint32_t)0x00008000U) /* Bus Fault Address Register address valid flag */
/** UFSR **/
#define SCB_CFSR_UNDEFINSTR ((uint32_t)0x00010000U) /* The processor attempt to execute an undefined instruction */
#define SCB_CFSR_INVSTATE   ((uint32_t)0x00020000U) /* Invalid combination of EPSR and instruction */
#define SCB_CFSR_INVPC      ((uint32_t)0x00040000U) /* Attempt to load EXC_RETURN into pc illegally */
#define SCB_CFSR_NOCP       ((uint32_t)0x00080000U) /* Attempt to use a coprocessor instruction */
#define SCB_CFSR_UNALIGNED  ((uint32_t)0x01000000U) /* Fault occurs when there is an attempt to make an unaligned memory access */
#define SCB_CFSR_DIVBYZERO  ((uint32_t)0x02000000U) /* Fault occurs when SDIV or DIV instruction is used with a divisor of 0 */

/** Bit definition for SCB_HFSR register **/
#define SCB_HFSR_VECTTBL  ((uint32_t)0x00000002U) /* Fault occurs because of vector table read on exception processing */
#define SCB_HFSR_FORCED   ((uint32_t)0x40000000U) /* Hard Fault activated when a configurable Fault was received and cannot activate */
#define SCB_HFSR_DEBUGEVT ((uint32_t)0x80000000U) /* Fault related to debug */

/** Bit definition for SCB_DFSR register **/
#define SCB_DFSR_HALTED   ((uint8_t)0x01U) /* Halt request flag */
#define SCB_DFSR_BKPT     ((uint8_t)0x02U) /* BKPT flag */
#define SCB_DFSR_DWTTRAP  ((uint8_t)0x04U) /* Data Watchpoint and Trace (DWT) flag */
#define SCB_DFSR_VCATCH   ((uint8_t)0x08U) /* Vector catch flag */
#define SCB_DFSR_EXTERNAL ((uint8_t)0x10U) /* External debug request flag */

/** Bit definition for SCB_MMFAR register **/
#define SCB_MMFAR_ADDRESS ((uint32_t)0xFFFFFFFFU) /* Mem Manage fault address field */

/** Bit definition for SCB_BFAR register **/
#define SCB_BFAR_ADDRESS ((uint32_t)0xFFFFFFFFU) /* Bus fault address field */

/** Bit definition for SCB_afsr register **/
#define SCB_AFSR_IMPDEF ((uint32_t)0xFFFFFFFFU) /* Implementation defined */
    /******************************************************************************/
    /*                                                                            */
    /*                    External Interrupt/Event Controller                     */
    /*                                                                            */
    /******************************************************************************/
/******** Bit definition for EXTI_RT_CFG0 register  ********/
#define EXTI_RT_CFG0_RT_CFG0x                                ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_RT_CFG0_RT_CFG0x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_RT_CFG0_RT_CFG0x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_RT_CFG0_RT_CFG0x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_RT_CFG0_RT_CFG0x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_RT_CFG0_RT_CFG0x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_RT_CFG0_RT_CFG0x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_RT_CFG0_RT_CFG0x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_RT_CFG0_RT_CFG0x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_RT_CFG0_RT_CFG0x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_RT_CFG0_RT_CFG0x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_RT_CFG0_RT_CFG0x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_RT_CFG0_RT_CFG0x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_RT_CFG0_RT_CFG0x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_RT_CFG0_RT_CFG0x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_RT_CFG0_RT_CFG0x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_RT_CFG0_RT_CFG0x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_RT_CFG0_RT_CFG0x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_RT_CFG0_RT_CFG0x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_RT_CFG0_RT_CFG0x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_RT_CFG0_RT_CFG0x_19                             ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_RT_CFG0_RT_CFG0x_20                             ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_RT_CFG0_RT_CFG0x_21                             ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_RT_CFG0_RT_CFG0x_22                             ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_RT_CFG0_RT_CFG0x_23                             ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_RT_CFG0_RT_CFG0x_24                             ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_RT_CFG0_RT_CFG0x_25                             ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_RT_CFG0_RT_CFG0x_26                             ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_RT_CFG0_RT_CFG0x_27                             ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_RT_CFG0_RT_CFG0x_28                             ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_RT_CFG0_RT_CFG0x_29                             ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_RT_CFG0_RT_CFG0x_30                             ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_RT_CFG0_RT_CFG0x_31                             ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_RT_CFG1 register  ********/
#define EXTI_RT_CFG1_RT_CFG1x                                ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_RT_CFG1_RT_CFG1x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_RT_CFG1_RT_CFG1x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_RT_CFG1_RT_CFG1x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_RT_CFG1_RT_CFG1x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_RT_CFG1_RT_CFG1x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_RT_CFG1_RT_CFG1x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_RT_CFG1_RT_CFG1x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_RT_CFG1_RT_CFG1x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_RT_CFG1_RT_CFG1x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_RT_CFG1_RT_CFG1x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_RT_CFG1_RT_CFG1x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_RT_CFG1_RT_CFG1x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_RT_CFG1_RT_CFG1x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_RT_CFG1_RT_CFG1x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_RT_CFG1_RT_CFG1x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_RT_CFG1_RT_CFG1x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_RT_CFG1_RT_CFG1x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_RT_CFG1_RT_CFG1x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_RT_CFG1_RT_CFG1x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_RT_CFG1_RT_CFG1x_19                             ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_FT_CFG0 register  ********/
#define EXTI_FT_CFG0_FT_CFG0x                                ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_FT_CFG0_FT_CFG0x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_FT_CFG0_FT_CFG0x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_FT_CFG0_FT_CFG0x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_FT_CFG0_FT_CFG0x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_FT_CFG0_FT_CFG0x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_FT_CFG0_FT_CFG0x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_FT_CFG0_FT_CFG0x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_FT_CFG0_FT_CFG0x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_FT_CFG0_FT_CFG0x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_FT_CFG0_FT_CFG0x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_FT_CFG0_FT_CFG0x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_FT_CFG0_FT_CFG0x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_FT_CFG0_FT_CFG0x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_FT_CFG0_FT_CFG0x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_FT_CFG0_FT_CFG0x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_FT_CFG0_FT_CFG0x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_FT_CFG0_FT_CFG0x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_FT_CFG0_FT_CFG0x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_FT_CFG0_FT_CFG0x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_FT_CFG0_FT_CFG0x_19                             ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_FT_CFG0_FT_CFG0x_20                             ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_FT_CFG0_FT_CFG0x_21                             ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_FT_CFG0_FT_CFG0x_22                             ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_FT_CFG0_FT_CFG0x_23                             ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_FT_CFG0_FT_CFG0x_24                             ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_FT_CFG0_FT_CFG0x_25                             ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_FT_CFG0_FT_CFG0x_26                             ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_FT_CFG0_FT_CFG0x_27                             ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_FT_CFG0_FT_CFG0x_28                             ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_FT_CFG0_FT_CFG0x_29                             ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_FT_CFG0_FT_CFG0x_30                             ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_FT_CFG0_FT_CFG0x_31                             ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_FT_CFG1 register  ********/
#define EXTI_FT_CFG1_FT_CFG1x                                ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_FT_CFG1_FT_CFG1x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_FT_CFG1_FT_CFG1x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_FT_CFG1_FT_CFG1x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_FT_CFG1_FT_CFG1x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_FT_CFG1_FT_CFG1x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_FT_CFG1_FT_CFG1x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_FT_CFG1_FT_CFG1x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_FT_CFG1_FT_CFG1x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_FT_CFG1_FT_CFG1x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_FT_CFG1_FT_CFG1x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_FT_CFG1_FT_CFG1x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_FT_CFG1_FT_CFG1x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_FT_CFG1_FT_CFG1x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_FT_CFG1_FT_CFG1x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_FT_CFG1_FT_CFG1x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_FT_CFG1_FT_CFG1x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_FT_CFG1_FT_CFG1x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_FT_CFG1_FT_CFG1x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_FT_CFG1_FT_CFG1x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_FT_CFG1_FT_CFG1x_19                             ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_SWIE0 register  ********/
#define EXTI_SWIE0_SWIE0x                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_SWIE0_SWIE0x_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_SWIE0_SWIE0x_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_SWIE0_SWIE0x_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_SWIE0_SWIE0x_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_SWIE0_SWIE0x_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_SWIE0_SWIE0x_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_SWIE0_SWIE0x_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_SWIE0_SWIE0x_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_SWIE0_SWIE0x_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_SWIE0_SWIE0x_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_SWIE0_SWIE0x_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_SWIE0_SWIE0x_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_SWIE0_SWIE0x_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_SWIE0_SWIE0x_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_SWIE0_SWIE0x_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_SWIE0_SWIE0x_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_SWIE0_SWIE0x_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_SWIE0_SWIE0x_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_SWIE0_SWIE0x_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_SWIE0_SWIE0x_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_SWIE0_SWIE0x_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_SWIE0_SWIE0x_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_SWIE0_SWIE0x_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_SWIE0_SWIE0x_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_SWIE0_SWIE0x_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_SWIE0_SWIE0x_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_SWIE0_SWIE0x_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_SWIE0_SWIE0x_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_SWIE0_SWIE0x_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_SWIE0_SWIE0x_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_SWIE0_SWIE0x_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_SWIE0_SWIE0x_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_SWIE1 register  ********/
#define EXTI_SWIE1_SWIE1x                                    ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_SWIE1_SWIE1x_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_SWIE1_SWIE1x_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_SWIE1_SWIE1x_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_SWIE1_SWIE1x_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_SWIE1_SWIE1x_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_SWIE1_SWIE1x_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_SWIE1_SWIE1x_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_SWIE1_SWIE1x_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_SWIE1_SWIE1x_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_SWIE1_SWIE1x_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_SWIE1_SWIE1x_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_SWIE1_SWIE1x_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_SWIE1_SWIE1x_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_SWIE1_SWIE1x_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_SWIE1_SWIE1x_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_SWIE1_SWIE1x_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_SWIE1_SWIE1x_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_SWIE1_SWIE1x_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_SWIE1_SWIE1x_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_SWIE1_SWIE1x_19                                 ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M7IMASK0 register  ********/
#define EXTI_M7IMASK0_M7IMSK0x                               ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M7IMASK0_M7IMSK0x_0                             ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7IMASK0_M7IMSK0x_1                             ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7IMASK0_M7IMSK0x_2                             ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7IMASK0_M7IMSK0x_3                             ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7IMASK0_M7IMSK0x_4                             ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7IMASK0_M7IMSK0x_5                             ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7IMASK0_M7IMSK0x_6                             ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7IMASK0_M7IMSK0x_7                             ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7IMASK0_M7IMSK0x_8                             ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7IMASK0_M7IMSK0x_9                             ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7IMASK0_M7IMSK0x_10                            ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7IMASK0_M7IMSK0x_11                            ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7IMASK0_M7IMSK0x_12                            ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7IMASK0_M7IMSK0x_13                            ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7IMASK0_M7IMSK0x_14                            ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7IMASK0_M7IMSK0x_15                            ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7IMASK0_M7IMSK0x_16                            ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7IMASK0_M7IMSK0x_17                            ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7IMASK0_M7IMSK0x_18                            ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7IMASK0_M7IMSK0x_19                            ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7IMASK0_M7IMSK0x_20                            ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7IMASK0_M7IMSK0x_21                            ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7IMASK0_M7IMSK0x_22                            ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7IMASK0_M7IMSK0x_23                            ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7IMASK0_M7IMSK0x_24                            ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7IMASK0_M7IMSK0x_25                            ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7IMASK0_M7IMSK0x_26                            ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M7IMASK0_M7IMSK0x_27                            ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M7IMASK0_M7IMSK0x_28                            ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M7IMASK0_M7IMSK0x_29                            ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M7IMASK0_M7IMSK0x_30                            ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M7IMASK0_M7IMSK0x_31                            ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M7IMASK1 register  ********/
#define EXTI_M7IMASK1_M7IMSK1x                               ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_M7IMASK1_M7IMSK1x_0                             ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7IMASK1_M7IMSK1x_1                             ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7IMASK1_M7IMSK1x_2                             ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7IMASK1_M7IMSK1x_3                             ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7IMASK1_M7IMSK1x_4                             ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7IMASK1_M7IMSK1x_5                             ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7IMASK1_M7IMSK1x_6                             ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7IMASK1_M7IMSK1x_7                             ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7IMASK1_M7IMSK1x_8                             ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7IMASK1_M7IMSK1x_9                             ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7IMASK1_M7IMSK1x_10                            ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7IMASK1_M7IMSK1x_11                            ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7IMASK1_M7IMSK1x_12                            ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7IMASK1_M7IMSK1x_13                            ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7IMASK1_M7IMSK1x_14                            ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7IMASK1_M7IMSK1x_15                            ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7IMASK1_M7IMSK1x_16                            ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7IMASK1_M7IMSK1x_17                            ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7IMASK1_M7IMSK1x_18                            ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7IMASK1_M7IMSK1x_19                            ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M4IMASK0 register  ********/
#define EXTI_M4IMASK0_M4IMSK0x                               ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M4IMASK0_M4IMSK0x_0                             ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4IMASK0_M4IMSK0x_1                             ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4IMASK0_M4IMSK0x_2                             ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4IMASK0_M4IMSK0x_3                             ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4IMASK0_M4IMSK0x_4                             ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4IMASK0_M4IMSK0x_5                             ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4IMASK0_M4IMSK0x_6                             ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4IMASK0_M4IMSK0x_7                             ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4IMASK0_M4IMSK0x_8                             ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4IMASK0_M4IMSK0x_9                             ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4IMASK0_M4IMSK0x_10                            ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4IMASK0_M4IMSK0x_11                            ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4IMASK0_M4IMSK0x_12                            ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4IMASK0_M4IMSK0x_13                            ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4IMASK0_M4IMSK0x_14                            ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4IMASK0_M4IMSK0x_15                            ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4IMASK0_M4IMSK0x_16                            ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4IMASK0_M4IMSK0x_17                            ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4IMASK0_M4IMSK0x_18                            ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4IMASK0_M4IMSK0x_19                            ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4IMASK0_M4IMSK0x_20                            ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4IMASK0_M4IMSK0x_21                            ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4IMASK0_M4IMSK0x_22                            ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4IMASK0_M4IMSK0x_23                            ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4IMASK0_M4IMSK0x_24                            ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4IMASK0_M4IMSK0x_25                            ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4IMASK0_M4IMSK0x_26                            ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M4IMASK0_M4IMSK0x_27                            ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M4IMASK0_M4IMSK0x_28                            ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M4IMASK0_M4IMSK0x_29                            ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M4IMASK0_M4IMSK0x_30                            ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M4IMASK0_M4IMSK0x_31                            ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M4IMASK1 register  ********/
#define EXTI_M4IMASK1_M4IMSK1x                               ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_M4IMASK1_M4IMSK1x_0                             ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4IMASK1_M4IMSK1x_1                             ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4IMASK1_M4IMSK1x_2                             ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4IMASK1_M4IMSK1x_3                             ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4IMASK1_M4IMSK1x_4                             ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4IMASK1_M4IMSK1x_5                             ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4IMASK1_M4IMSK1x_6                             ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4IMASK1_M4IMSK1x_7                             ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4IMASK1_M4IMSK1x_8                             ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4IMASK1_M4IMSK1x_9                             ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4IMASK1_M4IMSK1x_10                            ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4IMASK1_M4IMSK1x_11                            ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4IMASK1_M4IMSK1x_12                            ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4IMASK1_M4IMSK1x_13                            ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4IMASK1_M4IMSK1x_14                            ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4IMASK1_M4IMSK1x_15                            ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4IMASK1_M4IMSK1x_16                            ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4IMASK1_M4IMSK1x_17                            ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4IMASK1_M4IMSK1x_18                            ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4IMASK1_M4IMSK1x_19                            ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M7EMASK0 register  ********/
#define EXTI_M7EMASK0_M7EMASK0x                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M7EMASK0_M7EMASK0x_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7EMASK0_M7EMASK0x_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7EMASK0_M7EMASK0x_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7EMASK0_M7EMASK0x_3                            ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7EMASK0_M7EMASK0x_4                            ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7EMASK0_M7EMASK0x_5                            ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7EMASK0_M7EMASK0x_6                            ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7EMASK0_M7EMASK0x_7                            ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7EMASK0_M7EMASK0x_8                            ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7EMASK0_M7EMASK0x_9                            ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7EMASK0_M7EMASK0x_10                           ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7EMASK0_M7EMASK0x_11                           ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7EMASK0_M7EMASK0x_12                           ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7EMASK0_M7EMASK0x_13                           ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7EMASK0_M7EMASK0x_14                           ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7EMASK0_M7EMASK0x_15                           ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7EMASK0_M7EMASK0x_16                           ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7EMASK0_M7EMASK0x_17                           ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7EMASK0_M7EMASK0x_18                           ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7EMASK0_M7EMASK0x_19                           ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7EMASK0_M7EMASK0x_20                           ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7EMASK0_M7EMASK0x_21                           ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7EMASK0_M7EMASK0x_22                           ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7EMASK0_M7EMASK0x_23                           ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7EMASK0_M7EMASK0x_24                           ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7EMASK0_M7EMASK0x_25                           ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7EMASK0_M7EMASK0x_26                           ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M7EMASK0_M7EMASK0x_27                           ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M7EMASK0_M7EMASK0x_28                           ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M7EMASK0_M7EMASK0x_29                           ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M7EMASK0_M7EMASK0x_30                           ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M7EMASK0_M7EMASK0x_31                           ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M7EMASK1 register  ********/
#define EXTI_M7EMASK1_M7EMASK1x                              ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_M7EMASK1_M7EMASK1x_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7EMASK1_M7EMASK1x_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7EMASK1_M7EMASK1x_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7EMASK1_M7EMASK1x_3                            ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7EMASK1_M7EMASK1x_4                            ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7EMASK1_M7EMASK1x_5                            ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7EMASK1_M7EMASK1x_6                            ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7EMASK1_M7EMASK1x_7                            ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7EMASK1_M7EMASK1x_8                            ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7EMASK1_M7EMASK1x_9                            ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7EMASK1_M7EMASK1x_10                           ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7EMASK1_M7EMASK1x_11                           ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7EMASK1_M7EMASK1x_12                           ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7EMASK1_M7EMASK1x_13                           ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7EMASK1_M7EMASK1x_14                           ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7EMASK1_M7EMASK1x_15                           ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7EMASK1_M7EMASK1x_16                           ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7EMASK1_M7EMASK1x_17                           ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7EMASK1_M7EMASK1x_18                           ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7EMASK1_M7EMASK1x_19                           ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M4EMASK0 register  ********/
#define EXTI_M4EMASK0_M4EMASK0x                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M4EMASK0_M4EMASK0x_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4EMASK0_M4EMASK0x_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4EMASK0_M4EMASK0x_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4EMASK0_M4EMASK0x_3                            ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4EMASK0_M4EMASK0x_4                            ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4EMASK0_M4EMASK0x_5                            ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4EMASK0_M4EMASK0x_6                            ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4EMASK0_M4EMASK0x_7                            ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4EMASK0_M4EMASK0x_8                            ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4EMASK0_M4EMASK0x_9                            ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4EMASK0_M4EMASK0x_10                           ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4EMASK0_M4EMASK0x_11                           ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4EMASK0_M4EMASK0x_12                           ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4EMASK0_M4EMASK0x_13                           ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4EMASK0_M4EMASK0x_14                           ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4EMASK0_M4EMASK0x_15                           ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4EMASK0_M4EMASK0x_16                           ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4EMASK0_M4EMASK0x_17                           ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4EMASK0_M4EMASK0x_18                           ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4EMASK0_M4EMASK0x_19                           ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4EMASK0_M4EMASK0x_20                           ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4EMASK0_M4EMASK0x_21                           ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4EMASK0_M4EMASK0x_22                           ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4EMASK0_M4EMASK0x_23                           ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4EMASK0_M4EMASK0x_24                           ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4EMASK0_M4EMASK0x_25                           ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4EMASK0_M4EMASK0x_26                           ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M4EMASK0_M4EMASK0x_27                           ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M4EMASK0_M4EMASK0x_28                           ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M4EMASK0_M4EMASK0x_29                           ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M4EMASK0_M4EMASK0x_30                           ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M4EMASK0_M4EMASK0x_31                           ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M4EMASK1 register  ********/
#define EXTI_M4EMASK1_M4EMASK1x                              ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_M4EMASK1_M4EMASK1x_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4EMASK1_M4EMASK1x_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4EMASK1_M4EMASK1x_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4EMASK1_M4EMASK1x_3                            ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4EMASK1_M4EMASK1x_4                            ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4EMASK1_M4EMASK1x_5                            ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4EMASK1_M4EMASK1x_6                            ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4EMASK1_M4EMASK1x_7                            ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4EMASK1_M4EMASK1x_8                            ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4EMASK1_M4EMASK1x_9                            ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4EMASK1_M4EMASK1x_10                           ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4EMASK1_M4EMASK1x_11                           ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4EMASK1_M4EMASK1x_12                           ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4EMASK1_M4EMASK1x_13                           ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4EMASK1_M4EMASK1x_14                           ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4EMASK1_M4EMASK1x_15                           ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4EMASK1_M4EMASK1x_16                           ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4EMASK1_M4EMASK1x_17                           ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4EMASK1_M4EMASK1x_18                           ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4EMASK1_M4EMASK1x_19                           ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M7PEND0 register  ********/
#define EXTI_M7PEND0_M7PEND0x                                ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M7PEND0_M7PEND0x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7PEND0_M7PEND0x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7PEND0_M7PEND0x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7PEND0_M7PEND0x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7PEND0_M7PEND0x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7PEND0_M7PEND0x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7PEND0_M7PEND0x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7PEND0_M7PEND0x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7PEND0_M7PEND0x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7PEND0_M7PEND0x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7PEND0_M7PEND0x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7PEND0_M7PEND0x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7PEND0_M7PEND0x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7PEND0_M7PEND0x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7PEND0_M7PEND0x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7PEND0_M7PEND0x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7PEND0_M7PEND0x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7PEND0_M7PEND0x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7PEND0_M7PEND0x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7PEND0_M7PEND0x_19                             ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7PEND0_M7PEND0x_20                             ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7PEND0_M7PEND0x_21                             ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7PEND0_M7PEND0x_22                             ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7PEND0_M7PEND0x_23                             ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7PEND0_M7PEND0x_24                             ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7PEND0_M7PEND0x_25                             ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7PEND0_M7PEND0x_26                             ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M7PEND0_M7PEND0x_27                             ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M7PEND0_M7PEND0x_28                             ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M7PEND0_M7PEND0x_29                             ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M7PEND0_M7PEND0x_30                             ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M7PEND0_M7PEND0x_31                             ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M7PEND1 register  ********/
#define EXTI_M7PEND1_M7PEND1x                                ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_M7PEND1_M7PEND1x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7PEND1_M7PEND1x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7PEND1_M7PEND1x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7PEND1_M7PEND1x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7PEND1_M7PEND1x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7PEND1_M7PEND1x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7PEND1_M7PEND1x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7PEND1_M7PEND1x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7PEND1_M7PEND1x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7PEND1_M7PEND1x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7PEND1_M7PEND1x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7PEND1_M7PEND1x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7PEND1_M7PEND1x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7PEND1_M7PEND1x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7PEND1_M7PEND1x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7PEND1_M7PEND1x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7PEND1_M7PEND1x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7PEND1_M7PEND1x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7PEND1_M7PEND1x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7PEND1_M7PEND1x_19                             ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M4PEND0 register  ********/
#define EXTI_M4PEND0_M4PEND0x                                ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M4PEND0_M4PEND0x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4PEND0_M4PEND0x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4PEND0_M4PEND0x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4PEND0_M4PEND0x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4PEND0_M4PEND0x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4PEND0_M4PEND0x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4PEND0_M4PEND0x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4PEND0_M4PEND0x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4PEND0_M4PEND0x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4PEND0_M4PEND0x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4PEND0_M4PEND0x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4PEND0_M4PEND0x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4PEND0_M4PEND0x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4PEND0_M4PEND0x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4PEND0_M4PEND0x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4PEND0_M4PEND0x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4PEND0_M4PEND0x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4PEND0_M4PEND0x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4PEND0_M4PEND0x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4PEND0_M4PEND0x_19                             ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4PEND0_M4PEND0x_20                             ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4PEND0_M4PEND0x_21                             ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4PEND0_M4PEND0x_22                             ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4PEND0_M4PEND0x_23                             ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4PEND0_M4PEND0x_24                             ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4PEND0_M4PEND0x_25                             ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4PEND0_M4PEND0x_26                             ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M4PEND0_M4PEND0x_27                             ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M4PEND0_M4PEND0x_28                             ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M4PEND0_M4PEND0x_29                             ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M4PEND0_M4PEND0x_30                             ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M4PEND0_M4PEND0x_31                             ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M4PEND1 register  ********/
#define EXTI_M4PEND1_M4PEND1x                                ((uint32_t)0x000FFFFFU)         /* Bit[19:0] */
#define EXTI_M4PEND1_M4PEND1x_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4PEND1_M4PEND1x_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4PEND1_M4PEND1x_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4PEND1_M4PEND1x_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4PEND1_M4PEND1x_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4PEND1_M4PEND1x_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4PEND1_M4PEND1x_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4PEND1_M4PEND1x_7                              ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4PEND1_M4PEND1x_8                              ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4PEND1_M4PEND1x_9                              ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4PEND1_M4PEND1x_10                             ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4PEND1_M4PEND1x_11                             ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4PEND1_M4PEND1x_12                             ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4PEND1_M4PEND1x_13                             ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4PEND1_M4PEND1x_14                             ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4PEND1_M4PEND1x_15                             ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4PEND1_M4PEND1x_16                             ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4PEND1_M4PEND1x_17                             ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4PEND1_M4PEND1x_18                             ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4PEND1_M4PEND1x_19                             ((uint32_t)0x00080000U)         /* Bit19*/

/******** Bit definition for EXTI_M7IMASK0_DRC register  ********/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_27                   ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_28                   ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_29                   ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_30                   ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M7IMASK0_DRC_M7IMASK0_DRCx_31                   ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M7IMASK1_DRC register  ********/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx                      ((uint32_t)0x07FFFFFFU)         /* Bit[26:0] */
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7IMASK1_DRC_M7IMASK1_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/

/******** Bit definition for EXTI_M4IMASK0_DRC register  ********/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_27                   ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_28                   ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_29                   ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_30                   ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M4IMASK0_DRC_M4IMASK0_DRCx_31                   ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M4IMASK1_DRC register  ********/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx                      ((uint32_t)0x07FFFFFFU)         /* Bit[26:0] */
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4IMASK1_DRC_M4IMASK1_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/

/******** Bit definition for EXTI_M7EMASK0_DRC register  ********/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_27                   ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_28                   ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_29                   ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_30                   ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M7EMASK0_DRC_M7EMASK0_DRCx_31                   ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M7EMASK1_DRC register  ********/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx                      ((uint32_t)0x07FFFFFFU)         /* Bit[26:0] */
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M7EMASK1_DRC_M7EMASK1_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/

/******** Bit definition for EXTI_M4EMASK0_DRC register  ********/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_27                   ((uint32_t)0x08000000U)         /* Bit27*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_28                   ((uint32_t)0x10000000U)         /* Bit28*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_29                   ((uint32_t)0x20000000U)         /* Bit29*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_30                   ((uint32_t)0x40000000U)         /* Bit30*/
#define EXTI_M4EMASK0_DRC_M4EMASK0_DRCx_31                   ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for EXTI_M4EMASK1_DRC register  ********/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx                      ((uint32_t)0x07FFFFFFU)         /* Bit[26:0] */
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_0                    ((uint32_t)0x00000001U)         /* Bit0*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_1                    ((uint32_t)0x00000002U)         /* Bit1*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_2                    ((uint32_t)0x00000004U)         /* Bit2*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_3                    ((uint32_t)0x00000008U)         /* Bit3*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_4                    ((uint32_t)0x00000010U)         /* Bit4*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_5                    ((uint32_t)0x00000020U)         /* Bit5*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_6                    ((uint32_t)0x00000040U)         /* Bit6*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_7                    ((uint32_t)0x00000080U)         /* Bit7*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_8                    ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_9                    ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_10                   ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_11                   ((uint32_t)0x00000800U)         /* Bit11*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_12                   ((uint32_t)0x00001000U)         /* Bit12*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_13                   ((uint32_t)0x00002000U)         /* Bit13*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_14                   ((uint32_t)0x00004000U)         /* Bit14*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_15                   ((uint32_t)0x00008000U)         /* Bit15*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_16                   ((uint32_t)0x00010000U)         /* Bit16*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_17                   ((uint32_t)0x00020000U)         /* Bit17*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_18                   ((uint32_t)0x00040000U)         /* Bit18*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_19                   ((uint32_t)0x00080000U)         /* Bit19*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_20                   ((uint32_t)0x00100000U)         /* Bit20*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_21                   ((uint32_t)0x00200000U)         /* Bit21*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_22                   ((uint32_t)0x00400000U)         /* Bit22*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_23                   ((uint32_t)0x00800000U)         /* Bit23*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_24                   ((uint32_t)0x01000000U)         /* Bit24*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_25                   ((uint32_t)0x02000000U)         /* Bit25*/
#define EXTI_M4EMASK1_DRC_M4EMASK1_DRCx_26                   ((uint32_t)0x04000000U)         /* Bit26*/

/******** Bit definition for EXTI_TS_SEL register  ********/
#define EXTI_TS_SEL_TSSEL                                    ((uint32_t)0x00000F00U)         /* Bit[11:8] */
#define EXTI_TS_SEL_TSSEL_0                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define EXTI_TS_SEL_TSSEL_1                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define EXTI_TS_SEL_TSSEL_2                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define EXTI_TS_SEL_TSSEL_3                                  ((uint32_t)0x00000800U)         /* Bit11*/

#define EXTI_TS_SEL_EXTI0                                    ((uint32_t)0x00000000U) /* Select EXTI0  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI1                                    ((uint32_t)0x00000100U) /* Select EXTI1  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI2                                    ((uint32_t)0x00000200U) /* Select EXTI2  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI3                                    ((uint32_t)0x00000300U) /* Select EXTI3  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI4                                    ((uint32_t)0x00000400U) /* Select EXTI4  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI5                                    ((uint32_t)0x00000500U) /* Select EXTI5  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI6                                    ((uint32_t)0x00000600U) /* Select EXTI6  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI7                                    ((uint32_t)0x00000700U) /* Select EXTI7  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI8                                    ((uint32_t)0x00000800U) /* Select EXTI8  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI9                                    ((uint32_t)0x00000900U) /* Select EXTI9  as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI10                                   ((uint32_t)0x00000A00U) /* Select EXTI10 as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI11                                   ((uint32_t)0x00000B00U) /* Select EXTI11 as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI12                                   ((uint32_t)0x00000C00U) /* Select EXTI12 as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI13                                   ((uint32_t)0x00000D00U) /* Select EXTI13 as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI14                                   ((uint32_t)0x00000E00U) /* Select EXTI14 as trigger source of timestamp event */
#define EXTI_TS_SEL_EXTI15                                   ((uint32_t)0x00000F00U) /* Select EXTI15 as trigger source of timestamp event */

/*** Synchronous Dynamic Random Access Memory(SDRAM) interface ***/

/** Bit definition for SDRAM_BADD1 register  **/
#define SDRAM_BADD1_ADDBASE        ((uint32_t)0x000FFFFFU) /* ADDBASE[19:0] bits (Base address value for SDRAM1) */

/** Bit definition for SDRAM_ADDMASK1 register  **/
#define SDRAM_ADDMASK1_ADDMASK     ((uint32_t)0x000FFFFFU) /* ADDMASK[19:0] bits (Address mask value for SDRAM1) */

/** Bit definition for SDRAM_BADD2 register  **/
#define SDRAM_BADD2_ADDBASE        ((uint32_t)0x000FFFFFU) /* ADDBASE[19:0] bits (Base address value for SDRAM2) */                         

/** Bit definition for SDRAM_ADDMASK2 register  **/
#define SDRAM_ADDMASK2_ADDMASK     ((uint32_t)0x000FFFFFU) /* ADDMASK[19:0] bits (Address mask value for SDRAM2) */

/** Bit definition for SDRAM_CFG1 and SDRAM_CFG2 register  **/
#define SDRAM_CFG_SDRAMEN         ((uint32_t)0x80000000U) /* SDRAM1 or SDRAM2 enable bit */                       
#define SDRAM_CFG_REFRESHEN       ((uint32_t)0x40000000U) /* Refresh commands enable bit */                         
#define SDRAM_CFG_AUTOPCHEN       ((uint32_t)0x00800000U) /* Auto precharge enable bit */ 
#define SDRAM_CFG_BUSWID          ((uint32_t)0x00600000U) /* BUSWID[1:0] bits (bus width) */                     
#define SDRAM_CFG_BUSWID_0        ((uint32_t)0x00200000U) /* Bit 0 */                 
#define SDRAM_CFG_BUSWID_1        ((uint32_t)0x00400000U) /* Bit 1 */                  
#define SDRAM_CFG_BURSTLEN        ((uint32_t)0x001C0000U) /* BURSTLEN[2:0] bits (burst length) */                       
#define SDRAM_CFG_BURSTLEN_0      ((uint32_t)0x00040000U) /* Bit 0 */ 
#define SDRAM_CFG_BURSTLEN_1      ((uint32_t)0x00080000U) /* Bit 1 */ 
#define SDRAM_CFG_BURSTLEN_2      ((uint32_t)0x00100000U) /* Bit 2 */                    
#define SDRAM_CFG_CASLATENCY      ((uint32_t)0x00030000U) /* CASLATENCY[1:0] bits (CAS latency) */                       
#define SDRAM_CFG_CASLATENCY_0    ((uint32_t)0x00010000U) /* Bit 0 */ 
#define SDRAM_CFG_CASLATENCY_1    ((uint32_t)0x00020000U) /* Bit 1 */                    
#define SDRAM_CFG_PREFCHRDEN      ((uint32_t)0x00000200U) /* Prefetch read enable bit */  
#define SDRAM_CFG_SOMEN           ((uint32_t)0x00000100U) /* Write buffer store on miss(SOM) enable bit */  
#define SDRAM_CFG_BANKINTRLEN     ((uint32_t)0x00000010U) /* Bank interleaving enable bit */  
#define SDRAM_CFG_ADDCFG          ((uint32_t)0x0000000FU) /* ADDCFG[3:0] bits (Address organization configuration of SDRAM1 or SDRAM2) */                    
#define SDRAM_CFG_ADDCFG_0        ((uint32_t)0x00000001U) /* Bit 0 */                     
#define SDRAM_CFG_ADDCFG_1        ((uint32_t)0x00000002U) /* Bit 1 */                     
#define SDRAM_CFG_ADDCFG_2        ((uint32_t)0x00000004U) /* Bit 2 */                      
#define SDRAM_CFG_ADDCFG_3        ((uint32_t)0x00000008U) /* Bit 3 */    

/** Bit definition for SDRAM_RAT register  **/
#define SDRAM_RAT_TRAS             ((uint32_t)0x0000003FU) /* TRAS[5:0] bits (Row active time) */  

/** Bit definition for SDRAM_RCT register  **/
#define SDRAM_RCT_TRC              ((uint32_t)0x0000003FU) /* TRC[5:0] bits (Row cycle time) */ 

/** Bit definition for SDRAM_RRDLY register  **/
#define SDRAM_RRDLY_TRRD           ((uint32_t)0x0000003FU) /* TRRD[5:0] bits (Row active to row active delay time) */ 

/** Bit definition for SDRAM_PT register  **/
#define SDRAM_PT_TRP               ((uint32_t)0x0000003FU) /* TRP[5:0] bits (Precharge time) */ 

/** Bit definition for SDRAM_WRT register  **/
#define SDRAM_WRT_TWR              ((uint32_t)0x0000003FU) /* TWR[5:0] bits (Write recovery time) */ 

/** Bit definition for SDRAM_RFCT register  **/
#define SDRAM_RFCT_TRFC            ((uint32_t)0x0000003FU) /* TRFC[5:0] bits (Refresh cycle time) */ 

/** Bit definition for SDRAM_RCDLY register  **/
#define SDRAM_RCDLY_TRCD           ((uint32_t)0x0000000FU) /* TRCD[3:0] bits (RAS to CAS delay time) */ 

/** Bit definition for SDRAM_RI register  **/
#define SDRAM_RI_TRI               ((uint32_t)0x00FFFFFFU) /* TRI[23:0] bits (Refresh interval time) */ 

/** Bit definition for SDRAM_CBO register  **/
#define SDRAM_CBO_DUMMY            ((uint32_t)0xFFFFFFFFU) /* DUMMY[31:0] bits (Dummy data) */ 

/** Bit definition for SDRAM_OR register  **/
#define SDRAM_OR_DUMMY             ((uint32_t)0xFFFFFFFFU) /* DUMMY[31:0] bits (Dummy data) */ 

/** Bit definition for SDRAM_OS register  **/
#define SDRAM_OS_CKEN              ((uint32_t)0x40000000U) /* Clock enable bit */ 
#define SDRAM_OS_OPCODE            ((uint32_t)0x30000000U) /* OPCODE[1:0] bits (Operation code) */  
#define SDRAM_OS_OPCODE_0          ((uint32_t)0x10000000U) /* Bit 0 */
#define SDRAM_OS_OPCODE_1          ((uint32_t)0x20000000U) /* Bit 1 */
#define SDRAM_OS_CS                ((uint32_t)0x03000000U) /* CS[1:0] bits (Chip select) */  
#define SDRAM_OS_CS_0              ((uint32_t)0x01000000U) /* Bit 0 */
#define SDRAM_OS_CS_1              ((uint32_t)0x02000000U) /* Bit 1 */
#define SDRAM_OS_BANKADD           ((uint32_t)0x00030000U) /* BANKADD[1:0] bits (Bank address) */ 
#define SDRAM_OS_BANKADD_0         ((uint32_t)0x00010000U) /* Bit 0 */
#define SDRAM_OS_BANKADD_1         ((uint32_t)0x00020000U) /* Bit 1 */
#define SDRAM_OS_ADD               ((uint32_t)0x00003FFFU) /* ADD[3:0] bits (Address) */      


/** Bit definition for SDRAM_IINFO register  **/
#define SDRAM_IINFO_SYNCMEMBUFSIZE ((uint32_t)0x00FF0000U) /* SYNCMEMBUFSIZE[7:0] bits (Synchronous memory buffer size) */                            

/** Bit definition for SDRAM_WP register  **/
#define SDRAM_WP_WP1                ((uint32_t)0x00000001U) /* SRAM1 Write protection */   
#define SDRAM_WP_WP2                ((uint32_t)0x00000002U) /* SRAM2 Write protection */ 


/******** Bit definition for RCC_PLL1CTRL1 register  ********/
#define RCC_PLL1CTRL1_PLL1SRC                            ((uint32_t)0x30000000U)         /* Bit[29:28] */
#define RCC_PLL1CTRL1_PLL1SRC_0                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_PLL1CTRL1_PLL1SRC_1                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_PLL1CTRL1_PLL1PHLK                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_PLL1CTRL1_PLL1LDOEN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_PLL1CTRL1_PLL1EN                                  ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_PLL1CTRL1_PLL1RST                                 ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_PLL1CTRL1_PLL1PD                                  ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_PLL1CTRL1_PLL1BWAJ                          ((uint32_t)0x00000FFFU)         /* Bit */
#define RCC_PLL1CTRL1_PLL1BWAJ_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL1CTRL1_PLL1BWAJ_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL1CTRL1_PLL1BWAJ_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL1CTRL1_PLL1BWAJ_3                        ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL1CTRL1_PLL1BWAJ_4                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL1CTRL1_PLL1BWAJ_5                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_PLL1CTRL1_PLL1BWAJ_6                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_PLL1CTRL1_PLL1BWAJ_7                        ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_PLL1CTRL1_PLL1BWAJ_8                        ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL1CTRL1_PLL1BWAJ_9                        ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL1CTRL1_PLL1BWAJ_10                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL1CTRL1_PLL1BWAJ_11                       ((uint32_t)0x00000800U)         /* Bit11*/

/******** Bit definition for RCC_PLL1CTRL2 register  ********/
#define RCC_PLL1CTRL2_PLL1CLKR                           ((uint32_t)0xFC000000U)         /* Bit[31:26] */
#define RCC_PLL1CTRL2_PLL1CLKR_0                         ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_PLL1CTRL2_PLL1CLKR_1                         ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_PLL1CTRL2_PLL1CLKR_2                         ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_PLL1CTRL2_PLL1CLKR_3                         ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_PLL1CTRL2_PLL1CLKR_4                         ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_PLL1CTRL2_PLL1CLKR_5                         ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_PLL1CTRL2_PLL1CLKF                          ((uint32_t)0x03FFFFFFU)         /* Bit */
#define RCC_PLL1CTRL2_PLL1CLKF_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL1CTRL2_PLL1CLKF_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL1CTRL2_PLL1CLKF_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL1CTRL2_PLL1CLKF_3                        ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL1CTRL2_PLL1CLKF_4                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL1CTRL2_PLL1CLKF_5                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_PLL1CTRL2_PLL1CLKF_6                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_PLL1CTRL2_PLL1CLKF_7                        ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_PLL1CTRL2_PLL1CLKF_8                        ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL1CTRL2_PLL1CLKF_9                        ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL1CTRL2_PLL1CLKF_10                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL1CTRL2_PLL1CLKF_11                       ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_PLL1CTRL2_PLL1CLKF_12                       ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_PLL1CTRL2_PLL1CLKF_13                       ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_PLL1CTRL2_PLL1CLKF_14                       ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_PLL1CTRL2_PLL1CLKF_15                       ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_PLL1CTRL2_PLL1CLKF_16                       ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_PLL1CTRL2_PLL1CLKF_17                       ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_PLL1CTRL2_PLL1CLKF_18                       ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_PLL1CTRL2_PLL1CLKF_19                       ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_PLL1CTRL2_PLL1CLKF_20                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_PLL1CTRL2_PLL1CLKF_21                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_PLL1CTRL2_PLL1CLKF_22                       ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_PLL1CTRL2_PLL1CLKF_23                       ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_PLL1CTRL2_PLL1CLKF_24                       ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_PLL1CTRL2_PLL1CLKF_25                       ((uint32_t)0x02000000U)         /* Bit25*/

/******** Bit definition for RCC_PLL2CTRL1 register  ********/
#define RCC_PLL2CTRL1_PLL2SRC                            ((uint32_t)0x30000000U)         /* Bit[29:28] */
#define RCC_PLL2CTRL1_PLL2SRC_0                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_PLL2CTRL1_PLL2SRC_1                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_PLL2CTRL1_PLL2PHLK                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_PLL2CTRL1_PLL2LDOEN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_PLL2CTRL1_PLL2EN                                  ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_PLL2CTRL1_PLL2RST                                 ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_PLL2CTRL1_PLL2PD                                  ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_PLL2CTRL1_PLL2BWAJ                          ((uint32_t)0x00000FFFU)         /* Bit */
#define RCC_PLL2CTRL1_PLL2BWAJ_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL2CTRL1_PLL2BWAJ_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL2CTRL1_PLL2BWAJ_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL2CTRL1_PLL2BWAJ_3                        ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL2CTRL1_PLL2BWAJ_4                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL2CTRL1_PLL2BWAJ_5                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_PLL2CTRL1_PLL2BWAJ_6                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_PLL2CTRL1_PLL2BWAJ_7                        ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_PLL2CTRL1_PLL2BWAJ_8                        ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL2CTRL1_PLL2BWAJ_9                        ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL2CTRL1_PLL2BWAJ_10                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL2CTRL1_PLL2BWAJ_11                       ((uint32_t)0x00000800U)         /* Bit11*/

/******** Bit definition for RCC_PLL2CTRL2 register  ********/
#define RCC_PLL2CTRL2_PLL2CLKR                           ((uint32_t)0xFC000000U)         /* Bit[31:26] */
#define RCC_PLL2CTRL2_PLL2CLKR_0                         ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_PLL2CTRL2_PLL2CLKR_1                         ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_PLL2CTRL2_PLL2CLKR_2                         ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_PLL2CTRL2_PLL2CLKR_3                         ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_PLL2CTRL2_PLL2CLKR_4                         ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_PLL2CTRL2_PLL2CLKR_5                         ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_PLL2CTRL2_PLL2CLKF                          ((uint32_t)0x03FFFFFFU)         /* Bit */
#define RCC_PLL2CTRL2_PLL2CLKF_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL2CTRL2_PLL2CLKF_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL2CTRL2_PLL2CLKF_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL2CTRL2_PLL2CLKF_3                        ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL2CTRL2_PLL2CLKF_4                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL2CTRL2_PLL2CLKF_5                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_PLL2CTRL2_PLL2CLKF_6                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_PLL2CTRL2_PLL2CLKF_7                        ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_PLL2CTRL2_PLL2CLKF_8                        ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL2CTRL2_PLL2CLKF_9                        ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL2CTRL2_PLL2CLKF_10                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL2CTRL2_PLL2CLKF_11                       ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_PLL2CTRL2_PLL2CLKF_12                       ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_PLL2CTRL2_PLL2CLKF_13                       ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_PLL2CTRL2_PLL2CLKF_14                       ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_PLL2CTRL2_PLL2CLKF_15                       ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_PLL2CTRL2_PLL2CLKF_16                       ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_PLL2CTRL2_PLL2CLKF_17                       ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_PLL2CTRL2_PLL2CLKF_18                       ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_PLL2CTRL2_PLL2CLKF_19                       ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_PLL2CTRL2_PLL2CLKF_20                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_PLL2CTRL2_PLL2CLKF_21                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_PLL2CTRL2_PLL2CLKF_22                       ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_PLL2CTRL2_PLL2CLKF_23                       ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_PLL2CTRL2_PLL2CLKF_24                       ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_PLL2CTRL2_PLL2CLKF_25                       ((uint32_t)0x02000000U)         /* Bit25*/


/******** Bit definition for RCC_PLL3CTRL1 register  ********/
#define RCC_PLL3CTRL1_PLL3SRC                            ((uint32_t)0x30000000U)         /* Bit[29:28] */
#define RCC_PLL3CTRL1_PLL3SRC_0                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_PLL3CTRL1_PLL3SRC_1                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_PLL3CTRL1_PLL3PHLK                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_PLL3CTRL1_PLL3LDOEN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_PLL3CTRL1_PLL3EN                                  ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_PLL3CTRL1_PLL3RST                                 ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_PLL3CTRL1_PLL3PD                                  ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_PLL3CTRL1_PLL3BWAJ                          ((uint32_t)0x00000FFFU)         /* Bit */
#define RCC_PLL3CTRL1_PLL3BWAJ_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL3CTRL1_PLL3BWAJ_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL3CTRL1_PLL3BWAJ_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL3CTRL1_PLL3BWAJ_3                        ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL3CTRL1_PLL3BWAJ_4                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL3CTRL1_PLL3BWAJ_5                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_PLL3CTRL1_PLL3BWAJ_6                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_PLL3CTRL1_PLL3BWAJ_7                        ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_PLL3CTRL1_PLL3BWAJ_8                        ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL3CTRL1_PLL3BWAJ_9                        ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL3CTRL1_PLL3BWAJ_10                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL3CTRL1_PLL3BWAJ_11                       ((uint32_t)0x00000800U)         /* Bit11*/

/******** Bit definition for RCC_PLL3CTRL2 register  ********/
#define RCC_PLL3CTRL2_PLL3CLKR                           ((uint32_t)0xFC000000U)         /* Bit[31:26] */
#define RCC_PLL3CTRL2_PLL3CLKR_0                         ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_PLL3CTRL2_PLL3CLKR_1                         ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_PLL3CTRL2_PLL3CLKR_2                         ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_PLL3CTRL2_PLL3CLKR_3                         ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_PLL3CTRL2_PLL3CLKR_4                         ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_PLL3CTRL2_PLL3CLKR_5                         ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_PLL3CTRL2_PLL3CLKF                          ((uint32_t)0x03FFFFFFU)         /* Bit */
#define RCC_PLL3CTRL2_PLL3CLKF_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL3CTRL2_PLL3CLKF_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL3CTRL2_PLL3CLKF_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL3CTRL2_PLL3CLKF_3                        ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL3CTRL2_PLL3CLKF_4                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL3CTRL2_PLL3CLKF_5                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_PLL3CTRL2_PLL3CLKF_6                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_PLL3CTRL2_PLL3CLKF_7                        ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_PLL3CTRL2_PLL3CLKF_8                        ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL3CTRL2_PLL3CLKF_9                        ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL3CTRL2_PLL3CLKF_10                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL3CTRL2_PLL3CLKF_11                       ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_PLL3CTRL2_PLL3CLKF_12                       ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_PLL3CTRL2_PLL3CLKF_13                       ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_PLL3CTRL2_PLL3CLKF_14                       ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_PLL3CTRL2_PLL3CLKF_15                       ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_PLL3CTRL2_PLL3CLKF_16                       ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_PLL3CTRL2_PLL3CLKF_17                       ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_PLL3CTRL2_PLL3CLKF_18                       ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_PLL3CTRL2_PLL3CLKF_19                       ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_PLL3CTRL2_PLL3CLKF_20                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_PLL3CTRL2_PLL3CLKF_21                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_PLL3CTRL2_PLL3CLKF_22                       ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_PLL3CTRL2_PLL3CLKF_23                       ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_PLL3CTRL2_PLL3CLKF_24                       ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_PLL3CTRL2_PLL3CLKF_25                       ((uint32_t)0x02000000U)         /* Bit25*/


/******** Bit definition for RCC_SHRPLLCTRL1 register  ********/
#define RCC_SHRPLLCTRL1_SHRPLLSRC                          ((uint32_t)0x30000000U)         /* Bit[29:28] */
#define RCC_SHRPLLCTRL1_SHRPLLSRC_0                        ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_SHRPLLCTRL1_SHRPLLSRC_1                        ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_SHRPLLCTRL1_SHRPLLPHLK                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_SHRPLLCTRL1_SHRPLLLDOEN                             ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_SHRPLLCTRL1_SHRPLLEN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_SHRPLLCTRL1_SHRPLLRST                               ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_SHRPLLCTRL1_SHRPLLPD                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ                        ((uint32_t)0x00000FFFU)         /* Bit */
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_0                      ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_1                      ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_2                      ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_3                      ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_4                      ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_5                      ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_6                      ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_7                      ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_8                      ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_9                      ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_10                     ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_SHRPLLCTRL1_SHRPLLBWAJ_11                     ((uint32_t)0x00000800U)         /* Bit11*/

/******** Bit definition for RCC_SHRPLLCTRL2 register  ********/
#define RCC_SHRPLLCTRL2_SHRPLLCLKR                         ((uint32_t)0xFC000000U)         /* Bit[31:26] */
#define RCC_SHRPLLCTRL2_SHRPLLCLKR_0                       ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKR_1                       ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKR_2                       ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKR_3                       ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKR_4                       ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKR_5                       ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF                        ((uint32_t)0x03FFFFFFU)         /* Bit */
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_0                      ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_1                      ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_2                      ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_3                      ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_4                      ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_5                      ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_6                      ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_7                      ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_8                      ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_9                      ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_10                     ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_11                     ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_12                     ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_13                     ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_14                     ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_15                     ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_16                     ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_17                     ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_18                     ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_19                     ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_20                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_21                     ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_22                     ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_23                     ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_24                     ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_SHRPLLCTRL2_SHRPLLCLKF_25                     ((uint32_t)0x02000000U)         /* Bit25*/

/******** Bit definition for RCC_SRCCTRL1 register  ********/
#define RCC_SRCCTRL1_AFEMSIRDF                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_SRCCTRL1_AFEHSIRDF                               ((uint32_t)0x40000000U)         /* Bit[30] */

#define RCC_SRCCTRL1_SCLKSTS                            ((uint32_t)0x0C000000U)         /* Bit[27:26] */
#define RCC_SRCCTRL1_SCLKSTS_0                          ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_SRCCTRL1_SCLKSTS_1                          ((uint32_t)0x08000000U)         /* Bit27*/

#define RCC_SRCCTRL1_SCLKSTS_HSI                        ((uint32_t)0x00000000U)
#define RCC_SRCCTRL1_SCLKSTS_MSI                        ((uint32_t)0x04000000U)
#define RCC_SRCCTRL1_SCLKSTS_HSE                        ((uint32_t)0x08000000U)
#define RCC_SRCCTRL1_SCLKSTS_PLL1                       ((uint32_t)0x0C000000U)

#define RCC_SRCCTRL1_SCLKSW                             ((uint32_t)0x03000000U)         /* Bit[25:24] */
#define RCC_SRCCTRL1_SCLKSW_0                           ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_SRCCTRL1_SCLKSW_1                           ((uint32_t)0x02000000U)         /* Bit25*/

#define RCC_SRCCTRL1_SCLKSW_HSI                         ((uint32_t)0x00000000U)
#define RCC_SRCCTRL1_SCLKSW_MSI                         ((uint32_t)0x01000000U)
#define RCC_SRCCTRL1_SCLKSW_HSE                         ((uint32_t)0x02000000U)
#define RCC_SRCCTRL1_SCLKSW_PLL1                        ((uint32_t)0x03000000U)

#define RCC_SRCCTRL1_HSERDCNTEN                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_SRCCTRL1_MSIRDF                                  ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_SRCCTRL1_MSIEN                                   ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_SRCCTRL1_HSECSSEN                                ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_SRCCTRL1_HSEBP                                   ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_SRCCTRL1_HSERDF                                  ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_SRCCTRL1_HSEEN                                   ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_SRCCTRL1_HSIRDF                                  ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_SRCCTRL1_HSIEN                                   ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_SRCCTRL2 register  ********/
#define RCC_SRCCTRL2_BORF                                    ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_SRCCTRL2_HSICALEF                                ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_SRCCTRL2_MSICALEF                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_SRCCTRL2_M7HYPSEL                                ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_SRCCTRL2_AXIHYPSEL                               ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_SRCCTRL2_MSICAL                             ((uint32_t)0x00001F00U)         /* Bit[12:8] */
#define RCC_SRCCTRL2_MSICAL_0                           ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_SRCCTRL2_MSICAL_1                           ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_SRCCTRL2_MSICAL_2                           ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_SRCCTRL2_MSICAL_3                           ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_SRCCTRL2_MSICAL_4                           ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_SRCCTRL2_MSITRIM                            ((uint32_t)0x0000001FU)         /* Bit */
#define RCC_SRCCTRL2_MSITRIM_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_SRCCTRL2_MSITRIM_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_SRCCTRL2_MSITRIM_2                          ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_SRCCTRL2_MSITRIM_3                          ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_SRCCTRL2_MSITRIM_4                          ((uint32_t)0x00000010U)         /* Bit4*/

/******** Bit definition for RCC_SRCCTRL3 register  ********/
#define RCC_SRCCTRL3_HSICAL                             ((uint32_t)0x01FF0000U)         /* Bit[24:16] */
#define RCC_SRCCTRL3_HSICAL_0                           ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_SRCCTRL3_HSICAL_1                           ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_SRCCTRL3_HSICAL_2                           ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_SRCCTRL3_HSICAL_3                           ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_SRCCTRL3_HSICAL_4                           ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_SRCCTRL3_HSICAL_5                           ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_SRCCTRL3_HSICAL_6                           ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_SRCCTRL3_HSICAL_7                           ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_SRCCTRL3_HSICAL_8                           ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_SRCCTRL3_HSITRIM                            ((uint32_t)0x000001FFU)         /* Bit */
#define RCC_SRCCTRL3_HSITRIM_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_SRCCTRL3_HSITRIM_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_SRCCTRL3_HSITRIM_2                          ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_SRCCTRL3_HSITRIM_3                          ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_SRCCTRL3_HSITRIM_4                          ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_SRCCTRL3_HSITRIM_5                          ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_SRCCTRL3_HSITRIM_6                          ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_SRCCTRL3_HSITRIM_7                          ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_SRCCTRL3_HSITRIM_8                          ((uint32_t)0x00000100U)         /* Bit8*/

/******** Bit definition for RCC_PLL1DIV register  ********/
#define RCC_PLL1DIV_PLL1CDIV                           ((uint32_t)0x003F0000U)         /* Bit[21:16] */
#define RCC_PLL1DIV_PLL1CDIV_0                         ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_PLL1DIV_PLL1CDIV_1                         ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_PLL1DIV_PLL1CDIV_2                         ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_PLL1DIV_PLL1CDIV_3                         ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_PLL1DIV_PLL1CDIV_4                         ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_PLL1DIV_PLL1CDIV_5                         ((uint32_t)0x00200000U)         /* Bit21*/

#define RCC_PLL1DIV_PLL1CDIV_DIV1                      ((uint32_t)0x00010000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV2                      ((uint32_t)0x00020000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV3                      ((uint32_t)0x00030000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV4                      ((uint32_t)0x00040000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV5                      ((uint32_t)0x00050000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV6                      ((uint32_t)0x00060000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV7                      ((uint32_t)0x00070000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV8                      ((uint32_t)0x00080000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV9                      ((uint32_t)0x00090000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV10                     ((uint32_t)0x000A0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV11                     ((uint32_t)0x000B0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV12                     ((uint32_t)0x000C0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV13                     ((uint32_t)0x000D0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV14                     ((uint32_t)0x000E0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV15                     ((uint32_t)0x000F0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV16                     ((uint32_t)0x00100000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV17                     ((uint32_t)0x00110000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV18                     ((uint32_t)0x00120000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV19                     ((uint32_t)0x00130000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV20                     ((uint32_t)0x00140000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV21                     ((uint32_t)0x00150000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV22                     ((uint32_t)0x00160000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV23                     ((uint32_t)0x00170000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV24                     ((uint32_t)0x00180000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV25                     ((uint32_t)0x00190000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV26                     ((uint32_t)0x001A0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV27                     ((uint32_t)0x001B0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV28                     ((uint32_t)0x001C0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV29                     ((uint32_t)0x001D0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV30                     ((uint32_t)0x001E0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV31                     ((uint32_t)0x001F0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV32                     ((uint32_t)0x00200000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV33                     ((uint32_t)0x00210000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV34                     ((uint32_t)0x00220000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV35                     ((uint32_t)0x00230000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV36                     ((uint32_t)0x00240000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV37                     ((uint32_t)0x00250000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV38                     ((uint32_t)0x00260000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV39                     ((uint32_t)0x00270000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV40                     ((uint32_t)0x00280000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV41                     ((uint32_t)0x00290000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV42                     ((uint32_t)0x002A0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV43                     ((uint32_t)0x002B0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV44                     ((uint32_t)0x002C0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV45                     ((uint32_t)0x002D0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV46                     ((uint32_t)0x002E0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV47                     ((uint32_t)0x002F0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV48                     ((uint32_t)0x00300000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV49                     ((uint32_t)0x00310000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV50                     ((uint32_t)0x00320000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV51                     ((uint32_t)0x00330000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV52                     ((uint32_t)0x00340000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV53                     ((uint32_t)0x00350000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV54                     ((uint32_t)0x00360000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV55                     ((uint32_t)0x00370000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV56                     ((uint32_t)0x00380000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV57                     ((uint32_t)0x00390000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV58                     ((uint32_t)0x003A0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV59                     ((uint32_t)0x003B0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV60                     ((uint32_t)0x003C0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV61                     ((uint32_t)0x003D0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV62                     ((uint32_t)0x003E0000U)
#define RCC_PLL1DIV_PLL1CDIV_DIV63                     ((uint32_t)0x003F0000U)

#define RCC_PLL1DIV_PLL1BDIV                           ((uint32_t)0x00003F00U)         /* Bit[13:8] */
#define RCC_PLL1DIV_PLL1BDIV_0                         ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL1DIV_PLL1BDIV_1                         ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL1DIV_PLL1BDIV_2                         ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL1DIV_PLL1BDIV_3                         ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_PLL1DIV_PLL1BDIV_4                         ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_PLL1DIV_PLL1BDIV_5                         ((uint32_t)0x00002000U)         /* Bit13*/

#define RCC_PLL1DIV_PLL1BDIV_DIV1                      ((uint32_t)0x00000100U)
#define RCC_PLL1DIV_PLL1BDIV_DIV2                      ((uint32_t)0x00000200U)
#define RCC_PLL1DIV_PLL1BDIV_DIV3                      ((uint32_t)0x00000300U)
#define RCC_PLL1DIV_PLL1BDIV_DIV4                      ((uint32_t)0x00000400U)
#define RCC_PLL1DIV_PLL1BDIV_DIV5                      ((uint32_t)0x00000500U)
#define RCC_PLL1DIV_PLL1BDIV_DIV6                      ((uint32_t)0x00000600U)
#define RCC_PLL1DIV_PLL1BDIV_DIV7                      ((uint32_t)0x00000700U)
#define RCC_PLL1DIV_PLL1BDIV_DIV8                      ((uint32_t)0x00000800U)
#define RCC_PLL1DIV_PLL1BDIV_DIV9                      ((uint32_t)0x00000900U)
#define RCC_PLL1DIV_PLL1BDIV_DIV10                     ((uint32_t)0x00000A00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV11                     ((uint32_t)0x00000B00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV12                     ((uint32_t)0x00000C00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV13                     ((uint32_t)0x00000D00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV14                     ((uint32_t)0x00000E00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV15                     ((uint32_t)0x00000F00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV16                     ((uint32_t)0x00001000U)
#define RCC_PLL1DIV_PLL1BDIV_DIV17                     ((uint32_t)0x00001100U)
#define RCC_PLL1DIV_PLL1BDIV_DIV18                     ((uint32_t)0x00001200U)
#define RCC_PLL1DIV_PLL1BDIV_DIV19                     ((uint32_t)0x00001300U)
#define RCC_PLL1DIV_PLL1BDIV_DIV20                     ((uint32_t)0x00001400U)
#define RCC_PLL1DIV_PLL1BDIV_DIV21                     ((uint32_t)0x00001500U)
#define RCC_PLL1DIV_PLL1BDIV_DIV22                     ((uint32_t)0x00001600U)
#define RCC_PLL1DIV_PLL1BDIV_DIV23                     ((uint32_t)0x00001700U)
#define RCC_PLL1DIV_PLL1BDIV_DIV24                     ((uint32_t)0x00001800U)
#define RCC_PLL1DIV_PLL1BDIV_DIV25                     ((uint32_t)0x00001900U)
#define RCC_PLL1DIV_PLL1BDIV_DIV26                     ((uint32_t)0x00001A00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV27                     ((uint32_t)0x00001B00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV28                     ((uint32_t)0x00001C00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV29                     ((uint32_t)0x00001D00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV30                     ((uint32_t)0x00001E00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV31                     ((uint32_t)0x00001F00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV32                     ((uint32_t)0x00002000U)
#define RCC_PLL1DIV_PLL1BDIV_DIV33                     ((uint32_t)0x00002100U)
#define RCC_PLL1DIV_PLL1BDIV_DIV34                     ((uint32_t)0x00002200U)
#define RCC_PLL1DIV_PLL1BDIV_DIV35                     ((uint32_t)0x00002300U)
#define RCC_PLL1DIV_PLL1BDIV_DIV36                     ((uint32_t)0x00002400U)
#define RCC_PLL1DIV_PLL1BDIV_DIV37                     ((uint32_t)0x00002500U)
#define RCC_PLL1DIV_PLL1BDIV_DIV38                     ((uint32_t)0x00002600U)
#define RCC_PLL1DIV_PLL1BDIV_DIV39                     ((uint32_t)0x00002700U)
#define RCC_PLL1DIV_PLL1BDIV_DIV40                     ((uint32_t)0x00002800U)
#define RCC_PLL1DIV_PLL1BDIV_DIV41                     ((uint32_t)0x00002900U)
#define RCC_PLL1DIV_PLL1BDIV_DIV42                     ((uint32_t)0x00002A00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV43                     ((uint32_t)0x00002B00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV44                     ((uint32_t)0x00002C00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV45                     ((uint32_t)0x00002D00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV46                     ((uint32_t)0x00002E00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV47                     ((uint32_t)0x00002F00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV48                     ((uint32_t)0x00003000U)
#define RCC_PLL1DIV_PLL1BDIV_DIV49                     ((uint32_t)0x00003100U)
#define RCC_PLL1DIV_PLL1BDIV_DIV50                     ((uint32_t)0x00003200U)
#define RCC_PLL1DIV_PLL1BDIV_DIV51                     ((uint32_t)0x00003300U)
#define RCC_PLL1DIV_PLL1BDIV_DIV52                     ((uint32_t)0x00003400U)
#define RCC_PLL1DIV_PLL1BDIV_DIV53                     ((uint32_t)0x00003500U)
#define RCC_PLL1DIV_PLL1BDIV_DIV54                     ((uint32_t)0x00003600U)
#define RCC_PLL1DIV_PLL1BDIV_DIV55                     ((uint32_t)0x00003700U)
#define RCC_PLL1DIV_PLL1BDIV_DIV56                     ((uint32_t)0x00003800U)
#define RCC_PLL1DIV_PLL1BDIV_DIV57                     ((uint32_t)0x00003900U)
#define RCC_PLL1DIV_PLL1BDIV_DIV58                     ((uint32_t)0x00003A00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV59                     ((uint32_t)0x00003B00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV60                     ((uint32_t)0x00003C00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV61                     ((uint32_t)0x00003D00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV62                     ((uint32_t)0x00003E00U)
#define RCC_PLL1DIV_PLL1BDIV_DIV63                     ((uint32_t)0x00003F00U)

#define RCC_PLL1DIV_PLL1ADIV                           ((uint32_t)0x0000003FU)         /* Bit */
#define RCC_PLL1DIV_PLL1ADIV_0                         ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL1DIV_PLL1ADIV_1                         ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL1DIV_PLL1ADIV_2                         ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL1DIV_PLL1ADIV_3                         ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL1DIV_PLL1ADIV_4                         ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL1DIV_PLL1ADIV_5                         ((uint32_t)0x00000020U)         /* Bit5*/

#define RCC_PLL1DIV_PLL1ADIV_DIV1                      ((uint32_t)0x00000001U)
#define RCC_PLL1DIV_PLL1ADIV_DIV2                      ((uint32_t)0x00000002U)
#define RCC_PLL1DIV_PLL1ADIV_DIV3                      ((uint32_t)0x00000003U)
#define RCC_PLL1DIV_PLL1ADIV_DIV4                      ((uint32_t)0x00000004U)
#define RCC_PLL1DIV_PLL1ADIV_DIV5                      ((uint32_t)0x00000005U)
#define RCC_PLL1DIV_PLL1ADIV_DIV6                      ((uint32_t)0x00000006U)
#define RCC_PLL1DIV_PLL1ADIV_DIV7                      ((uint32_t)0x00000007U)
#define RCC_PLL1DIV_PLL1ADIV_DIV8                      ((uint32_t)0x00000008U)
#define RCC_PLL1DIV_PLL1ADIV_DIV9                      ((uint32_t)0x00000009U)
#define RCC_PLL1DIV_PLL1ADIV_DIV10                     ((uint32_t)0x0000000AU)
#define RCC_PLL1DIV_PLL1ADIV_DIV11                     ((uint32_t)0x0000000BU)
#define RCC_PLL1DIV_PLL1ADIV_DIV12                     ((uint32_t)0x0000000CU)
#define RCC_PLL1DIV_PLL1ADIV_DIV13                     ((uint32_t)0x0000000DU)
#define RCC_PLL1DIV_PLL1ADIV_DIV14                     ((uint32_t)0x0000000EU)
#define RCC_PLL1DIV_PLL1ADIV_DIV15                     ((uint32_t)0x0000000FU) 
#define RCC_PLL1DIV_PLL1ADIV_DIV16                     ((uint32_t)0x00000010U)
#define RCC_PLL1DIV_PLL1ADIV_DIV17                     ((uint32_t)0x00000011U)
#define RCC_PLL1DIV_PLL1ADIV_DIV18                     ((uint32_t)0x00000012U)
#define RCC_PLL1DIV_PLL1ADIV_DIV19                     ((uint32_t)0x00000013U)
#define RCC_PLL1DIV_PLL1ADIV_DIV20                     ((uint32_t)0x00000014U)
#define RCC_PLL1DIV_PLL1ADIV_DIV21                     ((uint32_t)0x00000015U)
#define RCC_PLL1DIV_PLL1ADIV_DIV22                     ((uint32_t)0x00000016U)
#define RCC_PLL1DIV_PLL1ADIV_DIV23                     ((uint32_t)0x00000017U)
#define RCC_PLL1DIV_PLL1ADIV_DIV24                     ((uint32_t)0x00000018U)
#define RCC_PLL1DIV_PLL1ADIV_DIV25                     ((uint32_t)0x00000019U)
#define RCC_PLL1DIV_PLL1ADIV_DIV26                     ((uint32_t)0x0000001AU)
#define RCC_PLL1DIV_PLL1ADIV_DIV27                     ((uint32_t)0x0000001BU)
#define RCC_PLL1DIV_PLL1ADIV_DIV28                     ((uint32_t)0x0000001CU)
#define RCC_PLL1DIV_PLL1ADIV_DIV29                     ((uint32_t)0x0000001DU)
#define RCC_PLL1DIV_PLL1ADIV_DIV30                     ((uint32_t)0x0000001EU)
#define RCC_PLL1DIV_PLL1ADIV_DIV31                     ((uint32_t)0x0000001FU)
#define RCC_PLL1DIV_PLL1ADIV_DIV32                     ((uint32_t)0x00000020U)
#define RCC_PLL1DIV_PLL1ADIV_DIV33                     ((uint32_t)0x00000021U)
#define RCC_PLL1DIV_PLL1ADIV_DIV34                     ((uint32_t)0x00000022U)
#define RCC_PLL1DIV_PLL1ADIV_DIV35                     ((uint32_t)0x00000023U)
#define RCC_PLL1DIV_PLL1ADIV_DIV36                     ((uint32_t)0x00000024U)
#define RCC_PLL1DIV_PLL1ADIV_DIV37                     ((uint32_t)0x00000025U)
#define RCC_PLL1DIV_PLL1ADIV_DIV38                     ((uint32_t)0x00000026U)
#define RCC_PLL1DIV_PLL1ADIV_DIV39                     ((uint32_t)0x00000027U)
#define RCC_PLL1DIV_PLL1ADIV_DIV40                     ((uint32_t)0x00000028U)
#define RCC_PLL1DIV_PLL1ADIV_DIV41                     ((uint32_t)0x00000029U)
#define RCC_PLL1DIV_PLL1ADIV_DIV42                     ((uint32_t)0x0000002AU)
#define RCC_PLL1DIV_PLL1ADIV_DIV43                     ((uint32_t)0x0000002BU)
#define RCC_PLL1DIV_PLL1ADIV_DIV44                     ((uint32_t)0x0000002CU)
#define RCC_PLL1DIV_PLL1ADIV_DIV45                     ((uint32_t)0x0000002DU)
#define RCC_PLL1DIV_PLL1ADIV_DIV46                     ((uint32_t)0x0000002EU)
#define RCC_PLL1DIV_PLL1ADIV_DIV47                     ((uint32_t)0x0000002FU)
#define RCC_PLL1DIV_PLL1ADIV_DIV48                     ((uint32_t)0x00000030U)
#define RCC_PLL1DIV_PLL1ADIV_DIV49                     ((uint32_t)0x00000031U)
#define RCC_PLL1DIV_PLL1ADIV_DIV50                     ((uint32_t)0x00000032U)
#define RCC_PLL1DIV_PLL1ADIV_DIV51                     ((uint32_t)0x00000033U)
#define RCC_PLL1DIV_PLL1ADIV_DIV52                     ((uint32_t)0x00000034U)
#define RCC_PLL1DIV_PLL1ADIV_DIV53                     ((uint32_t)0x00000035U)
#define RCC_PLL1DIV_PLL1ADIV_DIV54                     ((uint32_t)0x00000036U)
#define RCC_PLL1DIV_PLL1ADIV_DIV55                     ((uint32_t)0x00000037U)
#define RCC_PLL1DIV_PLL1ADIV_DIV56                     ((uint32_t)0x00000038U)
#define RCC_PLL1DIV_PLL1ADIV_DIV57                     ((uint32_t)0x00000039U)
#define RCC_PLL1DIV_PLL1ADIV_DIV58                     ((uint32_t)0x0000003AU)
#define RCC_PLL1DIV_PLL1ADIV_DIV59                     ((uint32_t)0x0000003BU)
#define RCC_PLL1DIV_PLL1ADIV_DIV60                     ((uint32_t)0x0000003CU)
#define RCC_PLL1DIV_PLL1ADIV_DIV61                     ((uint32_t)0x0000003DU)
#define RCC_PLL1DIV_PLL1ADIV_DIV62                     ((uint32_t)0x0000003EU)
#define RCC_PLL1DIV_PLL1ADIV_DIV63                     ((uint32_t)0x0000003FU)


/******** Bit definition for RCC_PLL2DIV register  ********/
#define RCC_PLL2DIV_PLL2CDIV                                ((uint32_t)0x003F0000U)         /* Bit[21:16] */
#define RCC_PLL2DIV_PLL2CDIV_0                              ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_PLL2DIV_PLL2CDIV_1                              ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_PLL2DIV_PLL2CDIV_2                              ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_PLL2DIV_PLL2CDIV_3                              ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_PLL2DIV_PLL2CDIV_4                              ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_PLL2DIV_PLL2CDIV_5                              ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_PLL2DIV_PLL2BDIV                                ((uint32_t)0x00003F00U)         /* Bit[13:8] */
#define RCC_PLL2DIV_PLL2BDIV_0                              ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL2DIV_PLL2BDIV_1                              ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL2DIV_PLL2BDIV_2                              ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL2DIV_PLL2BDIV_3                              ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_PLL2DIV_PLL2BDIV_4                              ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_PLL2DIV_PLL2BDIV_5                              ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_PLL2DIV_PLL2ADIV                                ((uint32_t)0x0000003FU)         /* Bit */
#define RCC_PLL2DIV_PLL2ADIV_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL2DIV_PLL2ADIV_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL2DIV_PLL2ADIV_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL2DIV_PLL2ADIV_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL2DIV_PLL2ADIV_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL2DIV_PLL2ADIV_5                              ((uint32_t)0x00000020U)         /* Bit5*/

/******** Bit definition for RCC_PLL3DIV register  ********/
#define RCC_PLL3DIV_PLL3CDIV                                ((uint32_t)0x003F0000U)         /* Bit[21:16] */
#define RCC_PLL3DIV_PLL3CDIV_0                              ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_PLL3DIV_PLL3CDIV_1                              ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_PLL3DIV_PLL3CDIV_2                              ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_PLL3DIV_PLL3CDIV_3                              ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_PLL3DIV_PLL3CDIV_4                              ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_PLL3DIV_PLL3CDIV_5                              ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_PLL3DIV_PLL3BDIV                                ((uint32_t)0x00003F00U)         /* Bit[13:8] */
#define RCC_PLL3DIV_PLL3BDIV_0                              ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_PLL3DIV_PLL3BDIV_1                              ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_PLL3DIV_PLL3BDIV_2                              ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_PLL3DIV_PLL3BDIV_3                              ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_PLL3DIV_PLL3BDIV_4                              ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_PLL3DIV_PLL3BDIV_5                              ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_PLL3DIV_PLL3ADIV                                ((uint32_t)0x0000003FU)         /* Bit */
#define RCC_PLL3DIV_PLL3ADIV_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_PLL3DIV_PLL3ADIV_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_PLL3DIV_PLL3ADIV_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_PLL3DIV_PLL3ADIV_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_PLL3DIV_PLL3ADIV_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_PLL3DIV_PLL3ADIV_5                              ((uint32_t)0x00000020U)         /* Bit5*/

/******** Bit definition for RCC_SYSBUSDIV1 register  ********/
#define RCC_SYSBUSDIV1_AXIHYPDIV                          ((uint32_t)0x0F000000U)         /* Bit[27:24] */
#define RCC_SYSBUSDIV1_AXIHYPDIV_0                        ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_SYSBUSDIV1_AXIHYPDIV_1                        ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_SYSBUSDIV1_AXIHYPDIV_2                        ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_SYSBUSDIV1_AXIHYPDIV_3                        ((uint32_t)0x08000000U)         /* Bit27*/

#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV1                     ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV2                     ((uint32_t)0x01000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV4                     ((uint32_t)0x02000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV8                     ((uint32_t)0x04000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV16                    ((uint32_t)0x07000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV32                    ((uint32_t)0x08000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV64                    ((uint32_t)0x09000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV128                   ((uint32_t)0x0A000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV256                   ((uint32_t)0x0B000000U)
#define RCC_SYSBUSDIV1_AXIHYPDIV_DIV512                   ((uint32_t)0x0C000000U)

#define RCC_SYSBUSDIV1_HSIDIV                             ((uint32_t)0x00F00000U)         /* Bit[23:20] */
#define RCC_SYSBUSDIV1_HSIDIV_0                           ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_SYSBUSDIV1_HSIDIV_1                           ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_SYSBUSDIV1_HSIDIV_2                           ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_SYSBUSDIV1_HSIDIV_3                           ((uint32_t)0x00800000U)         /* Bit23*/

#define RCC_SYSBUSDIV1_HSIDIV_DIV1                        ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV2                        ((uint32_t)0x00100000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV4                        ((uint32_t)0x00200000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV8                        ((uint32_t)0x00400000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV16                       ((uint32_t)0x00700000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV32                       ((uint32_t)0x00800000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV64                       ((uint32_t)0x00900000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV128                      ((uint32_t)0x00A00000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV256                      ((uint32_t)0x00B00000U)
#define RCC_SYSBUSDIV1_HSIDIV_DIV512                      ((uint32_t)0x00C00000U)

#define RCC_SYSBUSDIV1_M7HYPDIV                           ((uint32_t)0x000F0000U)         /* Bit[19:16] */
#define RCC_SYSBUSDIV1_M7HYPDIV_0                         ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_SYSBUSDIV1_M7HYPDIV_1                         ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_SYSBUSDIV1_M7HYPDIV_2                         ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_SYSBUSDIV1_M7HYPDIV_3                         ((uint32_t)0x00080000U)         /* Bit19*/

#define RCC_SYSBUSDIV1_M7HYPDIV_DIV1                      ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV2                      ((uint32_t)0x00010000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV4                      ((uint32_t)0x00020000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV8                      ((uint32_t)0x00040000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV16                     ((uint32_t)0x00070000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV32                     ((uint32_t)0x00080000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV64                     ((uint32_t)0x00090000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV128                    ((uint32_t)0x000A0000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV256                    ((uint32_t)0x000B0000U)
#define RCC_SYSBUSDIV1_M7HYPDIV_DIV512                    ((uint32_t)0x000C0000U)

#define RCC_SYSBUSDIV1_AXIDIV                             ((uint32_t)0x0000F000U)         /* Bit[15:12] */
#define RCC_SYSBUSDIV1_AXIDIV_0                           ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_SYSBUSDIV1_AXIDIV_1                           ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_SYSBUSDIV1_AXIDIV_2                           ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_SYSBUSDIV1_AXIDIV_3                           ((uint32_t)0x00008000U)         /* Bit15*/

#define RCC_SYSBUSDIV1_AXIDIV_DIV1                        ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV2                        ((uint32_t)0x00001000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV4                        ((uint32_t)0x00002000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV8                        ((uint32_t)0x00004000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV16                       ((uint32_t)0x00007000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV32                       ((uint32_t)0x00008000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV64                       ((uint32_t)0x00009000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV128                      ((uint32_t)0x0000A000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV256                      ((uint32_t)0x0000B000U)
#define RCC_SYSBUSDIV1_AXIDIV_DIV512                      ((uint32_t)0x0000C000U)

#define RCC_SYSBUSDIV1_BUSDIV                             ((uint32_t)0x00000F00U)         /* Bit[11:8] */
#define RCC_SYSBUSDIV1_BUSDIV_0                           ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_SYSBUSDIV1_BUSDIV_1                           ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_SYSBUSDIV1_BUSDIV_2                           ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_SYSBUSDIV1_BUSDIV_3                           ((uint32_t)0x00000800U)         /* Bit11*/

#define RCC_SYSBUSDIV1_BUSDIV_DIV1                        ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV2                        ((uint32_t)0x00000100U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV4                        ((uint32_t)0x00000200U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV8                        ((uint32_t)0x00000400U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV16                       ((uint32_t)0x00000700U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV32                       ((uint32_t)0x00000800U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV64                       ((uint32_t)0x00000900U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV128                      ((uint32_t)0x00000A00U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV256                      ((uint32_t)0x00000B00U)
#define RCC_SYSBUSDIV1_BUSDIV_DIV512                      ((uint32_t)0x00000C00U)

#define RCC_SYSBUSDIV1_MSIDIV                             ((uint32_t)0x000000F0U)         /* Bit[7:4] */
#define RCC_SYSBUSDIV1_MSIDIV_0                           ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_SYSBUSDIV1_MSIDIV_1                           ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_SYSBUSDIV1_MSIDIV_2                           ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_SYSBUSDIV1_MSIDIV_3                           ((uint32_t)0x00000080U)         /* Bit7*/

#define RCC_SYSBUSDIV1_MSIDIV_DIV1                        ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV2                        ((uint32_t)0x00000010U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV4                        ((uint32_t)0x00000020U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV8                        ((uint32_t)0x00000040U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV16                       ((uint32_t)0x00000070U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV32                       ((uint32_t)0x00000080U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV64                       ((uint32_t)0x00000090U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV128                      ((uint32_t)0x000000A0U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV256                      ((uint32_t)0x000000B0U)
#define RCC_SYSBUSDIV1_MSIDIV_DIV512                      ((uint32_t)0x000000C0U)

#define RCC_SYSBUSDIV1_SCLKDIV                            ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_SYSBUSDIV1_SCLKDIV_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_SYSBUSDIV1_SCLKDIV_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_SYSBUSDIV1_SCLKDIV_2                          ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_SYSBUSDIV1_SCLKDIV_3                          ((uint32_t)0x00000008U)         /* Bit3*/

#define RCC_SYSBUSDIV1_SCLKDIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV2                       ((uint32_t)0x00000001U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV4                       ((uint32_t)0x00000002U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV8                       ((uint32_t)0x00000004U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV16                      ((uint32_t)0x00000007U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV32                      ((uint32_t)0x00000008U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV64                      ((uint32_t)0x00000009U)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV128                     ((uint32_t)0x0000000AU)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV256                     ((uint32_t)0x0000000BU)
#define RCC_SYSBUSDIV1_SCLKDIV_DIV512                     ((uint32_t)0x0000000CU)

/******** Bit definition for RCC_SYSBUSDIV2 register  ********/
#define RCC_SYSBUSDIV2_APB6DIV                            ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_SYSBUSDIV2_APB6DIV_0                          ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_SYSBUSDIV2_APB6DIV_1                          ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_SYSBUSDIV2_APB6DIV_2                          ((uint32_t)0x04000000U)         /* Bit26*/

#define RCC_SYSBUSDIV2_APB6DIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV2_APB6DIV_DIV2                       ((uint32_t)0x04000000U)
#define RCC_SYSBUSDIV2_APB6DIV_DIV4                       ((uint32_t)0x05000000U)
#define RCC_SYSBUSDIV2_APB6DIV_DIV8                       ((uint32_t)0x06000000U)
#define RCC_SYSBUSDIV2_APB6DIV_DIV16                      ((uint32_t)0x07000000U)

#define RCC_SYSBUSDIV2_APB5DIV                            ((uint32_t)0x00070000U)         /* Bit[18:16] */
#define RCC_SYSBUSDIV2_APB5DIV_0                          ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_SYSBUSDIV2_APB5DIV_1                          ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_SYSBUSDIV2_APB5DIV_2                          ((uint32_t)0x00040000U)         /* Bit18*/

#define RCC_SYSBUSDIV2_APB5DIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV2_APB5DIV_DIV2                       ((uint32_t)0x00040000U)
#define RCC_SYSBUSDIV2_APB5DIV_DIV4                       ((uint32_t)0x00050000U)
#define RCC_SYSBUSDIV2_APB5DIV_DIV8                       ((uint32_t)0x00060000U)
#define RCC_SYSBUSDIV2_APB5DIV_DIV16                      ((uint32_t)0x00070000U)
        
#define RCC_SYSBUSDIV2_APB2DIV                            ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_SYSBUSDIV2_APB2DIV_0                          ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_SYSBUSDIV2_APB2DIV_1                          ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_SYSBUSDIV2_APB2DIV_2                          ((uint32_t)0x00000400U)         /* Bit10*/

#define RCC_SYSBUSDIV2_APB2DIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV2_APB2DIV_DIV2                       ((uint32_t)0x00000400U)
#define RCC_SYSBUSDIV2_APB2DIV_DIV4                       ((uint32_t)0x00000500U)
#define RCC_SYSBUSDIV2_APB2DIV_DIV8                       ((uint32_t)0x00000600U)
#define RCC_SYSBUSDIV2_APB2DIV_DIV16                      ((uint32_t)0x00000700U)

#define RCC_SYSBUSDIV2_APB1DIV                            ((uint32_t)0x00000007U)         /* Bit */
#define RCC_SYSBUSDIV2_APB1DIV_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_SYSBUSDIV2_APB1DIV_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_SYSBUSDIV2_APB1DIV_2                          ((uint32_t)0x00000004U)         /* Bit2*/

#define RCC_SYSBUSDIV2_APB1DIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_SYSBUSDIV2_APB1DIV_DIV2                       ((uint32_t)0x00000004U)
#define RCC_SYSBUSDIV2_APB1DIV_DIV4                       ((uint32_t)0x00000005U)
#define RCC_SYSBUSDIV2_APB1DIV_DIV8                       ((uint32_t)0x00000006U)
#define RCC_SYSBUSDIV2_APB1DIV_DIV16                      ((uint32_t)0x00000007U)
    
/******** Bit definition for RCC_BOOTMODE register  ********/
#define RCC_BOOTMODE_MODE                              ((uint32_t)0xFFFFFFFFU)         /* Bit */
#define RCC_BOOTMODE_MODE_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_BOOTMODE_MODE_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_BOOTMODE_MODE_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_BOOTMODE_MODE_3                            ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_BOOTMODE_MODE_4                            ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_BOOTMODE_MODE_5                            ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_BOOTMODE_MODE_6                            ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_BOOTMODE_MODE_7                            ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_BOOTMODE_MODE_8                            ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_BOOTMODE_MODE_9                            ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_BOOTMODE_MODE_10                           ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_BOOTMODE_MODE_11                           ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_BOOTMODE_MODE_12                           ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_BOOTMODE_MODE_13                           ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_BOOTMODE_MODE_14                           ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_BOOTMODE_MODE_15                           ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_BOOTMODE_MODE_16                           ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_BOOTMODE_MODE_17                           ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_BOOTMODE_MODE_18                           ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_BOOTMODE_MODE_19                           ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_BOOTMODE_MODE_20                           ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_BOOTMODE_MODE_21                           ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_BOOTMODE_MODE_22                           ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_BOOTMODE_MODE_23                           ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_BOOTMODE_MODE_24                           ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_BOOTMODE_MODE_25                           ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_BOOTMODE_MODE_26                           ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_BOOTMODE_MODE_27                           ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_BOOTMODE_MODE_28                           ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_BOOTMODE_MODE_29                           ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_BOOTMODE_MODE_30                           ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_BOOTMODE_MODE_31                           ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for RCC_AHB1DIV1 register  ********/
#define RCC_AHB1DIV1_ETH2SYSDIV                         ((uint32_t)0xF0000000U)         /* Bit[31:28] */
#define RCC_AHB1DIV1_ETH2SYSDIV_0                       ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_AHB1DIV1_ETH2SYSDIV_1                       ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_AHB1DIV1_ETH2SYSDIV_2                       ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_AHB1DIV1_ETH2SYSDIV_3                       ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_AHB1DIV1_SDMMC2SYSDIV                       ((uint32_t)0x0F000000U)         /* Bit[27:24] */
#define RCC_AHB1DIV1_SDMMC2SYSDIV_0                     ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_AHB1DIV1_SDMMC2SYSDIV_1                     ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_AHB1DIV1_SDMMC2SYSDIV_2                     ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_AHB1DIV1_SDMMC2SYSDIV_3                     ((uint32_t)0x08000000U)         /* Bit27*/

#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV1                  ((uint32_t)0x00000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV2                  ((uint32_t)0x01000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV4                  ((uint32_t)0x02000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV8                  ((uint32_t)0x04000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV16                 ((uint32_t)0x07000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV32                 ((uint32_t)0x08000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV64                 ((uint32_t)0x09000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV128                ((uint32_t)0x0A000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV256                ((uint32_t)0x0B000000U)
#define RCC_AHB1DIV1_SDMMC2SYSDIV_DIV512                ((uint32_t)0x0C000000U)
/******** Bit definition for RCC_AHB1DIV2 register  ********/
#define RCC_AHB1DIV2_ADC3SYSDIV                         ((uint32_t)0x003F0000U)         /* Bit[21:16] */
#define RCC_AHB1DIV2_ADC3SYSDIV_0                       ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_AHB1DIV2_ADC3SYSDIV_1                       ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_AHB1DIV2_ADC3SYSDIV_2                       ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_AHB1DIV2_ADC3SYSDIV_3                       ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_AHB1DIV2_ADC3SYSDIV_4                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_AHB1DIV2_ADC3SYSDIV_5                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_AHB1DIV2_ADC2SYSDIV                         ((uint32_t)0x00003F00U)         /* Bit[13:8] */
#define RCC_AHB1DIV2_ADC2SYSDIV_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_AHB1DIV2_ADC2SYSDIV_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_AHB1DIV2_ADC2SYSDIV_2                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_AHB1DIV2_ADC2SYSDIV_3                       ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_AHB1DIV2_ADC2SYSDIV_4                       ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_AHB1DIV2_ADC2SYSDIV_5                       ((uint32_t)0x00002000U)         /* Bit13*/

#define RCC_AHB1DIV2_ADC1SYSDIV                         ((uint32_t)0x0000003FU)         /* Bit */
#define RCC_AHB1DIV2_ADC1SYSDIV_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AHB1DIV2_ADC1SYSDIV_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AHB1DIV2_ADC1SYSDIV_2                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_AHB1DIV2_ADC1SYSDIV_3                       ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_AHB1DIV2_ADC1SYSDIV_4                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_AHB1DIV2_ADC1SYSDIV_5                       ((uint32_t)0x00000020U)         /* Bit5*/

#define RCC_AHB1DIV2_ADC1SYSDIV_DIV1                     ((uint32_t)0x00000001U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV2                     ((uint32_t)0x00000002U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV3                     ((uint32_t)0x00000003U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV4                     ((uint32_t)0x00000004U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV5                     ((uint32_t)0x00000005U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV6                     ((uint32_t)0x00000006U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV7                     ((uint32_t)0x00000007U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV8                     ((uint32_t)0x00000008U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV9                     ((uint32_t)0x00000009U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV10                    ((uint32_t)0x0000000AU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV11                    ((uint32_t)0x0000000BU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV12                    ((uint32_t)0x0000000CU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV13                    ((uint32_t)0x0000000DU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV14                    ((uint32_t)0x0000000EU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV15                    ((uint32_t)0x0000000FU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV16                    ((uint32_t)0x00000010U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV17                    ((uint32_t)0x00000011U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV18                    ((uint32_t)0x00000012U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV19                    ((uint32_t)0x00000013U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV20                    ((uint32_t)0x00000014U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV21                    ((uint32_t)0x00000015U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV22                    ((uint32_t)0x00000016U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV23                    ((uint32_t)0x00000017U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV24                    ((uint32_t)0x00000018U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV25                    ((uint32_t)0x00000019U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV26                    ((uint32_t)0x0000001AU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV27                    ((uint32_t)0x0000001BU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV28                    ((uint32_t)0x0000001CU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV29                    ((uint32_t)0x0000001DU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV30                    ((uint32_t)0x0000001EU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV31                    ((uint32_t)0x0000001FU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV32                    ((uint32_t)0x00000020U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV33                    ((uint32_t)0x00000021U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV34                    ((uint32_t)0x00000022U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV35                    ((uint32_t)0x00000023U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV36                    ((uint32_t)0x00000024U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV37                    ((uint32_t)0x00000025U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV38                    ((uint32_t)0x00000026U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV39                    ((uint32_t)0x00000027U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV40                    ((uint32_t)0x00000028U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV41                    ((uint32_t)0x00000029U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV42                    ((uint32_t)0x0000002AU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV43                    ((uint32_t)0x0000002BU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV44                    ((uint32_t)0x0000002CU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV45                    ((uint32_t)0x0000002DU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV46                    ((uint32_t)0x0000002EU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV47                    ((uint32_t)0x0000002FU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV48                    ((uint32_t)0x00000030U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV49                    ((uint32_t)0x00000031U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV50                    ((uint32_t)0x00000032U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV51                    ((uint32_t)0x00000033U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV52                    ((uint32_t)0x00000034U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV53                    ((uint32_t)0x00000035U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV54                    ((uint32_t)0x00000036U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV55                    ((uint32_t)0x00000037U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV56                    ((uint32_t)0x00000038U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV57                    ((uint32_t)0x00000039U)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV58                    ((uint32_t)0x0000003AU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV59                    ((uint32_t)0x0000003BU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV60                    ((uint32_t)0x0000003CU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV61                    ((uint32_t)0x0000003DU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV62                    ((uint32_t)0x0000003EU)
#define RCC_AHB1DIV2_ADC1SYSDIV_DIV63                    ((uint32_t)0x0000003FU)
/******** Bit definition for RCC_AHB1SEL1 register  ********/
#define RCC_AHB1SEL1_ETH2PTPSEL                         ((uint32_t)0x00300000U)         /* Bit[21:20] */
#define RCC_AHB1SEL1_ETH2PTPSEL_0                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_AHB1SEL1_ETH2PTPSEL_1                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_AHB1SEL1_SDMMC2KERSEL                       ((uint32_t)0x00007000U)         /* Bit[14:12] */
#define RCC_AHB1SEL1_SDMMC2KERSEL_0                     ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_AHB1SEL1_SDMMC2KERSEL_1                     ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_AHB1SEL1_SDMMC2KERSEL_2                     ((uint32_t)0x00004000U)         /* Bit14*/

#define RCC_AHB1SEL1_SDMMC2KERSEL_SYSBUSDIV                     ((uint32_t)0x00000000U)
#define RCC_AHB1SEL1_SDMMC2KERSEL_PERIPH                     ((uint32_t)0x00001000U)
#define RCC_AHB1SEL1_SDMMC2KERSEL_PLL2A                     ((uint32_t)0x00002000U)
#define RCC_AHB1SEL1_SDMMC2KERSEL_PLL3A                     ((uint32_t)0x00003000U)
#define RCC_AHB1SEL1_SDMMC2KERSEL_PLL1B                     ((uint32_t)0x00004000U)

#define RCC_AHB1SEL1_ADC3PLLSEL                         ((uint32_t)0x00000300U)         /* Bit[9:8] */
#define RCC_AHB1SEL1_ADC3PLLSEL_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_AHB1SEL1_ADC3PLLSEL_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_AHB1SEL1_ADC2PLLSEL                         ((uint32_t)0x00000030U)         /* Bit[5:4] */
#define RCC_AHB1SEL1_ADC2PLLSEL_0                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_AHB1SEL1_ADC2PLLSEL_1                       ((uint32_t)0x00000020U)         /* Bit5*/

#define RCC_AHB1SEL1_ADC1PLLSEL                         ((uint32_t)0x00000003U)         /* Bit */
#define RCC_AHB1SEL1_ADC1PLLSEL_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AHB1SEL1_ADC1PLLSEL_1                       ((uint32_t)0x00000002U)         /* Bit1*/

#define RCC_AHB1SEL1_ADC1PLLSEL_PLL2B                   ((uint32_t)0x00000000U)         /* Bit */
#define RCC_AHB1SEL1_ADC1PLLSEL_PLL1B                   ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AHB1SEL1_ADC1PLLSEL_PLL3B                   ((uint32_t)0x00000002U)
#define RCC_AHB1SEL1_ADC1PLLSEL_PLL3C                   ((uint32_t)0x00000003U) 
/******** Bit definition for RCC_AHB1EN1 register  ********/
#define RCC_AHB1EN1_M7SDMMC2EN                              ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AHB1EN1_M4SDMMC2EN                              ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AHB1EN1_M7SDMMC2LPEN                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AHB1EN1_M4SDMMC2LPEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB1EN1_M7USB2EN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AHB1EN1_M4USB2EN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB1EN1_M7USB2LPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB1EN1_M4USB2LPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB1EN1_M7DMAMUX1EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AHB1EN1_M4DMAMUX1EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AHB1EN1_M7DMAMUX1LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AHB1EN1_M4DMAMUX1LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB1EN1_M7ADC1PLLEN                             ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AHB1EN1_M4ADC1PLLEN                             ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AHB1EN1_M7ADC1PLLLPEN                           ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AHB1EN1_M4ADC1PLLLPEN                           ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB1EN1_M7ADC1SYSEN                             ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB1EN1_M4ADC1SYSEN                             ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB1EN1_M7ADC1SYSLPEN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB1EN1_M4ADC1SYSLPEN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB1EN1_M7ADC1BUSEN                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB1EN1_M4ADC1BUSEN                             ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB1EN1_M7ADC1BUSLPEN                           ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB1EN1_M4ADC1BUSLPEN                           ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1EN2 register  ********/
#define RCC_AHB1EN2_M7ETH2TXEN                              ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB1EN2_M4ETH2TXEN                              ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB1EN2_M7ETH2TXLPEN                            ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB1EN2_M4ETH2TXLPEN                            ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB1EN2_M7ETH2RXEN                              ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AHB1EN2_M4ETH2RXEN                              ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AHB1EN2_M7ETH2RXLPEN                            ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AHB1EN2_M4ETH2RXLPEN                            ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB1EN2_M7ETH2MACEN                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB1EN2_M4ETH2MACEN                             ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB1EN2_M7ETH2MACLPEN                           ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB1EN2_M4ETH2MACLPEN                           ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1EN3 register  ********/
#define RCC_AHB1EN3_M7ECCMACEN                              ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AHB1EN3_M4ECCMACEN                              ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AHB1EN3_M7ECCMACLPEN                            ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AHB1EN3_M4ECCMACLPEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB1EN3_M7DMA1EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AHB1EN3_M4DMA1EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AHB1EN3_M7DMA1LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AHB1EN3_M4DMA1LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB1EN3_M7DMA2EN                                ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB1EN3_M4DMA2EN                                ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB1EN3_M7DMA2LPEN                              ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB1EN3_M4DMA2LPEN                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB1EN3_M7DMA3EN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB1EN3_M4DMA3EN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB1EN3_M7DMA3LPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB1EN3_M4DMA3LPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1EN4 register  ********/
#define RCC_AHB1EN4_M7ADC2PLLEN                             ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AHB1EN4_M4ADC2PLLEN                             ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AHB1EN4_M7ADC2PLLLPEN                           ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AHB1EN4_M4ADC2PLLLPEN                           ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB1EN4_M7ADC2SYSEN                             ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AHB1EN4_M4ADC2SYSEN                             ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AHB1EN4_M7ADC2SYSLPEN                           ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AHB1EN4_M4ADC2SYSLPEN                           ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB1EN4_M7ADC2BUSEN                             ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AHB1EN4_M4ADC2BUSEN                             ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AHB1EN4_M7ADC2BUSLPEN                           ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AHB1EN4_M4ADC2BUSLPEN                           ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB1EN4_M7ADC3PLLEN                             ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AHB1EN4_M4ADC3PLLEN                             ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AHB1EN4_M7ADC3PLLLPEN                           ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AHB1EN4_M4ADC3PLLLPEN                           ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB1EN4_M7ADC3SYSEN                             ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB1EN4_M4ADC3SYSEN                             ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB1EN4_M7ADC3SYSLPEN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB1EN4_M4ADC3SYSLPEN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB1EN4_M7ADC3BUSEN                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB1EN4_M4ADC3BUSEN                             ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB1EN4_M7ADC3BUSLPEN                           ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB1EN4_M4ADC3BUSLPEN                           ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1RST1 register  ********/
#define RCC_AHB1RST1_SDMMC2RST                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AHB1RST1_SDHOST2RST                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB1RST1_USB2WRAPRST                             ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB1RST1_USB2PORRST                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB1RST1_USB2RST                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB1RST1_DMAMUX1RST                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB1RST1_ADC1RST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1RST2 register  ********/
#define RCC_AHB1RST2_ETH2RST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1RST3 register  ********/
#define RCC_AHB1RST3_ECCMACRST                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB1RST3_DMA1RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB1RST3_DMA2RST                                 ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB1RST3_DMA3RST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB1RST4 register  ********/
#define RCC_AHB1RST4_ADC2RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB1RST4_ADC3RST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB1DIV1 register  ********/
#define RCC_APB1DIV1_APB1USARTDIV                       ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB1DIV1_APB1USARTDIV_0                     ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB1DIV1_APB1USARTDIV_1                     ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB1DIV1_APB1USARTDIV_2                     ((uint32_t)0x40000000U)         /* Bit30*/

#define RCC_APB1DIV1_APB1USARTDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB1DIV1_APB1USARTDIV_DIV2                   ((uint32_t)0x40000000U)
#define RCC_APB1DIV1_APB1USARTDIV_DIV4                   ((uint32_t)0x50000000U)
#define RCC_APB1DIV1_APB1USARTDIV_DIV8                   ((uint32_t)0x60000000U)
#define RCC_APB1DIV1_APB1USARTDIV_DIV16                  ((uint32_t)0x70000000U)

#define RCC_APB1DIV1_APB1BTIMDIV                        ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_APB1DIV1_APB1BTIMDIV_0                      ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_APB1DIV1_APB1BTIMDIV_1                      ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_APB1DIV1_APB1BTIMDIV_2                      ((uint32_t)0x04000000U)         /* Bit26*/

#define RCC_APB1DIV1_APB1BTIMDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB1DIV1_APB1BTIMDIV_DIV2                   ((uint32_t)0x04000000U)
#define RCC_APB1DIV1_APB1BTIMDIV_DIV4                   ((uint32_t)0x05000000U)
#define RCC_APB1DIV1_APB1BTIMDIV_DIV8                   ((uint32_t)0x06000000U)
#define RCC_APB1DIV1_APB1BTIMDIV_DIV16                  ((uint32_t)0x07000000U)

#define RCC_APB1DIV1_APB1GTIMDIV                        ((uint32_t)0x00070000U)         /* Bit[18:16] */
#define RCC_APB1DIV1_APB1GTIMDIV_0                      ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_APB1DIV1_APB1GTIMDIV_1                      ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_APB1DIV1_APB1GTIMDIV_2                      ((uint32_t)0x00040000U)         /* Bit18*/

#define RCC_APB1DIV1_APB1GTIMDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB1DIV1_APB1GTIMDIV_DIV2                   ((uint32_t)0x00040000U)
#define RCC_APB1DIV1_APB1GTIMDIV_DIV4                   ((uint32_t)0x00050000U)
#define RCC_APB1DIV1_APB1GTIMDIV_DIV8                   ((uint32_t)0x00060000U)
#define RCC_APB1DIV1_APB1GTIMDIV_DIV16                  ((uint32_t)0x00070000U)

#define RCC_APB1DIV1_APB1I2SDIV                         ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_APB1DIV1_APB1I2SDIV_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_APB1DIV1_APB1I2SDIV_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_APB1DIV1_APB1I2SDIV_2                       ((uint32_t)0x00000400U)         /* Bit10*/

#define RCC_APB1DIV1_APB1I2SDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB1DIV1_APB1I2SDIV_DIV2                   ((uint32_t)0x00000400U)
#define RCC_APB1DIV1_APB1I2SDIV_DIV4                   ((uint32_t)0x00000500U)
#define RCC_APB1DIV1_APB1I2SDIV_DIV8                   ((uint32_t)0x00000600U)
#define RCC_APB1DIV1_APB1I2SDIV_DIV16                  ((uint32_t)0x00000700U)

#define RCC_APB1DIV1_APB1FDCANDIV                       ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_APB1DIV1_APB1FDCANDIV_0                     ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_APB1DIV1_APB1FDCANDIV_1                     ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_APB1DIV1_APB1FDCANDIV_2                     ((uint32_t)0x00000040U)         /* Bit6*/

#define RCC_APB1DIV1_APB1FDCANDIV_DIV1                  ((uint32_t)0x00000000U)
#define RCC_APB1DIV1_APB1FDCANDIV_DIV2                  ((uint32_t)0x00000040U)
#define RCC_APB1DIV1_APB1FDCANDIV_DIV4                  ((uint32_t)0x00000050U)
#define RCC_APB1DIV1_APB1FDCANDIV_DIV8                  ((uint32_t)0x00000060U)
#define RCC_APB1DIV1_APB1FDCANDIV_DIV16                 ((uint32_t)0x00000070U)  

#define RCC_APB1DIV1_APB1I2CDIV                         ((uint32_t)0x00000007U)         /* Bit */
#define RCC_APB1DIV1_APB1I2CDIV_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_APB1DIV1_APB1I2CDIV_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_APB1DIV1_APB1I2CDIV_2                       ((uint32_t)0x00000004U)         /* Bit2*/

#define RCC_APB1DIV1_APB1I2CDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB1DIV1_APB1I2CDIV_DIV2                   ((uint32_t)0x00000004U)
#define RCC_APB1DIV1_APB1I2CDIV_DIV4                   ((uint32_t)0x00000005U)
#define RCC_APB1DIV1_APB1I2CDIV_DIV8                   ((uint32_t)0x00000006U)
#define RCC_APB1DIV1_APB1I2CDIV_DIV16                  ((uint32_t)0x00000007U)  
/******** Bit definition for RCC_APB1SEL1 register  ********/
#define RCC_APB1SEL1_I2C1KERSEL                         ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB1SEL1_I2C1KERSEL_0                       ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB1SEL1_I2C1KERSEL_1                       ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB1SEL1_I2C1KERSEL_2                       ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_APB1SEL1_I2C2KERSEL                         ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_APB1SEL1_I2C2KERSEL_0                       ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_APB1SEL1_I2C2KERSEL_1                       ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_APB1SEL1_I2C2KERSEL_2                       ((uint32_t)0x04000000U)         /* Bit26*/

#define RCC_APB1SEL1_I2C3KERSEL                         ((uint32_t)0x00700000U)         /* Bit[22:20] */
#define RCC_APB1SEL1_I2C3KERSEL_0                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_APB1SEL1_I2C3KERSEL_1                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_APB1SEL1_I2C3KERSEL_2                       ((uint32_t)0x00400000U)         /* Bit22*/

#define RCC_APB1SEL1_I2C3KERSEL_SYSBUSDIV                       ((uint32_t)0x00000000U)
#define RCC_APB1SEL1_I2C3KERSEL_PLL3C                        ((uint32_t)0x00100000U)
#define RCC_APB1SEL1_I2C3KERSEL_HSI                          ((uint32_t)0x00200000U)
#define RCC_APB1SEL1_I2C3KERSEL_MSI                        ((uint32_t)0x00300000U)

#define RCC_APB1SEL1_FDCAN1KERSEL                       ((uint32_t)0x00070000U)         /* Bit[18:16] */
#define RCC_APB1SEL1_FDCAN1KERSEL_0                     ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_APB1SEL1_FDCAN1KERSEL_1                     ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_APB1SEL1_FDCAN1KERSEL_2                     ((uint32_t)0x00040000U)         /* Bit18*/

#define RCC_APB1SEL1_FDCAN2KERSEL                       ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_APB1SEL1_FDCAN2KERSEL_0                     ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_APB1SEL1_FDCAN2KERSEL_1                     ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_APB1SEL1_FDCAN2KERSEL_2                     ((uint32_t)0x00000400U)         /* Bit10*/

#define RCC_APB1SEL1_FDCAN2KERSEL_SYSBUSDIV                                ((uint32_t)0x00000000U)
#define RCC_APB1SEL1_FDCAN2KERSEL_PLL1C                                ((uint32_t)0x00000100U)
#define RCC_APB1SEL1_FDCAN2KERSEL_PLL2C                                ((uint32_t)0x00000200U)
#define RCC_APB1SEL1_FDCAN2KERSEL_PLL3B                                ((uint32_t)0x00000300U)
#define RCC_APB1SEL1_FDCAN2KERSEL_PERIPH                                ((uint32_t)0x00000400U)

#define RCC_APB1SEL1_I2S4KERSEL                         ((uint32_t)0x0000000CU)         /* Bit[3:2] */
#define RCC_APB1SEL1_I2S4KERSEL_0                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_APB1SEL1_I2S4KERSEL_1                       ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_APB1SEL1_I2S3KERSEL                         ((uint32_t)0x00000003U)         /* Bit */
#define RCC_APB1SEL1_I2S3KERSEL_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_APB1SEL1_I2S3KERSEL_1                       ((uint32_t)0x00000002U)         /* Bit1*/

/******** Bit definition for RCC_APB1SEL2 register  ********/
#define RCC_APB1SEL2_FDCAN5KERSEL                       ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB1SEL2_FDCAN5KERSEL_0                     ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB1SEL2_FDCAN5KERSEL_1                     ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB1SEL2_FDCAN5KERSEL_2                     ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_APB1SEL2_FDCAN6KERSEL                       ((uint32_t)0x00700000U)         /* Bit[22:20] */
#define RCC_APB1SEL2_FDCAN6KERSEL_0                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_APB1SEL2_FDCAN6KERSEL_1                     ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_APB1SEL2_FDCAN6KERSEL_2                     ((uint32_t)0x00400000U)         /* Bit22*/

/******** Bit definition for RCC_APB1EN1 register  ********/
#define RCC_APB1EN1_M7BTIM1EN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB1EN1_M4BTIM1EN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB1EN1_M7BTIM1LPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB1EN1_M4BTIM1LPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1EN1_M7BTIM2EN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB1EN1_M4BTIM2EN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB1EN1_M7BTIM2LPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB1EN1_M4BTIM2LPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1EN1_M7BTIM3EN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB1EN1_M4BTIM3EN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB1EN1_M7BTIM3LPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB1EN1_M4BTIM3LPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1EN1_M7BTIM4EN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB1EN1_M4BTIM4EN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB1EN1_M7BTIM4LPEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB1EN1_M4BTIM4LPEN                             ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1EN1_M7GTIMB1EN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB1EN1_M4GTIMB1EN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB1EN1_M7GTIMB1LPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB1EN1_M4GTIMB1LPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB1EN1_M7GTIMB2EN                               ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB1EN1_M4GTIMB2EN                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB1EN1_M7GTIMB2LPEN                             ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB1EN1_M4GTIMB2LPEN                             ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB1EN1_M7GTIMB3EN                              ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB1EN1_M4GTIMB3EN                              ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB1EN1_M7GTIMB3LPEN                            ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB1EN1_M4GTIMB3LPEN                            ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB1EN1_M7GTIMA4EN                               ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB1EN1_M4GTIMA4EN                               ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_APB1EN1_M7GTIMA4LPEN                             ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_APB1EN1_M4GTIMA4LPEN                             ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB1EN2 register  ********/
#define RCC_APB1EN2_M7GTIMA5EN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB1EN2_M4GTIMA5EN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB1EN2_M7GTIMA5LPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB1EN2_M4GTIMA5LPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1EN2_M7GTIMA6EN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB1EN2_M4GTIMA6EN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB1EN2_M7GTIMA6LPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB1EN2_M4GTIMA6LPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1EN2_M7GTIMA7EN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB1EN2_M4GTIMA7EN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB1EN2_M7GTIMA7LPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB1EN2_M4GTIMA7LPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1EN2_M7SPI3EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB1EN2_M4SPI3EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB1EN2_M7SPI3LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB1EN2_M4SPI3LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1EN2_M7DAC12EN                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB1EN2_M4DAC12EN                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB1EN2_M7DAC12LPEN                              ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB1EN2_M4DAC12LPEN                              ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB1EN2_M7WWDG2EN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB1EN2_M4WWDG2EN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB1EN2_M7WWDG2LPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB1EN2_M4WWDG2LPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_APB1EN3 register  ********/
#define RCC_APB1EN3_M7USART1EN                              ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB1EN3_M4USART1EN                              ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB1EN3_M7USART1LPEN                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB1EN3_M4USART1LPEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1EN3_M7USART2EN                              ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB1EN3_M4USART2EN                              ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB1EN3_M7USART2LPEN                            ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB1EN3_M4USART2LPEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1EN3_M7USART3EN                              ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB1EN3_M4USART3EN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB1EN3_M7USART3LPEN                            ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB1EN3_M4USART3LPEN                            ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1EN3_M7USART4EN                              ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB1EN3_M4USART4EN                              ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB1EN3_M7USART4LPEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB1EN3_M4USART4LPEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1EN3_M7UART9EN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB1EN3_M4UART9EN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB1EN3_M7UART9LPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB1EN3_M4UART9LPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB1EN3_M7UART10EN                               ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB1EN3_M4UART10EN                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB1EN3_M7UART10LPEN                             ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB1EN3_M4UART10LPEN                             ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB1EN3_M7UART11EN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB1EN3_M4UART11EN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB1EN3_M7UART11LPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB1EN3_M4UART11LPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB1EN3_M7UART12EN                               ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB1EN3_M4UART12EN                               ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_APB1EN3_M7UART12LPEN                             ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_APB1EN3_M4UART12LPEN                             ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB1EN4 register  ********/
#define RCC_APB1EN4_M7I2S3EN                                ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB1EN4_M4I2S3EN                                ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB1EN4_M7I2S3LPEN                              ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB1EN4_M4I2S3LPEN                              ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1EN4_M7I2S4EN                                ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB1EN4_M4I2S4EN                                ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB1EN4_M7I2S4LPEN                              ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB1EN4_M4I2S4LPEN                              ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1EN4_M7I2C1EN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB1EN4_M4I2C1EN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB1EN4_M7I2C1LPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB1EN4_M4I2C1LPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1EN4_M7I2C2EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB1EN4_M4I2C2EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB1EN4_M7I2C2LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB1EN4_M4I2C2LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1EN4_M7I2C3EN                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB1EN4_M4I2C3EN                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB1EN4_M7I2C3LPEN                              ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB1EN4_M4I2C3LPEN                              ((uint32_t)0x00001000U)         /* Bit[12] */

/******** Bit definition for RCC_APB1EN5 register  ********/
#define RCC_APB1EN5_M7FDCAN1EN                              ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB1EN5_M4FDCAN1EN                              ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB1EN5_M7FDCAN1LPEN                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB1EN5_M4FDCAN1LPEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1EN5_M7FDCAN2EN                              ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB1EN5_M4FDCAN2EN                              ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB1EN5_M7FDCAN2LPEN                            ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB1EN5_M4FDCAN2LPEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1EN5_M7FDCAN5EN                              ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB1EN5_M4FDCAN5EN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB1EN5_M7FDCAN5LPEN                            ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB1EN5_M4FDCAN5LPEN                            ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1EN5_M7FDCAN6EN                              ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB1EN5_M4FDCAN6EN                              ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB1EN5_M7FDCAN6LPEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB1EN5_M4FDCAN6LPEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1EN5_FDCAN1STPREQ                            ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB1EN5_FDCAN1STPACK                            ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB1EN5_FDCAN2STPREQ                            ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB1EN5_FDCAN2STPACK                            ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB1EN5_FDCAN5STPREQ                            ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB1EN5_FDCAN5STPACK                            ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB1EN5_FDCAN6STPREQ                            ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB1EN5_FDCAN6STPACK                            ((uint32_t)0x00000004U)         /* Bit[2] */

/******** Bit definition for RCC_APB1RST1 register  ********/
#define RCC_APB1RST1_BTIM1RST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1RST1_BTIM2RST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1RST1_BTIM3RST                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1RST1_BTIM4RST                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1RST1_GTIMB1RST                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB1RST1_GTIMB2RST                                ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB1RST1_GTIMB3RST                               ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB1RST1_GTIMA4RST                                ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB1RST2 register  ********/
#define RCC_APB1RST2_GTIMA5RST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1RST2_GTIMA6RST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1RST2_GTIMA7RST                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1RST2_SPI3RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1RST2_DAC12RST                                 ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB1RST2_WWDG2RST                                ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_APB1RST3 register  ********/
#define RCC_APB1RST3_USART1RST                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1RST3_USART2RST                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1RST3_USART3RST                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1RST3_USART4RST                               ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1RST3_UART9RST                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB1RST3_UART10RST                                ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB1RST3_UART11RST                                ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB1RST3_UART12RST                                ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB1RST4 register  ********/
#define RCC_APB1RST4_I2S3RST                                 ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1RST4_I2S4RST                                 ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1RST4_I2C1RST                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1RST4_I2C2RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1RST4_I2C3RST                                 ((uint32_t)0x00001000U)         /* Bit[12] */

/******** Bit definition for RCC_APB1RST5 register  ********/
#define RCC_APB1RST5_FDCAN1RST                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB1RST5_FDCAN2RST                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB1RST5_FDCAN5RST                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB1RST5_FDCAN6RST                               ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB1RST5_CAHIRST                                 ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB1RST5_CAHDRST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB2DIV1 register  ********/
#define RCC_AHB2DIV1_ETH1SYSDIV                         ((uint32_t)0xF0000000U)         /* Bit[31:28] */
#define RCC_AHB2DIV1_ETH1SYSDIV_0                       ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_AHB2DIV1_ETH1SYSDIV_1                       ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_AHB2DIV1_ETH1SYSDIV_2                       ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_AHB2DIV1_ETH1SYSDIV_3                       ((uint32_t)0x80000000U)         /* Bit31*/

#define RCC_AHB2DIV1_ETH1SYSDIV_DIV1                    ((uint32_t)0x00000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV2                    ((uint32_t)0x10000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV4                    ((uint32_t)0x20000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV8                    ((uint32_t)0x40000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV16                   ((uint32_t)0x70000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV32                   ((uint32_t)0x80000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV64                   ((uint32_t)0x90000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV128                  ((uint32_t)0xA0000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV256                  ((uint32_t)0xB0000000U)
#define RCC_AHB2DIV1_ETH1SYSDIV_DIV512                  ((uint32_t)0xC0000000U)

#define RCC_AHB2DIV1_USBHSEDIV                          ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_AHB2DIV1_USBHSEDIV_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AHB2DIV1_USBHSEDIV_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AHB2DIV1_USBHSEDIV_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_AHB2DIV1_USBHSEDIV_3                        ((uint32_t)0x00000008U)         /* Bit3*/

#define RCC_AHB2DIV1_USBHSEDIV_DIV1                     ((uint32_t)0x00000000U)         /* Bit */
#define RCC_AHB2DIV1_USBHSEDIV_DIV2                     ((uint32_t)0x00000001U) 
/******** Bit definition for RCC_AHB2SEL1 register  ********/
#define RCC_AHB2SEL1_ETH1PTPSEL                         ((uint32_t)0x00300000U)         /* Bit[21:20] */
#define RCC_AHB2SEL1_ETH1PTPSEL_0                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_AHB2SEL1_ETH1PTPSEL_1                       ((uint32_t)0x00200000U)         /* Bit21*/

#define RCC_AHB2SEL1_ETH1PTPSEL_SYSBUSDIV                  ((uint32_t)0x00000000U)
#define RCC_AHB2SEL1_ETH1PTPSEL_PERIPH                  ((uint32_t)0x00100000U)
#define RCC_AHB2SEL1_ETH1PTPSEL_PLL2C                   ((uint32_t)0x00200000U)
#define RCC_AHB2SEL1_ETH1PTPSEL_PLL3A                   ((uint32_t)0x00300000U)

#define RCC_AHB2SEL1_ETH1GMIITXSEL                      ((uint32_t)0x000C0000U)         /* Bit[19:18] */
#define RCC_AHB2SEL1_ETH1GMIITXSEL_0                    ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_AHB2SEL1_ETH1GMIITXSEL_1                    ((uint32_t)0x00080000U)         /* Bit19*/

#define RCC_AHB2SEL1_ETH1GMIITXSEL_PLL3A                ((uint32_t)0x00000000U)
#define RCC_AHB2SEL1_ETH1GMIITXSEL_PLL2B                ((uint32_t)0x00040000U)
#define RCC_AHB2SEL1_ETH1GMIITXSEL_IOM                  ((uint32_t)0x00080000U)
#define RCC_AHB2SEL1_ETH1GMIITXSEL_PLL1C                ((uint32_t)0x000C0000U)
/******** Bit definition for RCC_AHB2EN1 register  ********/
#define RCC_AHB2EN1_M7USB1EN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AHB2EN1_M4USB1EN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB2EN1_M7USB1LPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB2EN1_M4USB1LPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB2EN1_M7ECCM2EN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AHB2EN1_M4ECCM2EN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AHB2EN1_M7ECCM2LPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AHB2EN1_M4ECCM2LPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB2EN1_M7CORDICEN                              ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB2EN1_M4CORDICEN                              ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB2EN1_M7CORDICLPEN                            ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB2EN1_M4CORDICLPEN                            ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB2EN1_M7SDPUEN                                ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AHB2EN1_M4SDPUEN                                ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AHB2EN1_M7SDPULPEN                              ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AHB2EN1_M4SDPULPEN                              ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB2EN1_M7FMACEN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB2EN1_M4FMACEN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB2EN1_M7FMACLPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB2EN1_M4FMACLPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB2EN2 register  ********/
#define RCC_AHB2EN2_M7DAC56EN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AHB2EN2_M4DAC56EN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB2EN2_M7DAC56LPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB2EN2_M4DAC56LPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB2EN2_M7DAC34EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AHB2EN2_M4DAC34EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AHB2EN2_M7DAC34LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AHB2EN2_M4DAC34LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB2EN2_M7ETH1TXEN                              ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB2EN2_M4ETH1TXEN                              ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB2EN2_M7ETH1TXLPEN                            ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB2EN2_M4ETH1TXLPEN                            ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB2EN2_M7ETH1RXEN                              ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AHB2EN2_M4ETH1RXEN                              ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AHB2EN2_M7ETH1RXLPEN                            ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AHB2EN2_M4ETH1RXLPEN                            ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB2EN2_M7ETH1MACEN                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB2EN2_M4ETH1MACEN                             ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB2EN2_M7ETH1MACLPEN                           ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB2EN2_M4ETH1MACLPEN                           ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB2RST1 register  ********/
#define RCC_AHB2RST1_DAC56RST                                 ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AHB2RST1_DAC34RST                                 ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB2RST1_USB1WRAPRST                             ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB2RST1_USB1PORRST                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB2RST1_USB1RST                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB2RST1_ETH1RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB2RST1_ECCM2RST                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB2RST1_CORDICRST                               ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB2RST1_SDPURST                                 ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB2RST1_FMACRST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB2DIV1 register  ********/
#define RCC_APB2DIV1_APB2ATIMDIV                        ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB2DIV1_APB2ATIMDIV_0                      ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB2DIV1_APB2ATIMDIV_1                      ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB2DIV1_APB2ATIMDIV_2                      ((uint32_t)0x40000000U)         /* Bit30*/

#define RCC_APB2DIV1_APB2ATIMDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB2DIV1_APB2ATIMDIV_DIV2                   ((uint32_t)0x40000000U)
#define RCC_APB2DIV1_APB2ATIMDIV_DIV4                   ((uint32_t)0x50000000U)
#define RCC_APB2DIV1_APB2ATIMDIV_DIV8                   ((uint32_t)0x60000000U)
#define RCC_APB2DIV1_APB2ATIMDIV_DIV16                  ((uint32_t)0x70000000U)

#define RCC_APB2DIV1_APB2GTIMDIV                        ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_APB2DIV1_APB2GTIMDIV_0                      ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_APB2DIV1_APB2GTIMDIV_1                      ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_APB2DIV1_APB2GTIMDIV_2                      ((uint32_t)0x04000000U)         /* Bit26*/

#define RCC_APB2DIV1_APB2GTIMDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB2DIV1_APB2GTIMDIV_DIV2                   ((uint32_t)0x04000000U)
#define RCC_APB2DIV1_APB2GTIMDIV_DIV4                   ((uint32_t)0x05000000U)
#define RCC_APB2DIV1_APB2GTIMDIV_DIV8                   ((uint32_t)0x06000000U)
#define RCC_APB2DIV1_APB2GTIMDIV_DIV16                  ((uint32_t)0x07000000U)


#define RCC_APB2DIV1_APB2I2SDIV                         ((uint32_t)0x00070000U)         /* Bit[18:16] */
#define RCC_APB2DIV1_APB2I2SDIV_0                       ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_APB2DIV1_APB2I2SDIV_1                       ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_APB2DIV1_APB2I2SDIV_2                       ((uint32_t)0x00040000U)         /* Bit18*/

#define RCC_APB2DIV1_APB2DSMUDIV                        ((uint32_t)0x00007000U)         /* Bit[14:12] */
#define RCC_APB2DIV1_APB2DSMUDIV_0                      ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_APB2DIV1_APB2DSMUDIV_1                      ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_APB2DIV1_APB2DSMUDIV_2                      ((uint32_t)0x00004000U)         /* Bit14*/

#define RCC_APB2DIV1_APB2DSMUDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB2DIV1_APB2DSMUDIV_DIV2                   ((uint32_t)0x00004000U)
#define RCC_APB2DIV1_APB2DSMUDIV_DIV4                   ((uint32_t)0x00005000U)
#define RCC_APB2DIV1_APB2DSMUDIV_DIV8                   ((uint32_t)0x00006000U)
#define RCC_APB2DIV1_APB2DSMUDIV_DIV16                  ((uint32_t)0x00007000U)

#define RCC_APB2DIV1_APB2I2CDIV                         ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_APB2DIV1_APB2I2CDIV_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_APB2DIV1_APB2I2CDIV_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_APB2DIV1_APB2I2CDIV_2                       ((uint32_t)0x00000400U)         /* Bit10*/

#define RCC_APB2DIV1_APB2FDCANDIV                       ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_APB2DIV1_APB2FDCANDIV_0                     ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_APB2DIV1_APB2FDCANDIV_1                     ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_APB2DIV1_APB2FDCANDIV_2                     ((uint32_t)0x00000040U)         /* Bit6*/

/******** Bit definition for RCC_APB2SEL1 register  ********/
#define RCC_APB2SEL1_DSMUKERSEL                              ((uint32_t)0x00100000U)         /* Bit[20] */

#define RCC_APB2SEL1_DSMUKERSEL_APB2                         ((uint32_t)0x00000000U)
#define RCC_APB2SEL1_DSMUKERSEL_SYSBUSDIV                       ((uint32_t)0x00100000U)

#define RCC_APB2SEL1_DSMUKERASEL                        ((uint32_t)0x00070000U)         /* Bit[18:16] */
#define RCC_APB2SEL1_DSMUKERASEL_0                      ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_APB2SEL1_DSMUKERASEL_1                      ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_APB2SEL1_DSMUKERASEL_2                      ((uint32_t)0x00040000U)         /* Bit18*/

#define RCC_APB2SEL1_DSMUKERASEL_APB2                   ((uint32_t)0x00000000U)
#define RCC_APB2SEL1_DSMUKERASEL_PLL1B                  ((uint32_t)0x00010000U)
#define RCC_APB2SEL1_DSMUKERASEL_PLL2B                  ((uint32_t)0x00020000U)
#define RCC_APB2SEL1_DSMUKERASEL_PLL3A                  ((uint32_t)0x00030000U)
#define RCC_APB2SEL1_DSMUKERASEL_CKIN                   ((uint32_t)0x00040000U)
#define RCC_APB2SEL1_DSMUKERASEL_PERIPH                 ((uint32_t)0x00050000U)

#define RCC_APB2SEL1_I2C4KERSEL                         ((uint32_t)0x00007000U)         /* Bit[14:12] */
#define RCC_APB2SEL1_I2C4KERSEL_0                       ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_APB2SEL1_I2C4KERSEL_1                       ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_APB2SEL1_I2C4KERSEL_2                       ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_APB2SEL1_I2C5KERSEL                         ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_APB2SEL1_I2C5KERSEL_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_APB2SEL1_I2C5KERSEL_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_APB2SEL1_I2C5KERSEL_2                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_APB2SEL1_I2C6KERSEL                         ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_APB2SEL1_I2C6KERSEL_0                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_APB2SEL1_I2C6KERSEL_1                       ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_APB2SEL1_I2C6KERSEL_2                       ((uint32_t)0x00000040U)         /* Bit6*/

#define RCC_APB2SEL1_I2S2KERSEL                         ((uint32_t)0x0000000CU)         /* Bit[3:2] */
#define RCC_APB2SEL1_I2S2KERSEL_0                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_APB2SEL1_I2S2KERSEL_1                       ((uint32_t)0x00000008U)         /* Bit3*/

#define RCC_APB2SEL1_I2S1KERSEL                         ((uint32_t)0x00000003U)         /* Bit */
#define RCC_APB2SEL1_I2S1KERSEL_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_APB2SEL1_I2S1KERSEL_1                       ((uint32_t)0x00000002U)         /* Bit1*/

#define RCC_APB2SEL1_I2S1KERSEL_SYSBUSDIV                                ((uint32_t)0x00000000U)
#define RCC_APB2SEL1_I2S1KERSEL_PLL3B                                 ((uint32_t)0x00000001U)
#define RCC_APB2SEL1_I2S1KERSEL_HSI                                   ((uint32_t)0x00000002U)
#define RCC_APB2SEL1_I2S1KERSEL_CLKIN                                 ((uint32_t)0x00000003U)
/******** Bit definition for RCC_APB2SEL2 register  ********/
#define RCC_APB2SEL2_FDCAN3KERSEL                       ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB2SEL2_FDCAN3KERSEL_0                     ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB2SEL2_FDCAN3KERSEL_1                     ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB2SEL2_FDCAN3KERSEL_2                     ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_APB2SEL2_FDCAN4KERSEL                       ((uint32_t)0x00700000U)         /* Bit[22:20] */
#define RCC_APB2SEL2_FDCAN4KERSEL_0                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_APB2SEL2_FDCAN4KERSEL_1                     ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_APB2SEL2_FDCAN4KERSEL_2                     ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_APB2SEL2_FDCAN7KERSEL                       ((uint32_t)0x00007000U)         /* Bit[14:12] */
#define RCC_APB2SEL2_FDCAN7KERSEL_0                     ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_APB2SEL2_FDCAN7KERSEL_1                     ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_APB2SEL2_FDCAN7KERSEL_2                     ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_APB2SEL2_FDCAN8KERSEL                       ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_APB2SEL2_FDCAN8KERSEL_0                     ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_APB2SEL2_FDCAN8KERSEL_1                     ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_APB2SEL2_FDCAN8KERSEL_2                     ((uint32_t)0x00000040U)         /* Bit6*/

/******** Bit definition for RCC_APB2EN1 register  ********/
#define RCC_APB2EN1_M7ATIM1EN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB2EN1_M4ATIM1EN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB2EN1_M7ATIM1LPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB2EN1_M4ATIM1LPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2EN1_M7ATIM2EN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB2EN1_M4ATIM2EN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB2EN1_M7ATIM2LPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB2EN1_M4ATIM2LPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2EN1_M7GTIMA1EN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB2EN1_M4GTIMA1EN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB2EN1_M7GTIMA1LPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB2EN1_M4GTIMA1LPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2EN1_M7GTIMA2EN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB2EN1_M4GTIMA2EN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB2EN1_M7GTIMA2LPEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB2EN1_M4GTIMA2LPEN                             ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2EN1_M7GTIMA3EN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB2EN1_M4GTIMA3EN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB2EN1_M7GTIMA3LPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB2EN1_M4GTIMA3LPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB2EN1_M7SHRTIM1EN                             ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB2EN1_M4SHRTIM1EN                             ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB2EN1_M7SHRTIM1LPEN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB2EN1_M4SHRTIM1LPEN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB2EN1_M7SHRTIM2EN                             ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB2EN1_M4SHRTIM2EN                             ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB2EN1_M7SHRTIM2LPEN                           ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB2EN1_M4SHRTIM2LPEN                           ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_APB2EN2 register  ********/
#define RCC_APB2EN2_M7I2S1EN                                ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB2EN2_M4I2S1EN                                ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB2EN2_M7I2S1LPEN                              ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB2EN2_M4I2S1LPEN                              ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2EN2_M7I2S2EN                                ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB2EN2_M4I2S2EN                                ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB2EN2_M7I2S2LPEN                              ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB2EN2_M4I2S2LPEN                              ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2EN2_M7SPI1EN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB2EN2_M4SPI1EN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB2EN2_M7SPI1LPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB2EN2_M4SPI1LPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2EN2_M7SPI2EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB2EN2_M4SPI2EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB2EN2_M7SPI2LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB2EN2_M4SPI2LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2EN2_M7DSMUEN                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB2EN2_M4DSMUEN                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB2EN2_M7DSMULPEN                              ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB2EN2_M4DSMULPEN                              ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB2EN2_M7I2C4EN                                ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB2EN2_M4I2C4EN                                ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB2EN2_M7I2C4LPEN                              ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB2EN2_M4I2C4LPEN                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB2EN2_M7I2C5EN                                ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB2EN2_M4I2C5EN                                ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB2EN2_M7I2C5LPEN                              ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB2EN2_M4I2C5LPEN                              ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB2EN2_M7I2C6EN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB2EN2_M4I2C6EN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_APB2EN2_M7I2C6LPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_APB2EN2_M4I2C6LPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB2EN3 register  ********/
#define RCC_APB2EN3_M7USART5EN                              ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB2EN3_M4USART5EN                              ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB2EN3_M7USART5LPEN                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB2EN3_M4USART5LPEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2EN3_M7USART6EN                              ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB2EN3_M4USART6EN                              ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB2EN3_M7USART6LPEN                            ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB2EN3_M4USART6LPEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2EN3_M7USART7EN                              ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB2EN3_M4USART7EN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB2EN3_M7USART7LPEN                            ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB2EN3_M4USART7LPEN                            ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2EN3_M7USART8EN                              ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB2EN3_M4USART8EN                              ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB2EN3_M7USART8LPEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB2EN3_M4USART8LPEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2EN3_M7UART13EN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB2EN3_M4UART13EN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB2EN3_M7UART13LPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB2EN3_M4UART13LPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB2EN3_M7UART14EN                               ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB2EN3_M4UART14EN                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB2EN3_M7UART14LPEN                             ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB2EN3_M4UART14LPEN                             ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB2EN3_M7UART15EN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB2EN3_M4UART15EN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB2EN3_M7UART15LPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB2EN3_M4UART15LPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_APB2EN4 register  ********/
#define RCC_APB2EN4_M7FDCAN3EN                              ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB2EN4_M4FDCAN3EN                              ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB2EN4_M7FDCAN3LPEN                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB2EN4_M4FDCAN3LPEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2EN4_M7FDCAN4EN                              ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB2EN4_M4FDCAN4EN                              ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB2EN4_M7FDCAN4LPEN                            ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB2EN4_M4FDCAN4LPEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2EN4_M7FDCAN7EN                              ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB2EN4_M4FDCAN7EN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB2EN4_M7FDCAN7LPEN                            ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB2EN4_M4FDCAN7LPEN                            ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2EN4_M7FDCAN8EN                              ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB2EN4_M4FDCAN8EN                              ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB2EN4_M7FDCAN8LPEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB2EN4_M4FDCAN8LPEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2EN4_FDCAN3STPREQ                            ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB2EN4_FDCAN3STPACK                            ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB2EN4_FDCAN4STPREQ                            ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB2EN4_FDCAN4STPACK                            ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB2EN4_FDCAN7STPREQ                            ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB2EN4_FDCAN7STPACK                            ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB2EN4_FDCAN8STPREQ                            ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB2EN4_FDCAN8STPACK                            ((uint32_t)0x00000004U)         /* Bit[2] */

/******** Bit definition for RCC_APB2RST1 register  ********/
#define RCC_APB2RST1_ATIM1RST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2RST1_ATIM2RST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2RST1_GTIMA1RST                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2RST1_GTIMA2RST                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2RST1_GTIMA3RST                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB2RST1_SHRTIM1RST                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB2RST1_SHRTIM2RST                              ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_APB2RST2 register  ********/
#define RCC_APB2RST2_I2S1RST                                 ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2RST2_I2S2RST                                 ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2RST2_SPI1RST                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2RST2_SPI2RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2RST2_DSMURST                                 ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB2RST2_I2C4RST                                 ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB2RST2_I2C5RST                                 ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB2RST2_I2C6RST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB2RST3 register  ********/
#define RCC_APB2RST3_USART5RST                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2RST3_USART6RST                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2RST3_USART7RST                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2RST3_USART8RST                               ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB2RST3_UART13RST                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB2RST3_UART14RST                                ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB2RST3_UART15RST                                ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_APB2RST4 register  ********/
#define RCC_APB2RST4_FDCAN3RST                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB2RST4_FDCAN4RST                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB2RST4_FDCAN7RST                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB2RST4_FDCAN8RST                               ((uint32_t)0x00010000U)         /* Bit[16] */

/******** Bit definition for RCC_AHB5EN1 register  ********/
#define RCC_AHB5EN1_M7GPIOAEN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AHB5EN1_M4GPIOAEN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AHB5EN1_M7GPIOALPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AHB5EN1_M4GPIOALPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB5EN1_M7GPIOBEN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AHB5EN1_M4GPIOBEN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AHB5EN1_M7GPIOBLPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AHB5EN1_M4GPIOBLPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB5EN1_M7GPIOCEN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AHB5EN1_M4GPIOCEN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB5EN1_M7GPIOCLPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB5EN1_M4GPIOCLPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB5EN1_M7GPIODEN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AHB5EN1_M4GPIODEN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AHB5EN1_M7GPIODLPEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AHB5EN1_M4GPIODLPEN                             ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB5EN1_M7GPIOEEN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AHB5EN1_M4GPIOEEN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AHB5EN1_M7GPIOELPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AHB5EN1_M4GPIOELPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB5EN1_M7GPIOFEN                               ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB5EN1_M4GPIOFEN                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB5EN1_M7GPIOFLPEN                             ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB5EN1_M4GPIOFLPEN                             ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB5EN1_M7GPIOGEN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AHB5EN1_M4GPIOGEN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AHB5EN1_M7GPIOGLPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AHB5EN1_M4GPIOGLPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB5EN1_M7GPIOHEN                               ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB5EN1_M4GPIOHEN                               ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB5EN1_M7GPIOHLPEN                             ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB5EN1_M4GPIOHLPEN                             ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB5EN2 register  ********/
#define RCC_AHB5EN2_M7GPIOIEN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AHB5EN2_M4GPIOIEN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AHB5EN2_M7GPIOILPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AHB5EN2_M4GPIOILPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB5EN2_M7GPIOJEN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AHB5EN2_M4GPIOJEN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AHB5EN2_M7GPIOJLPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AHB5EN2_M4GPIOJLPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB5EN2_M7GPIOKEN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AHB5EN2_M4GPIOKEN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AHB5EN2_M7GPIOKLPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AHB5EN2_M4GPIOKLPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB5EN2_M7ECCM3EN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AHB5EN2_M4ECCM3EN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AHB5EN2_M7ECCM3LPEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AHB5EN2_M4ECCM3LPEN                             ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB5EN2_PWREN                                   ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AHB5EN2_PWRLPEN                                 ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AHB5EN2_M7CRCEN                                 ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AHB5EN2_M4CRCEN                                 ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AHB5EN2_M7CRCLPEN                               ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AHB5EN2_M4CRCLPEN                               ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB5EN2_M7SEMA4EN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AHB5EN2_M4SEMA4EN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AHB5EN2_M7SEMA4LPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AHB5EN2_M4SEMA4LPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB5EN2_M7AFIOEN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB5EN2_M4AFIOEN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB5EN2_M7AFIOLPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB5EN2_M4AFIOLPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB5RST1 register  ********/
#define RCC_AHB5RST1_GPIOARST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB5RST1_GPIOBRST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB5RST1_GPIOCRST                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB5RST1_GPIODRST                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB5RST1_GPIOERST                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB5RST1_GPIOFRST                                ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB5RST1_GPIOGRST                                ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB5RST1_GPIOHRST                                ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB5RST2 register  ********/
#define RCC_AHB5RST2_GPIOIRST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AHB5RST2_GPIOJRST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AHB5RST2_GPIOKRST                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AHB5RST2_ECCM3RST                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AHB5RST2_PWRRST                                  ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AHB5RST2_CRCRST                                  ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AHB5RST2_SEMA4RST                                ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AHB5RST2_AFIORST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB5DIV1 register  ********/
#define RCC_APB5DIV1_APB5ATIMDIV                        ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB5DIV1_APB5ATIMDIV_0                      ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB5DIV1_APB5ATIMDIV_1                      ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB5DIV1_APB5ATIMDIV_2                      ((uint32_t)0x40000000U)         /* Bit30*/

#define RCC_APB5DIV1_APB5ATIMDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB5DIV1_APB5ATIMDIV_DIV2                   ((uint32_t)0x40000000U)
#define RCC_APB5DIV1_APB5ATIMDIV_DIV4                   ((uint32_t)0x50000000U)
#define RCC_APB5DIV1_APB5ATIMDIV_DIV8                   ((uint32_t)0x60000000U)
#define RCC_APB5DIV1_APB5ATIMDIV_DIV16                  ((uint32_t)0x70000000U)

#define RCC_APB5DIV1_APB5I2CDIV                         ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_APB5DIV1_APB5I2CDIV_0                       ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_APB5DIV1_APB5I2CDIV_1                       ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_APB5DIV1_APB5I2CDIV_2                       ((uint32_t)0x04000000U)         /* Bit26*/

#define RCC_APB5DIV1_APB5EXTIDIV                        ((uint32_t)0x00700000U)         /* Bit[22:20] */
#define RCC_APB5DIV1_APB5EXTIDIV_0                      ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_APB5DIV1_APB5EXTIDIV_1                      ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_APB5DIV1_APB5EXTIDIV_2                      ((uint32_t)0x00400000U)         /* Bit22*/

#define RCC_APB5DIV1_APB5EXTIDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_APB5DIV1_APB5EXTIDIV_DIV2                   ((uint32_t)0x00400000U)
#define RCC_APB5DIV1_APB5EXTIDIV_DIV4                   ((uint32_t)0x00500000U)
#define RCC_APB5DIV1_APB5EXTIDIV_DIV8                   ((uint32_t)0x00600000U)
#define RCC_APB5DIV1_APB5EXTIDIV_DIV16                  ((uint32_t)0x00700000U)
/******** Bit definition for RCC_APB5SEL1 register  ********/
#define RCC_APB5SEL1_I2C7KERSEL                         ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_APB5SEL1_I2C7KERSEL_0                       ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_APB5SEL1_I2C7KERSEL_1                       ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_APB5SEL1_I2C7KERSEL_2                       ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_APB5SEL1_I2C8KERSEL                         ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_APB5SEL1_I2C8KERSEL_0                       ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_APB5SEL1_I2C8KERSEL_1                       ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_APB5SEL1_I2C8KERSEL_2                       ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_APB5SEL1_I2C9KERSEL                         ((uint32_t)0x00700000U)         /* Bit[22:20] */
#define RCC_APB5SEL1_I2C9KERSEL_0                       ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_APB5SEL1_I2C9KERSEL_1                       ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_APB5SEL1_I2C9KERSEL_2                       ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_APB5SEL1_I2C10KERSEL                        ((uint32_t)0x00070000U)         /* Bit[18:16] */
#define RCC_APB5SEL1_I2C10KERSEL_0                      ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_APB5SEL1_I2C10KERSEL_1                      ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_APB5SEL1_I2C10KERSEL_2                      ((uint32_t)0x00040000U)         /* Bit18*/

/******** Bit definition for RCC_APB5EN1 register  ********/
#define RCC_APB5EN1_M7ATIM3EN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB5EN1_M4ATIM3EN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB5EN1_M7ATIM3LPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB5EN1_M4ATIM3LPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB5EN1_M7ATIM4EN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB5EN1_M4ATIM4EN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB5EN1_M7ATIM4LPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB5EN1_M4ATIM4LPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB5EN1_M7AFECEN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB5EN1_M4AFECEN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB5EN1_M7AFECLPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB5EN1_M4AFECLPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB5EN1_M7SPI4EN                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB5EN1_M4SPI4EN                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_APB5EN1_M7SPI4LPEN                              ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB5EN1_M4SPI4LPEN                              ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB5EN1_M7SPI5EN                                ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB5EN1_M4SPI5EN                                ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB5EN1_M7SPI5LPEN                              ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB5EN1_M4SPI5LPEN                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB5EN1_M7SPI6EN                                ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB5EN1_M4SPI6EN                                ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_APB5EN1_M7SPI6LPEN                              ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB5EN1_M4SPI6LPEN                              ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB5EN1_M7SPI7EN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB5EN1_M4SPI7EN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_APB5EN1_M7SPI7LPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_APB5EN1_M4SPI7LPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB5EN2 register  ********/
#define RCC_APB5EN2_M7I2C7EN                                ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_APB5EN2_M4I2C7EN                                ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_APB5EN2_M7I2C7LPEN                              ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_APB5EN2_M4I2C7LPEN                              ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB5EN2_M7I2C8EN                                ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_APB5EN2_M4I2C8EN                                ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_APB5EN2_M7I2C8LPEN                              ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_APB5EN2_M4I2C8LPEN                              ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB5EN2_M7I2C9EN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_APB5EN2_M4I2C9EN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_APB5EN2_M7I2C9LPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_APB5EN2_M4I2C9LPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB5EN2_M7I2C10EN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_APB5EN2_M4I2C10EN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_APB5EN2_M7I2C10LPEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_APB5EN2_M4I2C10LPEN                             ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_APB5EN2_EXTIEN                                  ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_APB5EN2_EXTILPEN                                ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_APB5EN2_M7RTCPCLKEN                             ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_APB5EN2_M4RTCPCLKEN                             ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_APB5EN2_M7RTCPCLKLPEN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_APB5EN2_M4RTCPCLKLPEN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB5EN2_IWDG1PCLKEN                             ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_APB5EN2_IWDG1PCLKLPEN                           ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_APB5EN2_IWDG2PCLKEN                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_APB5EN2_IWDG2PCLKLPEN                           ((uint32_t)0x00000002U)         /* Bit[1] */

/******** Bit definition for RCC_APB5RST1 register  ********/
#define RCC_APB5RST1_ATIM3RST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB5RST1_ATIM4RST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB5RST1_AFECRST                                 ((uint32_t)0x00100000U)
#define RCC_APB5RST1_SPI4RST                                 ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_APB5RST1_SPI5RST                                 ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_APB5RST1_SPI6RST                                 ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_APB5RST1_SPI7RST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_APB5RST2 register  ********/
#define RCC_APB5RST2_I2C7RST                                 ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_APB5RST2_I2C8RST                                 ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_APB5RST2_I2C9RST                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_APB5RST2_I2C10RST                                ((uint32_t)0x00010000U)         /* Bit[16] */

/******** Bit definition for RCC_AHB9DIV1 register  ********/
#define RCC_AHB9DIV1_ESCSYSDIV                         ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_AHB9DIV1_ESCSYSDIV_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AHB9DIV1_ESCSYSDIV_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AHB9DIV1_ESCSYSDIV_2                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_AHB9DIV1_ESCSYSDIV_3                       ((uint32_t)0x00000008U)         /* Bit3*/

#define RCC_AHB9DIV1_ESCSYSDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV2                   ((uint32_t)0x00000001U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV4                   ((uint32_t)0x00000002U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV8                   ((uint32_t)0x00000004U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV16                  ((uint32_t)0x00000007U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV32                  ((uint32_t)0x00000008U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV64                  ((uint32_t)0x00000009U)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV128                 ((uint32_t)0x0000000AU)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV256                 ((uint32_t)0x0000000BU)
#define RCC_AHB9DIV1_ESCSYSDIV_DIV512                 ((uint32_t)0x0000000CU)
/******** Bit definition for RCC_AHB9SEL1 register  ********/
#define RCC_AHB9SEL1_ESCKERSEL                         ((uint32_t)0x00000007U)         /* Bit */
#define RCC_AHB9SEL1_ESCKERSEL_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AHB9SEL1_ESCKERSEL_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AHB9SEL1_ESCKERSEL_2                       ((uint32_t)0x00000004U)         /* Bit2*/

#define RCC_AHB9SEL1_ESCKERSEL_SYSBUSDIV                  ((uint32_t)0x00000000U)
#define RCC_AHB9SEL1_ESCKERSEL_PLL2B                   ((uint32_t)0x00000001U)
#define RCC_AHB9SEL1_ESCKERSEL_PLL3A                   ((uint32_t)0x00000002U)
#define RCC_AHB9SEL1_ESCKERSEL_PLL3C                   ((uint32_t)0x00000003U)
#define RCC_AHB9SEL1_ESCKERSEL_PLL1B                   ((uint32_t)0x00000004U)
/******** Bit definition for RCC_AHB9EN1 register  ********/
#define RCC_AHB9EN1_M7ESCEN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AHB9EN1_M4ESCEN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AHB9EN1_M7ESCLPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AHB9EN1_M4ESCLPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AHB9RST1 register  ********/
#define RCC_AHB9RST1_ESCRST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_RDDIV1 register  ********/
#define RCC_RDDIV1_COMPDIV                            ((uint32_t)0x70000000U)         /* Bit[30:28] */
#define RCC_RDDIV1_COMPDIV_0                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_RDDIV1_COMPDIV_1                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_RDDIV1_COMPDIV_2                          ((uint32_t)0x40000000U)         /* Bit30*/

#define RCC_RDDIV1_COMPDIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_RDDIV1_COMPDIV_DIV2                       ((uint32_t)0x40000000U)
#define RCC_RDDIV1_COMPDIV_DIV4                       ((uint32_t)0x50000000U)
#define RCC_RDDIV1_COMPDIV_DIV8                       ((uint32_t)0x60000000U)
#define RCC_RDDIV1_COMPDIV_DIV16                      ((uint32_t)0x70000000U)

#define RCC_RDDIV1_LPUARTDIV                          ((uint32_t)0x07000000U)         /* Bit[26:24] */
#define RCC_RDDIV1_LPUARTDIV_0                        ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_RDDIV1_LPUARTDIV_1                        ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_RDDIV1_LPUARTDIV_2                        ((uint32_t)0x04000000U)         /* Bit26*/

#define RCC_RDDIV1_LPUARTDIV_DIV1                     ((uint32_t)0x00000000U)
#define RCC_RDDIV1_LPUARTDIV_DIV2                     ((uint32_t)0x04000000U)
#define RCC_RDDIV1_LPUARTDIV_DIV4                     ((uint32_t)0x05000000U)
#define RCC_RDDIV1_LPUARTDIV_DIV8                     ((uint32_t)0x06000000U)
#define RCC_RDDIV1_LPUARTDIV_DIV16                    ((uint32_t)0x07000000U)
/******** Bit definition for RCC_RDSEL1 register  ********/
#define RCC_RDSEL1_LPTIM1SEL                          ((uint32_t)0xF0000000U)         /* Bit[31:28] */
#define RCC_RDSEL1_LPTIM1SEL_0                        ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_RDSEL1_LPTIM1SEL_1                        ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_RDSEL1_LPTIM1SEL_2                        ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_RDSEL1_LPTIM1SEL_3                        ((uint32_t)0x80000000U)         /* Bit31*/

#define RCC_RDSEL1_LPTIM1SEL_APB5                                 ((uint32_t)0x00000000)
#define RCC_RDSEL1_LPTIM1SEL_LSI                                  ((uint32_t)0x10000000)
#define RCC_RDSEL1_LPTIM1SEL_LSE                                  ((uint32_t)0x20000000)
#define RCC_RDSEL1_LPTIM1SEL_HSE                                  ((uint32_t)0x30000000)
#define RCC_RDSEL1_LPTIM1SEL_HSI                                  ((uint32_t)0x40000000)
#define RCC_RDSEL1_LPTIM1SEL_MSI                                  ((uint32_t)0x50000000)
#define RCC_RDSEL1_LPTIM1SEL_COMP1                                ((uint32_t)0x80000000)
#define RCC_RDSEL1_LPTIM1SEL_COMP2                                ((uint32_t)0x90000000)
#define RCC_RDSEL1_LPTIM1SEL_COMP3                                ((uint32_t)0xA0000000)
#define RCC_RDSEL1_LPTIM1SEL_COMP4                                ((uint32_t)0xB0000000)

#define RCC_RDSEL1_LPTIM2SEL                          ((uint32_t)0x0F000000U)         /* Bit[27:24] */
#define RCC_RDSEL1_LPTIM2SEL_0                        ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_RDSEL1_LPTIM2SEL_1                        ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_RDSEL1_LPTIM2SEL_2                        ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_RDSEL1_LPTIM2SEL_3                        ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_RDSEL1_LPTIM3SEL                          ((uint32_t)0x00F00000U)         /* Bit[23:20] */
#define RCC_RDSEL1_LPTIM3SEL_0                        ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_RDSEL1_LPTIM3SEL_1                        ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_RDSEL1_LPTIM3SEL_2                        ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_RDSEL1_LPTIM3SEL_3                        ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_RDSEL1_LPTIM4SEL                          ((uint32_t)0x000F0000U)         /* Bit[19:16] */
#define RCC_RDSEL1_LPTIM4SEL_0                        ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_RDSEL1_LPTIM4SEL_1                        ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_RDSEL1_LPTIM4SEL_2                        ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_RDSEL1_LPTIM4SEL_3                        ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_RDSEL1_LPTIM5SEL                          ((uint32_t)0x0000F000U)         /* Bit[15:12] */
#define RCC_RDSEL1_LPTIM5SEL_0                        ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_RDSEL1_LPTIM5SEL_1                        ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_RDSEL1_LPTIM5SEL_2                        ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_RDSEL1_LPTIM5SEL_3                        ((uint32_t)0x00008000U)         /* Bit15*/

#define RCC_RDSEL1_LPUART1SEL                         ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_RDSEL1_LPUART1SEL_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_RDSEL1_LPUART1SEL_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_RDSEL1_LPUART1SEL_2                       ((uint32_t)0x00000400U)         /* Bit10*/

#define RCC_RDSEL1_LPUART1SEL_SYSBUSDIV                  ((uint32_t)0x00000000U)
#define RCC_RDSEL1_LPUART1SEL_HSI                     ((uint32_t)0x00000100U)
#define RCC_RDSEL1_LPUART1SEL_LSE                     ((uint32_t)0x00000200U)
#define RCC_RDSEL1_LPUART1SEL_HSE                     ((uint32_t)0x00000300U)
#define RCC_RDSEL1_LPUART1SEL_MSI                     ((uint32_t)0x00000400U)

#define RCC_RDSEL1_LPUART2SEL                         ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_RDSEL1_LPUART2SEL_0                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_RDSEL1_LPUART2SEL_1                       ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_RDSEL1_LPUART2SEL_2                       ((uint32_t)0x00000040U)         /* Bit6*/

#define RCC_RDSEL1_COMPSEL                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_RDCTRL1 register  ********/
#define RCC_RDCTRL1_LPTIM2FLTEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_RDCTRL1_LPTIM2FLTSEL                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_RDCTRL1_LPTIM2COMP4EN                           ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_RDCTRL1_LPTIM2COMP3EN                           ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_RDCTRL1_LPTIM2COMP2EN                           ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_RDCTRL1_LPTIM2COMP1EN                           ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_RDCTRL1_LPTIM2FLTDFC                       ((uint32_t)0x001F0000U)         /* Bit[20:16] */
#define RCC_RDCTRL1_LPTIM2FLTDFC_0                     ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_RDCTRL1_LPTIM2FLTDFC_1                     ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_RDCTRL1_LPTIM2FLTDFC_2                     ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_RDCTRL1_LPTIM2FLTDFC_3                     ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_RDCTRL1_LPTIM2FLTDFC_4                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_RDCTRL1_LPTIM1FLTEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_RDCTRL1_LPTIM1FLTSEL                            ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_RDCTRL1_LPTIM1COMP4EN                           ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_RDCTRL1_LPTIM1COMP3EN                           ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_RDCTRL1_LPTIM1COMP2EN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_RDCTRL1_LPTIM1COMP1EN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_RDCTRL1_LPTIM1FLTDFC                       ((uint32_t)0x0000001FU)         /* Bit */
#define RCC_RDCTRL1_LPTIM1FLTDFC_0                     ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_RDCTRL1_LPTIM1FLTDFC_1                     ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_RDCTRL1_LPTIM1FLTDFC_2                     ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_RDCTRL1_LPTIM1FLTDFC_3                     ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_RDCTRL1_LPTIM1FLTDFC_4                     ((uint32_t)0x00000010U)         /* Bit4*/

/******** Bit definition for RCC_RDCTRL2 register  ********/
#define RCC_RDCTRL2_LPTIM4FLTEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_RDCTRL2_LPTIM4FLTSEL                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_RDCTRL2_LPTIM4COMP4EN                           ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_RDCTRL2_LPTIM4COMP3EN                           ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_RDCTRL2_LPTIM4COMP2EN                           ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_RDCTRL2_LPTIM4COMP1EN                           ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_RDCTRL2_LPTIM4FLTDFC                       ((uint32_t)0x001F0000U)         /* Bit[20:16] */
#define RCC_RDCTRL2_LPTIM4FLTDFC_0                     ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_RDCTRL2_LPTIM4FLTDFC_1                     ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_RDCTRL2_LPTIM4FLTDFC_2                     ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_RDCTRL2_LPTIM4FLTDFC_3                     ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_RDCTRL2_LPTIM4FLTDFC_4                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_RDCTRL2_LPTIM3FLTEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_RDCTRL2_LPTIM3FLTSEL                            ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_RDCTRL2_LPTIM3COMP4EN                           ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_RDCTRL2_LPTIM3COMP3EN                           ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_RDCTRL2_LPTIM3COMP2EN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_RDCTRL2_LPTIM3COMP1EN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_RDCTRL2_LPTIM3FLTDFC                       ((uint32_t)0x0000001FU)         /* Bit */
#define RCC_RDCTRL2_LPTIM3FLTDFC_0                     ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_RDCTRL2_LPTIM3FLTDFC_1                     ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_RDCTRL2_LPTIM3FLTDFC_2                     ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_RDCTRL2_LPTIM3FLTDFC_3                     ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_RDCTRL2_LPTIM3FLTDFC_4                     ((uint32_t)0x00000010U)         /* Bit4*/

/******** Bit definition for RCC_RDCTRL3 register  ********/
#define RCC_RDCTRL3_LPTIM5FLTEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_RDCTRL3_LPTIM5FLTSEL                            ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_RDCTRL3_LPTIM5COMP4EN                           ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_RDCTRL3_LPTIM5COMP3EN                           ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_RDCTRL3_LPTIM5COMP2EN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_RDCTRL3_LPTIM5COMP1EN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_RDCTRL3_LPTIM5FLTDFC                       ((uint32_t)0x0000001FU)         /* Bit */
#define RCC_RDCTRL3_LPTIM5FLTDFC_0                     ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_RDCTRL3_LPTIM5FLTDFC_1                     ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_RDCTRL3_LPTIM5FLTDFC_2                     ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_RDCTRL3_LPTIM5FLTDFC_3                     ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_RDCTRL3_LPTIM5FLTDFC_4                     ((uint32_t)0x00000010U)         /* Bit4*/

/******** Bit definition for RCC_RDEN1 register  ********/
#define RCC_RDEN1_M7LPTIM1EN                              ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_RDEN1_M4LPTIM1EN                              ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_RDEN1_M7LPTIM1LPEN                            ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_RDEN1_M4LPTIM1LPEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_RDEN1_M7LPTIM2EN                              ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_RDEN1_M4LPTIM2EN                              ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_RDEN1_M7LPTIM2LPEN                            ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_RDEN1_M4LPTIM2LPEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_RDEN1_M7LPTIM3EN                              ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_RDEN1_M4LPTIM3EN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_RDEN1_M7LPTIM3LPEN                            ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_RDEN1_M4LPTIM3LPEN                            ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_RDEN1_M7LPTIM4EN                              ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_RDEN1_M4LPTIM4EN                              ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_RDEN1_M7LPTIM4LPEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_RDEN1_M4LPTIM4LPEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_RDEN1_M7LPTIM5EN                              ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_RDEN1_M4LPTIM5EN                              ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_RDEN1_M7LPTIM5LPEN                            ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_RDEN1_M4LPTIM5LPEN                            ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_RDEN1_M7LPUART1EN                             ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_RDEN1_M4LPUART1EN                             ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_RDEN1_M7LPUART1LPEN                           ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_RDEN1_M4LPUART1LPEN                           ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_RDEN1_M7LPUART2EN                             ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_RDEN1_M4LPUART2EN                             ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_RDEN1_M7LPUART2LPEN                           ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_RDEN1_M4LPUART2LPEN                           ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_RDEN2 register  ********/
#define RCC_RDEN2_M7COMPEN                                ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_RDEN2_M4COMPEN                                ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_RDEN2_M7COMPLPEN                              ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_RDEN2_M4COMPLPEN                              ((uint32_t)0x10000000U)         /* Bit[28] */

/******** Bit definition for RCC_RDRST1 register  ********/
#define RCC_RDRST1_LPTIM1RST                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_RDRST1_LPTIM2RST                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_RDRST1_LPTIM3RST                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_RDRST1_LPTIM4RST                               ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_RDRST1_LPTIM5RST                               ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_RDRST1_LPUART1RST                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_RDRST1_LPUART2RST                              ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_RDRST2 register  ********/
#define RCC_RDRST2_COMPRST                                 ((uint32_t)0x10000000U)         /* Bit[28] */

/******** Bit definition for RCC_BDCTRL register  ********/
#define RCC_BDCTRL_AFELSERDF                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_BDCTRL_AFELSIRDF                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_BDCTRL_LSELDOEN                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_BDCTRL_LSIOVREN                                ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_BDCTRL_LSIPFACK                                ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_BDCTRL_LSIPFF                                  ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_BDCTRL_LSICSSEN                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_BDCTRL_LSERDCNTEN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_BDCTRL_RTCLSFSW                                ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_BDCTRL_RTCHSFSW                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_BDCTRL_LSISECRDF                               ((uint32_t)0x00080000U)         /* Bit[19] */

#define RCC_BDCTRL_RTCEN                                   ((uint32_t)0x00040000U)         /* Bit[18] */

#define RCC_BDCTRL_RTCSEL                             ((uint32_t)0x00030000U)         /* Bit[17:16] */
#define RCC_BDCTRL_RTCSEL_0                           ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_BDCTRL_RTCSEL_1                           ((uint32_t)0x00020000U)         /* Bit17*/

#define RCC_BDCTRL_RTCSEL_LSE                           ((uint32_t)0x00010000U)  
#define RCC_BDCTRL_RTCSEL_LSI                           ((uint32_t)0x00020000U)  
#define RCC_BDCTRL_RTCSEL_HSEDIV                           ((uint32_t)0x00030000U)  

#define RCC_BDCTRL_BORRSTEN                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_BDCTRL_C1LPRSTEN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_BDCTRL_C2LPRSTEN                               ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_BDCTRL_BDRST                                   ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_BDCTRL_BKPEMCRSTEN                             ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_BDCTRL_RETEMCRSTEN                             ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_BDCTRL_LSECSSF                                 ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_BDCTRL_LSECSSEN                                ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_BDCTRL_LSERDEN                                 ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_BDCTRL_LSEBP                                   ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_BDCTRL_LSERDF                                  ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_BDCTRL_LSEEN                                   ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_BDCTRL_LSIRDEN                                 ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_BDCTRL_LSISECEN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_BDCTRL_LSIRDF                                  ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_BDCTRL_LSIEN                                   ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_LSICSSDL register  ********/
#define RCC_LSICSSDL_DELAY                             ((uint32_t)0xFFFFFFFFU)         /* Bit */
#define RCC_LSICSSDL_DELAY_0                           ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_LSICSSDL_DELAY_1                           ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_LSICSSDL_DELAY_2                           ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_LSICSSDL_DELAY_3                           ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_LSICSSDL_DELAY_4                           ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_LSICSSDL_DELAY_5                           ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_LSICSSDL_DELAY_6                           ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_LSICSSDL_DELAY_7                           ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_LSICSSDL_DELAY_8                           ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_LSICSSDL_DELAY_9                           ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_LSICSSDL_DELAY_10                          ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_LSICSSDL_DELAY_11                          ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_LSICSSDL_DELAY_12                          ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_LSICSSDL_DELAY_13                          ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_LSICSSDL_DELAY_14                          ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_LSICSSDL_DELAY_15                          ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_LSICSSDL_DELAY_16                          ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_LSICSSDL_DELAY_17                          ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_LSICSSDL_DELAY_18                          ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_LSICSSDL_DELAY_19                          ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_LSICSSDL_DELAY_20                          ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_LSICSSDL_DELAY_21                          ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_LSICSSDL_DELAY_22                          ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_LSICSSDL_DELAY_23                          ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_LSICSSDL_DELAY_24                          ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_LSICSSDL_DELAY_25                          ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_LSICSSDL_DELAY_26                          ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_LSICSSDL_DELAY_27                          ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_LSICSSDL_DELAY_28                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_LSICSSDL_DELAY_29                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_LSICSSDL_DELAY_30                          ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_LSICSSDL_DELAY_31                          ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for RCC_CTRLSTS register  ********/
#define RCC_CTRLSTS_RMRSTF                                  ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_CTRLSTS_C1LPRSTF                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_CTRLSTS_C2LPRSTF                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_CTRLSTS_RETEMCRSTF                              ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CTRLSTS_BKPEMCRSTF                              ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_CTRLSTS_BORRSTF                                 ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_CTRLSTS_MMURSTF                               ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_CTRLSTS_WWDG1RSTF                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_CTRLSTS_WWDG2RSTF                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_CTRLSTS_IWDG1RSTF                               ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_CTRLSTS_IWDG2RSTF                               ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_CTRLSTS_CM4SFTRSTF                              ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_CTRLSTS_CM7SFTRSTF                              ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_CTRLSTS_PORRSTF                                 ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_CTRLSTS_PINRSTF                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_CLKINT1 register  ********/
#define RCC_CLKINT1_LSECSSIE                                ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_CLKINT1_LSECSSIF                                ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_CLKINT1_LSECSSIC                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_CLKINT1_HSECSSIF                                ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_CLKINT1_HSECSSIC                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_CLKINT1_BORIE                                   ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_CLKINT1_BORIF                                   ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_CLKINT1_BORIC                                   ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_CLKINT1_PLL1RDIE                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_CLKINT1_PLL1RDIF                                ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_CLKINT1_PLL1RDIC                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_CLKINT1_PLL2RDIE                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_CLKINT1_PLL2RDIF                                ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CLKINT1_PLL2RDIC                                ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_CLKINT1_PLL3RDIE                                ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_CLKINT1_PLL3RDIF                                ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_CLKINT1_PLL3RDIC                                ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_CLKINT1_SHRPLLRDIE                              ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_CLKINT1_SHRPLLRDIF                              ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_CLKINT1_SHRPLLRDIC                              ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_CLKINT2 register  ********/
#define RCC_CLKINT2_HSERDIE                                 ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_CLKINT2_HSERDIF                                 ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_CLKINT2_HSERDIC                                 ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_CLKINT2_HSIRDIE                                 ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_CLKINT2_HSIRDIF                                 ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_CLKINT2_HSIRDIC                                 ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_CLKINT2_MSIRDIE                                 ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_CLKINT2_MSIRDIF                                 ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_CLKINT2_MSIRDIC                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_CLKINT2_LSERDIE                                 ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_CLKINT2_LSERDIF                                 ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_CLKINT2_LSERDIC                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_CLKINT2_LSIRDIE                                 ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_CLKINT2_LSIRDIF                                 ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CLKINT2_LSIRDIC                                 ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_CLKINT2_HSICALEIE                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_CLKINT2_HSICALEIF                               ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_CLKINT2_HSICALEIC                               ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_CLKINT2_MSICALEIE                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_CLKINT2_MSICALEIF                               ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_CLKINT2_MSICALEIC                               ((uint32_t)0x00000010U)         /* Bit[4] */

/******** Bit definition for RCC_CLKINT3 register  ********/
#define RCC_CLKINT3_PLL1LKFIE                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_CLKINT3_PLL1LKFIF                               ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_CLKINT3_PLL1LKFIC                               ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_CLKINT3_PLL2LKFIE                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_CLKINT3_PLL2LKFIF                               ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CLKINT3_PLL2LKFIC                               ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_CLKINT3_PLL3LKFIE                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_CLKINT3_PLL3LKFIF                               ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_CLKINT3_PLL3LKFIC                               ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_CLKINT3_SHRPLLLKFIE                             ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_CLKINT3_SHRPLLLKFIF                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_CLKINT3_SHRPLLLKFIC                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_CLKINT3_LSIFIE                                  ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_CLKINT3_LSIFIF                                  ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_CLKINT3_LSIFIC                                  ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_CFG1 register  ********/
#define RCC_CFG1_WWDG2RSTDLCNT                      ((uint32_t)0x00F00000U)         /* Bit[23:20] */
#define RCC_CFG1_WWDG2RSTDLCNT_0                    ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_CFG1_WWDG2RSTDLCNT_1                    ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_CFG1_WWDG2RSTDLCNT_2                    ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_CFG1_WWDG2RSTDLCNT_3                    ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_CFG1_WWDG1RSTDLCNT                      ((uint32_t)0x000F0000U)         /* Bit[19:16] */
#define RCC_CFG1_WWDG1RSTDLCNT_0                    ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_CFG1_WWDG1RSTDLCNT_1                    ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_CFG1_WWDG1RSTDLCNT_2                    ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_CFG1_WWDG1RSTDLCNT_3                    ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_CFG1_WWDG2RSTEN                              ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_CFG1_WWDG1RSTEN                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_CFG1_M7TRACEDIV                         ((uint32_t)0x000000F0U)         /* Bit[7:4] */
#define RCC_CFG1_M7TRACEDIV_0                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_CFG1_M7TRACEDIV_1                       ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_CFG1_M7TRACEDIV_2                       ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_CFG1_M7TRACEDIV_3                       ((uint32_t)0x00000080U)         /* Bit7*/

#define RCC_CFG1_M7TRACEDIV_DIV1                  ((uint32_t)0x00000000U)
#define RCC_CFG1_M7TRACEDIV_DIV2                  ((uint32_t)0x00000010U)
#define RCC_CFG1_M7TRACEDIV_DIV4                  ((uint32_t)0x00000020U)
#define RCC_CFG1_M7TRACEDIV_DIV8                  ((uint32_t)0x00000040U)
#define RCC_CFG1_M7TRACEDIV_DIV16                 ((uint32_t)0x00000070U)
#define RCC_CFG1_M7TRACEDIV_DIV32                 ((uint32_t)0x00000080U)
#define RCC_CFG1_M7TRACEDIV_DIV64                 ((uint32_t)0x00000090U)
#define RCC_CFG1_M7TRACEDIV_DIV128                ((uint32_t)0x000000A0U)
#define RCC_CFG1_M7TRACEDIV_DIV256                ((uint32_t)0x000000B0U)
#define RCC_CFG1_M7TRACEDIV_DIV512                ((uint32_t)0x000000C0U)

#define RCC_CFG1_M4TRACEDIV                         ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_CFG1_M4TRACEDIV_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_CFG1_M4TRACEDIV_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_CFG1_M4TRACEDIV_2                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_CFG1_M4TRACEDIV_3                       ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for RCC_AXIDIV1 register  ********/
#define RCC_AXIDIV1_JPEGAXIDIV                         ((uint32_t)0xF0000000U)         /* Bit[31:28] */
#define RCC_AXIDIV1_JPEGAXIDIV_0                       ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_AXIDIV1_JPEGAXIDIV_1                       ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_AXIDIV1_JPEGAXIDIV_2                       ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_AXIDIV1_JPEGAXIDIV_3                       ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_AXIDIV1_JPEGSGDMADIV                       ((uint32_t)0x0F000000U)         /* Bit[27:24] */
#define RCC_AXIDIV1_JPEGSGDMADIV_0                     ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_AXIDIV1_JPEGSGDMADIV_1                     ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_AXIDIV1_JPEGSGDMADIV_2                     ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_AXIDIV1_JPEGSGDMADIV_3                     ((uint32_t)0x08000000U)         /* Bit27*/

#define RCC_AXIDIV1_SDMMC1AXIDIV                       ((uint32_t)0x00F00000U)         /* Bit[23:20] */
#define RCC_AXIDIV1_SDMMC1AXIDIV_0                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_AXIDIV1_SDMMC1AXIDIV_1                     ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_AXIDIV1_SDMMC1AXIDIV_2                     ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_AXIDIV1_SDMMC1AXIDIV_3                     ((uint32_t)0x00800000U)         /* Bit23*/

#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV1                  ((uint32_t)0x00000000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV2                  ((uint32_t)0x00100000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV4                  ((uint32_t)0x00200000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV8                  ((uint32_t)0x00400000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV16                 ((uint32_t)0x00700000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV32                 ((uint32_t)0x00800000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV64                 ((uint32_t)0x00900000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV128                ((uint32_t)0x00A00000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV256                ((uint32_t)0x00B00000U)
#define RCC_AXIDIV1_SDMMC1AXIDIV_DIV512                ((uint32_t)0x00C00000U)

#define RCC_AXIDIV1_DSIREFDIV                          ((uint32_t)0x000F0000U)         /* Bit[19:16] */
#define RCC_AXIDIV1_DSIREFDIV_0                        ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_AXIDIV1_DSIREFDIV_1                        ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_AXIDIV1_DSIREFDIV_2                        ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_AXIDIV1_DSIREFDIV_3                        ((uint32_t)0x00080000U)         /* Bit19*/

#define RCC_AXIDIV1_DSIREFDIV_DIV1                        ((uint32_t)0x00000000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV2                        ((uint32_t)0x00010000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV4                        ((uint32_t)0x00020000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV8                        ((uint32_t)0x00040000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV16                       ((uint32_t)0x00070000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV32                       ((uint32_t)0x00080000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV64                       ((uint32_t)0x00090000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV128                      ((uint32_t)0x000A0000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV256                      ((uint32_t)0x000B0000U)
#define RCC_AXIDIV1_DSIREFDIV_DIV512                      ((uint32_t)0x000C0000U)

#define RCC_AXIDIV1_LCDCAXIDIV                          ((uint32_t)0x0000F000U)         /* Bit[15:12] */
#define RCC_AXIDIV1_LCDCAXIDIV_0                        ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_AXIDIV1_LCDCAXIDIV_1                        ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_AXIDIV1_LCDCAXIDIV_2                        ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_AXIDIV1_LCDCAXIDIV_3                        ((uint32_t)0x00008000U)         /* Bit15*/

#define RCC_AXIDIV1_LCDCAXIDIV_DIV1                     ((uint32_t)0x00000000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV2                     ((uint32_t)0x00001000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV4                     ((uint32_t)0x00002000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV8                     ((uint32_t)0x00004000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV16                    ((uint32_t)0x00007000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV32                    ((uint32_t)0x00008000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV64                    ((uint32_t)0x00009000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV128                   ((uint32_t)0x0000A000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV256                   ((uint32_t)0x0000B000U)
#define RCC_AXIDIV1_LCDCAXIDIV_DIV512                   ((uint32_t)0x0000C000U)

#define RCC_AXIDIV1_DVPMAXIDIV                         ((uint32_t)0x00000F00U)         /* Bit[11:8] */
#define RCC_AXIDIV1_DVPMAXIDIV_0                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_AXIDIV1_DVPMAXIDIV_1                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_AXIDIV1_DVPMAXIDIV_2                       ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_AXIDIV1_DVPMAXIDIV_3                       ((uint32_t)0x00000800U)         /* Bit11*/

#define RCC_AXIDIV1_DVPMAXIDIV_DIV1                    ((uint32_t)0x00000000U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV2                    ((uint32_t)0x00000100U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV4                    ((uint32_t)0x00000200U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV8                    ((uint32_t)0x00000400U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV16                   ((uint32_t)0x00000700U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV32                   ((uint32_t)0x00000800U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV64                   ((uint32_t)0x00000900U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV128                  ((uint32_t)0x00000A00U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV256                  ((uint32_t)0x00000B00U)
#define RCC_AXIDIV1_DVPMAXIDIV_DIV512                  ((uint32_t)0x00000C00U)
/******** Bit definition for RCC_AXIDIV2 register  ********/
#define RCC_AXIDIV2_DSIAXIPPIDIV                       ((uint32_t)0x00F00000U)         /* Bit[23:20] */
#define RCC_AXIDIV2_DSIAXIPPIDIV_0                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_AXIDIV2_DSIAXIPPIDIV_1                     ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_AXIDIV2_DSIAXIPPIDIV_2                     ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_AXIDIV2_DSIAXIPPIDIV_3                     ((uint32_t)0x00800000U)         /* Bit23*/

#define RCC_AXIDIV2_DSIREFULPSDIV                      ((uint32_t)0x000F0000U)         /* Bit[19:16] */
#define RCC_AXIDIV2_DSIREFULPSDIV_0                    ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_AXIDIV2_DSIREFULPSDIV_1                    ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_AXIDIV2_DSIREFULPSDIV_2                    ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_AXIDIV2_DSIREFULPSDIV_3                    ((uint32_t)0x00080000U)         /* Bit19*/

#define RCC_AXIDIV2_DSIREFULPSDIV_DIV1                 ((uint32_t)0x00000000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV2                 ((uint32_t)0x00010000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV4                 ((uint32_t)0x00020000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV8                 ((uint32_t)0x00040000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV16                ((uint32_t)0x00070000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV32                ((uint32_t)0x00080000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV64                ((uint32_t)0x00090000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV128               ((uint32_t)0x000A0000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV256               ((uint32_t)0x000B0000U)
#define RCC_AXIDIV2_DSIREFULPSDIV_DIV512               ((uint32_t)0x000C0000U)

#define RCC_AXIDIV2_SDRAMMEMDIV                        ((uint32_t)0x00000F00U)         /* Bit[11:8] */
#define RCC_AXIDIV2_SDRAMMEMDIV_0                      ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_AXIDIV2_SDRAMMEMDIV_1                      ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_AXIDIV2_SDRAMMEMDIV_2                      ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_AXIDIV2_SDRAMMEMDIV_3                      ((uint32_t)0x00000800U)         /* Bit11*/

#define RCC_AXIDIV2_SDRAMMEMDIV_DIV1                   ((uint32_t)0x00000000U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV2                   ((uint32_t)0x00000100U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV4                   ((uint32_t)0x00000200U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV8                   ((uint32_t)0x00000400U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV16                  ((uint32_t)0x00000700U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV32                  ((uint32_t)0x00000800U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV64                  ((uint32_t)0x00000900U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV128                 ((uint32_t)0x00000A00U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV256                 ((uint32_t)0x00000B00U)
#define RCC_AXIDIV2_SDRAMMEMDIV_DIV512                 ((uint32_t)0x00000C00U)

#define RCC_AXIDIV2_FEMCM1AXIDIV                       ((uint32_t)0x000000F0U)         /* Bit[7:4] */
#define RCC_AXIDIV2_FEMCM1AXIDIV_0                     ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_AXIDIV2_FEMCM1AXIDIV_1                     ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_AXIDIV2_FEMCM1AXIDIV_2                     ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_AXIDIV2_FEMCM1AXIDIV_3                     ((uint32_t)0x00000080U)         /* Bit7*/

#define RCC_AXIDIV2_FEMCM0AXIDIV                       ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_AXIDIV2_FEMCM0AXIDIV_0                     ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AXIDIV2_FEMCM0AXIDIV_1                     ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AXIDIV2_FEMCM0AXIDIV_2                     ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_AXIDIV2_FEMCM0AXIDIV_3                     ((uint32_t)0x00000008U)         /* Bit3*/

#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV1                 ((uint32_t)0x00000001U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV2                 ((uint32_t)0x00000002U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV3                 ((uint32_t)0x00000003U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV4                 ((uint32_t)0x00000004U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV5                 ((uint32_t)0x00000005U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV6                 ((uint32_t)0x00000006U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV7                 ((uint32_t)0x00000007U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV8                 ((uint32_t)0x00000008U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV9                 ((uint32_t)0x00000009U)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV10                ((uint32_t)0x0000000AU)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV11                ((uint32_t)0x0000000BU)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV12                ((uint32_t)0x0000000CU)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV13                ((uint32_t)0x0000000DU)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV14                ((uint32_t)0x0000000EU)
#define RCC_AXIDIV2_FEMCM0AXIDIV_DIV15                ((uint32_t)0x0000000FU)
/******** Bit definition for RCC_AXISEL1 register  ********/
#define RCC_AXISEL1_DSIULPSSEL                         ((uint32_t)0x0C000000U)         /* Bit[27:26] */
#define RCC_AXISEL1_DSIULPSSEL_0                       ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_AXISEL1_DSIULPSSEL_1                       ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_AXISEL1_DSIKERSEL                          ((uint32_t)0x03000000U)         /* Bit[25:24] */
#define RCC_AXISEL1_DSIKERSEL_0                        ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_AXISEL1_DSIKERSEL_1                        ((uint32_t)0x02000000U)         /* Bit25*/

#define RCC_AXISEL1_SDMMC1KERSEL                       ((uint32_t)0x00700000U)         /* Bit[22:20] */
#define RCC_AXISEL1_SDMMC1KERSEL_0                     ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_AXISEL1_SDMMC1KERSEL_1                     ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_AXISEL1_SDMMC1KERSEL_2                     ((uint32_t)0x00400000U)         /* Bit22*/

#define RCC_AXISEL1_SDMMC1KERSEL_AXIDIV                ((uint32_t)0x00000000U)
#define RCC_AXISEL1_SDMMC1KERSEL_PERIPH                ((uint32_t)0x00100000U)
#define RCC_AXISEL1_SDMMC1KERSEL_PLL2A                 ((uint32_t)0x00200000U)
#define RCC_AXISEL1_SDMMC1KERSEL_PLL3A                 ((uint32_t)0x00300000U)
#define RCC_AXISEL1_SDMMC1KERSEL_PLL1B                 ((uint32_t)0x00400000U)

#define RCC_AXISEL1_DSIPPITXSEL                        ((uint32_t)0x00030000U)         /* Bit[17:16] */
#define RCC_AXISEL1_DSIPPITXSEL_0                      ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_AXISEL1_DSIPPITXSEL_1                      ((uint32_t)0x00020000U)         /* Bit17*/

#define RCC_AXISEL1_DSIPPITXSEL_REFDIV                      ((uint32_t)0x00000000U)
#define RCC_AXISEL1_DSIPPITXSEL_PLL2B                       ((uint32_t)0x00010000U)
#define RCC_AXISEL1_DSIPPITXSEL_PERIPH                      ((uint32_t)0x00020000U)
#define RCC_AXISEL1_DSIPPITXSEL_AXIDIV                      ((uint32_t)0x00030000U)

#define RCC_AXISEL1_LCDCKERSEL                          ((uint32_t)0x00003000U)         /* Bit[13:12] */
#define RCC_AXISEL1_LCDCKERSEL_0                        ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_AXISEL1_LCDCKERSEL_1                        ((uint32_t)0x00002000U)         /* Bit13*/

#define RCC_AXISEL1_LCDCKERSEL_AXIDIV                              ((uint32_t)0x00000000U)
#define RCC_AXISEL1_LCDCKERSEL_PERIPH                              ((uint32_t)0x00001000U)
#define RCC_AXISEL1_LCDCKERSEL_PLL2C                              ((uint32_t)0x00002000U)
#define RCC_AXISEL1_LCDCKERSEL_PLL3B                              ((uint32_t)0x00003000U)

#define RCC_AXISEL1_DVP1MSEL                           ((uint32_t)0x00000C00U)         /* Bit[11:10] */
#define RCC_AXISEL1_DVP1MSEL_0                         ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_AXISEL1_DVP1MSEL_1                         ((uint32_t)0x00000800U)         /* Bit11*/

#define RCC_AXISEL1_DVP1MSEL_AXIDIV                                     ((uint32_t)0x00000000U)
#define RCC_AXISEL1_DVP1MSEL_PERIPH                                     ((uint32_t)0x00000400U)
#define RCC_AXISEL1_DVP1MSEL_PLL2C                                      ((uint32_t)0x00000800U)
#define RCC_AXISEL1_DVP1MSEL_PLL3A                                      ((uint32_t)0x00000C00U)

#define RCC_AXISEL1_DVP2MSEL                           ((uint32_t)0x00000300U)         /* Bit[9:8] */
#define RCC_AXISEL1_DVP2MSEL_0                         ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_AXISEL1_DVP2MSEL_1                         ((uint32_t)0x00000200U)         /* Bit9*/

#define RCC_AXISEL1_XSPI1SSISEL                        ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_AXISEL1_XSPI1SSISEL_0                      ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_AXISEL1_XSPI1SSISEL_1                      ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_AXISEL1_XSPI1SSISEL_2                      ((uint32_t)0x00000040U)         /* Bit6*/

#define RCC_AXISEL1_XSPI1SSISEL_AXI                    ((uint32_t)0x00000000U)
#define RCC_AXISEL1_XSPI1SSISEL_PLL3C                  ((uint32_t)0x00000010U)
#define RCC_AXISEL1_XSPI1SSISEL_PLL1B                  ((uint32_t)0x00000020U)
#define RCC_AXISEL1_XSPI1SSISEL_PLL2A                  ((uint32_t)0x00000030U)
#define RCC_AXISEL1_XSPI1SSISEL_PLL2C                  ((uint32_t)0x00000040U)

#define RCC_AXISEL1_XSPI2SSISEL                        ((uint32_t)0x00000007U)         /* Bit */
#define RCC_AXISEL1_XSPI2SSISEL_0                      ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AXISEL1_XSPI2SSISEL_1                      ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AXISEL1_XSPI2SSISEL_2                      ((uint32_t)0x00000004U)         /* Bit2*/

/******** Bit definition for RCC_AXISEL2 register  ********/
#define RCC_AXISEL2_SDRAMMEMSEL                        ((uint32_t)0x00000700U)         /* Bit[10:8] */
#define RCC_AXISEL2_SDRAMMEMSEL_0                      ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_AXISEL2_SDRAMMEMSEL_1                      ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_AXISEL2_SDRAMMEMSEL_2                      ((uint32_t)0x00000400U)         /* Bit10*/

#define RCC_AXISEL2_SDRAMMEMSEL_AXIDIV                  ((uint32_t)0x00000000U)
#define RCC_AXISEL2_SDRAMMEMSEL_PERIPH                  ((uint32_t)0x00000100U)
#define RCC_AXISEL2_SDRAMMEMSEL_PLL2A                   ((uint32_t)0x00000200U)
#define RCC_AXISEL2_SDRAMMEMSEL_PLL3A                   ((uint32_t)0x00000300U)
#define RCC_AXISEL2_SDRAMMEMSEL_PLL1B                   ((uint32_t)0x00000400U)

#define RCC_AXISEL2_FEMCM1SEL                          ((uint32_t)0x00000070U)         /* Bit[6:4] */
#define RCC_AXISEL2_FEMCM1SEL_0                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_AXISEL2_FEMCM1SEL_1                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_AXISEL2_FEMCM1SEL_2                        ((uint32_t)0x00000040U)         /* Bit6*/

#define RCC_AXISEL2_FEMCM0SEL                          ((uint32_t)0x00000007U)         /* Bit */
#define RCC_AXISEL2_FEMCM0SEL_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_AXISEL2_FEMCM0SEL_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_AXISEL2_FEMCM0SEL_2                        ((uint32_t)0x00000004U)         /* Bit2*/

#define RCC_AXISEL2_FEMCM0SEL_AXIDIV                  ((uint32_t)0x00000000U)
#define RCC_AXISEL2_FEMCM0SEL_PERIPH                  ((uint32_t)0x00000001U)
#define RCC_AXISEL2_FEMCM0SEL_PLL2C                   ((uint32_t)0x00000002U)
#define RCC_AXISEL2_FEMCM0SEL_PLL3B                   ((uint32_t)0x00000003U)
#define RCC_AXISEL2_FEMCM0SEL_PLL1B                   ((uint32_t)0x00000004U)
/******** Bit definition for RCC_AXIEN1 register  ********/
#define RCC_AXIEN1_M7JPEGDEN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AXIEN1_M4JPEGDEN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AXIEN1_M7JPEGDLPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AXIEN1_M4JPEGDLPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIEN1_M7JPEGEEN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AXIEN1_M4JPEGEEN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AXIEN1_M7JPEGELPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AXIEN1_M4JPEGELPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AXIEN1_M7DMAMUX2EN                             ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AXIEN1_M4DMAMUX2EN                             ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AXIEN1_M7DMAMUX2LPEN                           ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AXIEN1_M4DMAMUX2LPEN                           ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AXIEN1_M7MDMAEN                                ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AXIEN1_M4MDMAEN                                ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AXIEN1_M7MDMALPEN                              ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AXIEN1_M4MDMALPEN                              ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AXIEN1_M7SDMMC1EN                              ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AXIEN1_M4SDMMC1EN                              ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AXIEN1_M7SDMMC1LPEN                            ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AXIEN1_M4SDMMC1LPEN                            ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AXIEN1_M7ECCM1EN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AXIEN1_M4ECCM1EN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AXIEN1_M7ECCM1LPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AXIEN1_M4ECCM1LPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AXIEN1_M7OTPCEN                                ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AXIEN1_M4OTPCEN                                ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AXIEN1_M7OTPCLPEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AXIEN1_M4OTPCLPEN                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIEN2 register  ********/
#define RCC_AXIEN2_M7DSIEN                                 ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AXIEN2_M4DSIEN                                 ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AXIEN2_M7DSILPEN                               ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AXIEN2_M4DSILPEN                               ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIEN2_M7LCDCEN                                 ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AXIEN2_M4LCDCEN                                 ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AXIEN2_M7LCDCLPEN                               ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AXIEN2_M4LCDCLPEN                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AXIEN2_M7LCDCAPBEN                              ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AXIEN2_M4LCDCAPBEN                              ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AXIEN2_M7LCDCAPBLPEN                            ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AXIEN2_M4LCDCAPBLPEN                            ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AXIEN2_M7DVP1EN                                ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AXIEN2_M4DVP1EN                                ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AXIEN2_M7DVP1LPEN                              ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AXIEN2_M4DVP1LPEN                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AXIEN2_M7DVP1APBEN                             ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AXIEN2_M4DVP1APBEN                             ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AXIEN2_M7DVP1APBLPEN                           ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AXIEN2_M4DVP1APBLPEN                           ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AXIEN2_M7DVP2EN                                ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AXIEN2_M4DVP2EN                                ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AXIEN2_M7DVP2LPEN                              ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AXIEN2_M4DVP2LPEN                              ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AXIEN2_M7DVP2APBEN                             ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AXIEN2_M4DVP2APBEN                             ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AXIEN2_M7DVP2APBLPEN                           ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AXIEN2_M4DVP2APBLPEN                           ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AXIEN2_M7WWDG1EN                               ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AXIEN2_M4WWDG1EN                               ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AXIEN2_M7WWDG1LPEN                             ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AXIEN2_M4WWDG1LPEN                             ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIEN3 register  ********/
#define RCC_AXIEN3_M7TASRAM2EN                             ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AXIEN3_M4TASRAM2EN                             ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AXIEN3_M7TASRAM2LPEN                           ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AXIEN3_M4TASRAM2LPEN                           ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIEN3_M7TASRAM3EN                             ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AXIEN3_M4TASRAM3EN                             ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AXIEN3_M7TASRAM3LPEN                           ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AXIEN3_M4TASRAM3LPEN                           ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AXIEN3_M7TCMEN                                 ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AXIEN3_M4TCMEN                                 ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AXIEN3_M7TCMLPEN                               ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AXIEN3_M4TCMLPEN                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AXIEN3_M7TCMAXIEN                              ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AXIEN3_M4TCMAXIEN                              ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AXIEN3_M7TCMAXILPEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AXIEN3_M4TCMAXILPEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AXIEN3_M7TCMAPBEN                              ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_AXIEN3_M4TCMAPBEN                              ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_AXIEN3_M7TCMAPBLPEN                            ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_AXIEN3_M4TCMAPBLPEN                            ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AXIEN3_M7ASRAM1EN                              ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_AXIEN3_M4ASRAM1EN                              ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_AXIEN3_M7ASRAM1LPEN                            ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AXIEN3_M4ASRAM1LPEN                            ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AXIEN3_M7AXIROMEN                              ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_AXIEN3_M4AXIROMEN                              ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_AXIEN3_M7AXIROMLPEN                            ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_AXIEN3_M4AXIROMLPEN                            ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AXIEN3_M7GPUEN                                 ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AXIEN3_M4GPUEN                                 ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AXIEN3_M7GPULPEN                               ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AXIEN3_M4GPULPEN                               ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIEN4 register  ********/
#define RCC_AXIEN4_M7XSPI1EN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_AXIEN4_M4XSPI1EN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_AXIEN4_M7XSPI1LPEN                             ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AXIEN4_M4XSPI1LPEN                             ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIEN4_M7XSPI2EN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_AXIEN4_M4XSPI2EN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_AXIEN4_M7XSPI2LPEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_AXIEN4_M4XSPI2LPEN                             ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AXIEN4_M7FEMCEN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_AXIEN4_M4FEMCEN                                ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_AXIEN4_M7FEMCLPEN                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AXIEN4_M4FEMCLPEN                              ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AXIEN4_M7SDRAMEN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_AXIEN4_M4SDRAMEN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_AXIEN4_M7SDRAMLPEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_AXIEN4_M4SDRAMLPEN                             ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AXIEN4_M7DSIULPSEN                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_AXIEN4_M4DSIULPSEN                             ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_AXIEN4_M7DSIULPSLPEN                           ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_AXIEN4_M4DSIULPSLPEN                           ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIRST1 register  ********/
#define RCC_AXIRST1_JPEGDRST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIRST1_JPEGERST                                ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AXIRST1_DMAMUX2RST                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AXIRST1_MDMARST                                 ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_AXIRST1_SDMMC1RST                            ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_AXIRST1_SDHOST1RST                               ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AXIRST1_ECCM1RST                                ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_AXIRST1_OTPCRST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIRST2 register  ********/
#define RCC_AXIRST2_DSICFGRST                               ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_AXIRST2_DSIRST                                  ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIRST2_LCDCRST                                  ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AXIRST2_DVP1RST                                 ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_AXIRST2_DVP2RST                                 ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_AXIRST2_WWDG1RST                                ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIRST3 register  ********/
#define RCC_AXIRST3_GPURST                                  ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_AXIRST4 register  ********/
#define RCC_AXIRST4_XSPI1RST                                ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_AXIRST4_XSPI2RST                                ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_AXIRST4_FEMCCFGRST                              ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_AXIRST4_FEMCRST                                 ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_AXIRST4_SDRAMRST                                ((uint32_t)0x00010000U)         /* Bit[16] */

/******** Bit definition for RCC_CFG2 register  ********/
#define RCC_CFG2_M4CAHIEN                                ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_CFG2_M4CAHIPCLKEN                            ((uint32_t)0x10000000U)         /* Bit[28] */
#define RCC_CFG2_M4CAHDEN                                ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_CFG2_M4CAHDPCLKEN                            ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_CFG2_M7MMUEN                                 ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_CFG2_M7MMULPEN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_CFG2_M4MMUEN                                 ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_CFG2_M4MMULPEN                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_CFG2_M7SRAMBKPEN                             ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_CFG2_M4SRAMBKPEN                             ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_CFG2_M7SRAMBKPLPEN                           ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_CFG2_M4SRAMBKPLPEN                           ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_CFG2_M7SRAM1EN                               ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_CFG2_M4SRAM1EN                               ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_CFG2_M7SRAM1LPEN                             ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CFG2_M4SRAM1LPEN                             ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_CFG2_M7SRAM2EN                               ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_CFG2_M4SRAM2EN                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_CFG2_M7SRAM2LPEN                             ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_CFG2_M4SRAM2LPEN                             ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_CFG2_M7SRAM3EN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_CFG2_M4SRAM3EN                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_CFG2_M7SRAM3LPEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_CFG2_M4SRAM3LPEN                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_CFG2_M7SRAM4EN                               ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_CFG2_M4SRAM4EN                               ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_CFG2_M7SRAM4LPEN                             ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_CFG2_M4SRAM4LPEN                             ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_CFG3 register  ********/
#define RCC_CFG3_MCO1SEL                            ((uint32_t)0xF0000000U)         /* Bit[31:28] */
#define RCC_CFG3_MCO1SEL_0                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_CFG3_MCO1SEL_1                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_CFG3_MCO1SEL_2                          ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_CFG3_MCO1SEL_3                          ((uint32_t)0x80000000U)         /* Bit31*/

#define RCC_CFG3_MCO1SEL_LSI                        ((uint32_t)0x80000000U)
#define RCC_CFG3_MCO1SEL_HSI                        ((uint32_t)0x90000000U)
#define RCC_CFG3_MCO1SEL_MSI                        ((uint32_t)0xA0000000U)
#define RCC_CFG3_MCO1SEL_LSE                        ((uint32_t)0xB0000000U)
#define RCC_CFG3_MCO1SEL_HSE                        ((uint32_t)0xC0000000U)
#define RCC_CFG3_MCO1SEL_PLL3B                      ((uint32_t)0xD0000000U)

#define RCC_CFG3_MCO1DIV                            ((uint32_t)0x0F000000U)         /* Bit[27:24] */
#define RCC_CFG3_MCO1DIV_0                          ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_CFG3_MCO1DIV_1                          ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_CFG3_MCO1DIV_2                          ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_CFG3_MCO1DIV_3                          ((uint32_t)0x08000000U)         /* Bit27*/

#define RCC_CFG3_MCO1DIV_DIV1                         ((uint32_t)0x00000000U)
#define RCC_CFG3_MCO1DIV_DIV2                         ((uint32_t)0x01000000U)
#define RCC_CFG3_MCO1DIV_DIV4                         ((uint32_t)0x02000000U)
#define RCC_CFG3_MCO1DIV_DIV8                         ((uint32_t)0x04000000U)
#define RCC_CFG3_MCO1DIV_DIV16                        ((uint32_t)0x07000000U)
#define RCC_CFG3_MCO1DIV_DIV32                        ((uint32_t)0x08000000U)
#define RCC_CFG3_MCO1DIV_DIV64                        ((uint32_t)0x09000000U)
#define RCC_CFG3_MCO1DIV_DIV128                        ((uint32_t)0x0A000000U)

#define RCC_CFG3_MCO2SEL                            ((uint32_t)0x00F00000U)         /* Bit[23:20] */
#define RCC_CFG3_MCO2SEL_0                          ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_CFG3_MCO2SEL_1                          ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_CFG3_MCO2SEL_2                          ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_CFG3_MCO2SEL_3                          ((uint32_t)0x00800000U)         /* Bit23*/

#define RCC_CFG3_MCO2SEL_SYSCLK                     ((uint32_t)0x00800000U)
#define RCC_CFG3_MCO2SEL_PLL1A                      ((uint32_t)0x00900000U)
#define RCC_CFG3_MCO2SEL_PLL2A                      ((uint32_t)0x00A00000U)
#define RCC_CFG3_MCO2SEL_PLL3A                      ((uint32_t)0x00B00000U)
#define RCC_CFG3_MCO2SEL_SHRPLL                     ((uint32_t)0x00C00000U)
#define RCC_CFG3_MCO2SEL_LSE                        ((uint32_t)0x00D00000U)

#define RCC_CFG3_MCO2DIV                            ((uint32_t)0x000F0000U)         /* Bit[19:16] */
#define RCC_CFG3_MCO2DIV_0                          ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_CFG3_MCO2DIV_1                          ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_CFG3_MCO2DIV_2                          ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_CFG3_MCO2DIV_3                          ((uint32_t)0x00080000U)         /* Bit19*/

#define RCC_CFG3_MCO2DIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_CFG3_MCO2DIV_DIV2                       ((uint32_t)0x00010000U)
#define RCC_CFG3_MCO2DIV_DIV4                       ((uint32_t)0x00020000U)
#define RCC_CFG3_MCO2DIV_DIV8                       ((uint32_t)0x00040000U)
#define RCC_CFG3_MCO2DIV_DIV16                      ((uint32_t)0x00070000U)
#define RCC_CFG3_MCO2DIV_DIV32                      ((uint32_t)0x00080000U)
#define RCC_CFG3_MCO2DIV_DIV64                      ((uint32_t)0x00090000U)
#define RCC_CFG3_MCO2DIV_DIV128                     ((uint32_t)0x000A0000U)

#define RCC_CFG3_I2SSEL                             ((uint32_t)0x0000C000U)         /* Bit[15:14] */
#define RCC_CFG3_I2SSEL_0                           ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_CFG3_I2SSEL_1                           ((uint32_t)0x00008000U)         /* Bit15*/

#define RCC_CFG3_I2SSEL_I2S1                        ((uint32_t)0x00000000U)
#define RCC_CFG3_I2SSEL_I2S2                        ((uint32_t)0x00004000U)
#define RCC_CFG3_I2SSEL_I2S3                        ((uint32_t)0x00008000U)
#define RCC_CFG3_I2SSEL_I2S4                        ((uint32_t)0x0000C000U)

#define RCC_CFG3_PERSW                              ((uint32_t)0x00003000U)         /* Bit[13:12] */
#define RCC_CFG3_PERSW_0                            ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_CFG3_PERSW_1                            ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_CFG3_M7STCLKDIV                         ((uint32_t)0x000000F0U)         /* Bit[7:4] */
#define RCC_CFG3_M7STCLKDIV_0                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_CFG3_M7STCLKDIV_1                       ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_CFG3_M7STCLKDIV_2                       ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_CFG3_M7STCLKDIV_3                       ((uint32_t)0x00000080U)         /* Bit7*/

#define RCC_CFG3_M7STCLKDIV_DIV1                  ((uint32_t)0x00000000U)
#define RCC_CFG3_M7STCLKDIV_DIV2                  ((uint32_t)0x00000010U)
#define RCC_CFG3_M7STCLKDIV_DIV4                  ((uint32_t)0x00000020U)
#define RCC_CFG3_M7STCLKDIV_DIV8                  ((uint32_t)0x00000040U)
#define RCC_CFG3_M7STCLKDIV_DIV16                 ((uint32_t)0x00000070U)
#define RCC_CFG3_M7STCLKDIV_DIV32                 ((uint32_t)0x00000080U)
#define RCC_CFG3_M7STCLKDIV_DIV64                 ((uint32_t)0x00000090U)
#define RCC_CFG3_M7STCLKDIV_DIV128                ((uint32_t)0x000000A0U)
#define RCC_CFG3_M7STCLKDIV_DIV256                ((uint32_t)0x000000B0U)
#define RCC_CFG3_M7STCLKDIV_DIV512                ((uint32_t)0x000000C0U)

#define RCC_CFG3_M4STCLKDIV                         ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_CFG3_M4STCLKDIV_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_CFG3_M4STCLKDIV_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_CFG3_M4STCLKDIV_2                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_CFG3_M4STCLKDIV_3                       ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for RCC_CFG4 register  ********/
#define RCC_CFG4_AHB1CLKEN                               ((uint32_t)0x80000000U)         /* Bit[31] */
#define RCC_CFG4_AHB2CLKEN                               ((uint32_t)0x40000000U)         /* Bit[30] */
#define RCC_CFG4_AHB3CLKEN                               ((uint32_t)0x20000000U)         /* Bit[29] */
#define RCC_CFG4_AHB5CLKEN                               ((uint32_t)0x08000000U)         /* Bit[27] */
#define RCC_CFG4_AHB6CLKEN                               ((uint32_t)0x04000000U)         /* Bit[26] */
#define RCC_CFG4_AXICLKEN                                ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_CFG4_APB1CLKEN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_CFG4_APB2CLKEN                               ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_CFG4_APB5CLKEN                               ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_CFG4_APB6CLKEN                               ((uint32_t)0x00080000U)         /* Bit[19] */
#define RCC_CFG4_AHB9CLKEN                               ((uint32_t)0x00040000U)         /* Bit[18] */
#define RCC_CFG4_AXIMM7GCLKEN                            ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_CFG4_AXIMM4GCLKEN                            ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_CFG4_HSICGEN                                 ((uint32_t)0x00008000U)         /* Bit[15] */
#define RCC_CFG4_HSIKERCGEN                              ((uint32_t)0x00004000U)         /* Bit[14] */
#define RCC_CFG4_HSECGEN                                 ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CFG4_HSEKERCGEN                              ((uint32_t)0x00001000U)         /* Bit[12] */
#define RCC_CFG4_MSICGEN                                 ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_CFG4_MSIKERCGEN                              ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_CFG4_AXIMM7CLKEN                             ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_CFG4_AXIGCLKEN                               ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_CFG4_AXIMM4CLKEN                             ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_CFG4_DCMUM7CLKEN                             ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_CFG4_DCMUM4CLKEN                             ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_CFG4_AHBM1CLKEN                              ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_CFG4_AHBM2CLKEN                              ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_CFG4_AHBM3CLKEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_CFG4_DCMURST                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_CFG5 register  ********/
#define RCC_CFG5_RTCHSEDIV                          ((uint32_t)0x3F000000U)         /* Bit[29:24] */
#define RCC_CFG5_RTCHSEDIV_0                        ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_CFG5_RTCHSEDIV_1                        ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_CFG5_RTCHSEDIV_2                        ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_CFG5_RTCHSEDIV_3                        ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_CFG5_RTCHSEDIV_4                        ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_CFG5_RTCHSEDIV_5                        ((uint32_t)0x20000000U)         /* Bit29*/

#define RCC_CFG5_RTCHSEDIV_DIV1                      ((uint32_t)0x01000000U)
#define RCC_CFG5_RTCHSEDIV_DIV2                      ((uint32_t)0x02000000U)
#define RCC_CFG5_RTCHSEDIV_DIV3                      ((uint32_t)0x03000000U)
#define RCC_CFG5_RTCHSEDIV_DIV4                      ((uint32_t)0x04000000U)
#define RCC_CFG5_RTCHSEDIV_DIV5                      ((uint32_t)0x05000000U)
#define RCC_CFG5_RTCHSEDIV_DIV6                      ((uint32_t)0x06000000U)
#define RCC_CFG5_RTCHSEDIV_DIV7                      ((uint32_t)0x07000000U)
#define RCC_CFG5_RTCHSEDIV_DIV8                      ((uint32_t)0x08000000U)
#define RCC_CFG5_RTCHSEDIV_DIV9                      ((uint32_t)0x09000000U)
#define RCC_CFG5_RTCHSEDIV_DIV10                     ((uint32_t)0x0A000000U)
#define RCC_CFG5_RTCHSEDIV_DIV11                     ((uint32_t)0x0B000000U)
#define RCC_CFG5_RTCHSEDIV_DIV12                     ((uint32_t)0x0C000000U)
#define RCC_CFG5_RTCHSEDIV_DIV13                     ((uint32_t)0x0D000000U)
#define RCC_CFG5_RTCHSEDIV_DIV14                     ((uint32_t)0x0E000000U)
#define RCC_CFG5_RTCHSEDIV_DIV15                     ((uint32_t)0x0F000000U)
#define RCC_CFG5_RTCHSEDIV_DIV16                     ((uint32_t)0x10000000U)
#define RCC_CFG5_RTCHSEDIV_DIV17                     ((uint32_t)0x11000000U)
#define RCC_CFG5_RTCHSEDIV_DIV18                     ((uint32_t)0x12000000U)
#define RCC_CFG5_RTCHSEDIV_DIV19                     ((uint32_t)0x13000000U)
#define RCC_CFG5_RTCHSEDIV_DIV20                     ((uint32_t)0x14000000U)
#define RCC_CFG5_RTCHSEDIV_DIV21                     ((uint32_t)0x15000000U)
#define RCC_CFG5_RTCHSEDIV_DIV22                     ((uint32_t)0x16000000U)
#define RCC_CFG5_RTCHSEDIV_DIV23                     ((uint32_t)0x17000000U)
#define RCC_CFG5_RTCHSEDIV_DIV24                     ((uint32_t)0x18000000U)
#define RCC_CFG5_RTCHSEDIV_DIV25                     ((uint32_t)0x19000000U)
#define RCC_CFG5_RTCHSEDIV_DIV26                     ((uint32_t)0x1A000000U)
#define RCC_CFG5_RTCHSEDIV_DIV27                     ((uint32_t)0x1B000000U)
#define RCC_CFG5_RTCHSEDIV_DIV28                     ((uint32_t)0x1C000000U)
#define RCC_CFG5_RTCHSEDIV_DIV29                     ((uint32_t)0x1D000000U)
#define RCC_CFG5_RTCHSEDIV_DIV30                     ((uint32_t)0x1E000000U)
#define RCC_CFG5_RTCHSEDIV_DIV31                     ((uint32_t)0x1F000000U)
#define RCC_CFG5_RTCHSEDIV_DIV32                     ((uint32_t)0x20000000U)
#define RCC_CFG5_RTCHSEDIV_DIV33                     ((uint32_t)0x21000000U)
#define RCC_CFG5_RTCHSEDIV_DIV34                     ((uint32_t)0x22000000U)
#define RCC_CFG5_RTCHSEDIV_DIV35                     ((uint32_t)0x23000000U)
#define RCC_CFG5_RTCHSEDIV_DIV36                     ((uint32_t)0x24000000U)
#define RCC_CFG5_RTCHSEDIV_DIV37                     ((uint32_t)0x25000000U)
#define RCC_CFG5_RTCHSEDIV_DIV38                     ((uint32_t)0x26000000U)
#define RCC_CFG5_RTCHSEDIV_DIV39                     ((uint32_t)0x27000000U)
#define RCC_CFG5_RTCHSEDIV_DIV40                     ((uint32_t)0x28000000U)
#define RCC_CFG5_RTCHSEDIV_DIV41                     ((uint32_t)0x29000000U)
#define RCC_CFG5_RTCHSEDIV_DIV42                     ((uint32_t)0x2A000000U)
#define RCC_CFG5_RTCHSEDIV_DIV43                     ((uint32_t)0x2B000000U)
#define RCC_CFG5_RTCHSEDIV_DIV44                     ((uint32_t)0x2C000000U)
#define RCC_CFG5_RTCHSEDIV_DIV45                     ((uint32_t)0x2D000000U)
#define RCC_CFG5_RTCHSEDIV_DIV46                     ((uint32_t)0x2E000000U)
#define RCC_CFG5_RTCHSEDIV_DIV47                     ((uint32_t)0x2F000000U)
#define RCC_CFG5_RTCHSEDIV_DIV48                     ((uint32_t)0x30000000U)
#define RCC_CFG5_RTCHSEDIV_DIV49                     ((uint32_t)0x31000000U)
#define RCC_CFG5_RTCHSEDIV_DIV50                     ((uint32_t)0x32000000U)
#define RCC_CFG5_RTCHSEDIV_DIV51                     ((uint32_t)0x33000000U)
#define RCC_CFG5_RTCHSEDIV_DIV52                     ((uint32_t)0x34000000U)
#define RCC_CFG5_RTCHSEDIV_DIV53                     ((uint32_t)0x35000000U)
#define RCC_CFG5_RTCHSEDIV_DIV54                     ((uint32_t)0x36000000U)
#define RCC_CFG5_RTCHSEDIV_DIV55                     ((uint32_t)0x37000000U)
#define RCC_CFG5_RTCHSEDIV_DIV56                     ((uint32_t)0x38000000U)
#define RCC_CFG5_RTCHSEDIV_DIV57                     ((uint32_t)0x39000000U)
#define RCC_CFG5_RTCHSEDIV_DIV58                     ((uint32_t)0x3A000000U)
#define RCC_CFG5_RTCHSEDIV_DIV59                     ((uint32_t)0x3B000000U)
#define RCC_CFG5_RTCHSEDIV_DIV60                     ((uint32_t)0x3C000000U)
#define RCC_CFG5_RTCHSEDIV_DIV61                     ((uint32_t)0x3D000000U)
#define RCC_CFG5_RTCHSEDIV_DIV62                     ((uint32_t)0x3E000000U)
#define RCC_CFG5_RTCHSEDIV_DIV63                     ((uint32_t)0x3F000000U)

#define RCC_CFG5_M7SRAM5EN                               ((uint32_t)0x00800000U)         /* Bit[23] */
#define RCC_CFG5_M4SRAM5EN                               ((uint32_t)0x00400000U)         /* Bit[22] */
#define RCC_CFG5_M7SRAM5LPEN                             ((uint32_t)0x00200000U)         /* Bit[21] */
#define RCC_CFG5_M4SRAM5LPEN                             ((uint32_t)0x00100000U)         /* Bit[20] */
#define RCC_CFG5_DCDCLKEN                                ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_CFG5_TRNGEN                                  ((uint32_t)0x00002000U)         /* Bit[13] */
#define RCC_CFG5_TRNGSEL                                 ((uint32_t)0x00001000U)         /* Bit[12] */

#define RCC_CFG5_TRNGDIV                            ((uint32_t)0x00000F00U)         /* Bit[11:8] */
#define RCC_CFG5_TRNGDIV_0                          ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_CFG5_TRNGDIV_1                          ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_CFG5_TRNGDIV_2                          ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_CFG5_TRNGDIV_3                          ((uint32_t)0x00000800U)         /* Bit11*/

#define RCC_CFG5_TRNGDIV_DIV1                       ((uint32_t)0x00000000U)
#define RCC_CFG5_TRNGDIV_DIV2                       ((uint32_t)0x00000100U)
#define RCC_CFG5_TRNGDIV_DIV4                       ((uint32_t)0x00000200U)
#define RCC_CFG5_TRNGDIV_DIV8                       ((uint32_t)0x00000400U)
#define RCC_CFG5_TRNGDIV_DIV16                      ((uint32_t)0x00000700U)
#define RCC_CFG5_TRNGDIV_DIV32                      ((uint32_t)0x00000800U)
#define RCC_CFG5_TRNGDIV_DIV64                      ((uint32_t)0x00000900U)
#define RCC_CFG5_TRNGDIV_DIV128                     ((uint32_t)0x00000A00U)
#define RCC_CFG5_TRNGDIV_DIV256                     ((uint32_t)0x00000B00U)
#define RCC_CFG5_TRNGDIV_DIV512                     ((uint32_t)0x00000C00U)

#define RCC_CFG5_DSIHSEDIV                          ((uint32_t)0x000000F0U)         /* Bit[7:4] */
#define RCC_CFG5_DSIHSEDIV_0                        ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_CFG5_DSIHSEDIV_1                        ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_CFG5_DSIHSEDIV_2                        ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_CFG5_DSIHSEDIV_3                        ((uint32_t)0x00000080U)         /* Bit7*/

#define RCC_CFG5_RTCHSIDIV                          ((uint32_t)0x0000000FU)         /* Bit */
#define RCC_CFG5_RTCHSIDIV_0                        ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_CFG5_RTCHSIDIV_1                        ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_CFG5_RTCHSIDIV_2                        ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_CFG5_RTCHSIDIV_3                        ((uint32_t)0x00000008U)         /* Bit3*/

#define RCC_CFG5_RTCHSIDIV_DIV1                     ((uint32_t)0x00000000U)
#define RCC_CFG5_RTCHSIDIV_DIV2                     ((uint32_t)0x00000001U)
#define RCC_CFG5_RTCHSIDIV_DIV4                     ((uint32_t)0x00000002U)
#define RCC_CFG5_RTCHSIDIV_DIV8                     ((uint32_t)0x00000004U)
#define RCC_CFG5_RTCHSIDIV_DIV16                    ((uint32_t)0x00000007U)
#define RCC_CFG5_RTCHSIDIV_DIV32                    ((uint32_t)0x00000008U)
#define RCC_CFG5_RTCHSIDIV_DIV64                    ((uint32_t)0x00000009U)
#define RCC_CFG5_RTCHSIDIV_DIV128                   ((uint32_t)0x0000000AU)
#define RCC_CFG5_RTCHSIDIV_DIV256                   ((uint32_t)0x0000000BU)
#define RCC_CFG5_RTCHSIDIV_DIV512                   ((uint32_t)0x0000000CU)
/******** Bit definition for RCC_M4RSTREL register  ********/
#define RCC_M4RSTREL_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_LSERDDL register  ********/
#define RCC_LSERDDL_DELAY                             ((uint32_t)0xFFFFFFFFU)         /* Bit */
#define RCC_LSERDDL_DELAY_0                           ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_LSERDDL_DELAY_1                           ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_LSERDDL_DELAY_2                           ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_LSERDDL_DELAY_3                           ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_LSERDDL_DELAY_4                           ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_LSERDDL_DELAY_5                           ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_LSERDDL_DELAY_6                           ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_LSERDDL_DELAY_7                           ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_LSERDDL_DELAY_8                           ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_LSERDDL_DELAY_9                           ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_LSERDDL_DELAY_10                          ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_LSERDDL_DELAY_11                          ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_LSERDDL_DELAY_12                          ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_LSERDDL_DELAY_13                          ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_LSERDDL_DELAY_14                          ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_LSERDDL_DELAY_15                          ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_LSERDDL_DELAY_16                          ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_LSERDDL_DELAY_17                          ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_LSERDDL_DELAY_18                          ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_LSERDDL_DELAY_19                          ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_LSERDDL_DELAY_20                          ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_LSERDDL_DELAY_21                          ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_LSERDDL_DELAY_22                          ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_LSERDDL_DELAY_23                          ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_LSERDDL_DELAY_24                          ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_LSERDDL_DELAY_25                          ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_LSERDDL_DELAY_26                          ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_LSERDDL_DELAY_27                          ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_LSERDDL_DELAY_28                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_LSERDDL_DELAY_29                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_LSERDDL_DELAY_30                          ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_LSERDDL_DELAY_31                          ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for RCC_MSIRDDL register  ********/
#define RCC_MSIRDDL_DELAY                             ((uint32_t)0xFFFFFFFFU)         /* Bit */
#define RCC_MSIRDDL_DELAY_0                           ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_MSIRDDL_DELAY_1                           ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_MSIRDDL_DELAY_2                           ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_MSIRDDL_DELAY_3                           ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_MSIRDDL_DELAY_4                           ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_MSIRDDL_DELAY_5                           ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_MSIRDDL_DELAY_6                           ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_MSIRDDL_DELAY_7                           ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_MSIRDDL_DELAY_8                           ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_MSIRDDL_DELAY_9                           ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_MSIRDDL_DELAY_10                          ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_MSIRDDL_DELAY_11                          ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_MSIRDDL_DELAY_12                          ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_MSIRDDL_DELAY_13                          ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_MSIRDDL_DELAY_14                          ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_MSIRDDL_DELAY_15                          ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_MSIRDDL_DELAY_16                          ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_MSIRDDL_DELAY_17                          ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_MSIRDDL_DELAY_18                          ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_MSIRDDL_DELAY_19                          ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_MSIRDDL_DELAY_20                          ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_MSIRDDL_DELAY_21                          ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_MSIRDDL_DELAY_22                          ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_MSIRDDL_DELAY_23                          ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_MSIRDDL_DELAY_24                          ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_MSIRDDL_DELAY_25                          ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_MSIRDDL_DELAY_26                          ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_MSIRDDL_DELAY_27                          ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_MSIRDDL_DELAY_28                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_MSIRDDL_DELAY_29                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_MSIRDDL_DELAY_30                          ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_MSIRDDL_DELAY_31                          ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for RCC_HSERDDL register  ********/
#define RCC_HSERDDL_DELAY                             ((uint32_t)0xFFFFFFFFU)         /* Bit */
#define RCC_HSERDDL_DELAY_0                           ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_HSERDDL_DELAY_1                           ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_HSERDDL_DELAY_2                           ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_HSERDDL_DELAY_3                           ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_HSERDDL_DELAY_4                           ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_HSERDDL_DELAY_5                           ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_HSERDDL_DELAY_6                           ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_HSERDDL_DELAY_7                           ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_HSERDDL_DELAY_8                           ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_HSERDDL_DELAY_9                           ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_HSERDDL_DELAY_10                          ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_HSERDDL_DELAY_11                          ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_HSERDDL_DELAY_12                          ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_HSERDDL_DELAY_13                          ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_HSERDDL_DELAY_14                          ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_HSERDDL_DELAY_15                          ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_HSERDDL_DELAY_16                          ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_HSERDDL_DELAY_17                          ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_HSERDDL_DELAY_18                          ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_HSERDDL_DELAY_19                          ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_HSERDDL_DELAY_20                          ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_HSERDDL_DELAY_21                          ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_HSERDDL_DELAY_22                          ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_HSERDDL_DELAY_23                          ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_HSERDDL_DELAY_24                          ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_HSERDDL_DELAY_25                          ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_HSERDDL_DELAY_26                          ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_HSERDDL_DELAY_27                          ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_HSERDDL_DELAY_28                          ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_HSERDDL_DELAY_29                          ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_HSERDDL_DELAY_30                          ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_HSERDDL_DELAY_31                          ((uint32_t)0x80000000U)         /* Bit31*/

/******** Bit definition for RCC_PLLSFTLK register  ********/
#define RCC_PLLSFTLK_SDRAMDLSEL                         ((uint32_t)0x1E000000U)         /* Bit[28:25] */
#define RCC_PLLSFTLK_SDRAMDLSEL_0                       ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_PLLSFTLK_SDRAMDLSEL_1                       ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_PLLSFTLK_SDRAMDLSEL_2                       ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_PLLSFTLK_SDRAMDLSEL_3                       ((uint32_t)0x10000000U)         /* Bit28*/

#define RCC_PLLSFTLK_SDRAMDLSEL_0_2NS                ((uint32_t)0x00000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_0_4NS                ((uint32_t)0x02000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_0_6NS                ((uint32_t)0x04000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_0_8NS                ((uint32_t)0x06000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_1_0NS                ((uint32_t)0x08000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_1_2NS                ((uint32_t)0x0A000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_1_4NS                ((uint32_t)0x0C000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_1_6NS                ((uint32_t)0x0E000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_1_8NS                ((uint32_t)0x10000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_2_0NS                ((uint32_t)0x12000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_2_2NS                ((uint32_t)0x14000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_2_4NS                ((uint32_t)0x16000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_2_6NS                ((uint32_t)0x18000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_2_8NS                ((uint32_t)0x1A000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_3_0NS                ((uint32_t)0x1C000000U)
#define RCC_PLLSFTLK_SDRAMDLSEL_3_2NS                ((uint32_t)0x1E000000U)

#define RCC_PLLSFTLK_SDRAMDLEN                               ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_PLLSFTLK_SHRTIMAFERST                            ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_PLLSFTLK_SHRPLLSFTLK                             ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_PLLSFTLK_PLL3SFTLK                               ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_PLLSFTLK_PLL2SFTLK                               ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_PLLSFTLK_PLL1SFTLK                               ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_HSEOS register  ********/
#define RCC_HSEOS_HSEMAXPDTHR                        ((uint32_t)0xFF000000U)         /* Bit[31:24] */
#define RCC_HSEOS_HSEMAXPDTHR_0                      ((uint32_t)0x01000000U)         /* Bit24*/
#define RCC_HSEOS_HSEMAXPDTHR_1                      ((uint32_t)0x02000000U)         /* Bit25*/
#define RCC_HSEOS_HSEMAXPDTHR_2                      ((uint32_t)0x04000000U)         /* Bit26*/
#define RCC_HSEOS_HSEMAXPDTHR_3                      ((uint32_t)0x08000000U)         /* Bit27*/
#define RCC_HSEOS_HSEMAXPDTHR_4                      ((uint32_t)0x10000000U)         /* Bit28*/
#define RCC_HSEOS_HSEMAXPDTHR_5                      ((uint32_t)0x20000000U)         /* Bit29*/
#define RCC_HSEOS_HSEMAXPDTHR_6                      ((uint32_t)0x40000000U)         /* Bit30*/
#define RCC_HSEOS_HSEMAXPDTHR_7                      ((uint32_t)0x80000000U)         /* Bit31*/
#define RCC_HSEOS_HSEMINNDTHR                        ((uint32_t)0x00FF0000U)         /* Bit[23:16] */
#define RCC_HSEOS_HSEMINNDTHR_0                      ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_HSEOS_HSEMINNDTHR_1                      ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_HSEOS_HSEMINNDTHR_2                      ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_HSEOS_HSEMINNDTHR_3                      ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_HSEOS_HSEMINNDTHR_4                      ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_HSEOS_HSEMINNDTHR_5                      ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_HSEOS_HSEMINNDTHR_6                      ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_HSEOS_HSEMINNDTHR_7                      ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_HSEOS_HSEOSTHR                           ((uint32_t)0x0000FF00U)         /* Bit[15:8] */
#define RCC_HSEOS_HSEOSTHR_0                         ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_HSEOS_HSEOSTHR_1                         ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_HSEOS_HSEOSTHR_2                         ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_HSEOS_HSEOSTHR_3                         ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_HSEOS_HSEOSTHR_4                         ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_HSEOS_HSEOSTHR_5                         ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_HSEOS_HSEOSTHR_6                         ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_HSEOS_HSEOSTHR_7                         ((uint32_t)0x00008000U)         /* Bit15*/
#define RCC_HSEOS_HSEMAXPDF                               ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_HSEOS_HSEMINNDF                               ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_HSEOS_HSEOSF                                  ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_HSEOS_HSEMAXPDEN                              ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_HSEOS_HSEMINNDEN                              ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_HSEOS_HSEOSEN                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for RCC_HSECAL register  ********/
#define RCC_HSECAL_HSECALCNTEN                             ((uint32_t)0x00020000U)         /* Bit[17] */
#define RCC_HSECAL_HSECALCNTF                              ((uint32_t)0x00010000U)         /* Bit[16] */
#define RCC_HSECAL_HSECALCNT                         ((uint32_t)0x0000FFFFU)         /* Bit[15:0] */
#define RCC_HSECAL_HSECALCNT_0                       ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_HSECAL_HSECALCNT_1                       ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_HSECAL_HSECALCNT_2                       ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_HSECAL_HSECALCNT_3                       ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_HSECAL_HSECALCNT_4                       ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_HSECAL_HSECALCNT_5                       ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_HSECAL_HSECALCNT_6                       ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_HSECAL_HSECALCNT_7                       ((uint32_t)0x00000080U)         /* Bit7*/
#define RCC_HSECAL_HSECALCNT_8                       ((uint32_t)0x00000100U)         /* Bit8*/
#define RCC_HSECAL_HSECALCNT_9                       ((uint32_t)0x00000200U)         /* Bit9*/
#define RCC_HSECAL_HSECALCNT_10                      ((uint32_t)0x00000400U)         /* Bit10*/
#define RCC_HSECAL_HSECALCNT_11                      ((uint32_t)0x00000800U)         /* Bit11*/
#define RCC_HSECAL_HSECALCNT_12                      ((uint32_t)0x00001000U)         /* Bit12*/
#define RCC_HSECAL_HSECALCNT_13                      ((uint32_t)0x00002000U)         /* Bit13*/
#define RCC_HSECAL_HSECALCNT_14                      ((uint32_t)0x00004000U)         /* Bit14*/
#define RCC_HSECAL_HSECALCNT_15                      ((uint32_t)0x00008000U)         /* Bit15*/

/******** Bit definition for RCC_LSEOS register  ********/
#define RCC_LSEOS_LSECALCNTEN                             ((uint32_t)0x02000000U)         /* Bit[25] */
#define RCC_LSEOS_LSECALCNTF                              ((uint32_t)0x01000000U)         /* Bit[24] */
#define RCC_LSEOS_LSECALCNT                          ((uint32_t)0x00FF0000U)         /* Bit[23:16] */
#define RCC_LSEOS_LSECALCNT_0                        ((uint32_t)0x00010000U)         /* Bit16*/
#define RCC_LSEOS_LSECALCNT_1                        ((uint32_t)0x00020000U)         /* Bit17*/
#define RCC_LSEOS_LSECALCNT_2                        ((uint32_t)0x00040000U)         /* Bit18*/
#define RCC_LSEOS_LSECALCNT_3                        ((uint32_t)0x00080000U)         /* Bit19*/
#define RCC_LSEOS_LSECALCNT_4                        ((uint32_t)0x00100000U)         /* Bit20*/
#define RCC_LSEOS_LSECALCNT_5                        ((uint32_t)0x00200000U)         /* Bit21*/
#define RCC_LSEOS_LSECALCNT_6                        ((uint32_t)0x00400000U)         /* Bit22*/
#define RCC_LSEOS_LSECALCNT_7                        ((uint32_t)0x00800000U)         /* Bit23*/
#define RCC_LSEOS_LSEOSF                                  ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_LSEOS_LSEOSEN                                 ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_LSEOS_LSEOSTHR                           ((uint32_t)0x000000FFU)         /* Bit */
#define RCC_LSEOS_LSEOSTHR_0                         ((uint32_t)0x00000001U)         /* Bit0*/
#define RCC_LSEOS_LSEOSTHR_1                         ((uint32_t)0x00000002U)         /* Bit1*/
#define RCC_LSEOS_LSEOSTHR_2                         ((uint32_t)0x00000004U)         /* Bit2*/
#define RCC_LSEOS_LSEOSTHR_3                         ((uint32_t)0x00000008U)         /* Bit3*/
#define RCC_LSEOS_LSEOSTHR_4                         ((uint32_t)0x00000010U)         /* Bit4*/
#define RCC_LSEOS_LSEOSTHR_5                         ((uint32_t)0x00000020U)         /* Bit5*/
#define RCC_LSEOS_LSEOSTHR_6                         ((uint32_t)0x00000040U)         /* Bit6*/
#define RCC_LSEOS_LSEOSTHR_7                         ((uint32_t)0x00000080U)         /* Bit7*/

/******** Bit definition for RCC_PLLFD register  ********/
#define RCC_PLLFD_SHRPLLGF                                ((uint32_t)0x00000800U)         /* Bit[11] */
#define RCC_PLLFD_PLL3GF                                  ((uint32_t)0x00000400U)         /* Bit[10] */
#define RCC_PLLFD_PLL2GF                                  ((uint32_t)0x00000200U)         /* Bit[9] */
#define RCC_PLLFD_PLL1GF                                  ((uint32_t)0x00000100U)         /* Bit[8] */
#define RCC_PLLFD_SHRPLLFF                                ((uint32_t)0x00000080U)         /* Bit[7] */
#define RCC_PLLFD_PLL3FF                                  ((uint32_t)0x00000040U)         /* Bit[6] */
#define RCC_PLLFD_PLL2FF                                  ((uint32_t)0x00000020U)         /* Bit[5] */
#define RCC_PLLFD_PLL1FF                                  ((uint32_t)0x00000010U)         /* Bit[4] */
#define RCC_PLLFD_SHRPLLFEN                               ((uint32_t)0x00000008U)         /* Bit[3] */
#define RCC_PLLFD_PLL3FEN                                 ((uint32_t)0x00000004U)         /* Bit[2] */
#define RCC_PLLFD_PLL2FEN                                 ((uint32_t)0x00000002U)         /* Bit[1] */
#define RCC_PLLFD_PLL1FEN                                 ((uint32_t)0x00000001U)         /* Bit[0] */


/*** Power Control   ***/

/******** Bit definition for PWR_M7CTRL1 register  ********/
#define PWR_M7CTRL1_CVBATF                                    ((uint32_t)0x00010000U)         /* Bit[16] Clear VBAT flags*/
#define PWR_M7CTRL1_CSBF                                      ((uint32_t)0x00000008U)         /* Bit[3] Clear STANDBY flags*/
#define PWR_M7CTRL1_CWKUPF                                    ((uint32_t)0x00000004U)         /* Bit[2] Clear the pin wakeup bit*/
#define PWR_M7CTRL1_PDS                                       ((uint32_t)0x00000002U)         /* Bit[1] Power down deep sleep bit*/

/******** Bit definition for PWR_M7CTRLSTS register  ********/
#define PWR_M7CTRLSTS_WKUPxF_MASK                             ((uint32_t)0x07F00000U)         /* Bit[26:20] WKUPx pin wakeup flag*/
#define PWR_M7CTRLSTS_WKUP0F                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define PWR_M7CTRLSTS_WKUP1F                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define PWR_M7CTRLSTS_WKUP2F                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define PWR_M7CTRLSTS_WKUP3F                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define PWR_M7CTRLSTS_WKUP4F                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define PWR_M7CTRLSTS_WKUP5F                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define PWR_M7CTRLSTS_WKUP6F                                  ((uint32_t)0x04000000U)         /* Bit26*/

#define PWR_M7CTRLSTS_WKUPxPOL_MASK                           ((uint32_t)0x000FC000U)         /* Bit[19:14] Wake-up polarity for the WKUPx pin*/
#define PWR_M7CTRLSTS_WKUP0POL                                ((uint32_t)0x00004000U)         /* Bit14*/
#define PWR_M7CTRLSTS_WKUP1POL                                ((uint32_t)0x00008000U)         /* Bit15*/
#define PWR_M7CTRLSTS_WKUP2POL                                ((uint32_t)0x00010000U)         /* Bit16*/
#define PWR_M7CTRLSTS_WKUP3POL                                ((uint32_t)0x00020000U)         /* Bit17*/
#define PWR_M7CTRLSTS_WKUP4POL                                ((uint32_t)0x00040000U)         /* Bit18*/
#define PWR_M7CTRLSTS_WKUP5POL                                ((uint32_t)0x00080000U)         /* Bit19*/

#define PWR_M7CTRLSTS_WKUPxEN_MASK                            ((uint32_t)0x00003F00U)         /* Bit[13:8] WKUPx pin wakeup enable*/
#define PWR_M7CTRLSTS_WKUP0EN                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_M7CTRLSTS_WKUP1EN                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_M7CTRLSTS_WKUP2EN                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_M7CTRLSTS_WKUP3EN                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define PWR_M7CTRLSTS_WKUP4EN                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define PWR_M7CTRLSTS_WKUP5EN                                 ((uint32_t)0x00002000U)         /* Bit13*/

#define PWR_M7CTRLSTS_VBATF                                   ((uint32_t)0x00000004U)         /* Bit[2] VBAT flag*/
#define PWR_M7CTRLSTS_SBF                                     ((uint32_t)0x00000002U)         /* Bit[1] STANDBY flag*/

/******** Bit definition for PWR_M7CTRL2 register  ********/
#define PWR_M7CTRL2_MEM_CNTVAL                                ((uint32_t)0x7E000000U)         /* Bit[30:25] counter value for memory power ready count down*/

#define PWR_M7CTRL2_PWR_CNTVAL                                ((uint32_t)0x01FE0000U)         /* Bit[24:17] counter value for CM7 logic power ready count down*/

#define PWR_M7CTRL2_TCM_RDYMD                                 ((uint32_t)0x00018000U)         /* Bit[16:15] Selected the way of check TCM power ready for CM7 domain*/
#define PWR_M7CTRL2_TCM_RDYMD_0                               ((uint32_t)0x00008000U)         /* Bit15*/
#define PWR_M7CTRL2_TCM_RDYMD_1                               ((uint32_t)0x00010000U)         /* Bit16*/

#define PWR_M7CTRL2_PWR_RDYMD                                 ((uint32_t)0x00006000U)         /* Bit[14:13] Selected the way of check power ready for CM7 domain*/
#define PWR_M7CTRL2_PWR_RDYMD_0                               ((uint32_t)0x00002000U)         /* Bit13*/
#define PWR_M7CTRL2_PWR_RDYMD_1                               ((uint32_t)0x00004000U)         /* Bit14*/

#define PWR_M7CTRL2_HCLK_ONINSLP                              ((uint32_t)0x00001000U)         /* Bit[12] HCLK is on when M7 core in sleep*/
#define PWR_M7CTRL2_NRST_WUPEN                                ((uint32_t)0x00000800U)         /* Bit[11] NRST wakeup event enable in standby mode for M7 core*/
#define PWR_M7CTRL2_RET_PSWACK1                               ((uint32_t)0x00000400U)         /* Bit[10] M7 retention power switch ACK1 used as ENA2 enanle for dual-input-header*/
#define PWR_M7CTRL2_DMN_PSWACK1                               ((uint32_t)0x00000200U)         /* Bit[9] M7 Domain power switch ACK1 used as ENA2 enanle for dual-input-header*/
#define PWR_M7CTRL2_RTC_ALMWUPEN                              ((uint32_t)0x00000100U)         /* Bit[8] RTC_ALARM wakeup enable in standby mode for M7 core*/
#define PWR_M7CTRL2_BSRSTBRET                                 ((uint32_t)0x00000004U)         /* Bit[2] Backup SRAM retention enable in STANDBY mode*/
#define PWR_M7CTRL2_BSRVBRET                                  ((uint32_t)0x00000002U)         /* Bit[1] Backup SRAM retention enable in VBAT mode*/
#define PWR_M7CTRL2_STOP2EN                                   ((uint32_t)0x00000001U)         /* Bit[0] M7 core STOP2 mode enable*/

/******** Bit definition for PWR_M4CTRL1 register  ********/
#define PWR_M4CTRL1_CVBATF                                    ((uint32_t)0x00010000U)         /* Bit[16] Clear VBAT flags*/
#define PWR_M4CTRL1_CSBVBF                                    ((uint32_t)0x00000008U)         /* Bit[3] Clear STANDBY flags*/
#define PWR_M4CTRL1_CWKUPF                                    ((uint32_t)0x00000004U)         /* Bit[2] Clear the pin wakeup bit*/
#define PWR_M4CTRL1_PDS                                       ((uint32_t)0x00000002U)         /* Bit[1] Power down deep sleep bit*/

/******** Bit definition for PWR_M4CTRLSTS register  ********/
#define PWR_M4CTRLSTS_WKUPxF_MASK                             ((uint32_t)0x07F00000U)         /* Bit[26:20] WKUP pin flag*/
#define PWR_M4CTRLSTS_WKUP0F                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define PWR_M4CTRLSTS_WKUP1F                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define PWR_M4CTRLSTS_WKUP2F                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define PWR_M4CTRLSTS_WKUP3F                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define PWR_M4CTRLSTS_WKUP4F                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define PWR_M4CTRLSTS_WKUP5F                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define PWR_M4CTRLSTS_WKUP6F                                  ((uint32_t)0x04000000U)         /* Bit26*/

#define PWR_M4CTRLSTS_WKUPxPOL_MASK                           ((uint32_t)0x000FC000U)         /* Bit[19:14] Wake-up polarity for the WKUPX pin*/
#define PWR_M4CTRLSTS_WKUP0POL                                ((uint32_t)0x00004000U)         /* Bit14*/
#define PWR_M4CTRLSTS_WKUP1POL                                ((uint32_t)0x00008000U)         /* Bit15*/
#define PWR_M4CTRLSTS_WKUP2POL                                ((uint32_t)0x00010000U)         /* Bit16*/
#define PWR_M4CTRLSTS_WKUP3POL                                ((uint32_t)0x00020000U)         /* Bit17*/
#define PWR_M4CTRLSTS_WKUP4POL                                ((uint32_t)0x00040000U)         /* Bit18*/
#define PWR_M4CTRLSTS_WKUP5POL                                ((uint32_t)0x00080000U)         /* Bit19*/

#define PWR_M4CTRLSTS_WKUPxEN                                 ((uint32_t)0x00003F00U)         /* Bit[13:8] WKUPx pin wakeup enable*/
#define PWR_M4CTRLSTS_WKUP0EN                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_M4CTRLSTS_WKUP1EN                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_M4CTRLSTS_WKUP2EN                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_M4CTRLSTS_WKUP3EN                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define PWR_M4CTRLSTS_WKUP4EN                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define PWR_M4CTRLSTS_WKUP5EN                                 ((uint32_t)0x00002000U)         /* Bit13*/

#define PWR_M4CTRLSTS_VBATF                                   ((uint32_t)0x00000004U)         /* Bit[2] VBAT flag.*/
#define PWR_M4CTRLSTS_SBF                                     ((uint32_t)0x00000002U)         /* Bit[1] STANDBY flag.*/

/******** Bit definition for PWR_M4CTRL2 register  ********/
#define PWR_M4CTRL2_MEM_CNTVAL                                ((uint32_t)0x7E000000U)         /* Bit[30:25] counter value for M4 memory power ready count down*/
#define PWR_M4CTRL2_MEM_CNTVAL_0                              ((uint32_t)0x02000000U)         /* Bit25*/
#define PWR_M4CTRL2_MEM_CNTVAL_1                              ((uint32_t)0x04000000U)         /* Bit26*/
#define PWR_M4CTRL2_MEM_CNTVAL_2                              ((uint32_t)0x08000000U)         /* Bit27*/
#define PWR_M4CTRL2_MEM_CNTVAL_3                              ((uint32_t)0x10000000U)         /* Bit28*/
#define PWR_M4CTRL2_MEM_CNTVAL_4                              ((uint32_t)0x20000000U)         /* Bit29*/
#define PWR_M4CTRL2_MEM_CNTVAL_5                              ((uint32_t)0x40000000U)         /* Bit30*/

#define PWR_M4CTRL2_PWR_CNTVAL                                ((uint32_t)0x01FE0000U)         /* Bit[24:17] counter value for CM4 logic power ready count down*/
#define PWR_M4CTRL2_PWR_CNTVAL_0                              ((uint32_t)0x00020000U)         /* Bit17*/
#define PWR_M4CTRL2_PWR_CNTVAL_1                              ((uint32_t)0x00040000U)         /* Bit18*/
#define PWR_M4CTRL2_PWR_CNTVAL_2                              ((uint32_t)0x00080000U)         /* Bit19*/
#define PWR_M4CTRL2_PWR_CNTVAL_3                              ((uint32_t)0x00100000U)         /* Bit20*/
#define PWR_M4CTRL2_PWR_CNTVAL_4                              ((uint32_t)0x00200000U)         /* Bit21*/
#define PWR_M4CTRL2_PWR_CNTVAL_5                              ((uint32_t)0x00400000U)         /* Bit22*/
#define PWR_M4CTRL2_PWR_CNTVAL_6                              ((uint32_t)0x00800000U)         /* Bit23*/
#define PWR_M4CTRL2_PWR_CNTVAL_7                              ((uint32_t)0x01000000U)         /* Bit24*/

#define PWR_M4CTRL2_MEM_RDYMD                                 ((uint32_t)0x00018000U)         /* Bit[16:15] Selected the way of check TCM power ready for CM4 domain*/
#define PWR_M4CTRL2_MEM_RDYMD_0                               ((uint32_t)0x00008000U)         /* Bit15*/
#define PWR_M4CTRL2_MEM_RDYMD_1                               ((uint32_t)0x00010000U)         /* Bit16*/

#define PWR_M4CTRL2_PWR_RDYMD                                 ((uint32_t)0x00006000U)         /* Bit[14:13] Selected the way of check power ready for CM4 domain*/
#define PWR_M4CTRL2_PWR_RDYMD_0                               ((uint32_t)0x00002000U)         /* Bit13*/
#define PWR_M4CTRL2_PWR_RDYMD_1                               ((uint32_t)0x00004000U)         /* Bit14*/

#define PWR_M4CTRL2_NRST_WAUPEN                               ((uint32_t)0x00000800U)         /* Bit[11] NRST wakeup event enable in standby mode for M4 core*/
#define PWR_M4CTRL2_RET_PSWACK1                               ((uint32_t)0x00000400U)         /* Bit[10] M4 retention power switch ACK1 used as ENA2 enanle for dual-input-header*/
#define PWR_M4CTRL2_DMN_PSWACK1                               ((uint32_t)0x00000200U)         /* Bit[9] M4 Domain power switch ACK1 used as ENA2 enanle for dual-input-header*/
#define PWR_M4CTRL2_RTC_ALMWUPEN                              ((uint32_t)0x00000100U)         /* Bit[8] RTC_ALARM wakeup enable in standby mode for M4 core*/
#define PWR_M4CTRL2_BSRSTBRET                                 ((uint32_t)0x00000004U)         /* Bit[2] Backup SRAM retention enable in STANDBY mode*/
#define PWR_M4CTRL2_BSRVBRET                                  ((uint32_t)0x00000002U)         /* Bit[1] Backup SRAM retention enable in VBAT mode*/
#define PWR_M4CTRL2_STOP2EN                                   ((uint32_t)0x00000001U)         /* Bit[0] M4 core STOP2 mode enable*/

/******** Bit definition for PWR_SYSCTRL1 register  ********/
#define PWR_SYSCTRL1_DCDC_VSELKEY                             ((uint32_t)0xF0000000U)         /* Bit[31:28] DCDC_VSELKEY_UNLOCK key*/
#define PWR_SYSCTRL1_DCDC_VSELKEY_0                           ((uint32_t)0x10000000U)         /* Bit28*/
#define PWR_SYSCTRL1_DCDC_VSELKEY_1                           ((uint32_t)0x20000000U)         /* Bit29*/
#define PWR_SYSCTRL1_DCDC_VSELKEY_2                           ((uint32_t)0x40000000U)         /* Bit30*/
#define PWR_SYSCTRL1_DCDC_VSELKEY_3                           ((uint32_t)0x80000000U)         /* Bit31*/

#define PWR_SYSCTRL1_NRST_DGFCNT                              ((uint32_t)0x0FFF0000U)         /* Bit[27:16] Digtal Glitch Filter on NRST filtered pulse width configuration*/

#define PWR_SYSCTRL1_NRST_DGFBP                               ((uint32_t)0x00008000U)         /* Bit[15] Bypass digital glitch Filter on NRST*/
#define PWR_SYSCTRL1_AGF_STBWUPPBP                            ((uint32_t)0x00002000U)         /* Bit[13] Bypass analog glitch filter on stanby wakeup pads*/
#define PWR_SYSCTRL1_AGF_DTASGBP                              ((uint32_t)0x00001000U)         /* Bit[12] Bypass analog glitch filter on some Digtal to Analog Enable singnals*/
#define PWR_SYSCTRL1_AGF_ARSTOBP                              ((uint32_t)0x00000800U)         /* Bit[11] Bypass analog glitch filter on Analog Reset outputs*/
#define PWR_SYSCTRL1_VDDDRET_PSWACK1                          ((uint32_t)0x00000400U)         /* Bit[10] Retention domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SYSCTRL1_VDDDM_PSWACK1                            ((uint32_t)0x00000200U)         /* Bit[9] VDDD Main Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SYSCTRL1_DBKP                                     ((uint32_t)0x00000100U)         /* Bit[8] Disable write protection for the backup domain*/
#define PWR_SYSCTRL1_PVDEN                                    ((uint32_t)0x00000010U)         /* Bit[4] Power Voltage Detector (PVD) Enable*/
#define PWR_SYSCTRL1_AVDEN                                    ((uint32_t)0x00000008U)         /* Bit[3] Anolog Voltage Detector (AVD) Enable.*/
#define PWR_SYSCTRL1_SW3EN                                    ((uint32_t)0x00000002U)         /* Bit[1] VDDD Backup from Backup LDO*/
#define PWR_SYSCTRL1_BKPLDOEN                                 ((uint32_t)0x00000001U)         /* Bit[0] Backup LDO enable*/

/******** Bit definition for PWR_SYSCTRLSTS register  ********/
#define PWR_SYSCTRLSTS_PVDO                                   ((uint32_t)0x00000010U)         /* Bit[4] PVD output.*/
#define PWR_SYSCTRLSTS_AVDO                                   ((uint32_t)0x00000008U)         /* Bit[3] AVD output.*/
#define PWR_SYSCTRLSTS_OTP_PWRRDY                             ((uint32_t)0x00000002U)         /* Bit[1] OTP Power Ready*/
#define PWR_SYSCTRLSTS_DCDC_BPF                               ((uint32_t)0x00000001U)         /* Bit[0] Working mode is bypass or not for DCDC*/

/******** Bit definition for PWR_SYSCTRL2 register  ********/
#define PWR_SYSCTRL2_OTP_LPCLKDIV                             ((uint32_t)0x07000000U)         /* Bit[26:24] Clock dividor of pwr_sys_clk for OTP low power mode cotrol*/
#define PWR_SYSCTRL2_OTP_LPCLKDIV_0                           ((uint32_t)0x01000000U)         /* Bit24*/
#define PWR_SYSCTRL2_OTP_LPCLKDIV_1                           ((uint32_t)0x02000000U)         /* Bit25*/
#define PWR_SYSCTRL2_OTP_LPCLKDIV_2                           ((uint32_t)0x04000000U)         /* Bit26*/

#define PWR_SYSCTRL2_OTP_FRCSTB                               ((uint32_t)0x00800000U)         /* Bit[23] OTP_FRCDSTB and OTP_FRCSTB decide the OTP power state in all system power modes*/
#define PWR_SYSCTRL2_OTP_FRCDSTB                              ((uint32_t)0x00400000U)         /* Bit[22] */

#define PWR_SYSCTRL2_OTP_STB_INSTP0                           ((uint32_t)0x00200000U)         /* Bit[21] OTP_DSTB_INSTP0 and OTP_STB_INSTP0 decide the OTP power state in system STOP0 mode*/
#define PWR_SYSCTRL2_OTP_DSTB_INSTP0                          ((uint32_t)0x00100000U)         /* Bit[20] */

#define PWR_SYSCTRL2_OTP_STB_INSTP2                           ((uint32_t)0x00080000U)         /* Bit[19] OTP_DSTB_INSTP2 and OTP_STB_INSTP2 decide the OTP power state in system STOP2 mode*/
#define PWR_SYSCTRL2_OTP_DSTB_INSTP2                          ((uint32_t)0x00040000U)         /* Bit[18] */

#define PWR_SYSCTRL2_EXTI_MASKRSTEN                           ((uint32_t)0x00020000U)         /* Bit[17] When PWR start to power down CPUn to standby mode, EXTI's IMRn/EMRn register will be reset \
                                                                                                and no interrupt/event will be send to CPU from exti*/

#define PWR_SYSCTRL2_VDDDM_RDYMD                              ((uint32_t)0x00010000U)         /* Bit[16] PWR use dpts4 rdy(feedback from power switch chain) + 2cycle LSI delay as main domain ready*/
#define PWR_SYSCTRL2_PVS_STBRET                               ((uint32_t)0x00002000U)         /* Bit[13] IO in Retention domain in Retention mode in STANDBY*/
#define PWR_SYSCTRL2_BKLDO_RUNOFFEN                           ((uint32_t)0x00000800U)         /* Bit[11] Eanble/disable of BKLDO*/
#define PWR_SYSCTRL2_BG_CTRLEN                                ((uint32_t)0x00000400U)         /* Bit[10] BG is controlled by pwr*/
#define PWR_SYSCTRL2_SRAM_CTRLEN                              ((uint32_t)0x00000200U)         /* Bit[9] BKP SRAM Power control interface is controlled by pwr*/
#define PWR_SYSCTRL2_PVS_RETCTRLEN                            ((uint32_t)0x00000100U)         /* Bit[8] PV sense retation on/off is controlled by pwr.*/
#define PWR_SYSCTRL2_PVS_CTRLEN                               ((uint32_t)0x00000080U)         /* Bit[7] PV sense is controlled by pwr*/
#define PWR_SYSCTRL2_HSE_CTRLEN                               ((uint32_t)0x00000040U)         /* Bit[6] HSE is controlled by pwr*/
#define PWR_SYSCTRL2_HSI_CTRLEN                               ((uint32_t)0x00000020U)         /* Bit[5] HSI is controlled by pwr*/
#define PWR_SYSCTRL2_PLL_CTRLEN                               ((uint32_t)0x00000010U)         /* Bit[4] PLL is controlled by pwr*/
#define PWR_SYSCTRL2_MR_STBOFFEN                              ((uint32_t)0x00000002U)         /* Bit[1] MR off enable when system enters into Standby mode*/
 
/******** Bit definition for PWR_SYSCTRL3 register  ********/
#define PWR_SYSCTRL3_HSC2_PSWACK1                             ((uint32_t)0x00400000U)         /* Bit[22] HSC2 Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SYSCTRL3_HSC1_PSW_ACK1                            ((uint32_t)0x00200000U)         /* Bit[21] HSC1 Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SYSCTRL3_GRC_PSWACK1                              ((uint32_t)0x00100000U)         /* Bit[20] GRAPHIC Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SYSCTRL3_HSC2_PWRRDY                              ((uint32_t)0x00040000U)         /* Bit[18] HSC2 power domain ready flag*/
#define PWR_SYSCTRL3_HSC1_PWRRDY                              ((uint32_t)0x00020000U)         /* Bit[17] HSC1 power domain ready flag*/
#define PWR_SYSCTRL3_GRC_PWRRDY                               ((uint32_t)0x00010000U)         /* Bit[16] GRAPHIC power domain ready flag*/
#define PWR_SYSCTRL3_HSC2_ISNEN                               ((uint32_t)0x00000400U)         /* Bit[10] HSC2 power domain isolation signal*/
#define PWR_SYSCTRL3_HSC1_ISNEN                               ((uint32_t)0x00000200U)         /* Bit[9] HSC1 power domain isolation signal*/
#define PWR_SYSCTRL3_GRC_ISNEN                                ((uint32_t)0x00000100U)         /* Bit[8] GRAPHIC power domain isolation signal*/
#define PWR_SYSCTRL3_HSC2_FUCEN                               ((uint32_t)0x00000040U)         /* Bit[6] Function mode enable for HSC2 domain*/
#define PWR_SYSCTRL3_HSC1_FUCEN                               ((uint32_t)0x00000020U)         /* Bit[5] Function mode enable for HSC1 domain*/
#define PWR_SYSCTRL3_GRC_FUCEN                                ((uint32_t)0x00000010U)         /* Bit[4] Function mode enable for GRAPHIC domain*/
#define PWR_SYSCTRL3_HSC2_PWREN                               ((uint32_t)0x00000004U)         /* Bit[2] HSC2 domain power enable*/
#define PWR_SYSCTRL3_HSC1_PWREN                               ((uint32_t)0x00000002U)         /* Bit[1] HSC1 domain power enable*/
#define PWR_SYSCTRL3_GRC_PWREN                                ((uint32_t)0x00000001U)         /* Bit[0] GRPAHIC domain power enable*/

/******** Bit definition for PWR_SYSCTRL4 register  ********/
#define PWR_SYSCTRL4_MR_LPVSELEN                              ((uint32_t)0x20000000U)         /* Bit[29] Enable targeting MR voltage output in low power mode*/

#define PWR_SYSCTRL4_DCDC_LPVSEL_MASK                         ((uint32_t)0x0F000000U)         /* Bit[27:24] Targeting dcdc voltage in low power mode*/
#define PWR_SYSCTRL4_DCDC_LPVSEL_0                            ((uint32_t)0x01000000U)         /* Bit24*/
#define PWR_SYSCTRL4_DCDC_LPVSEL_1                            ((uint32_t)0x02000000U)         /* Bit25*/
#define PWR_SYSCTRL4_DCDC_LPVSEL_2                            ((uint32_t)0x04000000U)         /* Bit26*/
#define PWR_SYSCTRL4_DCDC_LPVSEL_3                            ((uint32_t)0x08000000U)         /* Bit27*/

#define PWR_SYSCTRL4_VDDD_LPPORSEL_MASK                       ((uint32_t)0x00C00000U)         /* Bit[23:22] VDDD por config in low power mode*/
#define PWR_SYSCTRL4_VDDD_LPPORSEL_0                          ((uint32_t)0x00400000U)         /* Bit22*/
#define PWR_SYSCTRL4_VDDD_LPPORSEL_1                          ((uint32_t)0x00800000U)         /* Bit23*/

#define PWR_SYSCTRL4_DCDC_LPPORVSEL                           ((uint32_t)0x003E0000U)         /* Bit[21:17] DCDC POR voltage value 0.05V per step in low power mode*/
#define PWR_SYSCTRL4_DCDC_LPPORVSEL_0                         ((uint32_t)0x00020000U)         /* Bit17*/
#define PWR_SYSCTRL4_DCDC_LPPORVSEL_1                         ((uint32_t)0x00040000U)         /* Bit18*/
#define PWR_SYSCTRL4_DCDC_LPPORVSEL_2                         ((uint32_t)0x00080000U)         /* Bit19*/
#define PWR_SYSCTRL4_DCDC_LPPORVSEL_3                         ((uint32_t)0x00100000U)         /* Bit20*/
#define PWR_SYSCTRL4_DCDC_LPPORVSEL_4                         ((uint32_t)0x00200000U)         /* Bit21*/

#define PWR_SYSCTRL4_BG_LPVREFVSEL                            ((uint32_t)0x00010000U)         /* Bit[16] targeting aldo ref in low power mode*/
#define PWR_SYSCTRL4_BG_VREFVSEL                              ((uint32_t)0x00008000U)         /* Bit[15] targeting BG in low power mode*/

#define PWR_SYSCTRL4_VDDD_PORSEL                            ((uint32_t)0x00003000U)         /* Bit[13:12] VDDD por config in low power  mode*/
#define PWR_SYSCTRL4_VDDD_PORSEL_0                          ((uint32_t)0x00001000U)         /* Bit12*/
#define PWR_SYSCTRL4_VDDD_PORSEL_1                          ((uint32_t)0x00002000U)         /* Bit13*/

#define PWR_SYSCTRL4_MLDO_LPOVSEL                             ((uint32_t)0x00000C00U)         /* Bit[11:10] Output voltage of Main Regulator LDO option in SYS STOP2 and STANDBY mode*/
#define PWR_SYSCTRL4_MLDO_LPOVSEL_0                           ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_SYSCTRL4_MLDO_LPOVSEL_1                           ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_SYSCTRL4_MLDO_OVSEL                               ((uint32_t)0x00000300U)         /* Bit[9:8] Output voltage of Main Regulator LDO option in SYS RUN mode*/
#define PWR_SYSCTRL4_MLDO_OVSEL_0                             ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_SYSCTRL4_MLDO_OVSEL_1                             ((uint32_t)0x00000200U)         /* Bit9*/

#define PWR_SYSCTRL4_DCDCFRCEN                                ((uint32_t)0x00000008U)         /* Bit[3] DCDC is forcibly activated*/
#define PWR_SYSCTRL4_DCDCEN                                   ((uint32_t)0x00000004U)         /* Bit[2] DCDC is activated*/
#define PWR_SYSCTRL4_MLDOEN                                   ((uint32_t)0x00000002U)         /* Bit[1] LDO is forcibly activated*/
#define PWR_SYSCTRL4_VCORESRC                                 ((uint32_t)0x00000001U)         /* Bit[0] VCORE/VDDD spupplied by external source*/

/******** Bit definition for PWR_BORCTRL register  ********/
#define PWR_BORCTRL_BORVSEL_MASK                              ((uint32_t)0x0000003EU)         /* Bit[5:1] BOR voltage selelction*/
#define PWR_BORCTRL_BORVSEL_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_BORCTRL_BORVSEL_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_BORCTRL_BORVSEL_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define PWR_BORCTRL_BORVSEL_3                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_BORCTRL_BORVSEL_4                                 ((uint32_t)0x00000020U)         /* Bit5*/

#define PWR_BORCTRL_BOREN                                     ((uint32_t)0x00000001U)         /* Bit[0] BOR enable*/

/******** Bit definition for PWR_IPMEMCTRL register  ********/
#define PWR_IPMEMCTRL_ESC_PWREN                               ((uint32_t)0x00001000U)         /* Bit[12] ESC memory power gate enable*/
#define PWR_IPMEMCTRL_FMAC_PWREN                              ((uint32_t)0x00000800U)         /* Bit[11] FMAC memory power gate enable*/
#define PWR_IPMEMCTRL_SDMMC1_PWREN                            ((uint32_t)0x00000400U)         /* Bit[10] SDMMC1 memory power gate enable*/
#define PWR_IPMEMCTRL_USB1_PWREN                              ((uint32_t)0x00000200U)         /* Bit[9] USB1 memory power gate enable*/
#define PWR_IPMEMCTRL_ETH1_PWREN                              ((uint32_t)0x00000100U)         /* Bit[8] ETH1 memory power gate enable*/
#define PWR_IPMEMCTRL_SDMMC2_PWREN                            ((uint32_t)0x00000080U)         /* Bit[7] SDMMC2 memory power gate enable*/
#define PWR_IPMEMCTRL_USB2_PWREN                              ((uint32_t)0x00000040U)         /* Bit[6] USB2 memory power gate enable*/
#define PWR_IPMEMCTRL_ETH2_PWREN                              ((uint32_t)0x00000020U)         /* Bit[5] ETH2 memory power gate enable*/
#define PWR_IPMEMCTRL_DVP_PWREN                               ((uint32_t)0x00000010U)         /* Bit[4] DVP memory power gate enable*/
#define PWR_IPMEMCTRL_DSI_PWREN                               ((uint32_t)0x00000008U)         /* Bit[3] DSI memory power gate enable*/
#define PWR_IPMEMCTRL_JPEG_PWREN                              ((uint32_t)0x00000004U)         /* Bit[2] JPEG memory power gate enable*/
#define PWR_IPMEMCTRL_LCDC_PWREN                              ((uint32_t)0x00000002U)         /* Bit[1] LCDC memory power gate enable*/
#define PWR_IPMEMCTRL_GPU_PWREN                               ((uint32_t)0x00000001U)         /* Bit[0] GPU memory power gate enable*/

/******** Bit definition for PWR_IPMEMCTRLSTS register  ********/
#define PWR_IPMEMCTRLSTS_AIP_MEMPWRRDY                        ((uint32_t)0x80000000U)         /* Bit[31] ALL IP memory power ready flag*/
#define PWR_IPMEMCTRLSTS_ESC_PWRRDY                           ((uint32_t)0x00001000U)         /* Bit[12] ESC memory power ready flag*/
#define PWR_IPMEMCTRLSTS_FMAC_PWRRDY                          ((uint32_t)0x00000800U)         /* Bit[11] FMAC memory power ready flag*/
#define PWR_IPMEMCTRLSTS_SDMMC1_PWRRDY                        ((uint32_t)0x00000400U)         /* Bit[10] SDMMC1 memory power ready flag*/
#define PWR_IPMEMCTRLSTS_USB1_PWRRDY                          ((uint32_t)0x00000200U)         /* Bit[9] USB1 memory power ready flag*/
#define PWR_IPMEMCTRLSTS_ETH1_PWRRDY                          ((uint32_t)0x00000100U)         /* Bit[8] ETH1 memory power ready flag*/
#define PWR_IPMEMCTRLSTS_SDMMC2_PWRRDY                        ((uint32_t)0x00000080U)         /* Bit[7] SDMMC2 memory power ready flag*/
#define PWR_IPMEMCTRLSTS_USB2_PWRRDY                          ((uint32_t)0x00000040U)         /* Bit[6] USB2 memory power ready flag*/
#define PWR_IPMEMCTRLSTS_ETH2_PWRRDY                          ((uint32_t)0x00000020U)         /* Bit[5] ETH2 memory power ready flag*/
#define PWR_IPMEMCTRLSTS_DVP_PWRRDY                           ((uint32_t)0x00000010U)         /* Bit[4] DVP memory power ready flag*/
#define PWR_IPMEMCTRLSTS_DSI_PWRRDY                           ((uint32_t)0x00000008U)         /* Bit[3] DSI memory power ready flag*/
#define PWR_IPMEMCTRLSTS_JPEG_PWRRDY                          ((uint32_t)0x00000004U)         /* Bit[2] JPEG memory power ready flag*/
#define PWR_IPMEMCTRLSTS_LCDC_PWRRDY                          ((uint32_t)0x00000002U)         /* Bit[1] LCDC memory power ready flag*/
#define PWR_IPMEMCTRLSTS_GPU_PWRRDY                           ((uint32_t)0x00000001U)         /* Bit[0] GPU memory power ready flag*/

/******** Bit definition for PWR_M7MEMLPCTRL register  ********/
#define PWR_M7MEMLPCTRL_MEM_PGCFG                             ((uint32_t)0x0000000CU)         /* Bit[3:2] Memory power gate sequence control*/
#define PWR_M7MEMLPCTRL_MEM_PGCFG_0                           ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_M7MEMLPCTRL_MEM_PGCFG_1                           ((uint32_t)0x00000008U)         /* Bit3*/
#define PWR_M7MEMLPCTRL_MEM_RETSTP0EN                         ((uint32_t)0x00000002U)         /* Bit[1] */
#define PWR_M7MEMLPCTRL_MEM_PGENSTP0                          ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for PWR_M7MEMLPSTS register  ********/
#define PWR_M7MEMLPSTS_TCMRDY                                 ((uint32_t)0x80000000U)         /* Bit[31] All enabled TCM memory power ready flag*/

/******** Bit definition for PWR_M7TCMPG0 register  ********/
#define PWR_M7TCMPG0_M7TCM_SWPG0                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Software control to power gate TCM memories*/
#define PWR_M7TCMPG0_M7TCM_SWPG0_0                            ((uint32_t)0x00000001U)         /* Bit0   range :0x20000000U ?C 0x20003FFFU*/
#define PWR_M7TCMPG0_M7TCM_SWPG0_1                            ((uint32_t)0x00000002U)         /* Bit1   range :0x20004000U ?C 0x20007FFFU*/
#define PWR_M7TCMPG0_M7TCM_SWPG0_2                            ((uint32_t)0x00000004U)         /* Bit2   ....                            */
#define PWR_M7TCMPG0_M7TCM_SWPG0_3                            ((uint32_t)0x00000008U)         /* Bit3   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_4                            ((uint32_t)0x00000010U)         /* Bit4   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_5                            ((uint32_t)0x00000020U)         /* Bit5   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_6                            ((uint32_t)0x00000040U)         /* Bit6   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_7                            ((uint32_t)0x00000080U)         /* Bit7   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_8                            ((uint32_t)0x00000100U)         /* Bit8   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_9                            ((uint32_t)0x00000200U)         /* Bit9   ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_10                           ((uint32_t)0x00000400U)         /* Bit10  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_11                           ((uint32_t)0x00000800U)         /* Bit11  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_12                           ((uint32_t)0x00001000U)         /* Bit12  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_13                           ((uint32_t)0x00002000U)         /* Bit13  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_14                           ((uint32_t)0x00004000U)         /* Bit14  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_15                           ((uint32_t)0x00008000U)         /* Bit15  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_16                           ((uint32_t)0x00010000U)         /* Bit16  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_17                           ((uint32_t)0x00020000U)         /* Bit17  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_18                           ((uint32_t)0x00040000U)         /* Bit18  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_19                           ((uint32_t)0x00080000U)         /* Bit19  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_20                           ((uint32_t)0x00100000U)         /* Bit20  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_21                           ((uint32_t)0x00200000U)         /* Bit21  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_22                           ((uint32_t)0x00400000U)         /* Bit22  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_23                           ((uint32_t)0x00800000U)         /* Bit23  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_24                           ((uint32_t)0x01000000U)         /* Bit24  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_25                           ((uint32_t)0x02000000U)         /* Bit25  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_26                           ((uint32_t)0x04000000U)         /* Bit26  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_27                           ((uint32_t)0x08000000U)         /* Bit27  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_28                           ((uint32_t)0x10000000U)         /* Bit28  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_29                           ((uint32_t)0x20000000U)         /* Bit29  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_30                           ((uint32_t)0x40000000U)         /* Bit30  ....                         */
#define PWR_M7TCMPG0_M7TCM_SWPG0_31                           ((uint32_t)0x80000000U)         /* Bit31  range :0x2007FBFFU ?C 0x2007FFFFU*/

/******** Bit definition for PWR_M7TCMPG1 register  ********/
#define PWR_M7TCMPG1_M7TCM_SWPG1                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Software control to power gate TCM memories*/
#define PWR_M7TCMPG1_M7TCM_SWPG1_0                            ((uint32_t)0x00000001U)         /* Bit0    range :0x20080000U ?C 0x20083FFFU*/
#define PWR_M7TCMPG1_M7TCM_SWPG1_1                            ((uint32_t)0x00000002U)         /* Bit1    range :0x20084000U ?C 0x20087FFFU*/
#define PWR_M7TCMPG1_M7TCM_SWPG1_2                            ((uint32_t)0x00000004U)         /* Bit2    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_3                            ((uint32_t)0x00000008U)         /* Bit3    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_4                            ((uint32_t)0x00000010U)         /* Bit4    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_5                            ((uint32_t)0x00000020U)         /* Bit5    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_6                            ((uint32_t)0x00000040U)         /* Bit6    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_7                            ((uint32_t)0x00000080U)         /* Bit7    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_8                            ((uint32_t)0x00000100U)         /* Bit8    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_9                            ((uint32_t)0x00000200U)         /* Bit9    ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_10                           ((uint32_t)0x00000400U)         /* Bit10   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_11                           ((uint32_t)0x00000800U)         /* Bit11   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_12                           ((uint32_t)0x00001000U)         /* Bit12   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_13                           ((uint32_t)0x00002000U)         /* Bit13   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_14                           ((uint32_t)0x00004000U)         /* Bit14   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_15                           ((uint32_t)0x00008000U)         /* Bit15   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_16                           ((uint32_t)0x00010000U)         /* Bit16   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_17                           ((uint32_t)0x00020000U)         /* Bit17   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_18                           ((uint32_t)0x00040000U)         /* Bit18   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_19                           ((uint32_t)0x00080000U)         /* Bit19   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_20                           ((uint32_t)0x00100000U)         /* Bit20   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_21                           ((uint32_t)0x00200000U)         /* Bit21   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_22                           ((uint32_t)0x00400000U)         /* Bit22   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_23                           ((uint32_t)0x00800000U)         /* Bit23   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_24                           ((uint32_t)0x01000000U)         /* Bit24   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_25                           ((uint32_t)0x02000000U)         /* Bit25   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_26                           ((uint32_t)0x04000000U)         /* Bit26   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_27                           ((uint32_t)0x08000000U)         /* Bit27   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_28                           ((uint32_t)0x10000000U)         /* Bit28   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_29                           ((uint32_t)0x20000000U)         /* Bit29   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_30                           ((uint32_t)0x40000000U)         /* Bit30   ....                            */
#define PWR_M7TCMPG1_M7TCM_SWPG1_31                           ((uint32_t)0x80000000U)         /* Bit31   range :0x200FFBFFU ?C 0x200FFFFFU*/

/******** Bit definition for PWR_M7TCMRET1N0 register  ********/
#define PWR_M7TCMRET1N0_M7TCM_RET1CFG0                        ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */

/******** Bit definition for PWR_M7TCMRET1N1 register  ********/
#define PWR_M7TCMRET1N1_M7TCM_RET1CFG1                        ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */

/******** Bit definition for PWR_M7TCMRET2CFG0 register  ********/
#define PWR_M7TCMRET2CFG0_M7TCM_RET2CFG0                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */

/******** Bit definition for PWR_M7TCM_RET2CFG1 register  ********/
#define PWR_M7TCM_RET2CFG1_M7TCM_RET2CFG1                     ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */

/******** Bit definition for PWR_M7TCMPRDY0 register  ********/
#define PWR_M7TCMPRDY0_TCM_PRDY0                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */

/******** Bit definition for PWR_M7TCMPRDY1 register  ********/
#define PWR_M7TCMPRDY1_TCM_PRDY1                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] */

/******** Bit definition for PWR_M4MEMLPCTRL register  ********/
#define PWR_M4MEMLPCTRL_MEM_PGCFG                             ((uint32_t)0x0000000CU)         /* Bit[3:2] Memory power gate sequence control*/
#define PWR_M4MEMLPCTRL_MEM_PGCFG_0                           ((uint32_t)0x00000004U)         /* Bit2  */
#define PWR_M4MEMLPCTRL_MEM_PGCFG_1                           ((uint32_t)0x00000008U)         /* Bit3  */

#define PWR_M4MEMLPCTRL_MEM_RETSTP0EN                         ((uint32_t)0x00000002U)         /* Bit[1] */
#define PWR_M4MEMLPCTRL_MEM_PGSTP0EN                          ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for PWR_SYSMEMLPCTRL register  ********/
#define PWR_SYSMEMLPCTRL_ALLPRDY                              ((uint32_t)0x80000000U)         /* Bit[31] All enabled system memory power ready flag*/
#define PWR_SYSMEMLPCTRL_AHBSRAM5S2_RET2N                     ((uint32_t)0x04000000U)         /* Bit[26] System SRAM5S2 memory status control */
#define PWR_SYSMEMLPCTRL_AHBSRAM5S2_RET1N                     ((uint32_t)0x02000000U)         /* Bit[25] System SRAM5S2 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM5S1_RET2N                     ((uint32_t)0x01000000U)         /* Bit[24] System SRAM5S1 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM5S1_RET1N                     ((uint32_t)0x00800000U)         /* Bit[23] System SRAM5S1 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM4_RET2N                       ((uint32_t)0x00400000U)         /* Bit[22] System SRAM4 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM4_RET1N                       ((uint32_t)0x00200000U)         /* Bit[21] System SRAM4 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM3_RET2N                       ((uint32_t)0x00100000U)         /* Bit[20] System SRAM3 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM3_RET1N                       ((uint32_t)0x00080000U)         /* Bit[19] System SRAM3 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM2_RET2N                       ((uint32_t)0x00040000U)         /* Bit[18] System SRAM2 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM2_RET1N                       ((uint32_t)0x00020000U)         /* Bit[17] System SRAM2 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM1_RET2N                       ((uint32_t)0x00010000U)         /* Bit[16] System SRAM1 memory status control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM1_RET1N                       ((uint32_t)0x00008000U)         /* Bit[15] System SRAM1 memory status control*/
#define PWR_SYSMEMLPCTRL_AXISRAM_RET2N                        ((uint32_t)0x00004000U)         /* Bit[14] System memory status control*/
#define PWR_SYSMEMLPCTRL_AXISRAM_RET1N                        ((uint32_t)0x00002000U)         /* Bit[13] System memory status control*/
#define PWR_SYSMEMLPCTRL_MEM_RETSTP0EN                        ((uint32_t)0x00000200U)         /* Bit[9] all system memory control*/
#define PWR_SYSMEMLPCTRL_MEM_PGSTP0EN                         ((uint32_t)0x00000100U)         /* Bit[8] all system memory control*/
#define PWR_SYSMEMLPCTRL_AHBSRAM5S2PG                         ((uint32_t)0x00000040U)         /* Bit[6] Software control to power gate AHB SRAM5S2 in SYS RUN mode*/
#define PWR_SYSMEMLPCTRL_AHBSRAM5S1_PG                        ((uint32_t)0x00000020U)         /* Bit[5] Software control to power gate AHB SRAM5S1 in SYS RUN mode*/
#define PWR_SYSMEMLPCTRL_AHBSRAM4PG                           ((uint32_t)0x00000010U)         /* Bit[4] Software control to power gate AHB SRAM4 in SYS RUN mode*/
#define PWR_SYSMEMLPCTRL_AHBSRAM3_PG                          ((uint32_t)0x00000008U)         /* Bit[3] Software control to power gate AHB SRAM3 in SYS RUN mode*/
#define PWR_SYSMEMLPCTRL_AHBSRAM2_PG                          ((uint32_t)0x00000004U)         /* Bit[2] Software control to power gate AHB SRAM2 in SYS RUN mode*/
#define PWR_SYSMEMLPCTRL_AHBSRAM1_PG                          ((uint32_t)0x00000002U)         /* Bit[1] Software control to power gate AHB SRAM1 in SYS RUN mode*/
#define PWR_SYSMEMLPCTRL_AXISRAM_PG                           ((uint32_t)0x00000001U)         /* Bit[0] Software control to power gate AXI SRAM in SYS RUN mode*/

/******** Bit definition for PWR_SHRTIMCTRL register  ********/
#define PWR_SHRTIMCTRL_SHRA_PSWACK1                           ((uint32_t)0x00100000U)         /* Bit[20] SHRTIM AFE Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SHRTIMCTRL_SHRA_PRDY                              ((uint32_t)0x00080000U)         /* Bit[19] SHRTIM AFE power domain ready flag*/
#define PWR_SHRTIMCTRL_SHRA_ISNEN                             ((uint32_t)0x00040000U)         /* Bit[18] SHRTIM AFE power domain isolation signal*/
#define PWR_SHRTIMCTRL_SHRA_FUCEN                             ((uint32_t)0x00020000U)         /* Bit[17] Function mode enable for SHRTIM AFE*/
#define PWR_SHRTIMCTRL_SHRA_PWREN                             ((uint32_t)0x00010000U)         /* Bit[16] SHRTIM AFE  power gate enable*/
#define PWR_SHRTIMCTRL_SHR2_PSWACK1                           ((uint32_t)0x00001000U)         /* Bit[12] HRTIM2 Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SHRTIMCTRL_SHR2_PRDY                              ((uint32_t)0x00000800U)         /* Bit[11] SHRTIM2 power domain ready flag*/
#define PWR_SHRTIMCTRL_SHR2_ISNEN                             ((uint32_t)0x00000400U)         /* Bit[10] SHRTIM2 power domain isolation signal*/
#define PWR_SHRTIMCTRL_SHR2_FUCEN                             ((uint32_t)0x00000200U)         /* Bit[9] Function mode enable for SHRTIM2 */
#define PWR_SHRTIMCTRL_SHR2_PWREN                             ((uint32_t)0x00000100U)         /* Bit[8] SHRTIM2  power gate enable*/
#define PWR_SHRTIMCTRL_SHR1_PSWACK1                           ((uint32_t)0x00000010U)         /* Bit[4] HRTIM1 Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_SHRTIMCTRL_SHR1_PRDY                              ((uint32_t)0x00000008U)         /* Bit[3] SHRTIM1 power domain ready flag*/
#define PWR_SHRTIMCTRL_SHR1_ISNEN                             ((uint32_t)0x00000004U)         /* Bit[2] SHRTIM1 power domain isolation signal*/
#define PWR_SHRTIMCTRL_SHR1_FUCEN                             ((uint32_t)0x00000002U)         /* Bit[1] Function mode enable for SHRTIM1 */
#define PWR_SHRTIMCTRL_SHR1_PWREN                             ((uint32_t)0x00000001U)         /* Bit[0] SHRTIM1  power gate enable*/

/******** Bit definition for PWR_MDMACTRL register  ********/
#define PWR_MDMACTRL_MDMA_PSWACK1                             ((uint32_t)0x00000010U)         /* Bit[4] MDMA Domain power switch ACK1 used as ENA2 for dual-input-header*/
#define PWR_MDMACTRL_MDMA_PRDY                                ((uint32_t)0x00000008U)         /* Bit[3] MDMA power domain ready flag*/
#define PWR_MDMACTRL_MDMA_ISNEN                               ((uint32_t)0x00000004U)         /* Bit[2] MDMA power domain isolation signal*/
#define PWR_MDMACTRL_MDMA_FUCEN                               ((uint32_t)0x00000002U)         /* Bit[1] Function mode enable for MDMA*/
#define PWR_MDMACTRL_MDMA_PWREN                               ((uint32_t)0x00000001U)         /* Bit[0] MDMA  power gate enable*/

/******** Bit definition for PWR_ESCCTRL register  ********/
#define PWR_ESCCTRL_ESC_PSWACK1                               ((uint32_t)0x00000010U)         /* Bit[4] ESC Domain power switch ACK1 used as ENA2 for dual-input-header */
#define PWR_ESCCTRL_ESC_PRDY                                  ((uint32_t)0x00000008U)         /* Bit[3] ESC power domain ready flag*/
#define PWR_ESCCTRL_ESC_ISNEN                                 ((uint32_t)0x00000004U)         /* Bit[2] ESC power domain isolation signal*/
#define PWR_ESCCTRL_ESC_FUCEN                                 ((uint32_t)0x00000002U)         /* Bit[1] Function mode enable for ESC*/
#define PWR_ESCCTRL_ESC_PWREN                                 ((uint32_t)0x00000001U)         /* Bit[0] ESC power gate enable*/

/******** Bit definition for PWR_DBGPROB0 register  ********/
#define PWR_DBGPROB0_DBG_PRO1                                 ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set 1*/

#define PWR_DBGPROB0_DBG_PRO0                                 ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set 0*/

/******** Bit definition for PWR_DBGPROB1 register  ********/
#define PWR_DBGPROB1_DBG_PRO3                                 ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set 3*/

#define PWR_DBGPROB1_DBG_PRO2                                 ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set 2*/

/******** Bit definition for PWR_DBGPRO2 register  ********/
#define PWR_DBGPRO2_DBG_PRO5                                  ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set 5*/

#define PWR_DBGPRO2_DBG_PRO4                                  ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set 4*/

/******** Bit definition for PWR_DBGPRO3 register  ********/
#define PWR_DBGPRO3_DBG_PRO7                                  ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set 5*/

#define PWR_DBGPRO3_DBG_PRO6                                  ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set 6*/

/******** Bit definition for PWR_DBGPRO4 register  ********/
#define PWR_DBGPRO4_DBG_PRO9                                  ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set 9*/

#define PWR_DBGPRO4_DBG_PRO8                                  ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set 8*/

/******** Bit definition for PWR_DBGPRO5 register  ********/
#define PWR_DBGPRO5_DBG_PROB                                  ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set B*/

#define PWR_DBGPRO5_DBG_PROA                                  ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set A*/

/******** Bit definition for PWR_DBGPRO6 register  ********/
#define PWR_DBGPRO6_DBG_PROD                                  ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set D*/

#define PWR_DBGPRO6_DBG_PROC                                  ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set C*/

/******** Bit definition for PWR_DBGPRO7 register  ********/
#define PWR_DBGPRO7_DBG_PROF                                  ((uint32_t)0xFFFF0000U)         /* Bit[31:16] Debug probe observation to PWR interanl signals set F*/

#define PWR_DBGPRO7_DBG_PROE                                  ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Debug probe observation to PWR interanl signals set E*/

/******** Bit definition for PWR_DBGPROBCTRL register  ********/
#define PWR_DBGPROBCTRL_PROB_SEL_MASK                         ((uint32_t)0x0000000FU)         /* Bit[3:0] */
#define PWR_DBGPROBCTRL_PROB_SEL_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_DBGPROBCTRL_PROB_SEL_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_DBGPROBCTRL_PROB_SEL_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_DBGPROBCTRL_PROB_SEL_3                            ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCRETCTRL1 register  ********/
#define PWR_EMCRETCTRL1_RETGBxDET                             ((uint32_t)0x00000F00U)         /* Bit[11:8] RET domain EMC GBx detection enable*/
#define PWR_EMCRETCTRL1_RETGBxDET_0                           ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETCTRL1_RETGBxDET_1                           ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETCTRL1_RETGBxDET_2                           ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_EMCRETCTRL1_RETGBxDET_3                           ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_EMCRETCTRL1_RETGBNxDET                            ((uint32_t)0x000000F0U)         /* Bit[7:4] RET domain EMC GBNx detection enable*/
#define PWR_EMCRETCTRL1_RETGBNxDET_0                          ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETCTRL1_RETGBNxDET_1                          ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETCTRL1_RETGBNxDET_2                          ((uint32_t)0x00000040U)         /* Bit6*/
#define PWR_EMCRETCTRL1_RETGBNxDET_3                          ((uint32_t)0x00000080U)         /* Bit7*/

#define PWR_EMCRETCTRL1_RETCLPxDET                            ((uint32_t)0x0000000FU)         /* Bit[3:0] RET domain EMC Clampx detection enable*/
#define PWR_EMCRETCTRL1_RETCLPxDET_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETCTRL1_RETCLPxDET_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETCTRL1_RETCLPxDET_2                          ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_EMCRETCTRL1_RETCLPxDET_3                          ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCCTRLSTS1 register  ********/
#define PWR_EMCCTRLSTS1_EMCFCLR                               ((uint32_t)0x01000000U)         /* Bit[24] Clear EMC Flag*/

#define PWR_EMCCTRLSTS1_RETGBxF                               ((uint32_t)0x00000F00U)         /* Bit[11:8] RET Domain EMC GBx Flag*/
#define PWR_EMCCTRLSTS1_RETGBxF_0                             ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCCTRLSTS1_RETGBxF_1                             ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCCTRLSTS1_RETGBxF_2                             ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_EMCCTRLSTS1_RETGBxF_3                             ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_EMCCTRLSTS1_RETGBNxF                              ((uint32_t)0x000000F0U)         /* Bit[7:4] RET Domain EMC GBNx Flag*/
#define PWR_EMCCTRLSTS1_RETGBNxF_0                            ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCCTRLSTS1_RETGBNxF_1                            ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCCTRLSTS1_RETGBNxF_2                            ((uint32_t)0x00000040U)         /* Bit6*/
#define PWR_EMCCTRLSTS1_RETGBNxF_3                            ((uint32_t)0x00000080U)         /* Bit7*/

#define PWR_EMCCTRLSTS1_RETCLPxF                              ((uint32_t)0x0000000FU)         /* Bit[3:0] RET Domain EMC Clampx Flag*/
#define PWR_EMCCTRLSTS1_RETCLPxF_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCCTRLSTS1_RETCLPxF_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCCTRLSTS1_RETCLPxF_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_EMCCTRLSTS1_RETCLPxF_3                            ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCRETCTRL2 register  ********/
#define PWR_EMCRETCTRL2_RETGBxDET                             ((uint32_t)0x00000F00U)         /* Bit[11:8] RET domain EMC GBx detection enable*/
#define PWR_EMCRETCTRL2_RETGBxDET_0                           ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETCTRL2_RETGBxDET_1                           ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETCTRL2_RETGBxDET_2                           ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_EMCRETCTRL2_RETGBxDET_3                           ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_EMCRETCTRL2_RETGBNxDET                            ((uint32_t)0x000000F0U)         /* Bit[7:4] RET domain EMC GBNx detection enable*/
#define PWR_EMCRETCTRL2_RETGBNxDET_0                          ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETCTRL2_RETGBNxDET_1                          ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETCTRL2_RETGBNxDET_2                          ((uint32_t)0x00000040U)         /* Bit6*/
#define PWR_EMCRETCTRL2_RETGBNxDET_3                          ((uint32_t)0x00000080U)         /* Bit7*/

#define PWR_EMCRETCTRL2_RETCLPxDET                            ((uint32_t)0x0000000FU)         /* Bit[3:0] RET domain EMC Clampx detection enable*/
#define PWR_EMCRETCTRL2_RETCLPxDET_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETCTRL2_RETCLPxDET_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETCTRL2_RETCLPxDET_2                          ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_EMCRETCTRL2_RETCLPxDET_3                          ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCRETSTS2 register  ********/
#define PWR_EMCRETSTS2_RETGBxF                                ((uint32_t)0x00000F00U)         /* Bit[11:8] RET Domain EMC GBx Flag*/
#define PWR_EMCRETSTS2_RETGBxF_0                              ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETSTS2_RETGBxF_1                              ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETSTS2_RETGBxF_2                              ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_EMCRETSTS2_RETGBxF_3                              ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_EMCRETSTS2_RETGBNxF                               ((uint32_t)0x000000F0U)         /* Bit[7:4] RET Domain EMC GBNx Flag*/
#define PWR_EMCRETSTS2_RETGBNxF_0                             ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETSTS2_RETGBNxF_1                             ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETSTS2_RETGBNxF_2                             ((uint32_t)0x00000040U)         /* Bit6*/
#define PWR_EMCRETSTS2_RETGBNxF_3                             ((uint32_t)0x00000080U)         /* Bit7*/

#define PWR_EMCRETSTS2_RETCLPxF                               ((uint32_t)0x0000000FU)         /* Bit[3:0] RET Domain EMC Clampx Flag*/
#define PWR_EMCRETSTS2_RETCLPxF_0                             ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETSTS2_RETCLPxF_1                             ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETSTS2_RETCLPxF_2                             ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_EMCRETSTS2_RETCLPxF_3                             ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCRETCTRL3 register  ********/
#define PWR_EMCRETCTRL3_RETGBxDET                             ((uint32_t)0x00000F00U)         /* Bit[11:8] RET domain EMC GBx detection enable*/
#define PWR_EMCRETCTRL3_RETGBxDET_0                           ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETCTRL3_RETGBxDET_1                           ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETCTRL3_RETGBxDET_2                           ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_EMCRETCTRL3_RETGBxDET_3                           ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_EMCRETCTRL3_RETGBNxDET                            ((uint32_t)0x000000F0U)         /* Bit[7:4] RET domain EMC GBNx detection enable*/
#define PWR_EMCRETCTRL3_RETGBNxDET_0                          ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETCTRL3_RETGBNxDET_1                          ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETCTRL3_RETGBNxDET_2                          ((uint32_t)0x00000040U)         /* Bit6*/
#define PWR_EMCRETCTRL3_RETGBNxDET_3                          ((uint32_t)0x00000080U)         /* Bit7*/

#define PWR_EMCRETCTRL3_RETCLPxDET                            ((uint32_t)0x0000000FU)         /* Bit[3:0] RET domain EMC Clampx detection enable*/
#define PWR_EMCRETCTRL3_RETCLPxDET_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETCTRL3_RETCLPxDET_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETCTRL3_RETCLPxDET_2                          ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_EMCRETCTRL3_RETCLPxDET_3                          ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCRETSTS3 register  ********/
#define PWR_EMCRETSTS3_RETGBF                                 ((uint32_t)0x00000F00U)         /* Bit[11:8] RET Domain EMC GBx Flag*/
#define PWR_EMCRETSTS3_RETGBF_0                               ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETSTS3_RETGBF_1                               ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETSTS3_RETGBF_2                               ((uint32_t)0x00000400U)         /* Bit10*/
#define PWR_EMCRETSTS3_RETGBF_3                               ((uint32_t)0x00000800U)         /* Bit11*/

#define PWR_EMCRETSTS3_RETGBNF                                ((uint32_t)0x000000F0U)         /* Bit[7:4] RET Domain EMC GBNx Flag*/
#define PWR_EMCRETSTS3_RETGBNF_0                              ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETSTS3_RETGBNF_1                              ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETSTS3_RETGBNF_2                              ((uint32_t)0x00000040U)         /* Bit6*/
#define PWR_EMCRETSTS3_RETGBNF_3                              ((uint32_t)0x00000080U)         /* Bit7*/

#define PWR_EMCRETSTS3_RETCLPF                                ((uint32_t)0x0000000FU)         /* Bit[3:0] RET Domain EMC Clampx Flag*/
#define PWR_EMCRETSTS3_RETCLPF_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETSTS3_RETCLPF_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETSTS3_RETCLPF_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define PWR_EMCRETSTS3_RETCLPF_3                              ((uint32_t)0x00000008U)         /* Bit3*/

/******** Bit definition for PWR_EMCRETCTRL4 register  ********/
#define PWR_EMCRETCTRL4_RETGBxDET                             ((uint32_t)0x00000700U)         /* Bit[10:8] RET domain EMC GBx detection enable*/
#define PWR_EMCRETCTRL4_RETGBxDET_0                           ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETCTRL4_RETGBxDET_1                           ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETCTRL4_RETGBxDET_2                           ((uint32_t)0x00000400U)         /* Bit10*/

#define PWR_EMCRETCTRL4_RETGBNxDET                            ((uint32_t)0x00000070U)         /* Bit[6:4] RET domain EMC GBNx detection enable*/
#define PWR_EMCRETCTRL4_RETGBNxDET_0                          ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETCTRL4_RETGBNxDET_1                          ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETCTRL4_RETGBNxDET_2                          ((uint32_t)0x00000040U)         /* Bit6*/

#define PWR_EMCRETCTRL4_RETCLPxDET                            ((uint32_t)0x00000007U)         /* Bit[2:0] RET domain EMC Clampx detection enable*/
#define PWR_EMCRETCTRL4_RETCLPxDET_0                          ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETCTRL4_RETCLPxDET_1                          ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETCTRL4_RETCLPxDET_2                          ((uint32_t)0x00000004U)         /* Bit2*/

/******** Bit definition for PWR_EMCRETSTS4 register  ********/
#define PWR_EMCRETSTS4_RETGBxF                                ((uint32_t)0x00000700U)         /* Bit[10:8] RET Domain EMC GBx Flag*/
#define PWR_EMCRETSTS4_RETGBxF_0                              ((uint32_t)0x00000100U)         /* Bit8*/
#define PWR_EMCRETSTS4_RETGBxF_1                              ((uint32_t)0x00000200U)         /* Bit9*/
#define PWR_EMCRETSTS4_RETGBxF_2                              ((uint32_t)0x00000400U)         /* Bit10*/

#define PWR_EMCRETSTS4_RETGBNxF                               ((uint32_t)0x00000070U)         /* Bit[6:4] RET Domain EMC GBNx Flag*/
#define PWR_EMCRETSTS4_RETGBNxF_0                             ((uint32_t)0x00000010U)         /* Bit4*/
#define PWR_EMCRETSTS4_RETGBNxF_1                             ((uint32_t)0x00000020U)         /* Bit5*/
#define PWR_EMCRETSTS4_RETGBNxF_2                             ((uint32_t)0x00000040U)         /* Bit6*/

#define PWR_EMCRETSTS4_RETCLPxF                               ((uint32_t)0x00000007U)         /* Bit[2:0] RET Domain EMC Clampx Flag*/
#define PWR_EMCRETSTS4_RETCLPxF_0                             ((uint32_t)0x00000001U)         /* Bit0*/
#define PWR_EMCRETSTS4_RETCLPxF_1                             ((uint32_t)0x00000002U)         /* Bit1*/
#define PWR_EMCRETSTS4_RETCLPxF_2                             ((uint32_t)0x00000004U)         /* Bit2*/

/******** Bit definition for PWR_EMCBKPCTRL register  ********/
#define PWR_EMCBKPCTRL_BKPCBDET                               ((uint32_t)0x00000100U)         /* Bit[8] Backup domain EMC GB detection enable*/
#define PWR_EMCBKPCTRL_BKPCBNDET                              ((uint32_t)0x00000010U)         /* Bit[4] Backup domain EMC GBN detection enable*/
#define PWR_EMCBKPCTRL_BKPCLPDET                              ((uint32_t)0x00000001U)         /* Bit[0] Backup domain EMC Clamp  detection enable*/

/******** Bit definition for PWR_EMCBKPSTS register  ********/
#define PWR_EMCBKPSTS_BKPCLR                                  ((uint32_t)0x01000000U)         /* Bit[24] Clear EMC BKP flag*/
#define PWR_EMCBKPSTS_BKPGBF                                  ((uint32_t)0x00000100U)         /* Bit[8] Backup Domain EMC GB Flag*/
#define PWR_EMCBKPSTS_BKPGBNF                                 ((uint32_t)0x00000010U)         /* Bit[4] Backup Domain EMC GBN Flag*/
#define PWR_EMCBKPSTS_BKPCLPF                                 ((uint32_t)0x00000001U)         /* Bit[0] Backup Domain EMC Clamp Flag*/


    /******************************************************************************/
    /*                                                                            */
    /*                            Low Power UART                                  */
    /*                                                                            */
    /******************************************************************************/
/******** Bit definition for LPUART_STS register  ********/
#define LPUART_STS_TXFEF                                   ((uint32_t)0x00010000U)         /* Bit[16] transmit FIFO Empty Flag,1:FIFO is empty*/
#define LPUART_STS_FE                                      ((uint32_t)0x00008000U)         /* Bit[15]frame error detected, 1:detect frame error*/
#define LPUART_STS_IDLEF                                   ((uint32_t)0x00004000U)         /* Bit[14] IDLE frame detected,1:detect idle frame*/
#define LPUART_STS_TXFNEF                                  ((uint32_t)0x00002000U)         /* Bit[13] transmit FIFO Non-Empty Flag,1:FIFO is non-empty*/
#define LPUART_STS_TXFHFF                                  ((uint32_t)0x00001000U)         /* Bit[12] transmit FIFO Half Full Flag,1:FIFO is Half-Full*/
#define LPUART_STS_TXFQFF                                  ((uint32_t)0x00000800U)         /* Bit[11] transmit FIFO quarter Full Flag,1:FIFO is three-QUAR-Full*/
#define LPUART_STS_TXFFF                                   ((uint32_t)0x00000400U)         /* Bit[10] transmit FIFO Full Flag,1:FIFO is Full*/
#define LPUART_STS_TXFOF                                   ((uint32_t)0x00000200U)         /* Bit[9] transmit FIFO Overflow Flag,1:FIFO is overflow   */
#define LPUART_STS_NEF                                     ((uint32_t)0x00000100U)         /* Bit[8] Noise error Flag,1:Noise is detected*/
#define LPUART_STS_WUF                                     ((uint32_t)0x00000080U)         /* Bit[7] Wakeup from Stop mode Flag,1:Wakeup Events Detected*/
#define LPUART_STS_CTSF                                    ((uint32_t)0x00000040U)         /* Bit[6] Clear to Send Flag,1:CTS Line is Set*/
#define LPUART_STS_RXFNEF                                  ((uint32_t)0x00000020U)         /* Bit[5] FIFO Non-Empty Flag,1:FIFO is non-empty*/
#define LPUART_STS_RXFHFF                                  ((uint32_t)0x00000010U)         /* Bit[4] FIFO Half Full Flag,1:FIFO is Half-Full*/
#define LPUART_STS_RXFFF                                   ((uint32_t)0x00000008U)         /* Bit[3] FIFO Full Flag,1:FIFO is Full */
#define LPUART_STS_RXFOF                                   ((uint32_t)0x00000004U)         /* Bit[2] FIFO Overflow Flag, 1:FIFO is overflow*/
#define LPUART_STS_TXCF                                    ((uint32_t)0x00000002U)         /* Bit[1] TX Complete Flag,1:TX Transmission is Done*/
#define LPUART_STS_PCEF                                    ((uint32_t)0x00000001U)         /* Bit[0] Parity Check Error Flag,1:TX/RX Parity Error is Detected*/

/******** Bit definition for LPUART_INTEN register  ********/
#define LPUART_INTEN_TXFEIEN                                 ((uint32_t)0x00004000U)         /* Bit[14] TXFIFO Empty Interrupt Enable */
#define LPUART_INTEN_FEIEN                                   ((uint32_t)0x00002000U)         /* Bit[13] FRAME_ERROR Interrupt Enable*/
#define LPUART_INTEN_IDLEFIEN                                ((uint32_t)0x00001000U)         /* Bit[12] IDLE_FRAMEIE Interrupt Enable*/
#define LPUART_INTEN_TXFNEIEN                                ((uint32_t)0x00000800U)         /* Bit[11] TXFIFO Non-Empty Interrupt Enable*/
#define LPUART_INTEN_TXFHFIEN                                ((uint32_t)0x00000400U)         /* Bit[10] TXFIFO Half Full Interrupt Enable*/
#define LPUART_INTEN_TXFQFIEN                                ((uint32_t)0x00000200U)         /* Bit[9] TXFIFO QUAR Full Interrupt Enable*/
#define LPUART_INTEN_TXFFIEN                                 ((uint32_t)0x00000100U)         /* Bit[8] TXFIFO Full Interrupt Enable*/
#define LPUART_INTEN_TXFOIEN                                 ((uint32_t)0x00000080U)         /* Bit[7] TXFIFO Overflow Interrupt Enable*/
#define LPUART_INTEN_WUIEN                                   ((uint32_t)0x00000040U)         /* Bit[6] Wakeup Interrupt Enable*/
#define LPUART_INTEN_RXFNEIEN                                ((uint32_t)0x00000020U)         /* Bit[5] FIFO Non-Empty Interrupt Enable*/
#define LPUART_INTEN_RXFHFIEN                                ((uint32_t)0x00000010U)         /* Bit[4] FIFO Half Full Interrupt Enable*/
#define LPUART_INTEN_RXFFIEN                                 ((uint32_t)0x00000008U)         /* Bit[3] FIFO Full Interrupt Enable*/
#define LPUART_INTEN_RXFOIEN                                 ((uint32_t)0x00000004U)         /* Bit[2] FIFO Overflow Interrupt Enable*/
#define LPUART_INTEN_TXCIEN                                  ((uint32_t)0x00000002U)         /* Bit[1] TX Complete Interrupt Enable*/
#define LPUART_INTEN_PCEIEN                                  ((uint32_t)0x00000001U)         /* Bit[0] Parity Check Error Interrupt Enable*/

/******** Bit definition for LPUART_CTRL register  ********/
#define LPUART_CTRL_RXEN                                    ((uint32_t)0x01000000U)         /* Bit[24] RX Enable,1 Enable RX*/
#define LPUART_CTRL_RXNUMWU                            ((uint32_t)0x00F80000U)         /* Bit[23:19] can be configured to receive how many bytes of data to wake */
#define LPUART_CTRL_RXNUMWU_0                          ((uint32_t)0x00080000U)         /* Bit19*/
#define LPUART_CTRL_RXNUMWU_1                          ((uint32_t)0x00100000U)         /* Bit20*/
#define LPUART_CTRL_RXNUMWU_2                          ((uint32_t)0x00200000U)         /* Bit21*/
#define LPUART_CTRL_RXNUMWU_3                          ((uint32_t)0x00400000U)         /* Bit22*/
#define LPUART_CTRL_RXNUMWU_4                          ((uint32_t)0x00800000U)         /* Bit23*/
#define LPUART_CTRL_FTXF                               ((uint32_t)0x00040000U)         /* Bit[18] Flush transmit TXFIFO,1:Enable to Flush TXFIFO Content*/
#define LPUART_CTRL_IDLEFEN                            ((uint32_t)0x00020000U)         /* Bit[17] idle frame detect en,1:enable*/
#define LPUART_CTRL_SSM                                ((uint32_t)0x00010000U)         /* Bit[16] Specify the sampling method,1: 1 Sample*/
#define LPUART_CTRL_WUS                                ((uint32_t)0x0000F000U)         /* Bit[15:12] Wakeup Event Selection*/
#define LPUART_CTRL_WUS_0                              ((uint32_t)0x00001000U)         /* Bit12*/
#define LPUART_CTRL_WUS_1                              ((uint32_t)0x00002000U)         /* Bit13*/
#define LPUART_CTRL_WUS_2                              ((uint32_t)0x00004000U)         /* Bit14*/
#define LPUART_CTRL_WUS_3                              ((uint32_t)0x00008000U)         /* Bit15*/
#define LPUART_CTRL_RTSEN                              ((uint32_t)0x00000800U)         /* Bit[11] Hardware Flow Control RX Enable,1: Enable*/
#define LPUART_CTRL_CTSEN                              ((uint32_t)0x00000400U)         /* Bit[10] Hardware Flow Control TX Enable,1: Enable*/
#define LPUART_CTRL_RTST                               ((uint32_t)0x00000300U)         /* Bit[9:8] RTS Threshold*/
#define LPUART_CTRL_RTST_0                             ((uint32_t)0x00000100U)         /* Bit8*/
#define LPUART_CTRL_RTST_1                             ((uint32_t)0x00000200U)         /* Bit9*/
#define LPUART_CTRL_WUSTPEN                                 ((uint32_t)0x00000080U)         /* Bit[7] LPUART Wakeup Enable in Stop mode,1: Able to Wakeup in Stop mode*/
#define LPUART_CTRL_DMARXEN                                 ((uint32_t)0x00000040U)         /* Bit[6] DMA RX Request Enable*/
#define LPUART_CTRL_DMATXEN                                 ((uint32_t)0x00000020U)         /* Bit[5] DMA TX Request Enable*/
#define LPUART_CTRL_LB                                      ((uint32_t)0x00000010U)         /* Bit[4] LoopBack Self-Test,1: Loop Back Test*/
#define LPUART_CTRL_PC                                      ((uint32_t)0x00000008U)         /* Bit[3] Parity Control,1: Disabled Parity Bit*/
#define LPUART_CTRL_FRXF                                    ((uint32_t)0x00000004U)         /* Bit[2] Flush Receiver FIFO,1: Enable to Flush FIFO Content*/
#define LPUART_CTRL_TXEN                                    ((uint32_t)0x00000002U)         /* Bit[1] TX Enable,1: Enable TX*/
#define LPUART_CTRL_PEN                                     ((uint32_t)0x00000001U)         /* Bit[0] Odd Parity Bit Enable,1: Odd Parity Bit*/

/******** Bit definition for LPUART_BRCFG1 register  ********/
#define LPUART_BRCFG1_BRP                              ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Baud Rate Parameter Register*/
#define LPUART_BRCFG1_BRP_0                            ((uint32_t)0x00000001U)         /* Bit0*/
#define LPUART_BRCFG1_BRP_1                            ((uint32_t)0x00000002U)         /* Bit1*/
#define LPUART_BRCFG1_BRP_2                            ((uint32_t)0x00000004U)         /* Bit2*/
#define LPUART_BRCFG1_BRP_3                            ((uint32_t)0x00000008U)         /* Bit3*/
#define LPUART_BRCFG1_BRP_4                            ((uint32_t)0x00000010U)         /* Bit4*/
#define LPUART_BRCFG1_BRP_5                            ((uint32_t)0x00000020U)         /* Bit5*/
#define LPUART_BRCFG1_BRP_6                            ((uint32_t)0x00000040U)         /* Bit6*/
#define LPUART_BRCFG1_BRP_7                            ((uint32_t)0x00000080U)         /* Bit7*/
#define LPUART_BRCFG1_BRP_8                            ((uint32_t)0x00000100U)         /* Bit8*/
#define LPUART_BRCFG1_BRP_9                            ((uint32_t)0x00000200U)         /* Bit9*/
#define LPUART_BRCFG1_BRP_10                           ((uint32_t)0x00000400U)         /* Bit10*/
#define LPUART_BRCFG1_BRP_11                           ((uint32_t)0x00000800U)         /* Bit11*/
#define LPUART_BRCFG1_BRP_12                           ((uint32_t)0x00001000U)         /* Bit12*/
#define LPUART_BRCFG1_BRP_13                           ((uint32_t)0x00002000U)         /* Bit13*/
#define LPUART_BRCFG1_BRP_14                           ((uint32_t)0x00004000U)         /* Bit14*/
#define LPUART_BRCFG1_BRP_15                           ((uint32_t)0x00008000U)        /* Bit15*/

/******** Bit definition for LPUART_TXDAT register  ********/
#define LPUART_TXDAT_DAT                                ((uint32_t)0x000000FFU)         /* Bit[7:0] Write to Data Register for TXFIFO */
#define LPUART_TXDAT_DAT_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define LPUART_TXDAT_DAT_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define LPUART_TXDAT_DAT_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define LPUART_TXDAT_DAT_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define LPUART_TXDAT_DAT_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define LPUART_TXDAT_DAT_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define LPUART_TXDAT_DAT_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define LPUART_TXDAT_DAT_7                              ((uint32_t)0x00000080U)         /* Bit7*/

/******** Bit definition for LPUART_BRCFG2 register  ********/
#define LPUART_BRCFG2_MC                                ((uint32_t)0x000000FFU)         /* Bit[7:0] Modulation Control Register For Baud Rate Error Correction at Low */
#define LPUART_BRCFG2_MC_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define LPUART_BRCFG2_MC_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define LPUART_BRCFG2_MC_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define LPUART_BRCFG2_MC_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define LPUART_BRCFG2_MC_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define LPUART_BRCFG2_MC_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define LPUART_BRCFG2_MC_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define LPUART_BRCFG2_MC_7                              ((uint32_t)0x00000080U)         /* Bit7*/

/******** Bit definition for LPUART_WUDAT1 register  ********/
#define LPUART_WUDAT1_DAT                               ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Configure this register to detect byte or frame match for wakeup CPU from stop mode*/

/******** Bit definition for LPUART_WUDAT2 register  ********/
#define LPUART_WUDAT2_DAT                              ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Configure this register to detect byte or frame match for wakeup CPU from stop mode*/

/******** Bit definition for LPUART_RXDAT register  ********/
#define LPUART_RXDAT_DAT                                ((uint32_t)0x000000FFU)         /* Bit[7:0] Read this register to read RX data from RX FIFO*/
#define LPUART_RXDAT_DAT_0                              ((uint32_t)0x00000001U)         /* Bit0*/
#define LPUART_RXDAT_DAT_1                              ((uint32_t)0x00000002U)         /* Bit1*/
#define LPUART_RXDAT_DAT_2                              ((uint32_t)0x00000004U)         /* Bit2*/
#define LPUART_RXDAT_DAT_3                              ((uint32_t)0x00000008U)         /* Bit3*/
#define LPUART_RXDAT_DAT_4                              ((uint32_t)0x00000010U)         /* Bit4*/
#define LPUART_RXDAT_DAT_5                              ((uint32_t)0x00000020U)         /* Bit5*/
#define LPUART_RXDAT_DAT_6                              ((uint32_t)0x00000040U)         /* Bit6*/
#define LPUART_RXDAT_DAT_7                              ((uint32_t)0x00000080U)         /* Bit7*/

    

    /******************************************************************************/
    /*                                                                            */
    /*                            Backup registers                                */
    /*                                                                            */
    /******************************************************************************/

    /*******************  Bit definition for BKP_DR1 register  ********************/
#define  BKP_DR1_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR2 register  ********************/
#define  BKP_DR2_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR3 register  ********************/
#define  BKP_DR3_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR4 register  ********************/
#define  BKP_DR4_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR5 register  ********************/
#define  BKP_DR5_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR6 register  ********************/
#define  BKP_DR6_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR7 register  ********************/
#define  BKP_DR7_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR8 register  ********************/
#define  BKP_DR8_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR9 register  ********************/
#define  BKP_DR9_D                           ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR10 register  *******************/
#define  BKP_DR10_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR11 register  *******************/
#define  BKP_DR11_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR12 register  *******************/
#define  BKP_DR12_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR13 register  *******************/
#define  BKP_DR13_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR14 register  *******************/
#define  BKP_DR14_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR15 register  *******************/
#define  BKP_DR15_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR16 register  *******************/
#define  BKP_DR16_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR17 register  *******************/
#define  BKP_DR17_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /******************  Bit definition for BKP_DR18 register  ********************/
#define  BKP_DR18_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR19 register  *******************/
#define  BKP_DR19_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR20 register  *******************/
#define  BKP_DR20_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR21 register  *******************/
#define  BKP_DR21_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR22 register  *******************/
#define  BKP_DR22_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR23 register  *******************/
#define  BKP_DR23_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR24 register  *******************/
#define  BKP_DR24_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR25 register  *******************/
#define  BKP_DR25_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR26 register  *******************/
#define  BKP_DR26_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR27 register  *******************/
#define  BKP_DR27_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR28 register  *******************/
#define  BKP_DR28_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR29 register  *******************/
#define  BKP_DR29_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR30 register  *******************/
#define  BKP_DR30_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR31 register  *******************/
#define  BKP_DR31_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR32 register  *******************/
#define  BKP_DR32_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR33 register  *******************/
#define  BKP_DR33_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR34 register  *******************/
#define  BKP_DR34_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR35 register  *******************/
#define  BKP_DR35_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR36 register  *******************/
#define  BKP_DR36_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR37 register  *******************/
#define  BKP_DR37_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR38 register  *******************/
#define  BKP_DR38_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR39 register  *******************/
#define  BKP_DR39_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR40 register  *******************/
#define  BKP_DR40_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR41 register  *******************/
#define  BKP_DR41_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /*******************  Bit definition for BKP_DR42 register  *******************/
#define  BKP_DR42_D                          ((uint16_t)0xFFFF)     /*!< Backup data */

    /******************  Bit definition for BKP_RTCCR register  *******************/
#define  BKP_RTCCR_CAL                       ((uint16_t)0x007F)     /*!< Calibration value */
#define  BKP_RTCCR_CCO                       ((uint16_t)0x0080)     /*!< Calibration Clock Output */
#define  BKP_RTCCR_ASOE                      ((uint16_t)0x0100)     /*!< Alarm or Second Output Enable */
#define  BKP_RTCCR_ASOS                      ((uint16_t)0x0200)     /*!< Alarm or Second Output Selection */

    /********************  Bit definition for BKP_CR register  ********************/
#define  BKP_CR_TPE                          ((uint8_t)0x01)        /*!< TAMPER pin enable */
#define  BKP_CR_TPAL                         ((uint8_t)0x02)        /*!< TAMPER pin active level */

    /*******************  Bit definition for BKP_CSR register  ********************/
#define  BKP_CSR_CTE                         ((uint16_t)0x0001)     /*!< Clear Tamper event */
#define  BKP_CSR_CTI                         ((uint16_t)0x0002)     /*!< Clear Tamper Interrupt */
#define  BKP_CSR_TPIE                        ((uint16_t)0x0004)     /*!< TAMPER Pin interrupt enable */
#define  BKP_CSR_TEF                         ((uint16_t)0x0100)     /*!< Tamper Event Flag */
#define  BKP_CSR_TIF                         ((uint16_t)0x0200)     /*!< Tamper Interrupt Flag */



/***    Cylic Redundancy Check(CRC) Calculation Unit  ***/
/********************  Bit definition for CRC_DAT register  ********************/
#define CRC_DAT_DAT                 ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC data */

/********************  Bit definition for CRC_IDAT register  ********************/
#define CRC_IDAT_IDAT               ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC independent data */

/********************  Bit definition for CRC_CTRL register  ********************/
#define CRC_CTRL_RESET              ((uint32_t)0x00000001U) /* Bit[0] CRC calculation unit reset */

#define CRC_CTRL_BYTEENDIAN         ((uint32_t)0x00000006U) /* Bit[2:1] CRC byte Endian bits[1:0] */
#define CRC_CTRL_BYTEENDIAN_0       ((uint32_t)0x00000002U) /* Bit[1] CRC byte Endian bit0 */
#define CRC_CTRL_BYTEENDIAN_1       ((uint32_t)0x00000004U) /* Bit[2] CRC byte Endian bit1 */

#define CRC_CTRL_POLYSIZE           ((uint32_t)0x00000018U) /* Bit[4:3] CRC polynomial size bits[1:0] */
#define CRC_CTRL_POLYSIZE_0         ((uint32_t)0x00000008U) /* Bit[3] CRC polynomial size bit0 */
#define CRC_CTRL_POLYSIZE_1         ((uint32_t)0x00000010U) /* Bit[4] CRC polynomial size bit1 */

#define CRC_CTRL_REVIN              ((uint32_t)0x00000060U) /* Bit[6:5] CRC input data reverse bits[1:0] */
#define CRC_CTRL_REVIN_0            ((uint32_t)0x00000020U) /* Bit[5] CRC input data reverse bit0 */
#define CRC_CTRL_REVIN_1            ((uint32_t)0x00000040U) /* Bit[6] CRC input data reverse bit1 */

#define CRC_CTRL_REVOUT             ((uint32_t)0x00000080U) /* Bit[7] CRC output data reverse bit */

/********************  Bit definition for CRC_LRC register  ********************/
#define CRC_LRC_LRC                 ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC LRC value bits */

/*******************  Bit definition for CRC_INIT register  *******************/
#define CRC_INIT_INIT               ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC initial value bits */

/*******************  Bit definition for CRC_POL register  ********************/
#define CRC_POL_POL                 ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC pllynomial coefficients bits */

/*******************  Bit definition for CRC_INXORDAT register  ********************/
#define CRC_INXORDAT_INXOR          ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC XOR bits before calculation */

/*******************  Bit definition for CRC_OUTXORDAT register  ********************/
#define CRC_OUTXORDAT_OUTXOR        ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] CRC XOR bits after calculation */



    /******************************************************************************/
    /*                                                                            */
    /*                General Purpose and Alternate Function I/O                  */
    /*                                                                            */
    /******************************************************************************/

/******** Bit definition for GPIOx_PMODE register  ********/
#define GPIO_PMODE_PMODE0           ((uint32_t)0x00000003U) /* Port x Pin 0 mode bits */
#define GPIO_PMODE_PMODE0_0         ((uint32_t)0x00000001U) /* Port x Pin 0 mode bit 0 */
#define GPIO_PMODE_PMODE0_1         ((uint32_t)0x00000002U) /* Port x Pin 0 mode bit 1 */

#define GPIO_PMODE_PMODE1           ((uint32_t)0x0000000CU) /* Port x Pin 1 mode bits */
#define GPIO_PMODE_PMODE1_0         ((uint32_t)0x00000004U) /* Port x Pin 1 mode bit 0 */
#define GPIO_PMODE_PMODE1_1         ((uint32_t)0x00000008U) /* Port x Pin 1 mode bit 1 */

#define GPIO_PMODE_PMODE2           ((uint32_t)0x00000030U) /* Port x Pin 2 mode bits */
#define GPIO_PMODE_PMODE2_0         ((uint32_t)0x00000010U) /* Port x Pin 2 mode bit 0 */
#define GPIO_PMODE_PMODE2_1         ((uint32_t)0x00000020U) /* Port x Pin 2 mode bit 1 */

#define GPIO_PMODE_PMODE3           ((uint32_t)0x000000C0U) /* Port x Pin 3 mode bits */
#define GPIO_PMODE_PMODE3_0         ((uint32_t)0x00000040U) /* Port x Pin 3 mode bit 0 */
#define GPIO_PMODE_PMODE3_1         ((uint32_t)0x00000080U) /* Port x Pin 3 mode bit 1 */

#define GPIO_PMODE_PMODE4           ((uint32_t)0x00000300U) /* Port x Pin 4 mode bits */
#define GPIO_PMODE_PMODE4_0         ((uint32_t)0x00000100U) /* Port x Pin 4 mode bit 0 */
#define GPIO_PMODE_PMODE4_1         ((uint32_t)0x00000200U) /* Port x Pin 4 mode bit 1 */

#define GPIO_PMODE_PMODE5           ((uint32_t)0x00000C00U) /* Port x Pin 5 mode bits */
#define GPIO_PMODE_PMODE5_0         ((uint32_t)0x00000400U) /* Port x Pin 5 mode bit 0 */
#define GPIO_PMODE_PMODE5_1         ((uint32_t)0x00000800U) /* Port x Pin 5 mode bit 1 */

#define GPIO_PMODE_PMODE6           ((uint32_t)0x00003000U) /* Port x Pin 6 mode bits */
#define GPIO_PMODE_PMODE6_0         ((uint32_t)0x00001000U) /* Port x Pin 6 mode bit 0 */
#define GPIO_PMODE_PMODE6_1         ((uint32_t)0x00002000U) /* Port x Pin 6 mode bit 1 */

#define GPIO_PMODE_PMODE7           ((uint32_t)0x0000C000U) /* Port x Pin 7 mode bits */
#define GPIO_PMODE_PMODE7_0         ((uint32_t)0x00004000U) /* Port x Pin 7 mode bit 0 */
#define GPIO_PMODE_PMODE7_1         ((uint32_t)0x00008000U) /* Port x Pin 7 mode bit 1 */

#define GPIO_PMODE_PMODE8           ((uint32_t)0x00030000U) /* Port x Pin 8 mode bits */
#define GPIO_PMODE_PMODE8_0         ((uint32_t)0x00010000U) /* Port x Pin 8 mode bit 0 */
#define GPIO_PMODE_PMODE8_1         ((uint32_t)0x00020000U) /* Port x Pin 8 mode bit 1 */

#define GPIO_PMODE_PMODE9           ((uint32_t)0x000C0000U) /* Port x Pin 9 mode bits */
#define GPIO_PMODE_PMODE9_0         ((uint32_t)0x00040000U) /* Port x Pin 9 mode bit 0 */
#define GPIO_PMODE_PMODE9_1         ((uint32_t)0x00080000U) /* Port x Pin 9 mode bit 1 */

#define GPIO_PMODE_PMODE10          ((uint32_t)0x00300000U) /* Port x Pin 10 mode bits */
#define GPIO_PMODE_PMODE10_0        ((uint32_t)0x00100000U) /* Port x Pin 10 mode bit 0 */
#define GPIO_PMODE_PMODE10_1        ((uint32_t)0x00200000U) /* Port x Pin 10 mode bit 1 */

#define GPIO_PMODE_PMODE11          ((uint32_t)0x00C00000U) /* Port x Pin 11 mode bits */
#define GPIO_PMODE_PMODE11_0        ((uint32_t)0x00400000U) /* Port x Pin 11 mode bit 0 */
#define GPIO_PMODE_PMODE11_1        ((uint32_t)0x00800000U) /* Port x Pin 11 mode bit 1 */

#define GPIO_PMODE_PMODE12          ((uint32_t)0x03000000U) /* Port x Pin 12 mode bits */
#define GPIO_PMODE_PMODE12_0        ((uint32_t)0x01000000U) /* Port x Pin 12 mode bit 0 */
#define GPIO_PMODE_PMODE12_1        ((uint32_t)0x02000000U) /* Port x Pin 12 mode bit 1 */

#define GPIO_PMODE_PMODE13          ((uint32_t)0x0C000000U) /* Port x Pin 13 mode bits */
#define GPIO_PMODE_PMODE13_0        ((uint32_t)0x04000000U) /* Port x Pin 13 mode bit 0 */
#define GPIO_PMODE_PMODE13_1        ((uint32_t)0x08000000U) /* Port x Pin 13 mode bit 1 */

#define GPIO_PMODE_PMODE14          ((uint32_t)0x30000000U) /* Port x Pin 14 mode bits */
#define GPIO_PMODE_PMODE14_0        ((uint32_t)0x10000000U) /* Port x Pin 14 mode bit 0 */
#define GPIO_PMODE_PMODE14_1        ((uint32_t)0x20000000U) /* Port x Pin 14 mode bit 1 */

#define GPIO_PMODE_PMODE15          ((uint32_t)0xC0000000U) /* Port x Pin 15 mode bits */
#define GPIO_PMODE_PMODE15_0        ((uint32_t)0x40000000U) /* Port x Pin 15 mode bit 0 */
#define GPIO_PMODE_PMODE15_1        ((uint32_t)0x80000000U) /* Port x Pin 15 mode bit 1 */

#define GPIO_PMODE_INPUT            ((uint32_t)0x00000000U)  /* Input mode */
#define GPIO_PMODE_OUTPUT           ((uint32_t)0x00000001U)  /* General output mode */
#define GPIO_PMODE_AF_OUTPUT        ((uint32_t)0x00000002U)  /* Alternate output mode */
#define GPIO_PMODE_ANALOG           ((uint32_t)0x00000003U)  /* Analog mode */

    /******************  Bit definition for GPIO_POTYPE register  *****************/
#define GPIO_POTYPE_POT0            ((uint32_t)0x00000001U)  /* Port x Pin 0 output type bits */
#define GPIO_POTYPE_POT1            ((uint32_t)0x00000002U)  /* Port x Pin 1 output type bits */
#define GPIO_POTYPE_POT2            ((uint32_t)0x00000004U)  /* Port x Pin 2 output type bits */
#define GPIO_POTYPE_POT3            ((uint32_t)0x00000008U)  /* Port x Pin 3 output type bits */
#define GPIO_POTYPE_POT4            ((uint32_t)0x00000010U)  /* Port x Pin 4 output type bits */
#define GPIO_POTYPE_POT5            ((uint32_t)0x00000020U)  /* Port x Pin 5 output type bits */
#define GPIO_POTYPE_POT6            ((uint32_t)0x00000040U)  /* Port x Pin 6 output type bits */
#define GPIO_POTYPE_POT7            ((uint32_t)0x00000080U)  /* Port x Pin 7 output type bits */
#define GPIO_POTYPE_POT8            ((uint32_t)0x00000100U)  /* Port x Pin 8 output type bits */
#define GPIO_POTYPE_POT9            ((uint32_t)0x00000200U)  /* Port x Pin 9 output type bits */
#define GPIO_POTYPE_POT10           ((uint32_t)0x00000400U)  /* Port x Pin 10 output type bits */
#define GPIO_POTYPE_POT11           ((uint32_t)0x00000800U)  /* Port x Pin 11 output type bits */
#define GPIO_POTYPE_POT12           ((uint32_t)0x00001000U)  /* Port x Pin 12 output type bits */
#define GPIO_POTYPE_POT13           ((uint32_t)0x00002000U)  /* Port x Pin 13 output type bits */
#define GPIO_POTYPE_POT14           ((uint32_t)0x00004000U)  /* Port x Pin 14 output type bits */
#define GPIO_POTYPE_POT15           ((uint32_t)0x00008000U)  /* Port x Pin 15 output type bits */

#define GPIO_POTYPE_PUSH_PULL       ((uint32_t)0x00000000U)
#define GPIO_POTYPE_OPEN_DRAIN      ((uint32_t)0x00000001U)

/** Bit definition for GPIO_SR register **/
#define GPIO_SR_SR0                 ((uint32_t)0x00000001U) /* Port x Pin 0 Slew rate bit  */
#define GPIO_SR_SR1                 ((uint32_t)0x00000002U) /* Port x Pin 1 Slew rate bit  */
#define GPIO_SR_SR2                 ((uint32_t)0x00000004U) /* Port x Pin 2 Slew rate bit  */
#define GPIO_SR_SR3                 ((uint32_t)0x00000008U) /* Port x Pin 3 Slew rate bit  */
#define GPIO_SR_SR4                 ((uint32_t)0x00000010U) /* Port x Pin 4 Slew rate bit  */
#define GPIO_SR_SR5                 ((uint32_t)0x00000020U) /* Port x Pin 5 Slew rate bit  */
#define GPIO_SR_SR6                 ((uint32_t)0x00000040U) /* Port x Pin 6 Slew rate bit  */
#define GPIO_SR_SR7                 ((uint32_t)0x00000080U) /* Port x Pin 7 Slew rate bit  */
#define GPIO_SR_SR8                 ((uint32_t)0x00000100U) /* Port x Pin 8 Slew rate bit  */
#define GPIO_SR_SR9                 ((uint32_t)0x00000200U) /* Port x Pin 9 Slew rate bit  */
#define GPIO_SR_SR10                ((uint32_t)0x00000400U) /* Port x Pin 10 Slew rate bit  */
#define GPIO_SR_SR11                ((uint32_t)0x00000800U) /* Port x Pin 11 Slew rate bit  */
#define GPIO_SR_SR12                ((uint32_t)0x00001000U) /* Port x Pin 12 Slew rate bit  */
#define GPIO_SR_SR13                ((uint32_t)0x00002000U) /* Port x Pin 13 Slew rate bit  */
#define GPIO_SR_SR14                ((uint32_t)0x00004000U) /* Port x Pin 14 Slew rate bit  */
#define GPIO_SR_SR15                ((uint32_t)0x00008000U) /* Port x Pin 15 Slew rate bit  */

#define GPIO_SR_FAST_SLEW           ((uint32_t)0x00000000U) /* Fast slew rate */
#define GPIO_SR_SLOW_SLEW           ((uint32_t)0x00000001U) /* Slow slew rate */

/** Bit definition for GPIO_PUPD register **/
#define GPIO_PUPD_PUPD0             ((uint32_t)0x00000003U)  /* Port x Pin 0 pull control bits */
#define GPIO_PUPD_PUPD0_0           ((uint32_t)0x00000001U)  /* Port x Pin 0 pull control bit 0 */
#define GPIO_PUPD_PUPD0_1           ((uint32_t)0x00000002U)  /* Port x Pin 0 pull control bit 1 */

#define GPIO_PUPD_PUPD1             ((uint32_t)0x0000000CU)  /* Port x Pin 1 pull control bits */
#define GPIO_PUPD_PUPD1_0           ((uint32_t)0x00000004U)  /* Port x Pin 1 pull control bit 0 */
#define GPIO_PUPD_PUPD1_1           ((uint32_t)0x00000008U)  /* Port x Pin 1 pull control bit 1 */

#define GPIO_PUPD_PUPD2             ((uint32_t)0x00000030U)  /* Port x Pin 2 pull control bits */
#define GPIO_PUPD_PUPD2_0           ((uint32_t)0x00000010U)  /* Port x Pin 2 pull control bit 0 */
#define GPIO_PUPD_PUPD2_1           ((uint32_t)0x00000020U)  /* Port x Pin 2 pull control bit 1 */

#define GPIO_PUPD_PUPD3             ((uint32_t)0x000000C0U)  /* Port x Pin 3 pull control bits */
#define GPIO_PUPD_PUPD3_0           ((uint32_t)0x00000040U)  /* Port x Pin 3 pull control bit 0 */
#define GPIO_PUPD_PUPD3_1           ((uint32_t)0x00000080U)  /* Port x Pin 3 pull control bit 1 */

#define GPIO_PUPD_PUPD4             ((uint32_t)0x00000300U)  /* Port x Pin 4 pull control bits */
#define GPIO_PUPD_PUPD4_0           ((uint32_t)0x00000100U)  /* Port x Pin 4 pull control bit 0 */
#define GPIO_PUPD_PUPD4_1           ((uint32_t)0x00000200U)  /* Port x Pin 4 pull control bit 1 */

#define GPIO_PUPD_PUPD5             ((uint32_t)0x00000C00U)  /* Port x Pin 5 pull control bits */
#define GPIO_PUPD_PUPD5_0           ((uint32_t)0x00000400U)  /* Port x Pin 5 pull control bit 0 */
#define GPIO_PUPD_PUPD5_1           ((uint32_t)0x00000800U)  /* Port x Pin 5 pull control bit 1 */

#define GPIO_PUPD_PUPD6             ((uint32_t)0x00003000U)  /* Port x Pin 6 pull control bits */
#define GPIO_PUPD_PUPD6_0           ((uint32_t)0x00001000U)  /* Port x Pin 6 pull control bit 0 */
#define GPIO_PUPD_PUPD6_1           ((uint32_t)0x00002000U)  /* Port x Pin 6 pull control bit 1 */

#define GPIO_PUPD_PUPD7             ((uint32_t)0x0000C000U)  /* Port x Pin 7 pull control bits */
#define GPIO_PUPD_PUPD7_0           ((uint32_t)0x00004000U)  /* Port x Pin 7 pull control bit 0 */
#define GPIO_PUPD_PUPD7_1           ((uint32_t)0x00008000U)  /* Port x Pin 7 pull control bit 1 */

#define GPIO_PUPD_PUPD8             ((uint32_t)0x00030000U)  /* Port x Pin 8 pull control bits */
#define GPIO_PUPD_PUPD8_0           ((uint32_t)0x00010000U)  /* Port x Pin 8 pull control bit 0 */
#define GPIO_PUPD_PUPD8_1           ((uint32_t)0x00020000U)  /* Port x Pin 8 pull control bit 1 */

#define GPIO_PUPD_PUPD9             ((uint32_t)0x000C0000U)  /* Port x Pin 9 pull control bits */
#define GPIO_PUPD_PUPD9_0           ((uint32_t)0x00040000U)  /* Port x Pin 9 pull control bit 0 */
#define GPIO_PUPD_PUPD9_1           ((uint32_t)0x00080000U)  /* Port x Pin 9 pull control bit 1 */

#define GPIO_PUPD_PUPD10            ((uint32_t)0x00300000U)  /* Port x Pin 10 pull control bits */
#define GPIO_PUPD_PUPD10_0          ((uint32_t)0x00100000U)  /* Port x Pin 10 pull control bit 0 */
#define GPIO_PUPD_PUPD10_1          ((uint32_t)0x00200000U)  /* Port x Pin 10 pull control bit 1 */

#define GPIO_PUPD_PUPD11            ((uint32_t)0x00C00000U)  /* Port x Pin 11 pull control bits */
#define GPIO_PUPD_PUPD11_0          ((uint32_t)0x00400000U)  /* Port x Pin 11 pull control bit 0 */
#define GPIO_PUPD_PUPD11_1          ((uint32_t)0x00800000U)  /* Port x Pin 11 pull control bit 1 */

#define GPIO_PUPD_PUPD12            ((uint32_t)0x03000000U)  /* Port x Pin 12 pull control bits */
#define GPIO_PUPD_PUPD12_0          ((uint32_t)0x01000000U)  /* Port x Pin 12 pull control bit 0 */
#define GPIO_PUPD_PUPD12_1          ((uint32_t)0x02000000U)  /* Port x Pin 12 pull control bit 1 */

#define GPIO_PUPD_PUPD13            ((uint32_t)0x0C000000U)  /* Port x Pin 13 pull control bits */
#define GPIO_PUPD_PUPD13_0          ((uint32_t)0x04000000U)  /* Port x Pin 13 pull control bit 0 */
#define GPIO_PUPD_PUPD13_1          ((uint32_t)0x08000000U)  /* Port x Pin 13 pull control bit 1 */

#define GPIO_PUPD_PUPD14            ((uint32_t)0x30000000U)  /* Port x Pin 14 pull control bits */
#define GPIO_PUPD_PUPD14_0          ((uint32_t)0x10000000U)  /* Port x Pin 14 pull control bit 0 */
#define GPIO_PUPD_PUPD14_1          ((uint32_t)0x20000000U)  /* Port x Pin 14 pull control bit 1 */

#define GPIO_PUPD_PUPD15            ((uint32_t)0xC0000000U)  /* Port x Pin 15 pull control bits */
#define GPIO_PUPD_PUPD15_0          ((uint32_t)0x40000000U)  /* Port x Pin 15 pull control bit 0 */
#define GPIO_PUPD_PUPD15_1          ((uint32_t)0x80000000U)  /* Port x Pin 15 pull control bit 1 */


#define GPIO_PUPD_NO_PULL           ((uint32_t)0x00000000U)  /* No pull */
#define GPIO_PUPD_PULL_UP           ((uint32_t)0x00000001U)  /* Pull up*/
#define GPIO_PUPD_PULL_DOWN         ((uint32_t)0x00000002U)  /* Pull down */

/** Bit definition for GPIO_PID register **/
#define GPIO_PID_PID0               ((uint16_t)0x0001U) /* Port x Pin 0 input bit */
#define GPIO_PID_PID1               ((uint16_t)0x0002U) /* Port x Pin 1 input bit */
#define GPIO_PID_PID2               ((uint16_t)0x0004U) /* Port x Pin 2 input bit */
#define GPIO_PID_PID3               ((uint16_t)0x0008U) /* Port x Pin 3 input bit */
#define GPIO_PID_PID4               ((uint16_t)0x0010U) /* Port x Pin 4 input bit */
#define GPIO_PID_PID5               ((uint16_t)0x0020U) /* Port x Pin 5 input bit */
#define GPIO_PID_PID6               ((uint16_t)0x0040U) /* Port x Pin 6 input bit */
#define GPIO_PID_PID7               ((uint16_t)0x0080U) /* Port x Pin 7 input bit */
#define GPIO_PID_PID8               ((uint16_t)0x0100U) /* Port x Pin 8 input bit */
#define GPIO_PID_PID9               ((uint16_t)0x0200U) /* Port x Pin 9 input bit */
#define GPIO_PID_PID10              ((uint16_t)0x0400U) /* Port x Pin 10 input bit */
#define GPIO_PID_PID11              ((uint16_t)0x0800U) /* Port x Pin 11 input bit */
#define GPIO_PID_PID12              ((uint16_t)0x1000U) /* Port x Pin 12 input bit */
#define GPIO_PID_PID13              ((uint16_t)0x2000U) /* Port x Pin 13 input bit */
#define GPIO_PID_PID14              ((uint16_t)0x4000U) /* Port x Pin 14 input bit */
#define GPIO_PID_PID15              ((uint16_t)0x8000U) /* Port x Pin 15 input bit */

/** Bit definition for GPIO_POD register **/
#define GPIO_POD_POD0               ((uint16_t)0x0001U) /* Port x Pin 0 output bit */
#define GPIO_POD_POD1               ((uint16_t)0x0002U) /* Port x Pin 1 output bit */
#define GPIO_POD_POD2               ((uint16_t)0x0004U) /* Port x Pin 2 output bit */
#define GPIO_POD_POD3               ((uint16_t)0x0008U) /* Port x Pin 3 output bit */
#define GPIO_POD_POD4               ((uint16_t)0x0010U) /* Port x Pin 4 output bit */
#define GPIO_POD_POD5               ((uint16_t)0x0020U) /* Port x Pin 5 output bit */
#define GPIO_POD_POD6               ((uint16_t)0x0040U) /* Port x Pin 6 output bit */
#define GPIO_POD_POD7               ((uint16_t)0x0080U) /* Port x Pin 7 output bit */
#define GPIO_POD_POD8               ((uint16_t)0x0100U) /* Port x Pin 8 output bit */
#define GPIO_POD_POD9               ((uint16_t)0x0200U) /* Port x Pin 9 output bit */
#define GPIO_POD_POD10              ((uint16_t)0x0400U) /* Port x Pin 10 output bit */
#define GPIO_POD_POD11              ((uint16_t)0x0800U) /* Port x Pin 11 output bit */
#define GPIO_POD_POD12              ((uint16_t)0x1000U) /* Port x Pin 12 output bit */
#define GPIO_POD_POD13              ((uint16_t)0x2000U) /* Port x Pin 13 output bit */
#define GPIO_POD_POD14              ((uint16_t)0x4000U) /* Port x Pin 14 output bit */
#define GPIO_POD_POD15              ((uint16_t)0x8000U) /* Port x Pin 15 output bit */

/** Bit definition for GPIO_PBSC register **/
#define GPIO_PBSC_PBS0              ((uint32_t)0x00000001U) /* Port x Pin 0 Set bit 0 */
#define GPIO_PBSC_PBS1              ((uint32_t)0x00000002U) /* Port x Pin 1 Set bit 1 */
#define GPIO_PBSC_PBS2              ((uint32_t)0x00000004U) /* Port x Pin 2 Set bit 2 */
#define GPIO_PBSC_PBS3              ((uint32_t)0x00000008U) /* Port x Pin 3 Set bit 3 */
#define GPIO_PBSC_PBS4              ((uint32_t)0x00000010U) /* Port x Pin 4 Set bit 4 */
#define GPIO_PBSC_PBS5              ((uint32_t)0x00000020U) /* Port x Pin 5 Set bit 5 */
#define GPIO_PBSC_PBS6              ((uint32_t)0x00000040U) /* Port x Pin 6 Set bit 6 */
#define GPIO_PBSC_PBS7              ((uint32_t)0x00000080U) /* Port x Pin 7 Set bit 7 */
#define GPIO_PBSC_PBS8              ((uint32_t)0x00000100U) /* Port x Pin 8 Set bit 8 */
#define GPIO_PBSC_PBS9              ((uint32_t)0x00000200U) /* Port x Pin 9 Set bit 9 */
#define GPIO_PBSC_PBS10             ((uint32_t)0x00000400U) /* Port x Pin 10 Set bit 10 */
#define GPIO_PBSC_PBS11             ((uint32_t)0x00000800U) /* Port x Pin 11 Set bit 11 */
#define GPIO_PBSC_PBS12             ((uint32_t)0x00001000U) /* Port x Pin 12 Set bit 12 */
#define GPIO_PBSC_PBS13             ((uint32_t)0x00002000U) /* Port x Pin 13 Set bit 13 */
#define GPIO_PBSC_PBS14             ((uint32_t)0x00004000U) /* Port x Pin 14 Set bit 14 */
#define GPIO_PBSC_PBS15             ((uint32_t)0x00008000U) /* Port x Pin 15 Set bit 15 */

#define GPIO_PBSC_PBC0              ((uint32_t)0x00010000U) /* Port x Pin 0 Reset bit 0 */
#define GPIO_PBSC_PBC1              ((uint32_t)0x00020000U) /* Port x Pin 1 Reset bit 1 */
#define GPIO_PBSC_PBC2              ((uint32_t)0x00040000U) /* Port x Pin 2 Reset bit 2 */
#define GPIO_PBSC_PBC3              ((uint32_t)0x00080000U) /* Port x Pin 3 Reset bit 3 */
#define GPIO_PBSC_PBC4              ((uint32_t)0x00100000U) /* Port x Pin 4 Reset bit 4 */
#define GPIO_PBSC_PBC5              ((uint32_t)0x00200000U) /* Port x Pin 5 Reset bit 5 */
#define GPIO_PBSC_PBC6              ((uint32_t)0x00400000U) /* Port x Pin 6 Reset bit 6 */
#define GPIO_PBSC_PBC7              ((uint32_t)0x00800000U) /* Port x Pin 7 Reset bit 7 */
#define GPIO_PBSC_PBC8              ((uint32_t)0x01000000U) /* Port x Pin 8 Reset bit 8 */
#define GPIO_PBSC_PBC9              ((uint32_t)0x02000000U) /* Port x Pin 9 Reset bit 9 */
#define GPIO_PBSC_PBC10             ((uint32_t)0x04000000U) /* Port x Pin 10 Reset bit 10 */
#define GPIO_PBSC_PBC11             ((uint32_t)0x08000000U) /* Port x Pin 11 Reset bit 11 */
#define GPIO_PBSC_PBC12             ((uint32_t)0x10000000U) /* Port x Pin 12 Reset bit 12 */
#define GPIO_PBSC_PBC13             ((uint32_t)0x20000000U) /* Port x Pin 13 Reset bit 13 */
#define GPIO_PBSC_PBC14             ((uint32_t)0x40000000U) /* Port x Pin 14 Reset bit 14 */
#define GPIO_PBSC_PBC15             ((uint32_t)0x80000000U) /* Port x Pin 15 Reset bit 15 */

/** Bit definition for GPIO_PLOCK register **/
#define GPIO_PLOCK_PLOCK0           ((uint32_t)0x00000001U) /* Port x Pin 0 Lock bit */
#define GPIO_PLOCK_PLOCK1           ((uint32_t)0x00000002U) /* Port x Pin 1 Lock bit */
#define GPIO_PLOCK_PLOCK2           ((uint32_t)0x00000004U) /* Port x Pin 2 Lock bit */
#define GPIO_PLOCK_PLOCK3           ((uint32_t)0x00000008U) /* Port x Pin 3 Lock bit */
#define GPIO_PLOCK_PLOCK4           ((uint32_t)0x00000010U) /* Port x Pin 4 Lock bit */
#define GPIO_PLOCK_PLOCK5           ((uint32_t)0x00000020U) /* Port x Pin 5 Lock bit */
#define GPIO_PLOCK_PLOCK6           ((uint32_t)0x00000040U) /* Port x Pin 6 Lock bit */
#define GPIO_PLOCK_PLOCK7           ((uint32_t)0x00000080U) /* Port x Pin 7 Lock bit */
#define GPIO_PLOCK_PLOCK8           ((uint32_t)0x00000100U) /* Port x Pin 8 Lock bit */
#define GPIO_PLOCK_PLOCK9           ((uint32_t)0x00000200U) /* Port x Pin 9 Lock bit */
#define GPIO_PLOCK_PLOCK10          ((uint32_t)0x00000400U) /* Port x Pin 10 Lock bit */
#define GPIO_PLOCK_PLOCK11          ((uint32_t)0x00000800U) /* Port x Pin 11 Lock bit */
#define GPIO_PLOCK_PLOCK12          ((uint32_t)0x00001000U) /* Port x Pin 12 Lock bit */
#define GPIO_PLOCK_PLOCK13          ((uint32_t)0x00002000U) /* Port x Pin 13 Lock bit */
#define GPIO_PLOCK_PLOCK14          ((uint32_t)0x00004000U) /* Port x Pin 14 Lock bit */
#define GPIO_PLOCK_PLOCK15          ((uint32_t)0x00008000U) /* Port x Pin 15 Lock bit */
#define GPIO_PLOCK_PLOCKK           ((uint32_t)0x00010000U) /* Port x Lock key */

/******** Bit definition for GPIOx_AFRL register  ********/
#define GPIOx_AFRL_AFSEL7           ((uint32_t)0xF0000000)         /* Bit[31:28] */
#define GPIOx_AFRL_AFSEL7_0         ((uint32_t)0x10000000)         /* Bit28*/
#define GPIOx_AFRL_AFSEL7_1         ((uint32_t)0x20000000)         /* Bit29*/
#define GPIOx_AFRL_AFSEL7_2         ((uint32_t)0x40000000)         /* Bit30*/
#define GPIOx_AFRL_AFSEL7_3         ((uint32_t)0x80000000)         /* Bit31*/
#define GPIOx_AFRL_AFSEL6           ((uint32_t)0x0F000000)         /* Bit[27:24] */
#define GPIOx_AFRL_AFSEL6_0         ((uint32_t)0x01000000)         /* Bit24*/
#define GPIOx_AFRL_AFSEL6_1         ((uint32_t)0x02000000)         /* Bit25*/
#define GPIOx_AFRL_AFSEL6_2         ((uint32_t)0x04000000)         /* Bit26*/
#define GPIOx_AFRL_AFSEL6_3         ((uint32_t)0x08000000)         /* Bit27*/
#define GPIOx_AFRL_AFSEL5           ((uint32_t)0x00F00000)         /* Bit[23:20] */
#define GPIOx_AFRL_AFSEL5_0         ((uint32_t)0x00100000)         /* Bit20*/
#define GPIOx_AFRL_AFSEL5_1         ((uint32_t)0x00200000)         /* Bit21*/
#define GPIOx_AFRL_AFSEL5_2         ((uint32_t)0x00400000)         /* Bit22*/
#define GPIOx_AFRL_AFSEL5_3         ((uint32_t)0x00800000)         /* Bit23*/
#define GPIOx_AFRL_AFSEL4           ((uint32_t)0x000F0000)         /* Bit[19:16] */
#define GPIOx_AFRL_AFSEL4_0         ((uint32_t)0x00010000)         /* Bit16*/
#define GPIOx_AFRL_AFSEL4_1         ((uint32_t)0x00020000)         /* Bit17*/
#define GPIOx_AFRL_AFSEL4_2         ((uint32_t)0x00040000)         /* Bit18*/
#define GPIOx_AFRL_AFSEL4_3         ((uint32_t)0x00080000)         /* Bit19*/
#define GPIOx_AFRL_AFSEL3           ((uint32_t)0x0000F000)         /* Bit[15:12] */
#define GPIOx_AFRL_AFSEL3_0         ((uint32_t)0x00001000)         /* Bit12*/
#define GPIOx_AFRL_AFSEL3_1         ((uint32_t)0x00002000)         /* Bit13*/
#define GPIOx_AFRL_AFSEL3_2         ((uint32_t)0x00004000)         /* Bit14*/
#define GPIOx_AFRL_AFSEL3_3         ((uint32_t)0x00008000)         /* Bit15*/
#define GPIOx_AFRL_AFSEL2           ((uint32_t)0x00000F00)         /* Bit[11:8] */
#define GPIOx_AFRL_AFSEL2_0         ((uint32_t)0x00000100)         /* Bit8*/
#define GPIOx_AFRL_AFSEL2_1         ((uint32_t)0x00000200)         /* Bit9*/
#define GPIOx_AFRL_AFSEL2_2         ((uint32_t)0x00000400)         /* Bit10*/
#define GPIOx_AFRL_AFSEL2_3         ((uint32_t)0x00000800)         /* Bit11*/
#define GPIOx_AFRL_AFSEL1           ((uint32_t)0x000000F0)         /* Bit[7:4] */
#define GPIOx_AFRL_AFSEL1_0         ((uint32_t)0x00000010)         /* Bit4*/
#define GPIOx_AFRL_AFSEL1_1         ((uint32_t)0x00000020)         /* Bit5*/
#define GPIOx_AFRL_AFSEL1_2         ((uint32_t)0x00000040)         /* Bit6*/
#define GPIOx_AFRL_AFSEL1_3         ((uint32_t)0x00000080)         /* Bit7*/
#define GPIOx_AFRL_AFSEL0           ((uint32_t)0x0000000F)         /* Bit[3:0] */
#define GPIOx_AFRL_AFSEL0_0         ((uint32_t)0x00000001)         /* Bit0*/
#define GPIOx_AFRL_AFSEL0_1         ((uint32_t)0x00000002)         /* Bit1*/
#define GPIOx_AFRL_AFSEL0_2         ((uint32_t)0x00000004)         /* Bit2*/
#define GPIOx_AFRL_AFSEL0_3         ((uint32_t)0x00000008)         /* Bit3*/

/******** Bit definition for GPIOx_AFRH register  ********/
#define GPIOx_AFRH_AFSEL15          ((uint32_t)0xF0000000)         /* Bit[31:28] */
#define GPIOx_AFRH_AFSEL15_0        ((uint32_t)0x10000000)         /* Bit28*/
#define GPIOx_AFRH_AFSEL15_1        ((uint32_t)0x20000000)         /* Bit29*/
#define GPIOx_AFRH_AFSEL15_2        ((uint32_t)0x40000000)         /* Bit30*/
#define GPIOx_AFRH_AFSEL15_3        ((uint32_t)0x80000000)         /* Bit31*/
#define GPIOx_AFRH_AFSEL14          ((uint32_t)0x0F000000)         /* Bit[27:24] */
#define GPIOx_AFRH_AFSEL14_0        ((uint32_t)0x01000000)         /* Bit24*/
#define GPIOx_AFRH_AFSEL14_1        ((uint32_t)0x02000000)         /* Bit25*/
#define GPIOx_AFRH_AFSEL14_2        ((uint32_t)0x04000000)         /* Bit26*/
#define GPIOx_AFRH_AFSEL14_3        ((uint32_t)0x08000000)         /* Bit27*/
#define GPIOx_AFRH_AFSEL13          ((uint32_t)0x00F00000)         /* Bit[23:20] */
#define GPIOx_AFRH_AFSEL13_0        ((uint32_t)0x00100000)         /* Bit20*/
#define GPIOx_AFRH_AFSEL13_1        ((uint32_t)0x00200000)         /* Bit21*/
#define GPIOx_AFRH_AFSEL13_2        ((uint32_t)0x00400000)         /* Bit22*/
#define GPIOx_AFRH_AFSEL13_3        ((uint32_t)0x00800000)         /* Bit23*/
#define GPIOx_AFRH_AFSEL12          ((uint32_t)0x000F0000)         /* Bit[19:16] */
#define GPIOx_AFRH_AFSEL12_0        ((uint32_t)0x00010000)         /* Bit16*/
#define GPIOx_AFRH_AFSEL12_1        ((uint32_t)0x00020000)         /* Bit17*/
#define GPIOx_AFRH_AFSEL12_2        ((uint32_t)0x00040000)         /* Bit18*/
#define GPIOx_AFRH_AFSEL12_3        ((uint32_t)0x00080000)         /* Bit19*/
#define GPIOx_AFRH_AFSEL11          ((uint32_t)0x0000F000)         /* Bit[15:12] */
#define GPIOx_AFRH_AFSEL11_0        ((uint32_t)0x00001000)         /* Bit12*/
#define GPIOx_AFRH_AFSEL11_1        ((uint32_t)0x00002000)         /* Bit13*/
#define GPIOx_AFRH_AFSEL11_2        ((uint32_t)0x00004000)         /* Bit14*/
#define GPIOx_AFRH_AFSEL11_3        ((uint32_t)0x00008000)         /* Bit15*/
#define GPIOx_AFRH_AFSEL10          ((uint32_t)0x00000F00)         /* Bit[11:8] */
#define GPIOx_AFRH_AFSEL10_0        ((uint32_t)0x00000100)         /* Bit8*/
#define GPIOx_AFRH_AFSEL10_1        ((uint32_t)0x00000200)         /* Bit9*/
#define GPIOx_AFRH_AFSEL10_2        ((uint32_t)0x00000400)         /* Bit10*/
#define GPIOx_AFRH_AFSEL10_3        ((uint32_t)0x00000800)         /* Bit11*/
#define GPIOx_AFRH_AFSEL9           ((uint32_t)0x000000F0)         /* Bit[7:4] */
#define GPIOx_AFRH_AFSEL9_0         ((uint32_t)0x00000010)         /* Bit4*/
#define GPIOx_AFRH_AFSEL9_1         ((uint32_t)0x00000020)         /* Bit5*/
#define GPIOx_AFRH_AFSEL9_2         ((uint32_t)0x00000040)         /* Bit6*/
#define GPIOx_AFRH_AFSEL9_3         ((uint32_t)0x00000080)         /* Bit7*/
#define GPIOx_AFRH_AFSEL8           ((uint32_t)0x0000000F)         /* Bit[3:0] */
#define GPIOx_AFRH_AFSEL8_0         ((uint32_t)0x00000001)         /* Bit0*/
#define GPIOx_AFRH_AFSEL8_1         ((uint32_t)0x00000002)         /* Bit1*/
#define GPIOx_AFRH_AFSEL8_2         ((uint32_t)0x00000004)         /* Bit2*/
#define GPIOx_AFRH_AFSEL8_3         ((uint32_t)0x00000008)         /* Bit3*/


#define GPIO_AFSEL_AF0              ((uint32_t)0x00000000U)  /* Alternate function 0  */
#define GPIO_AFSEL_AF1              ((uint32_t)0x00000001U)  /* Alternate function 1  */
#define GPIO_AFSEL_AF2              ((uint32_t)0x00000002U)  /* Alternate function 2  */
#define GPIO_AFSEL_AF3              ((uint32_t)0x00000003U)  /* Alternate function 3  */
#define GPIO_AFSEL_AF4              ((uint32_t)0x00000004U)  /* Alternate function 4  */
#define GPIO_AFSEL_AF5              ((uint32_t)0x00000005U)  /* Alternate function 5  */
#define GPIO_AFSEL_AF6              ((uint32_t)0x00000006U)  /* Alternate function 6  */
#define GPIO_AFSEL_AF7              ((uint32_t)0x00000007U)  /* Alternate function 7  */
#define GPIO_AFSEL_AF8              ((uint32_t)0x00000008U)  /* Alternate function 8  */
#define GPIO_AFSEL_AF9              ((uint32_t)0x00000009U)  /* Alternate function 9  */
#define GPIO_AFSEL_AF10             ((uint32_t)0x0000000AU)  /* Alternate function 10 */
#define GPIO_AFSEL_AF11             ((uint32_t)0x0000000BU)  /* Alternate function 11 */
#define GPIO_AFSEL_AF12             ((uint32_t)0x0000000CU)  /* Alternate function 12 */
#define GPIO_AFSEL_AF13             ((uint32_t)0x0000000DU)  /* Alternate function 13 */
#define GPIO_AFSEL_AF14             ((uint32_t)0x0000000EU)  /* Alternate function 14 */
#define GPIO_AFSEL_AF15             ((uint32_t)0x0000000FU)  /* Alternate function 15 */

/** Bit definition for GPIO_PBC register **/
#define GPIO_PBC_PBC0               ((uint16_t)0x0001U) /* Port x Pin 0 Reset bit 0 */
#define GPIO_PBC_PBC1               ((uint16_t)0x0002U) /* Port x Pin 1 Reset bit 1 */
#define GPIO_PBC_PBC2               ((uint16_t)0x0004U) /* Port x Pin 2 Reset bit 2 */
#define GPIO_PBC_PBC3               ((uint16_t)0x0008U) /* Port x Pin 3 Reset bit 3 */
#define GPIO_PBC_PBC4               ((uint16_t)0x0010U) /* Port x Pin 4 Reset bit 4 */
#define GPIO_PBC_PBC5               ((uint16_t)0x0020U) /* Port x Pin 5 Reset bit 5 */
#define GPIO_PBC_PBC6               ((uint16_t)0x0040U) /* Port x Pin 6 Reset bit 6 */
#define GPIO_PBC_PBC7               ((uint16_t)0x0080U) /* Port x Pin 7 Reset bit 7 */
#define GPIO_PBC_PBC8               ((uint16_t)0x0100U) /* Port x Pin 8 Reset bit 8 */
#define GPIO_PBC_PBC9               ((uint16_t)0x0200U) /* Port x Pin 9 Reset bit 9 */
#define GPIO_PBC_PBC10              ((uint16_t)0x0400U) /* Port x Pin 10 Reset bit 10 */
#define GPIO_PBC_PBC11              ((uint16_t)0x0800U) /* Port x Pin 11 Reset bit 11 */
#define GPIO_PBC_PBC12              ((uint16_t)0x1000U) /* Port x Pin 12 Reset bit 12 */
#define GPIO_PBC_PBC13              ((uint16_t)0x2000U) /* Port x Pin 13 Reset bit 13 */
#define GPIO_PBC_PBC14              ((uint16_t)0x4000U) /* Port x Pin 14 Reset bit 14 */
#define GPIO_PBC_PBC15              ((uint16_t)0x8000U) /* Port x Pin 15 Reset bit 15 */

/** Bit definition for GPIO_DS register **/
#define GPIO_DS_DS0                 ((uint32_t)0x00000003U) /* Port x Pin 0 Drive bitS */
#define GPIO_DS_DS0_0               ((uint32_t)0x00000001U) /* Port x Pin 0 Drive bit 0 */
#define GPIO_DS_DS0_1               ((uint32_t)0x00000002U) /* Port x Pin 0 Drive bit 1 */

#define GPIO_DS_DS1                 ((uint32_t)0x0000000CU) /* Port x Pin 1 Drive bitS */
#define GPIO_DS_DS1_0               ((uint32_t)0x00000004U) /* Port x Pin 1 Drive bit 0 */
#define GPIO_DS_DS1_1               ((uint32_t)0x00000008U) /* Port x Pin 1 Drive bit 1 */

#define GPIO_DS_DS2                 ((uint32_t)0x00000030U) /* Port x Pin 2 Drive bitS */
#define GPIO_DS_DS2_0               ((uint32_t)0x00000010U) /* Port x Pin 2 Drive bit 0 */
#define GPIO_DS_DS2_1               ((uint32_t)0x00000020U) /* Port x Pin 2 Drive bit 1 */

#define GPIO_DS_DS3                 ((uint32_t)0x000000C0U) /* Port x Pin 3 Drive bitS */
#define GPIO_DS_DS3_0               ((uint32_t)0x00000040U) /* Port x Pin 3 Drive bit 0 */
#define GPIO_DS_DS3_1               ((uint32_t)0x00000080U) /* Port x Pin 3 Drive bit 1 */

#define GPIO_DS_DS4                 ((uint32_t)0x00000300U) /* Port x Pin 4 Drive bitS */
#define GPIO_DS_DS4_0               ((uint32_t)0x00000100U) /* Port x Pin 4 Drive bit 0 */
#define GPIO_DS_DS4_1               ((uint32_t)0x00000200U) /* Port x Pin 4 Drive bit 1 */

#define GPIO_DS_DS5                 ((uint32_t)0x00000C00U) /* Port x Pin 5 Drive bitS */
#define GPIO_DS_DS5_0               ((uint32_t)0x00000400U) /* Port x Pin 5 Drive bit 0 */
#define GPIO_DS_DS5_1               ((uint32_t)0x00000800U) /* Port x Pin 5 Drive bit 1 */

#define GPIO_DS_DS6                 ((uint32_t)0x00003000U) /* Port x Pin 6 Drive bitS */
#define GPIO_DS_DS6_0               ((uint32_t)0x00001000U) /* Port x Pin 6 Drive bit 0 */
#define GPIO_DS_DS6_1               ((uint32_t)0x00002000U) /* Port x Pin 6 Drive bit 1 */

#define GPIO_DS_DS7                 ((uint32_t)0x0000C000U) /* Port x Pin 7 Drive bitS */
#define GPIO_DS_DS7_0               ((uint32_t)0x00004000U) /* Port x Pin 7 Drive bit 0 */
#define GPIO_DS_DS7_1               ((uint32_t)0x00008000U) /* Port x Pin 7 Drive bit 1 */

#define GPIO_DS_DS8                 ((uint32_t)0x00030000U) /* Port x Pin 8 Drive bitS */
#define GPIO_DS_DS8_0               ((uint32_t)0x00010000U) /* Port x Pin 8 Drive bit 0 */
#define GPIO_DS_DS8_1               ((uint32_t)0x00020000U) /* Port x Pin 8 Drive bit 1 */

#define GPIO_DS_DS9                 ((uint32_t)0x000C0000U) /* Port x Pin 9 Drive bitS */
#define GPIO_DS_DS9_0               ((uint32_t)0x00040000U) /* Port x Pin 9 Drive bit 0 */
#define GPIO_DS_DS9_1               ((uint32_t)0x00080000U) /* Port x Pin 9 Drive bit 1 */

#define GPIO_DS_DS10                ((uint32_t)0x00300000U) /* Port x Pin 10 Drive bitS */
#define GPIO_DS_DS10_0              ((uint32_t)0x00100000U) /* Port x Pin 10 Drive bit 0 */
#define GPIO_DS_DS10_1              ((uint32_t)0x00200000U) /* Port x Pin 10 Drive bit 1 */

#define GPIO_DS_DS11                ((uint32_t)0x00C00000U) /* Port x Pin 11 Drive bitS */
#define GPIO_DS_DS11_0              ((uint32_t)0x00400000U) /* Port x Pin 11 Drive bit 0 */
#define GPIO_DS_DS11_1              ((uint32_t)0x00800000U) /* Port x Pin 11 Drive bit 1 */

#define GPIO_DS_DS12                ((uint32_t)0x03000000U) /* Port x Pin 12 Drive bitS */
#define GPIO_DS_DS12_0              ((uint32_t)0x01000000U) /* Port x Pin 12 Drive bit 0 */
#define GPIO_DS_DS12_1              ((uint32_t)0x02000000U) /* Port x Pin 12 Drive bit 1 */

#define GPIO_DS_DS13                ((uint32_t)0x0C000000U) /* Port x Pin 13 Drive bitS */
#define GPIO_DS_DS13_0              ((uint32_t)0x04000000U) /* Port x Pin 13 Drive bit 0 */
#define GPIO_DS_DS13_1              ((uint32_t)0x08000000U) /* Port x Pin 13 Drive bit 1 */

#define GPIO_DS_DS14                ((uint32_t)0x30000000U) /* Port x Pin 14 Drive bitS */
#define GPIO_DS_DS14_0              ((uint32_t)0x10000000U) /* Port x Pin 14 Drive bit 0 */
#define GPIO_DS_DS14_1              ((uint32_t)0x20000000U) /* Port x Pin 14 Drive bit 1 */

#define GPIO_DS_DS15                ((uint32_t)0xC0000000U) /* Port x Pin 15 Drive bitS */
#define GPIO_DS_DS15_0              ((uint32_t)0x40000000U) /* Port x Pin 15 Drive bit 0 */
#define GPIO_DS_DS15_1              ((uint32_t)0x80000000U) /* Port x Pin 15 Drive bit 1 */

#define GPIO_DS_2mA                 ((uint32_t)0x00000000U) /* Drive strength is 2mA  */
#define GPIO_DS_4mA                 ((uint32_t)0x00000002U) /* Drive strength is 4mA  */
#define GPIO_DS_8mA                 ((uint32_t)0x00000001U) /* Drive strength is 8mA  */
#define GPIO_DS_12mA                ((uint32_t)0x00000003U) /* Drive strength is 12mA */



/******** Bit definition for AFIO_RMP_CFG register  ********/
#define AFIO_RMP_CFG_EXTI_AFLTBYPS                           ((uint32_t)0x40000000)         /* Bit[30] */
#define AFIO_RMP_CFG_SIP_SDRAM_SEL                           ((uint32_t)0x20000000)         /* Bit[29] */
#define AFIO_RMP_CFG_SPI4_SEL                                ((uint32_t)0x10000000)         /* Bit[28] */
#define AFIO_RMP_CFG_SPI3_SEL                                ((uint32_t)0x08000000)         /* Bit[27] */
#define AFIO_RMP_CFG_SPI2_SEL                                ((uint32_t)0x04000000)         /* Bit[26] */
#define AFIO_RMP_CFG_SPI1_SEL                                ((uint32_t)0x02000000)         /* Bit[25] */
#define AFIO_RMP_CFG_SDMMC1_CLKFB                            ((uint32_t)0x01000000)         /* Bit[24] */
#define AFIO_RMP_CFG_SDMMC2_CLKFB                            ((uint32_t)0x00800000)         /* Bit[23] */
#define AFIO_RMP_CFG_I2S_FDUP                                ((uint32_t)0x00600000)         /* Bit[22:21] */
#define AFIO_RMP_CFG_I2S_FDUP_0                              ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_RMP_CFG_I2S_FDUP_1                              ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_RMP_CFG_XSPI2_EDN                               ((uint32_t)0x00080000)         /* Bit[19] */
#define AFIO_RMP_CFG_XSPI1_EDN                               ((uint32_t)0x00040000)         /* Bit[18] */
#define AFIO_RMP_CFG_FEMCSEL                                 ((uint32_t)0x00020000)         /* Bit[17] */
#define AFIO_RMP_CFG_FEMC_NOBYTE                             ((uint32_t)0x00010000)         /* Bit[16] */
#define AFIO_RMP_CFG_ETH2_PHY                                ((uint32_t)0x00008000)         /* Bit[15] */
#define AFIO_RMP_CFG_ETH1_PHY                                ((uint32_t)0x00006000)         /* Bit[14:13] */
#define AFIO_RMP_CFG_ETH1_PHY_0                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_RMP_CFG_ETH1_PHY_1                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_RMP_CFG_SPI7_NSS                                ((uint32_t)0x00001000)         /* Bit[12] */
#define AFIO_RMP_CFG_SPI6_NSS                                ((uint32_t)0x00000800)         /* Bit[11] */
#define AFIO_RMP_CFG_SPI5_NSS                                ((uint32_t)0x00000400)         /* Bit[10] */
#define AFIO_RMP_CFG_SPI4_NSS                                ((uint32_t)0x00000200)         /* Bit[9] */
#define AFIO_RMP_CFG_SPI3_NSS                                ((uint32_t)0x00000100)         /* Bit[8] */
#define AFIO_RMP_CFG_SPI2_NSS                                ((uint32_t)0x00000080)         /* Bit[7] */
#define AFIO_RMP_CFG_SPI1_NSS                                ((uint32_t)0x00000040)         /* Bit[6] */
#define AFIO_RMP_CFG_SIP_FLASHSEL                            ((uint32_t)0x00000007)         /* Bit[2:0] */
#define AFIO_RMP_CFG_SIP_FLASHSEL_0                          ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_RMP_CFG_SIP_FLASHSEL_1                          ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_RMP_CFG_SIP_FLASHSEL_2                          ((uint32_t)0x00000004)         /* Bit2*/

/******** Bit definition for AFIO_FILTER_CFG register  ********/
#define AFIO_FILTER_CFG_IOFLTCFG                             ((uint32_t)0x0000007F)         /* Bit[6:0] */
#define AFIO_FILTER_CFG_IOFLTCFG_0                           ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_FILTER_CFG_IOFLTCFG_1                           ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_FILTER_CFG_IOFLTCFG_2                           ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_FILTER_CFG_IOFLTCFG_3                           ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_FILTER_CFG_IOFLTCFG_4                           ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_FILTER_CFG_IOFLTCFG_5                           ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_FILTER_CFG_IOFLTCFG_6                           ((uint32_t)0x00000040)         /* Bit6*/

/** Bit definition for AFIO_XSPI1_NON0 register **/
#define AFIO_XSPI1_NON0_XSPI1_DEC_NONCE                      ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
/** Bit definition for AFIO_XSPI1_NON1 register **/
#define AFIO_XSPI1_NON1_XSPI1_DEC_NONCE                      ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
/** Bit definition for AFIO_XSPI1_NON2 register **/
#define AFIO_XSPI1_NON2_XSPI1_DEC_NONCE                      ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */

/** Bit definition for AFIO_ADCRMP_CFG register **/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRISEL                       ((uint32_t)0x00F00000)         /* Bit[23:20] */
#define AFIO_ADCRMP_CFG_ADC1_EXTIRISEL_0                     ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRISEL_1                     ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRISEL_2                     ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRISEL_3                     ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRRSEL                       ((uint32_t)0x000F0000)         /* Bit[19:16] */
#define AFIO_ADCRMP_CFG_ADC1_EXTIRRSEL_0                     ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRRSEL_1                     ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRRSEL_2                     ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_ADCRMP_CFG_ADC1_EXTIRRSEL_3                     ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRISEL                       ((uint32_t)0x0000F000)         /* Bit[15:12] */
#define AFIO_ADCRMP_CFG_ADC2_EXTIRISEL_0                     ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRISEL_1                     ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRISEL_2                     ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRISEL_3                     ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRRSEL                       ((uint32_t)0x00000F00)         /* Bit[11:8] */
#define AFIO_ADCRMP_CFG_ADC2_EXTIRRSEL_0                     ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRRSEL_1                     ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRRSEL_2                     ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_ADCRMP_CFG_ADC2_EXTIRRSEL_3                     ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRISEL                       ((uint32_t)0x000000F0)         /* Bit[7:4] */
#define AFIO_ADCRMP_CFG_ADC3_EXTIRISEL_0                     ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRISEL_1                     ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRISEL_2                     ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRISEL_3                     ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRRSEL                       ((uint32_t)0x0000000F)         /* Bit[3:0] */
#define AFIO_ADCRMP_CFG_ADC3_EXTIRRSEL_0                     ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRRSEL_1                     ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRRSEL_2                     ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_ADCRMP_CFG_ADC3_EXTIRRSEL_3                     ((uint32_t)0x00000008)         /* Bit3*/

/******** Bit definition for AFIO_EXTI_CFG1 register  ********/
#define AFIO_EXTI_CFG1_EXTI3                                   ((uint32_t)0xFF000000)         /* Bit[31:24] */
#define AFIO_EXTI_CFG1_EXTI3_0                                 ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EXTI_CFG1_EXTI3_1                                 ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EXTI_CFG1_EXTI3_2                                 ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EXTI_CFG1_EXTI3_3                                 ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EXTI_CFG1_EXTI3_4                                 ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EXTI_CFG1_EXTI3_5                                 ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EXTI_CFG1_EXTI3_6                                 ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EXTI_CFG1_EXTI3_7                                 ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EXTI_CFG1_EXTI2                                   ((uint32_t)0x00FF0000)         /* Bit[23:16] */
#define AFIO_EXTI_CFG1_EXTI2_0                                 ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EXTI_CFG1_EXTI2_1                                 ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EXTI_CFG1_EXTI2_2                                 ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EXTI_CFG1_EXTI2_3                                 ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EXTI_CFG1_EXTI2_4                                 ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EXTI_CFG1_EXTI2_5                                 ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EXTI_CFG1_EXTI2_6                                 ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EXTI_CFG1_EXTI2_7                                 ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EXTI_CFG1_EXTI1                                   ((uint32_t)0x0000FF00)         /* Bit[15:8] */
#define AFIO_EXTI_CFG1_EXTI1_0                                 ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EXTI_CFG1_EXTI1_1                                 ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EXTI_CFG1_EXTI1_2                                 ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EXTI_CFG1_EXTI1_3                                 ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EXTI_CFG1_EXTI1_4                                 ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EXTI_CFG1_EXTI1_5                                 ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EXTI_CFG1_EXTI1_6                                 ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EXTI_CFG1_EXTI1_7                                 ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_EXTI_CFG1_EXTI0                                   ((uint32_t)0x000000FF)         /* Bit[7:0] */
#define AFIO_EXTI_CFG1_EXTI0_0                                 ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EXTI_CFG1_EXTI0_1                                 ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EXTI_CFG1_EXTI0_2                                 ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EXTI_CFG1_EXTI0_3                                 ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EXTI_CFG1_EXTI0_4                                 ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EXTI_CFG1_EXTI0_5                                 ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EXTI_CFG1_EXTI0_6                                 ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EXTI_CFG1_EXTI0_7                                 ((uint32_t)0x00000080)         /* Bit7*/

/******** Bit definition for AFIO_EXTI_CFG2 register  ********/
#define AFIO_EXTI_CFG2_EXTI7                                   ((uint32_t)0xFF000000)         /* Bit[31:24] */
#define AFIO_EXTI_CFG2_EXTI7_0                                 ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EXTI_CFG2_EXTI7_1                                 ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EXTI_CFG2_EXTI7_2                                 ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EXTI_CFG2_EXTI7_3                                 ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EXTI_CFG2_EXTI7_4                                 ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EXTI_CFG2_EXTI7_5                                 ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EXTI_CFG2_EXTI7_6                                 ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EXTI_CFG2_EXTI7_7                                 ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EXTI_CFG2_EXTI6                                   ((uint32_t)0x00FF0000)         /* Bit[23:16] */
#define AFIO_EXTI_CFG2_EXTI6_0                                 ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EXTI_CFG2_EXTI6_1                                 ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EXTI_CFG2_EXTI6_2                                 ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EXTI_CFG2_EXTI6_3                                 ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EXTI_CFG2_EXTI6_4                                 ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EXTI_CFG2_EXTI6_5                                 ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EXTI_CFG2_EXTI6_6                                 ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EXTI_CFG2_EXTI6_7                                 ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EXTI_CFG2_EXTI5                                   ((uint32_t)0x0000FF00)         /* Bit[15:8] */
#define AFIO_EXTI_CFG2_EXTI5_0                                 ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EXTI_CFG2_EXTI5_1                                 ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EXTI_CFG2_EXTI5_2                                 ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EXTI_CFG2_EXTI5_3                                 ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EXTI_CFG2_EXTI5_4                                 ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EXTI_CFG2_EXTI5_5                                 ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EXTI_CFG2_EXTI5_6                                 ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EXTI_CFG2_EXTI5_7                                 ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_EXTI_CFG2_EXTI4                                   ((uint32_t)0x000000FF)         /* Bit[7:0] */
#define AFIO_EXTI_CFG2_EXTI4_0                                 ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EXTI_CFG2_EXTI4_1                                 ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EXTI_CFG2_EXTI4_2                                 ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EXTI_CFG2_EXTI4_3                                 ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EXTI_CFG2_EXTI4_4                                 ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EXTI_CFG2_EXTI4_5                                 ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EXTI_CFG2_EXTI4_6                                 ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EXTI_CFG2_EXTI4_7                                 ((uint32_t)0x00000080)         /* Bit7*/

/******** Bit definition for AFIO_EXTI_CFG3 register  ********/
#define AFIO_EXTI_CFG3_EXTI11                                  ((uint32_t)0xFF000000)         /* Bit[31:24] */
#define AFIO_EXTI_CFG3_EXTI11_0                                ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EXTI_CFG3_EXTI11_1                                ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EXTI_CFG3_EXTI11_2                                ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EXTI_CFG3_EXTI11_3                                ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EXTI_CFG3_EXTI11_4                                ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EXTI_CFG3_EXTI11_5                                ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EXTI_CFG3_EXTI11_6                                ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EXTI_CFG3_EXTI11_7                                ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EXTI_CFG3_EXTI10                                  ((uint32_t)0x00FF0000)         /* Bit[23:16] */
#define AFIO_EXTI_CFG3_EXTI10_0                                ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EXTI_CFG3_EXTI10_1                                ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EXTI_CFG3_EXTI10_2                                ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EXTI_CFG3_EXTI10_3                                ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EXTI_CFG3_EXTI10_4                                ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EXTI_CFG3_EXTI10_5                                ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EXTI_CFG3_EXTI10_6                                ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EXTI_CFG3_EXTI10_7                                ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EXTI_CFG3_EXTI9                                   ((uint32_t)0x0000FF00)         /* Bit[15:8] */
#define AFIO_EXTI_CFG3_EXTI9_0                                 ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EXTI_CFG3_EXTI9_1                                 ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EXTI_CFG3_EXTI9_2                                 ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EXTI_CFG3_EXTI9_3                                 ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EXTI_CFG3_EXTI9_4                                 ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EXTI_CFG3_EXTI9_5                                 ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EXTI_CFG3_EXTI9_6                                 ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EXTI_CFG3_EXTI9_7                                 ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_EXTI_CFG3_EXTI8                                   ((uint32_t)0x000000FF)         /* Bit[7:0] */
#define AFIO_EXTI_CFG3_EXTI8_0                                 ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EXTI_CFG3_EXTI8_1                                 ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EXTI_CFG3_EXTI8_2                                 ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EXTI_CFG3_EXTI8_3                                 ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EXTI_CFG3_EXTI8_4                                 ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EXTI_CFG3_EXTI8_5                                 ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EXTI_CFG3_EXTI8_6                                 ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EXTI_CFG3_EXTI8_7                                 ((uint32_t)0x00000080)         /* Bit7*/

/******** Bit definition for AFIO_EXTI_CFG4 register  ********/
#define AFIO_EXTI_CFG4_EXTI15                                  ((uint32_t)0xFF000000)         /* Bit[31:24] */
#define AFIO_EXTI_CFG4_EXTI15_0                                ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EXTI_CFG4_EXTI15_1                                ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EXTI_CFG4_EXTI15_2                                ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EXTI_CFG4_EXTI15_3                                ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EXTI_CFG4_EXTI15_4                                ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EXTI_CFG4_EXTI15_5                                ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EXTI_CFG4_EXTI15_6                                ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EXTI_CFG4_EXTI15_7                                ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EXTI_CFG4_EXTI14                                  ((uint32_t)0x00FF0000)         /* Bit[23:16] */
#define AFIO_EXTI_CFG4_EXTI14_0                                ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EXTI_CFG4_EXTI14_1                                ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EXTI_CFG4_EXTI14_2                                ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EXTI_CFG4_EXTI14_3                                ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EXTI_CFG4_EXTI14_4                                ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EXTI_CFG4_EXTI14_5                                ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EXTI_CFG4_EXTI14_6                                ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EXTI_CFG4_EXTI14_7                                ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EXTI_CFG4_EXTI13                                  ((uint32_t)0x0000FF00)         /* Bit[15:8] */
#define AFIO_EXTI_CFG4_EXTI13_0                                ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EXTI_CFG4_EXTI13_1                                ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EXTI_CFG4_EXTI13_2                                ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EXTI_CFG4_EXTI13_3                                ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EXTI_CFG4_EXTI13_4                                ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EXTI_CFG4_EXTI13_5                                ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EXTI_CFG4_EXTI13_6                                ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EXTI_CFG4_EXTI13_7                                ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_EXTI_CFG4_EXTI12                                  ((uint32_t)0x000000FF)         /* Bit[7:0] */
#define AFIO_EXTI_CFG4_EXTI12_0                                ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EXTI_CFG4_EXTI12_1                                ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EXTI_CFG4_EXTI12_2                                ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EXTI_CFG4_EXTI12_3                                ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EXTI_CFG4_EXTI12_4                                ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EXTI_CFG4_EXTI12_5                                ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EXTI_CFG4_EXTI12_6                                ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EXTI_CFG4_EXTI12_7                                ((uint32_t)0x00000080)         /* Bit7*/

/******** Bit definition for AFIO_TOL5V_CFG1 register  ********/
#define AFIO_TOL5V_CFG1_PA7TOLENN                              ((uint32_t)0x00000200)         /* Bit[9] */
#define AFIO_TOL5V_CFG1_PA6TOLENN                              ((uint32_t)0x00000100)         /* Bit[8] */
#define AFIO_TOL5V_CFG1_PA5TOLENN                              ((uint32_t)0x00000080)         /* Bit[7] */
#define AFIO_TOL5V_CFG1_PA4TOLENN                              ((uint32_t)0x00000040)         /* Bit[6] */
#define AFIO_TOL5V_CFG1_PA3TOLENN                              ((uint32_t)0x00000020)         /* Bit[5] */
#define AFIO_TOL5V_CFG1_PA2TOLENN                              ((uint32_t)0x00000010)         /* Bit[4] */
#define AFIO_TOL5V_CFG1_PA1_C_TOLENN                           ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_TOL5V_CFG1_PA1TOLENN                              ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_TOL5V_CFG1_PA0_C_TOLENN                           ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG1_PA0TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_TOL5V_CFG2 register  ********/
#define AFIO_TOL5V_CFG2_PB1TOLENN                              ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG2_PB0TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_TOL5V_CFG3 register  ********/
#define AFIO_TOL5V_CFG3_PC13TOLENN                             ((uint32_t)0x00000400)         /* Bit[10] */
#define AFIO_TOL5V_CFG3_PC8TOLENN                              ((uint32_t)0x00000200)         /* Bit[9] */
#define AFIO_TOL5V_CFG3_PC6TOLENN                              ((uint32_t)0x00000100)         /* Bit[8] */
#define AFIO_TOL5V_CFG3_PC5TOLENN                              ((uint32_t)0x00000080)         /* Bit[7] */
#define AFIO_TOL5V_CFG3_PC4TOLENN                              ((uint32_t)0x00000040)         /* Bit[6] */
#define AFIO_TOL5V_CFG3_PC3_C_TOLENN                           ((uint32_t)0x00000020)         /* Bit[5] */
#define AFIO_TOL5V_CFG3_PC3TOLENN                              ((uint32_t)0x00000010)         /* Bit[4] */
#define AFIO_TOL5V_CFG3_PC2_C_TOLENN                           ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_TOL5V_CFG3_PC2TOLENN                              ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_TOL5V_CFG3_PC1TOLENN                              ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG3_PC0TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_SHRT1_FALT_CFG register  ********/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT6                         ((uint32_t)0x00F00000)         /* Bit[23:20] */
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT6_0                       ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT6_1                       ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT6_2                       ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT6_3                       ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT5                         ((uint32_t)0x000F0000)         /* Bit[19:16] */
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT5_0                       ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT5_1                       ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT5_2                       ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT5_3                       ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT4                         ((uint32_t)0x0000F000)         /* Bit[15:12] */
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT4_0                       ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT4_1                       ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT4_2                       ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT4_3                       ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT3                         ((uint32_t)0x00000F00)         /* Bit[11:8] */
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT3_0                       ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT3_1                       ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT3_2                       ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT3_3                       ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT2                         ((uint32_t)0x000000F0)         /* Bit[7:4] */
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT2_0                       ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT2_1                       ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT2_2                       ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT2_3                       ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT1                         ((uint32_t)0x0000000F)         /* Bit[3:0] */
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT1_0                       ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT1_1                       ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT1_2                       ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SHRT1_FALT_CFG_SHRT_FALT1_3                       ((uint32_t)0x00000008)         /* Bit3*/

/******** Bit definition for AFIO_SHRT2_FALT_CFG register  ********/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT6                         ((uint32_t)0x00F00000)         /* Bit[23:20] */
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT6_0                       ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT6_1                       ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT6_2                       ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT6_3                       ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT5                         ((uint32_t)0x000F0000)         /* Bit[19:16] */
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT5_0                       ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT5_1                       ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT5_2                       ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT5_3                       ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT4                         ((uint32_t)0x0000F000)         /* Bit[15:12] */
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT4_0                       ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT4_1                       ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT4_2                       ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT4_3                       ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT3                         ((uint32_t)0x00000F00)         /* Bit[11:8] */
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT3_0                       ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT3_1                       ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT3_2                       ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT3_3                       ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT2                         ((uint32_t)0x000000F0)         /* Bit[7:4] */
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT2_0                       ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT2_1                       ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT2_2                       ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT2_3                       ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT1                         ((uint32_t)0x0000000F)         /* Bit[3:0] */
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT1_0                       ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT1_1                       ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT1_2                       ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SHRT2_FALT_CFG_SHRT_FALT1_3                       ((uint32_t)0x00000008)         /* Bit3*/

/******** Bit definition for AFIO_TOL5V_CFG4 register  ********/
#define AFIO_TOL5V_CFG4_PF14TOLENN                             ((uint32_t)0x00000800)         /* Bit[11] */
#define AFIO_TOL5V_CFG4_PF13TOLENN                             ((uint32_t)0x00000400)         /* Bit[10] */
#define AFIO_TOL5V_CFG4_PF12TOLENN                             ((uint32_t)0x00000200)         /* Bit[9] */
#define AFIO_TOL5V_CFG4_PF11TOLENN                             ((uint32_t)0x00000100)         /* Bit[8] */
#define AFIO_TOL5V_CFG4_PF10TOLENN                             ((uint32_t)0x00000080)         /* Bit[7] */
#define AFIO_TOL5V_CFG4_PF9TOLENN                              ((uint32_t)0x00000040)         /* Bit[6] */
#define AFIO_TOL5V_CFG4_PF8TOLENN                              ((uint32_t)0x00000020)         /* Bit[5] */
#define AFIO_TOL5V_CFG4_PF7TOLENN                              ((uint32_t)0x00000010)         /* Bit[4] */
#define AFIO_TOL5V_CFG4_PF6TOLENN                              ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_TOL5V_CFG4_PF5TOLENN                              ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_TOL5V_CFG4_PF4TOLENN                              ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG4_PF3TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_TOL5V_CFG5 register  ********/
#define AFIO_TOL5V_CFG5_PH5TOLENN                              ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_TOL5V_CFG5_PH4TOLENN                              ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_TOL5V_CFG5_PH3TOLENN                              ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG5_PH2TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_TOL5V_CFG6 register  ********/
#define AFIO_TOL5V_CFG6_PI15TOLENN                             ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG6_PI8TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_TOL5V_CFG7 register  ********/
#define AFIO_TOL5V_CFG7_PJ7TOLENN                              ((uint32_t)0x00000020)         /* Bit[5] */
#define AFIO_TOL5V_CFG7_PJ6TOLENN                              ((uint32_t)0x00000010)         /* Bit[4] */
#define AFIO_TOL5V_CFG7_PJ5TOLENN                              ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_TOL5V_CFG7_PJ4TOLENN                              ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_TOL5V_CFG7_PJ3TOLENN                              ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_TOL5V_CFG7_PJ0TOLENN                              ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_EFT_CFG1 register  ********/
#define AFIO_EFT_CFG1_PB_EFTEN                                 ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_EFT_CFG1_PB_EFTEN_0                               ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EFT_CFG1_PB_EFTEN_1                               ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EFT_CFG1_PB_EFTEN_2                               ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EFT_CFG1_PB_EFTEN_3                               ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EFT_CFG1_PB_EFTEN_4                               ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EFT_CFG1_PB_EFTEN_5                               ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EFT_CFG1_PB_EFTEN_6                               ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EFT_CFG1_PB_EFTEN_7                               ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EFT_CFG1_PB_EFTEN_8                               ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EFT_CFG1_PB_EFTEN_9                               ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EFT_CFG1_PB_EFTEN_10                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EFT_CFG1_PB_EFTEN_11                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EFT_CFG1_PB_EFTEN_12                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EFT_CFG1_PB_EFTEN_13                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EFT_CFG1_PB_EFTEN_14                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EFT_CFG1_PB_EFTEN_15                              ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EFT_CFG1_PA_EFTEN                                 ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_EFT_CFG1_PA_EFTEN_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EFT_CFG1_PA_EFTEN_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EFT_CFG1_PA_EFTEN_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EFT_CFG1_PA_EFTEN_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EFT_CFG1_PA_EFTEN_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EFT_CFG1_PA_EFTEN_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EFT_CFG1_PA_EFTEN_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EFT_CFG1_PA_EFTEN_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_EFT_CFG1_PA_EFTEN_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EFT_CFG1_PA_EFTEN_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EFT_CFG1_PA_EFTEN_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EFT_CFG1_PA_EFTEN_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EFT_CFG1_PA_EFTEN_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EFT_CFG1_PA_EFTEN_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EFT_CFG1_PA_EFTEN_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EFT_CFG1_PA_EFTEN_15                              ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_EFT_CFG2 register  ********/
#define AFIO_EFT_CFG2_PD_EFTEN                                 ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_EFT_CFG2_PD_EFTEN_0                               ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EFT_CFG2_PD_EFTEN_1                               ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EFT_CFG2_PD_EFTEN_2                               ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EFT_CFG2_PD_EFTEN_3                               ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EFT_CFG2_PD_EFTEN_4                               ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EFT_CFG2_PD_EFTEN_5                               ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EFT_CFG2_PD_EFTEN_6                               ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EFT_CFG2_PD_EFTEN_7                               ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EFT_CFG2_PD_EFTEN_8                               ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EFT_CFG2_PD_EFTEN_9                               ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EFT_CFG2_PD_EFTEN_10                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EFT_CFG2_PD_EFTEN_11                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EFT_CFG2_PD_EFTEN_12                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EFT_CFG2_PD_EFTEN_13                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EFT_CFG2_PD_EFTEN_14                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EFT_CFG2_PD_EFTEN_15                              ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EFT_CFG2_PC_EFTEN                                 ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_EFT_CFG2_PC_EFTEN_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EFT_CFG2_PC_EFTEN_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EFT_CFG2_PC_EFTEN_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EFT_CFG2_PC_EFTEN_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EFT_CFG2_PC_EFTEN_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EFT_CFG2_PC_EFTEN_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EFT_CFG2_PC_EFTEN_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EFT_CFG2_PC_EFTEN_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_EFT_CFG2_PC_EFTEN_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EFT_CFG2_PC_EFTEN_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EFT_CFG2_PC_EFTEN_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EFT_CFG2_PC_EFTEN_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EFT_CFG2_PC_EFTEN_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EFT_CFG2_PC_EFTEN_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EFT_CFG2_PC_EFTEN_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EFT_CFG2_PC_EFTEN_15                              ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_EFT_CFG3 register  ********/
#define AFIO_EFT_CFG3_PF_EFTEN                                 ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_EFT_CFG3_PF_EFTEN_0                               ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EFT_CFG3_PF_EFTEN_1                               ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EFT_CFG3_PF_EFTEN_2                               ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EFT_CFG3_PF_EFTEN_3                               ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EFT_CFG3_PF_EFTEN_4                               ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EFT_CFG3_PF_EFTEN_5                               ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EFT_CFG3_PF_EFTEN_6                               ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EFT_CFG3_PF_EFTEN_7                               ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EFT_CFG3_PF_EFTEN_8                               ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EFT_CFG3_PF_EFTEN_9                               ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EFT_CFG3_PF_EFTEN_10                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EFT_CFG3_PF_EFTEN_11                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EFT_CFG3_PF_EFTEN_12                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EFT_CFG3_PF_EFTEN_13                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EFT_CFG3_PF_EFTEN_14                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EFT_CFG3_PF_EFTEN_15                              ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EFT_CFG3_PE_EFTEN                                 ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_EFT_CFG3_PE_EFTEN_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EFT_CFG3_PE_EFTEN_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EFT_CFG3_PE_EFTEN_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EFT_CFG3_PE_EFTEN_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EFT_CFG3_PE_EFTEN_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EFT_CFG3_PE_EFTEN_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EFT_CFG3_PE_EFTEN_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EFT_CFG3_PE_EFTEN_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_EFT_CFG3_PE_EFTEN_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EFT_CFG3_PE_EFTEN_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EFT_CFG3_PE_EFTEN_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EFT_CFG3_PE_EFTEN_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EFT_CFG3_PE_EFTEN_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EFT_CFG3_PE_EFTEN_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EFT_CFG3_PE_EFTEN_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EFT_CFG3_PE_EFTEN_15                              ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_EFT_CFG4 register  ********/
#define AFIO_EFT_CFG4_PH_EFTEN                                 ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_EFT_CFG4_PH_EFTEN_0                               ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EFT_CFG4_PH_EFTEN_1                               ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EFT_CFG4_PH_EFTEN_2                               ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EFT_CFG4_PH_EFTEN_3                               ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EFT_CFG4_PH_EFTEN_4                               ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EFT_CFG4_PH_EFTEN_5                               ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EFT_CFG4_PH_EFTEN_6                               ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EFT_CFG4_PH_EFTEN_7                               ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EFT_CFG4_PH_EFTEN_8                               ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EFT_CFG4_PH_EFTEN_9                               ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EFT_CFG4_PH_EFTEN_10                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EFT_CFG4_PH_EFTEN_11                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EFT_CFG4_PH_EFTEN_12                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EFT_CFG4_PH_EFTEN_13                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EFT_CFG4_PH_EFTEN_14                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EFT_CFG4_PH_EFTEN_15                              ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EFT_CFG4_PG_EFTEN                                 ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_EFT_CFG4_PG_EFTEN_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EFT_CFG4_PG_EFTEN_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EFT_CFG4_PG_EFTEN_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EFT_CFG4_PG_EFTEN_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EFT_CFG4_PG_EFTEN_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EFT_CFG4_PG_EFTEN_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EFT_CFG4_PG_EFTEN_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EFT_CFG4_PG_EFTEN_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_EFT_CFG4_PG_EFTEN_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EFT_CFG4_PG_EFTEN_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EFT_CFG4_PG_EFTEN_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EFT_CFG4_PG_EFTEN_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EFT_CFG4_PG_EFTEN_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EFT_CFG4_PG_EFTEN_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EFT_CFG4_PG_EFTEN_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EFT_CFG4_PG_EFTEN_15                              ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_EFT_CFG5 register  ********/
#define AFIO_EFT_CFG5_PI_EFTEN                                 ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_EFT_CFG5_PI_EFTEN_0                               ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_EFT_CFG5_PI_EFTEN_1                               ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_EFT_CFG5_PI_EFTEN_2                               ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_EFT_CFG5_PI_EFTEN_3                               ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_EFT_CFG5_PI_EFTEN_4                               ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_EFT_CFG5_PI_EFTEN_5                               ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_EFT_CFG5_PI_EFTEN_6                               ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_EFT_CFG5_PI_EFTEN_7                               ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_EFT_CFG5_PI_EFTEN_8                               ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_EFT_CFG5_PI_EFTEN_9                               ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_EFT_CFG5_PI_EFTEN_10                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_EFT_CFG5_PI_EFTEN_11                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_EFT_CFG5_PI_EFTEN_12                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_EFT_CFG5_PI_EFTEN_13                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_EFT_CFG5_PI_EFTEN_14                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_EFT_CFG5_PI_EFTEN_15                              ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_EFT_CFG5_PJ_EFTEN                                 ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_EFT_CFG5_PJ_EFTEN_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EFT_CFG5_PJ_EFTEN_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EFT_CFG5_PJ_EFTEN_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EFT_CFG5_PJ_EFTEN_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EFT_CFG5_PJ_EFTEN_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EFT_CFG5_PJ_EFTEN_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EFT_CFG5_PJ_EFTEN_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EFT_CFG5_PJ_EFTEN_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_EFT_CFG5_PJ_EFTEN_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_EFT_CFG5_PJ_EFTEN_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_EFT_CFG5_PJ_EFTEN_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_EFT_CFG5_PJ_EFTEN_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_EFT_CFG5_PJ_EFTEN_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_EFT_CFG5_PJ_EFTEN_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_EFT_CFG5_PJ_EFTEN_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_EFT_CFG5_PJ_EFTEN_15                              ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_EFTIE_CFG6 register  ********/
#define AFIO_EFT_CFG6_JRST_ANA_FIL_BYPASS                      ((uint32_t)0x00000200)         /* Bit[9] */
#define AFIO_EFT_CFG6_BOOT_EFTEN                               ((uint32_t)0x00000100)         /* Bit[8] */
#define AFIO_EFT_CFG6_PK_EFTEN                                 ((uint32_t)0x000000FF)         /* Bit[7:0] */
#define AFIO_EFT_CFG6_PK_EFTEN_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_EFT_CFG6_PK_EFTEN_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_EFT_CFG6_PK_EFTEN_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_EFT_CFG6_PK_EFTEN_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_EFT_CFG6_PK_EFTEN_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_EFT_CFG6_PK_EFTEN_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_EFT_CFG6_PK_EFTEN_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_EFT_CFG6_PK_EFTEN_7                               ((uint32_t)0x00000080)         /* Bit7*/

/******** Bit definition for AFIO_DIGEFT_CFG1 register  ********/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN                        ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_0                      ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_1                      ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_2                      ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_3                      ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_4                      ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_5                      ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_6                      ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_7                      ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_8                      ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_9                      ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_10                     ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_11                     ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_12                     ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_13                     ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_14                     ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_DIGEFT_CFG1_PB_DIGEFTEN_15                     ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN                        ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_0                      ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_1                      ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_2                      ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_3                      ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_4                      ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_5                      ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_6                      ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_7                      ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_8                      ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_9                      ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_10                     ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_11                     ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_12                     ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_13                     ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_14                     ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_DIGEFT_CFG1_PA_DIGEFTEN_15                     ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_DIGEFT_CFG2 register  ********/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN                        ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_0                      ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_1                      ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_2                      ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_3                      ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_4                      ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_5                      ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_6                      ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_7                      ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_8                      ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_9                      ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_10                     ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_11                     ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_12                     ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_13                     ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_14                     ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_DIGEFT_CFG2_PD_DIGEFTEN_15                     ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN                        ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_0                      ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_1                      ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_2                      ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_3                      ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_4                      ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_5                      ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_6                      ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_7                      ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_8                      ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_9                      ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_10                     ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_11                     ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_12                     ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_13                     ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_14                     ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_DIGEFT_CFG2_PC_DIGEFTEN_15                     ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_DIGEFT_CFG3 register  ********/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN                        ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_0                      ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_1                      ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_2                      ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_3                      ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_4                      ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_5                      ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_6                      ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_7                      ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_8                      ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_9                      ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_10                     ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_11                     ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_12                     ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_13                     ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_14                     ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_DIGEFT_CFG3_PF_DIGEFTEN_15                     ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN                        ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_0                      ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_1                      ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_2                      ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_3                      ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_4                      ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_5                      ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_6                      ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_7                      ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_8                      ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_9                      ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_10                     ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_11                     ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_12                     ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_13                     ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_14                     ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_DIGEFT_CFG3_PE_DIGEFTEN_15                     ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_DIGEFT_CFG4 register  ********/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN                        ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_0                      ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_1                      ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_2                      ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_3                      ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_4                      ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_5                      ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_6                      ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_7                      ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_8                      ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_9                      ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_10                     ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_11                     ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_12                     ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_13                     ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_14                     ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_DIGEFT_CFG4_PH_DIGEFTEN_15                     ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN                        ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_0                      ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_1                      ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_2                      ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_3                      ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_4                      ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_5                      ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_6                      ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_7                      ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_8                      ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_9                      ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_10                     ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_11                     ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_12                     ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_13                     ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_14                     ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_DIGEFT_CFG4_PG_DIGEFTEN_15                     ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_DIGEFT_CFG5 register  ********/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN                        ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_0                      ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_1                      ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_2                      ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_3                      ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_4                      ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_5                      ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_6                      ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_7                      ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_8                      ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_9                      ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_10                     ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_11                     ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_12                     ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_13                     ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_14                     ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_DIGEFT_CFG5_PI_DIGEFTEN_15                     ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN                        ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_0                      ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_1                      ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_2                      ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_3                      ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_4                      ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_5                      ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_6                      ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_7                      ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_8                      ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_9                      ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_10                     ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_11                     ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_12                     ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_13                     ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_14                     ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_DIGEFT_CFG5_PJ_DIGEFTEN_15                     ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_DIGEFT_CFG6 register  ********/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN                        ((uint32_t)0x000000FF)         /* Bit[7:0] */
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_0                      ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_1                      ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_2                      ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_3                      ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_4                      ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_5                      ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_6                      ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_DIGEFT_CFG6_PK_DIGEFTEN_7                      ((uint32_t)0x00000080)         /* Bit7*/

/******** Bit definition for AFIO_SHRT1_EXEV_CFG1 register  ********/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV5                     ((uint32_t)0x01F00000)         /* Bit[24:20] */
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV5_0                   ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV5_1                   ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV5_2                   ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV5_3                   ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV5_4                   ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV4                     ((uint32_t)0x000F8000)         /* Bit[19:15] */
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV4_0                   ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV4_1                   ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV4_2                   ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV4_3                   ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV4_4                   ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV3                     ((uint32_t)0x00007C00)         /* Bit[14:10] */
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV3_0                   ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV3_1                   ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV3_2                   ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV3_3                   ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV3_4                   ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV2                     ((uint32_t)0x000003E0)         /* Bit[9:5] */
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV2_0                   ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV2_1                   ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV2_2                   ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV2_3                   ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV2_4                   ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV1                     ((uint32_t)0x0000001F)         /* Bit[4:0] */
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV1_0                   ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV1_1                   ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV1_2                   ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV1_3                   ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SHRT1_EXEV_CFG1_SHRT_EXEV1_4                   ((uint32_t)0x00000010)         /* Bit4*/

/******** Bit definition for AFIO_SHRT1_EXEV_CFG2 register  ********/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV10                    ((uint32_t)0x01F00000)         /* Bit[24:20] */
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV10_0                  ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV10_1                  ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV10_2                  ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV10_3                  ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV10_4                  ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV9                     ((uint32_t)0x000F8000)         /* Bit[19:15] */
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV9_0                   ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV9_1                   ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV9_2                   ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV9_3                   ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV9_4                   ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV8                     ((uint32_t)0x00007C00)         /* Bit[14:10] */
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV8_0                   ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV8_1                   ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV8_2                   ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV8_3                   ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV8_4                   ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV7                     ((uint32_t)0x000003E0)         /* Bit[9:5] */
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV7_0                   ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV7_1                   ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV7_2                   ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV7_3                   ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV7_4                   ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV6                     ((uint32_t)0x0000001F)         /* Bit[4:0] */
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV6_0                   ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV6_1                   ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV6_2                   ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV6_3                   ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SHRT1_EXEV_CFG2_SHRT_EXEV6_4                   ((uint32_t)0x00000010)         /* Bit4*/

/******** Bit definition for AFIO_SHRT2_EXEV_CFG1 register  ********/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV5                     ((uint32_t)0x01F00000)         /* Bit[24:20] */
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV5_0                   ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV5_1                   ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV5_2                   ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV5_3                   ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV5_4                   ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV4                     ((uint32_t)0x000F8000)         /* Bit[19:15] */
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV4_0                   ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV4_1                   ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV4_2                   ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV4_3                   ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV4_4                   ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV3                     ((uint32_t)0x00007C00)         /* Bit[14:10] */
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV3_0                   ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV3_1                   ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV3_2                   ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV3_3                   ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV3_4                   ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV2                     ((uint32_t)0x000003E0)         /* Bit[9:5] */
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV2_0                   ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV2_1                   ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV2_2                   ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV2_3                   ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV2_4                   ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV1                     ((uint32_t)0x0000001F)         /* Bit[4:0] */
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV1_0                   ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV1_1                   ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV1_2                   ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV1_3                   ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SHRT2_EXEV_CFG1_SHRT_EXEV1_4                   ((uint32_t)0x00000010)         /* Bit4*/

/******** Bit definition for AFIO_SHRT2_EXEV_CFG2 register  ********/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV10                    ((uint32_t)0x01F00000)         /* Bit[24:20] */
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV10_0                  ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV10_1                  ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV10_2                  ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV10_3                  ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV10_4                  ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV9                     ((uint32_t)0x000F8000)         /* Bit[19:15] */
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV9_0                   ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV9_1                   ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV9_2                   ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV9_3                   ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV9_4                   ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV8                     ((uint32_t)0x00007C00)         /* Bit[14:10] */
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV8_0                   ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV8_1                   ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV8_2                   ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV8_3                   ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV8_4                   ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV7                     ((uint32_t)0x000003E0)         /* Bit[9:5] */
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV7_0                   ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV7_1                   ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV7_2                   ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV7_3                   ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV7_4                   ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV6                     ((uint32_t)0x0000001F)         /* Bit[4:0] */
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV6_0                   ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV6_1                   ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV6_2                   ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV6_3                   ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SHRT2_EXEV_CFG2_SHRT_EXEV6_4                   ((uint32_t)0x00000010)         /* Bit4*/

/******** Bit definition for AFIO_SIP_PUPD register  ********/
#define AFIO_SIP_PUPD_PUPD7                                 ((uint32_t)0x0000C000)         /* Bit[15:14] */
#define AFIO_SIP_PUPD_PUPD7_0                               ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SIP_PUPD_PUPD7_1                               ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SIP_PUPD_PUPD6                                 ((uint32_t)0x00003000)         /* Bit[13:12] */
#define AFIO_SIP_PUPD_PUPD6_0                               ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SIP_PUPD_PUPD6_1                               ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SIP_PUPD_PUPD5                                 ((uint32_t)0x00000C00)         /* Bit[11:10] */
#define AFIO_SIP_PUPD_PUPD5_0                               ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SIP_PUPD_PUPD5_1                               ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SIP_PUPD_PUPD4                                 ((uint32_t)0x00000300)         /* Bit[9:8] */
#define AFIO_SIP_PUPD_PUPD4_0                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SIP_PUPD_PUPD4_1                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SIP_PUPD_PUPD3                                 ((uint32_t)0x000000C0)         /* Bit[7:6] */
#define AFIO_SIP_PUPD_PUPD3_0                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SIP_PUPD_PUPD3_1                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SIP_PUPD_PUPD2                                 ((uint32_t)0x00000030)         /* Bit[5:4] */
#define AFIO_SIP_PUPD_PUPD2_0                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SIP_PUPD_PUPD2_1                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SIP_PUPD_PUPD1                                 ((uint32_t)0x0000000C)         /* Bit[3:2] */
#define AFIO_SIP_PUPD_PUPD1_0                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SIP_PUPD_PUPD1_1                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SIP_PUPD_PUPD0                                 ((uint32_t)0x00000003)         /* Bit[1:0] */
#define AFIO_SIP_PUPD_PUPD0_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SIP_PUPD_PUPD0_1                               ((uint32_t)0x00000002)         /* Bit1*/

/******** Bit definition for AFIO_SDRAM_HSMOD_CFG1 register  ********/
#define AFIO_SDRAM_HSMOD_CFG1_HSA                           ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_SDRAM_HSMOD_CFG1_HSA_0                         ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_1                         ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_2                         ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_3                         ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_4                         ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_5                         ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_6                         ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_7                         ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_8                         ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_9                         ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_10                        ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_11                        ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_12                        ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_13                        ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_14                        ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_HSMOD_CFG1_HSA_15                        ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB                           ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_SDRAM_HSMOD_CFG1_HSB_0                         ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_1                         ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_2                         ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_3                         ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_4                         ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_5                         ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_6                         ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_7                         ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_8                         ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_9                         ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_10                        ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_11                        ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_12                        ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_13                        ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_14                        ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAM_HSMOD_CFG1_HSB_15                        ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_SDRAM_HSMOD_CFG2 register  ********/
#define AFIO_SDRAM_HSMOD_CFG2_HSC                               ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_SDRAM_HSMOD_CFG2_HSC_0                             ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_1                             ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_2                             ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_3                             ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_4                             ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_5                             ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_6                             ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_7                             ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_8                             ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_9                             ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_10                            ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_11                            ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_12                            ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_13                            ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_14                            ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_HSMOD_CFG2_HSC_15                            ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD                               ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_SDRAM_HSMOD_CFG2_HSD_0                             ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_1                             ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_2                             ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_3                             ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_4                             ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_5                             ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_6                             ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_7                             ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_8                             ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_9                             ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_10                            ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_11                            ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_12                            ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_13                            ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_14                            ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAM_HSMOD_CFG2_HSD_15                            ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_SDRAM_HSMOD_CFG3 register  ********/
#define AFIO_SDRAM_HSMOD_CFG3_HSE                               ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_SDRAM_HSMOD_CFG3_HSE_0                             ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_1                             ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_2                             ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_3                             ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_4                             ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_5                             ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_6                             ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_7                             ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_8                             ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_9                             ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_10                            ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_11                            ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_12                            ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_13                            ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_14                            ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_HSMOD_CFG3_HSE_15                            ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF                               ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_SDRAM_HSMOD_CFG3_HSF_0                             ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_1                             ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_2                             ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_3                             ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_4                             ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_5                             ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_6                             ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_7                             ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_8                             ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_9                             ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_10                            ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_11                            ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_12                            ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_13                            ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_14                            ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAM_HSMOD_CFG3_HSF_15                            ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_SDRAM_HSMOD_CFG4 register  ********/
#define AFIO_SDRAM_HSMOD_CFG4_HSG                               ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_SDRAM_HSMOD_CFG4_HSG_0                             ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_1                             ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_2                             ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_3                             ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_4                             ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_5                             ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_6                             ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_7                             ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_8                             ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_9                             ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_10                            ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_11                            ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_12                            ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_13                            ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_14                            ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_HSMOD_CFG4_HSG_15                            ((uint32_t)0x80000000)         /* Bit31*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH                               ((uint32_t)0x0000FFFF)         /* Bit[15:0] */
#define AFIO_SDRAM_HSMOD_CFG4_HSH_0                             ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_1                             ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_2                             ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_3                             ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_4                             ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_5                             ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_6                             ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_7                             ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_8                             ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_9                             ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_10                            ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_11                            ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_12                            ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_13                            ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_14                            ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAM_HSMOD_CFG4_HSH_15                            ((uint32_t)0x00008000)         /* Bit15*/

/******** Bit definition for AFIO_SDRAM_HSMOD_CFG5 register  ********/
#define AFIO_SDRAM_HSMOD_CFG5_HSI                               ((uint32_t)0xFFFF0000)         /* Bit[31:16] */
#define AFIO_SDRAM_HSMOD_CFG5_HSI_0                             ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_1                             ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_2                             ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_3                             ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_4                             ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_5                             ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_6                             ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_7                             ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_8                             ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_9                             ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_10                            ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_11                            ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_12                            ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_13                            ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_14                            ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_HSMOD_CFG5_HSI_15                            ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for AFIO_SIP_SR register  ********/
#define AFIO_SIP_SR_SR7                                         ((uint32_t)0x00000080)         /* Bit[7] */
#define AFIO_SIP_SR_SR6                                         ((uint32_t)0x00000040)         /* Bit[6] */
#define AFIO_SIP_SR_SR5                                         ((uint32_t)0x00000020)         /* Bit[5] */
#define AFIO_SIP_SR_SR4                                         ((uint32_t)0x00000010)         /* Bit[4] */
#define AFIO_SIP_SR_SR3                                         ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_SIP_SR_SR2                                         ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_SIP_SR_SR1                                         ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_SIP_SR_SR0                                         ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_SIPDS_CFG register  ********/
#define AFIO_SIP_DS_DS7                                         ((uint32_t)0x0000C000)         /* Bit[15:14] */
#define AFIO_SIP_DS_DS7_0                                       ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SIP_DS_DS7_1                                       ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SIP_DS_DS6                                         ((uint32_t)0x00003000)         /* Bit[13:12] */
#define AFIO_SIP_DS_DS6_0                                       ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SIP_DS_DS6_1                                       ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SIP_DS_DS5                                         ((uint32_t)0x00000C00)         /* Bit[11:10] */
#define AFIO_SIP_DS_DS5_0                                       ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SIP_DS_DS5_1                                       ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SIP_DS_DS4                                         ((uint32_t)0x00000300)         /* Bit[9:8] */
#define AFIO_SIP_DS_DS4_0                                       ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SIP_DS_DS4_1                                       ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SIP_DS_DS3                                         ((uint32_t)0x000000C0)         /* Bit[7:6] */
#define AFIO_SIP_DS_DS3_0                                       ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SIP_DS_DS3_1                                       ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SIP_DS_DS2                                         ((uint32_t)0x00000030)         /* Bit[5:4] */
#define AFIO_SIP_DS_DS2_0                                       ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SIP_DS_DS2_1                                       ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SIP_DS_DS1                                         ((uint32_t)0x0000000C)         /* Bit[3:2] */
#define AFIO_SIP_DS_DS1_0                                       ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SIP_DS_DS1_1                                       ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SIP_DS_DS0                                         ((uint32_t)0x00000003)         /* Bit[1:0] */
#define AFIO_SIP_DS_DS0_0                                       ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SIP_DS_DS0_1                                       ((uint32_t)0x00000002)         /* Bit1*/

/******** Bit definition for AFIO_ADCSW_CFG register  ********/
#define AFIO_ADCSW_CFG_VREF                                     ((uint32_t)0x10000000)         /* Bit[28] */
#define AFIO_ADCSW_CFG_SW_PJ7                                   ((uint32_t)0x08000000)         /* Bit[27] */
#define AFIO_ADCSW_CFG_SW_PJ6                                   ((uint32_t)0x04000000)         /* Bit[26] */
#define AFIO_ADCSW_CFG_SW_DAC135_OUT                            ((uint32_t)0x03800000)         /* Bit[25:23] */
#define AFIO_ADCSW_CFG_SW_DAC5_OUT                              ((uint32_t)0x02000000)         /* Bit[25] */
#define AFIO_ADCSW_CFG_SW_DAC3_OUT                              ((uint32_t)0x01000000)         /* Bit[24] */
#define AFIO_ADCSW_CFG_SW_DAC1_OUT                              ((uint32_t)0x00800000)         /* Bit[23] */
#define AFIO_ADCSW_CFG_SW_PJ5                                   ((uint32_t)0x00400000)         /* Bit[22] */
#define AFIO_ADCSW_CFG_SW_PJ4                                   ((uint32_t)0x00200000)         /* Bit[21] */
#define AFIO_ADCSW_CFG_SW_TEMP                                  ((uint32_t)0x00100000)         /* Bit[20] */
#define AFIO_ADCSW_CFG_SW_PJ3                                   ((uint32_t)0x00080000)         /* Bit[19] */
#define AFIO_ADCSW_CFG_SW_PJ0                                   ((uint32_t)0x00040000)         /* Bit[18] */
#define AFIO_ADCSW_CFG_SW_DAC246_OUT                            ((uint32_t)0x00038000)         /* Bit[17:15] */
#define AFIO_ADCSW_CFG_SW_DAC6_OUT                              ((uint32_t)0x00020000)         /* Bit[17] */
#define AFIO_ADCSW_CFG_SW_DAC4_OUT                              ((uint32_t)0x00010000)         /* Bit[16] */
#define AFIO_ADCSW_CFG_SW_DAC2_OUT                              ((uint32_t)0x00008000)         /* Bit[15] */
#define AFIO_ADCSW_CFG_VBAT                                     ((uint32_t)0x00004000)         /* Bit[14] */
#define AFIO_ADCSW_CFG_SWPI15                                   ((uint32_t)0x00003000)         /* Bit[13:12] */
#define AFIO_ADCSW_CFG_SWPI15_1                                 ((uint32_t)0x00002000)         /* Bit[13] */
#define AFIO_ADCSW_CFG_SWPI15_0                                 ((uint32_t)0x00001000)         /* Bit[12] */
#define AFIO_ADCSW_CFG_SWPA1_C                                  ((uint32_t)0x00000C00)         /* Bit[11:10] */
#define AFIO_ADCSW_CFG_SWPA1_C_1                                ((uint32_t)0x00000800)         /* Bit[11] */
#define AFIO_ADCSW_CFG_SWPA1_C_0                                ((uint32_t)0x00000400)         /* Bit[10] */
#define AFIO_ADCSW_CFG_SWPC3_C                                  ((uint32_t)0x00000300)         /* Bit[9:8] */
#define AFIO_ADCSW_CFG_SWPC3_C_1                                ((uint32_t)0x00000200)         /* Bit[9] */
#define AFIO_ADCSW_CFG_SWPC3_C_0                                ((uint32_t)0x00000100)         /* Bit[8] */
#define AFIO_ADCSW_CFG_SWPC2_C                                  ((uint32_t)0x000000F0)         /* Bit[7:4] */
#define AFIO_ADCSW_CFG_SWPC2_C_3                                ((uint32_t)0x00000080)         /* Bit[7] */
#define AFIO_ADCSW_CFG_SWPC2_C_2                                ((uint32_t)0x00000040)         /* Bit[6] */
#define AFIO_ADCSW_CFG_SWPC2_C_1                                ((uint32_t)0x00000020)         /* Bit[5] */
#define AFIO_ADCSW_CFG_SWPC2_C_0                                ((uint32_t)0x00000010)         /* Bit[4] */
#define AFIO_ADCSW_CFG_SWPA0_C                                  ((uint32_t)0x0000000F)         /* Bit[3:0] */
#define AFIO_ADCSW_CFG_SWPA0_C_3                                ((uint32_t)0x00000008)         /* Bit[3] */
#define AFIO_ADCSW_CFG_SWPA0_C_2                                ((uint32_t)0x00000004)         /* Bit[2] */
#define AFIO_ADCSW_CFG_SWPA0_C_1                                ((uint32_t)0x00000002)         /* Bit[1] */
#define AFIO_ADCSW_CFG_SWPA0_C_0                                ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for AFIO_SDRAM_VREF_EN0 register  ********/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0                            ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_0                          ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_1                          ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_2                          ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_3                          ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_4                          ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_5                          ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_6                          ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_7                          ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_8                          ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_9                          ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_10                         ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_11                         ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_12                         ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_13                         ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_14                         ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_15                         ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_16                         ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_17                         ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_18                         ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_19                         ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_20                         ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_21                         ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_22                         ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_23                         ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_24                         ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_25                         ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_26                         ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_27                         ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_28                         ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_29                         ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_30                         ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_VREF_EN0_VREF_EN0_31                         ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for AFIO_SDRAM_VREF_EN1 register  ********/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1                            ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_0                          ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_1                          ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_2                          ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_3                          ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_4                          ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_5                          ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_6                          ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_7                          ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_8                          ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_9                          ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_10                         ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_11                         ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_12                         ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_13                         ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_14                         ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_15                         ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_16                         ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_17                         ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_18                         ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_19                         ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_20                         ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_21                         ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_22                         ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_23                         ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_24                         ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_25                         ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_26                         ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_27                         ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_28                         ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_29                         ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_30                         ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAM_VREF_EN1_VREF_EN1_31                         ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for AFIO_SDRAM_VREF_EN2 register  ********/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2                            ((uint32_t)0x000007FF)         /* Bit[10:0] */
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_0                          ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_1                          ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_2                          ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_3                          ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_4                          ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_5                          ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_6                          ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_7                          ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_8                          ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_9                          ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAM_VREF_EN2_VREF_EN2_10                         ((uint32_t)0x00000400)         /* Bit10*/
    
/******** Bit definition for AFIO_SDRAMDSN_CFG0 register  ********/
#define AFIO_SDRAMDSN_CFG0_DSN0                                 ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define AFIO_SDRAMDSN_CFG0_DSN0_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAMDSN_CFG0_DSN0_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAMDSN_CFG0_DSN0_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAMDSN_CFG0_DSN0_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAMDSN_CFG0_DSN0_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAMDSN_CFG0_DSN0_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAMDSN_CFG0_DSN0_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAMDSN_CFG0_DSN0_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAMDSN_CFG0_DSN0_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAMDSN_CFG0_DSN0_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAMDSN_CFG0_DSN0_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAMDSN_CFG0_DSN0_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAMDSN_CFG0_DSN0_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAMDSN_CFG0_DSN0_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAMDSN_CFG0_DSN0_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAMDSN_CFG0_DSN0_15                              ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SDRAMDSN_CFG0_DSN0_16                              ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAMDSN_CFG0_DSN0_17                              ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAMDSN_CFG0_DSN0_18                              ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAMDSN_CFG0_DSN0_19                              ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAMDSN_CFG0_DSN0_20                              ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAMDSN_CFG0_DSN0_21                              ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAMDSN_CFG0_DSN0_22                              ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAMDSN_CFG0_DSN0_23                              ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAMDSN_CFG0_DSN0_24                              ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAMDSN_CFG0_DSN0_25                              ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAMDSN_CFG0_DSN0_26                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAMDSN_CFG0_DSN0_27                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAMDSN_CFG0_DSN0_28                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAMDSN_CFG0_DSN0_29                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAMDSN_CFG0_DSN0_30                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAMDSN_CFG0_DSN0_31                              ((uint32_t)0x80000000)         /* Bit31*/
    
/******** Bit definition for AFIO_SDRAMDSN_CFG1 register  ********/
#define AFIO_SDRAMDSN_CFG1_DSN1                                 ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define AFIO_SDRAMDSN_CFG1_DSN1_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAMDSN_CFG1_DSN1_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAMDSN_CFG1_DSN1_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAMDSN_CFG1_DSN1_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAMDSN_CFG1_DSN1_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAMDSN_CFG1_DSN1_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAMDSN_CFG1_DSN1_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAMDSN_CFG1_DSN1_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAMDSN_CFG1_DSN1_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAMDSN_CFG1_DSN1_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAMDSN_CFG1_DSN1_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAMDSN_CFG1_DSN1_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAMDSN_CFG1_DSN1_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAMDSN_CFG1_DSN1_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAMDSN_CFG1_DSN1_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAMDSN_CFG1_DSN1_15                              ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SDRAMDSN_CFG1_DSN1_16                              ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAMDSN_CFG1_DSN1_17                              ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAMDSN_CFG1_DSN1_18                              ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAMDSN_CFG1_DSN1_19                              ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAMDSN_CFG1_DSN1_20                              ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAMDSN_CFG1_DSN1_21                              ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAMDSN_CFG1_DSN1_22                              ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAMDSN_CFG1_DSN1_23                              ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAMDSN_CFG1_DSN1_24                              ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAMDSN_CFG1_DSN1_25                              ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAMDSN_CFG1_DSN1_26                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAMDSN_CFG1_DSN1_27                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAMDSN_CFG1_DSN1_28                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAMDSN_CFG1_DSN1_29                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAMDSN_CFG1_DSN1_30                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAMDSN_CFG1_DSN1_31                              ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for AFIO_SDRAMDSN_CFG2 register  ********/
#define AFIO_SDRAMDSN_CFG2_DSN2                                 ((uint32_t)0x000007FF)         /* Bit[10:0] */
#define AFIO_SDRAMDSN_CFG2_DSN2_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAMDSN_CFG2_DSN2_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAMDSN_CFG2_DSN2_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAMDSN_CFG2_DSN2_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAMDSN_CFG2_DSN2_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAMDSN_CFG2_DSN2_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAMDSN_CFG2_DSN2_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAMDSN_CFG2_DSN2_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAMDSN_CFG2_DSN2_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAMDSN_CFG2_DSN2_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAMDSN_CFG2_DSN2_10                              ((uint32_t)0x00000400)         /* Bit10*/

/******** Bit definition for AFIO_SDRAMDSP_CFG0 register  ********/
#define AFIO_SDRAMDSP_CFG0_DSP0                                 ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define AFIO_SDRAMDSP_CFG0_DSP0_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAMDSP_CFG0_DSP0_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAMDSP_CFG0_DSP0_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAMDSP_CFG0_DSP0_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAMDSP_CFG0_DSP0_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAMDSP_CFG0_DSP0_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAMDSP_CFG0_DSP0_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAMDSP_CFG0_DSP0_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAMDSP_CFG0_DSP0_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAMDSP_CFG0_DSP0_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAMDSP_CFG0_DSP0_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAMDSP_CFG0_DSP0_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAMDSP_CFG0_DSP0_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAMDSP_CFG0_DSP0_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAMDSP_CFG0_DSP0_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAMDSP_CFG0_DSP0_15                              ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SDRAMDSP_CFG0_DSP0_16                              ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAMDSP_CFG0_DSP0_17                              ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAMDSP_CFG0_DSP0_18                              ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAMDSP_CFG0_DSP0_19                              ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAMDSP_CFG0_DSP0_20                              ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAMDSP_CFG0_DSP0_21                              ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAMDSP_CFG0_DSP0_22                              ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAMDSP_CFG0_DSP0_23                              ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAMDSP_CFG0_DSP0_24                              ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAMDSP_CFG0_DSP0_25                              ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAMDSP_CFG0_DSP0_26                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAMDSP_CFG0_DSP0_27                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAMDSP_CFG0_DSP0_28                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAMDSP_CFG0_DSP0_29                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAMDSP_CFG0_DSP0_30                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAMDSP_CFG0_DSP0_31                              ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for AFIO_SDRAMDSP_CFG1 register  ********/
#define AFIO_SDRAMDSP_CFG1_DSP1                                 ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define AFIO_SDRAMDSP_CFG1_DSP1_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAMDSP_CFG1_DSP1_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAMDSP_CFG1_DSP1_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAMDSP_CFG1_DSP1_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAMDSP_CFG1_DSP1_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAMDSP_CFG1_DSP1_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAMDSP_CFG1_DSP1_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAMDSP_CFG1_DSP1_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAMDSP_CFG1_DSP1_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAMDSP_CFG1_DSP1_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAMDSP_CFG1_DSP1_10                              ((uint32_t)0x00000400)         /* Bit10*/
#define AFIO_SDRAMDSP_CFG1_DSP1_11                              ((uint32_t)0x00000800)         /* Bit11*/
#define AFIO_SDRAMDSP_CFG1_DSP1_12                              ((uint32_t)0x00001000)         /* Bit12*/
#define AFIO_SDRAMDSP_CFG1_DSP1_13                              ((uint32_t)0x00002000)         /* Bit13*/
#define AFIO_SDRAMDSP_CFG1_DSP1_14                              ((uint32_t)0x00004000)         /* Bit14*/
#define AFIO_SDRAMDSP_CFG1_DSP1_15                              ((uint32_t)0x00008000)         /* Bit15*/
#define AFIO_SDRAMDSP_CFG1_DSP1_16                              ((uint32_t)0x00010000)         /* Bit16*/
#define AFIO_SDRAMDSP_CFG1_DSP1_17                              ((uint32_t)0x00020000)         /* Bit17*/
#define AFIO_SDRAMDSP_CFG1_DSP1_18                              ((uint32_t)0x00040000)         /* Bit18*/
#define AFIO_SDRAMDSP_CFG1_DSP1_19                              ((uint32_t)0x00080000)         /* Bit19*/
#define AFIO_SDRAMDSP_CFG1_DSP1_20                              ((uint32_t)0x00100000)         /* Bit20*/
#define AFIO_SDRAMDSP_CFG1_DSP1_21                              ((uint32_t)0x00200000)         /* Bit21*/
#define AFIO_SDRAMDSP_CFG1_DSP1_22                              ((uint32_t)0x00400000)         /* Bit22*/
#define AFIO_SDRAMDSP_CFG1_DSP1_23                              ((uint32_t)0x00800000)         /* Bit23*/
#define AFIO_SDRAMDSP_CFG1_DSP1_24                              ((uint32_t)0x01000000)         /* Bit24*/
#define AFIO_SDRAMDSP_CFG1_DSP1_25                              ((uint32_t)0x02000000)         /* Bit25*/
#define AFIO_SDRAMDSP_CFG1_DSP1_26                              ((uint32_t)0x04000000)         /* Bit26*/
#define AFIO_SDRAMDSP_CFG1_DSP1_27                              ((uint32_t)0x08000000)         /* Bit27*/
#define AFIO_SDRAMDSP_CFG1_DSP1_28                              ((uint32_t)0x10000000)         /* Bit28*/
#define AFIO_SDRAMDSP_CFG1_DSP1_29                              ((uint32_t)0x20000000)         /* Bit29*/
#define AFIO_SDRAMDSP_CFG1_DSP1_30                              ((uint32_t)0x40000000)         /* Bit30*/
#define AFIO_SDRAMDSP_CFG1_DSP1_31                              ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for AFIO_SDRAMDSP_CFG2 register  ********/
#define AFIO_SDRAMDSP_CFG2_DSP2                                 ((uint32_t)0x000007FF)         /* Bit[10:0] */
#define AFIO_SDRAMDSP_CFG2_DSP2_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define AFIO_SDRAMDSP_CFG2_DSP2_1                               ((uint32_t)0x00000002)         /* Bit1*/
#define AFIO_SDRAMDSP_CFG2_DSP2_2                               ((uint32_t)0x00000004)         /* Bit2*/
#define AFIO_SDRAMDSP_CFG2_DSP2_3                               ((uint32_t)0x00000008)         /* Bit3*/
#define AFIO_SDRAMDSP_CFG2_DSP2_4                               ((uint32_t)0x00000010)         /* Bit4*/
#define AFIO_SDRAMDSP_CFG2_DSP2_5                               ((uint32_t)0x00000020)         /* Bit5*/
#define AFIO_SDRAMDSP_CFG2_DSP2_6                               ((uint32_t)0x00000040)         /* Bit6*/
#define AFIO_SDRAMDSP_CFG2_DSP2_7                               ((uint32_t)0x00000080)         /* Bit7*/
#define AFIO_SDRAMDSP_CFG2_DSP2_8                               ((uint32_t)0x00000100)         /* Bit8*/
#define AFIO_SDRAMDSP_CFG2_DSP2_9                               ((uint32_t)0x00000200)         /* Bit9*/
#define AFIO_SDRAMDSP_CFG2_DSP2_10                              ((uint32_t)0x00000400)         /* Bit10*/



/***    Analog to Digital Converter Peripheral Interface   ***/
/********************  Bit definition for ADC_STS register  ********************/
#define ADC_STS_ALL                                         ((uint32_t)0x0003EB7FU)         
#define ADC_STS_WEFLAG                                      ((uint32_t)0x00020000U)         /* Bit[17] FIFO write error status */
#define ADC_STS_REFLAG                                      ((uint32_t)0x00010000U)         /* Bit[16] FIFO read error status */
#define ADC_STS_ROSOVFDSMU                                  ((uint32_t)0x00004000U)         /* Bit[14] Regular channel oversampling overrun flag in DSMU mode */
#define ADC_STS_JOSOVF                                      ((uint32_t)0x00002000U)         /* Bit[13] Injected channel oversampling overrun flag*/
#define ADC_STS_ROSOVF                                      ((uint32_t)0x00001000U)         /* Bit[12] Regular channel oversampling overrun flag*/
#define ADC_STS_EOSAMP                                      ((uint32_t)0x00000800U)         /* Bit[11] End of Sampling */
#define ADC_STS_PDRDY                                       ((uint32_t)0x00000200U)         /* Bit[9] ADC power down ready*/
#define ADC_STS_RDY                                         ((uint32_t)0x00000100U)         /* Bit[8] ADC power up ready */
#define ADC_STS_AWDG1                                       ((uint32_t)0x00000040U)         /* Bit[6] Analog watchdog 1 flag */
#define ADC_STS_STR                                         ((uint32_t)0x00000020U)         /* Bit[5] Regular channel Start flag */
#define ADC_STS_JENDCA                                      ((uint32_t)0x00000010U)         /* Bit[4] Any injected channel end of conversion */
#define ADC_STS_JENDC                                       ((uint32_t)0x00000008U)         /* Bit[3] Injected channel end of conversion */
#define ADC_STS_JSTR                                        ((uint32_t)0x00000004U)         /* Bit[2] Injected channel Start flag*/
#define ADC_STS_ENDCA                                       ((uint32_t)0x00000002U)         /* Bit[1] Any end of conversion */
#define ADC_STS_ENDC                                        ((uint32_t)0x00000001U)         /* Bit[0] End of conversion */

/*******************  Bit definition for ADC_CTRL1 register  ********************/
#define ADC_CTRL1_WEIEN                                     ((uint32_t)0x40000000U)         /* Bit[30] FIFO write error interrupt enable */
#define ADC_CTRL1_REIEN                                     ((uint32_t)0x20000000U)         /* Bit[29] FIFO read error interrupt enable*/

#define ADC_CTRL1_EOSMPIEN                                  ((uint32_t)0x10000000U)         /* Bit[28] End of Sampling interrupt enable */
#define ADC_CTRL1_PDRDYIEN                                  ((uint32_t)0x08000000U)         /* Bit[27] ADC power up ready interrupt enable */
#define ADC_CTRL1_RDYIEN                                    ((uint32_t)0x04000000U)         /* Bit[26] ADC power up ready interrupt enable */
#define ADC_CTRL1_DJCH                                      ((uint32_t)0x01000000U)         /* Bit[24] Discontinuous mode on injected channels */
#define ADC_CTRL1_DREGCH                                    ((uint32_t)0x00800000U)         /* Bit[23] Discontinuous mode on regular channels*/
#define ADC_CTRL1_AWD1ERCH                                  ((uint32_t)0x00400000U)         /* Bit[22] Analog watchdog 1 enable on regular channels */
#define ADC_CTRL1_AWD1EJCH                                  ((uint32_t)0x00200000U)         /* Bit[21] Analog watchdog 1 enable on injected channels */

#define ADC_CTRL1_AWD1CH                                    ((uint32_t)0x001F0000U)         /* Bit[20:16] Analog watchdog 1 channel select bits */
#define ADC_CTRL1_AWD1CH_0                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define ADC_CTRL1_AWD1CH_1                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define ADC_CTRL1_AWD1CH_2                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define ADC_CTRL1_AWD1CH_3                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define ADC_CTRL1_AWD1CH_4                                  ((uint32_t)0x00100000U)         /* Bit20*/

#define ADC_CTRL1_MULTMODE                                  ((uint32_t)0x0000F800U)         /* Bit[15:11] Mult-ADC mode selection*/
#define ADC_CTRL1_MULTMODE_0                                ((uint32_t)0x00000800U)         /* Bit11*/
#define ADC_CTRL1_MULTMODE_1                                ((uint32_t)0x00001000U)         /* Bit12*/
#define ADC_CTRL1_MULTMODE_2                                ((uint32_t)0x00002000U)         /* Bit13*/
#define ADC_CTRL1_MULTMODE_3                                ((uint32_t)0x00004000U)         /* Bit14*/
#define ADC_CTRL1_MULTMODE_4                                ((uint32_t)0x00008000U)         /* Bit15*/

#define ADC_CTRL1_DCTU                                      ((uint32_t)0x00000700U)         /* Bit[10:8] DISC_NUM[2:0] bits (Discontinuous mode channel count)*/
#define ADC_CTRL1_DCTU_0                                    ((uint32_t)0x00000100U)         /* Bit8*/
#define ADC_CTRL1_DCTU_1                                    ((uint32_t)0x00000200U)         /* Bit9*/
#define ADC_CTRL1_DCTU_2                                    ((uint32_t)0x00000400U)         /* Bit10*/

#define ADC_CTRL1_AUTOJC                                    ((uint32_t)0x00000080U)         /* Bit[7] Automatic injected group conversion*/
#define ADC_CTRL1_AWD1SGLEN                                 ((uint32_t)0x00000040U)         /* Bit[6] Enable the watchdog 1 on a single channel in scan mode */

#define ADC_CTRL1_AWD1IEN                                   ((uint32_t)0x00000020U)         /* Bit[5] Analog watchdog 1 interrupt enable*/
#define ADC_CTRL1_JENDCIEN                                  ((uint32_t)0x00000010U)         /* Bit[4] Injected channel end of conversion interrupt enable */
#define ADC_CTRL1_JENDCAIEN                                 ((uint32_t)0x00000008U)         /* Bit[3] Any injected channel end of conversion interrupt enable */
#define ADC_CTRL1_ENDCIEN                                   ((uint32_t)0x00000004U)         /* Bit[2] End of conversion interrupt enable*/
#define ADC_CTRL1_ENDCAIEN                                  ((uint32_t)0x00000002U)         /* Bit[1] Any end of conversion interrupt enable */

#define ADC_CTRL1_SCANMD                                    ((uint32_t)0x00000001U)         /* Bit[0] Scan mode */

/*******************  Bit definition for ADC_CTRL2 register  ********************/
#define ADC_CTRL2_EXTPRSEL                                  ((uint32_t)0xC0000000U)         /* Bit[31:30] External trigger enable and polarity selection for regular channels */
#define ADC_CTRL2_EXTPRSEL_0                                ((uint32_t)0x40000000U)         /* Bit30*/
#define ADC_CTRL2_EXTPRSEL_1                                ((uint32_t)0x80000000U)         /* Bit31*/

#define ADC_CTRL2_EXTRSEL                                   ((uint32_t)0x3F000000U)         /* Bit[29:24] External event select for regular group */
#define ADC_CTRL2_EXTRSEL_0                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define ADC_CTRL2_EXTRSEL_1                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define ADC_CTRL2_EXTRSEL_2                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define ADC_CTRL2_EXTRSEL_3                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define ADC_CTRL2_EXTRSEL_4                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define ADC_CTRL2_EXTRSEL_5                                 ((uint32_t)0x20000000U)         /* Bit29*/

#define ADC_CTRL2_TEMPEN                                    ((uint32_t)0x00800000U)         /* Bit[23] Temperature Sensor Enable*/
#define ADC_CTRL2_SWSTRRCH                                  ((uint32_t)0x00400000U)         /* Bit[22] Start Conversion of regular channels*/
#define ADC_CTRL2_SWSTRJCH                                  ((uint32_t)0x00200000U)         /* Bit[21] Start Conversion of injected channels*/
#define ADC_CTRL2_EXTTRIG                                   ((uint32_t)0x00100000U)         /* Bit[20] External event trigger of regular channels enable*/

#define ADC_CTRL2_EXTJSEL                                   ((uint32_t)0x0007E000U)         /* Bit[18:13] External event select for injected group*/
#define ADC_CTRL2_EXTJSEL_0                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define ADC_CTRL2_EXTJSEL_1                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define ADC_CTRL2_EXTJSEL_2                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define ADC_CTRL2_EXTJSEL_3                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define ADC_CTRL2_EXTJSEL_4                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define ADC_CTRL2_EXTJSEL_5                                 ((uint32_t)0x00040000U)         /* Bit18*/

#define ADC_CTRL2_JEXTTRIG                                  ((uint32_t)0x00001000U)         /* Bit[12] External event trigger of injected channels enable*/
#define ADC_CTRL2_ALIG                                      ((uint32_t)0x00000800U)         /* Bit[11] Data Alignment*/

#define ADC_CTRL2_EXTPJSEL                                  ((uint32_t)0x00000600U)         /* Bit[10:9] External trigger enable and polarity selection for injected channels*/
#define ADC_CTRL2_EXTPJSEL_0                                ((uint32_t)0x00000200U)         /* Bit9*/
#define ADC_CTRL2_EXTPJSEL_1                                ((uint32_t)0x00000400U)         /* Bit10*/

#define ADC_CTRL2_DMAMD                                     ((uint32_t)0x00000180U)         /* Bit[8:7] DMA mode*/
#define ADC_CTRL2_DMAMD_0                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define ADC_CTRL2_DMAMD_1                                   ((uint32_t)0x00000100U)         /* Bit8*/

#define ADC_CTRL2_MDSMU                                     ((uint32_t)0x00000040U)         /* Bit[6] Multi-adc DSMU mode*/

#define ADC_CTRL2_DMNGT                                     ((uint32_t)0x00000030U)         /* Bit[5:4] Data management configuration for regular conversion data*/
#define ADC_CTRL2_DMNGT_0                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define ADC_CTRL2_DMNGT_1                                   ((uint32_t)0x00000020U)         /* Bit5*/

#define ADC_CTRL2_ENCAL                                     ((uint32_t)0x00000004U)         /* Bit[2] A/D Calibration */
#define ADC_CTRL2_CTU                                       ((uint32_t)0x00000002U)         /* Bit[1] Continuous Conversion*/
#define ADC_CTRL2_ON                                        ((uint32_t)0x00000001U)         /* Bit[0] A/D Converter ON / OFF */

/*******************  Bit definition for ADC_CTRL3 register  ********************/
#define ADC_CTRL3_GCOMP_SATEN                               ((uint32_t)0x20000000U)         /* Bit[29] Gain compensation saturation enable*/
#define ADC_CTRL3_GCOMPEN                                   ((uint32_t)0x10000000U)         /* Bit[28] Gain compensation Enable*/

#define ADC_CTRL3_SWJSTOP                                   ((uint32_t)0x08000000U)         /* Bit[27] Stop Conversion of injected channels*/
#define ADC_CTRL3_SWRSTOP                                   ((uint32_t)0x04000000U)         /* Bit[26] Stop Conversion of regular channels*/

#define ADC_CTRL3_JSTART                                    ((uint32_t)0x02000000U)         /* Bit[25] ADC start of injected conversion*/
#define ADC_CTRL3_RSTART                                    ((uint32_t)0x01000000U)         /* Bit[24] ADC start of regular conversion*/

#define ADC_CTRL3_VBATMEN                                   ((uint32_t)0x00000200U)         /* Bit[9] Vbat monitor enable*/
#define ADC_CTRL3_VREFINTEN                                 ((uint32_t)0x00000100U)         /* Bit[8] Internal Vrefence Voltage enable*/

#define ADC_CTRL3_BPCAL                                     ((uint32_t)0x00000080U)         /* Bit[7] Bypass calibration*/

#define ADC_CTRL3_PDRDY                                     ((uint32_t)0x00000040U)         /* Bit[6] 6.0*/
#define ADC_CTRL3_RDY                                       ((uint32_t)0x00000020U)         /* Bit[5] 5.0*/

#define ADC_CTRL3_CLOCKMOD                                  ((uint32_t)0x00000010U)         /* Bit[4] Clock Mode*/

#define ADC_CTRL3_RES                                       ((uint32_t)0x00000002U)         /* Bit[1] Data resolution*/

/******************  Bit definition for ADC_SAMPT1 register  *******************/
#define ADC_SAMPT1_SAMP0                                    ((uint32_t)0x0000000FU)        /* SAMP0[3:0] bits (Channel 0 Sample time selection) */
#define ADC_SAMPT1_SAMP0_0                                  ((uint32_t)0x00000001U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP0_1                                  ((uint32_t)0x00000002U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP0_2                                  ((uint32_t)0x00000004U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP0_3                                  ((uint32_t)0x00000008U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP1                                    ((uint32_t)0x000000F0U)        /* SAMP1[3:0] bits (Channel 1 Sample time selection) */
#define ADC_SAMPT1_SAMP1_0                                  ((uint32_t)0x00000010U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP1_1                                  ((uint32_t)0x00000020U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP1_2                                  ((uint32_t)0x00000040U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP1_3                                  ((uint32_t)0x00000080U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP2                                    ((uint32_t)0x00000F00U)        /* SAMP2[3:0] bits (Channel 2 Sample time selection) */
#define ADC_SAMPT1_SAMP2_0                                  ((uint32_t)0x00000100U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP2_1                                  ((uint32_t)0x00000200U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP2_2                                  ((uint32_t)0x00000400U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP2_3                                  ((uint32_t)0x00000800U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP3                                    ((uint32_t)0x0000F000U)        /* SAMP3[3:0] bits (Channel 3 Sample time selection) */
#define ADC_SAMPT1_SAMP3_0                                  ((uint32_t)0x00001000U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP3_1                                  ((uint32_t)0x00002000U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP3_2                                  ((uint32_t)0x00004000U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP3_3                                  ((uint32_t)0x00008000U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP4                                    ((uint32_t)0x000F0000U)        /* SAMP4[3:0] bits (Channel 4 Sample time selection) */
#define ADC_SAMPT1_SAMP4_0                                  ((uint32_t)0x00010000U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP4_1                                  ((uint32_t)0x00020000U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP4_2                                  ((uint32_t)0x00040000U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP4_3                                  ((uint32_t)0x00080000U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP5                                    ((uint32_t)0x00F00000U)        /* SAMP5[3:0] bits (Channel 5 Sample time selection) */
#define ADC_SAMPT1_SAMP5_0                                  ((uint32_t)0x00100000U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP5_1                                  ((uint32_t)0x00200000U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP5_2                                  ((uint32_t)0x00400000U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP5_3                                  ((uint32_t)0x00800000U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP6                                    ((uint32_t)0x0F000000U)        /* SAMP6[3:0] bits (Channel 6 Sample time selection) */
#define ADC_SAMPT1_SAMP6_0                                  ((uint32_t)0x01000000U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP6_1                                  ((uint32_t)0x02000000U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP6_2                                  ((uint32_t)0x04000000U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP6_3                                  ((uint32_t)0x08000000U)        /* Bit 3 */

#define ADC_SAMPT1_SAMP7                                    ((uint32_t)0xF0000000U)        /* SAMP7[3:0] bits (Channel 7 Sample time selection) */
#define ADC_SAMPT1_SAMP7_0                                  ((uint32_t)0x10000000U)        /* Bit 0 */
#define ADC_SAMPT1_SAMP7_1                                  ((uint32_t)0x20000000U)        /* Bit 1 */
#define ADC_SAMPT1_SAMP7_2                                  ((uint32_t)0x40000000U)        /* Bit 2 */
#define ADC_SAMPT1_SAMP7_3                                  ((uint32_t)0x80000000U)        /* Bit 3 */

/******************  Bit definition for ADC_SAMPT2 register  *******************/
#define ADC_SAMPT2_SAMP8                                    ((uint32_t)0x0000000FU)        /* SAMP8[3:0] bits (Channel 8 Sample time selection) */
#define ADC_SAMPT2_SAMP8_0                                  ((uint32_t)0x00000001U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP8_1                                  ((uint32_t)0x00000002U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP8_2                                  ((uint32_t)0x00000004U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP8_3                                  ((uint32_t)0x00000008U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP9                                    ((uint32_t)0x000000F0U)        /* SAMP9[3:0] bits (Channel 9 Sample time selection) */
#define ADC_SAMPT2_SAMP9_0                                  ((uint32_t)0x00000010U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP9_1                                  ((uint32_t)0x00000020U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP9_2                                  ((uint32_t)0x00000040U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP9_3                                  ((uint32_t)0x00000080U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP10                                   ((uint32_t)0x00000F00U)        /* SAMP10[3:0] bits (Channel 10 Sample time selection) */
#define ADC_SAMPT2_SAMP10_0                                 ((uint32_t)0x00000100U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP10_1                                 ((uint32_t)0x00000200U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP10_2                                 ((uint32_t)0x00000400U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP10_3                                 ((uint32_t)0x00000800U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP11                                   ((uint32_t)0x0000F000U)        /* SAMP11[3:0] bits (Channel 11 Sample time selection) */
#define ADC_SAMPT2_SAMP11_0                                 ((uint32_t)0x00001000U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP11_1                                 ((uint32_t)0x00002000U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP11_2                                 ((uint32_t)0x00004000U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP11_3                                 ((uint32_t)0x00008000U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP12                                   ((uint32_t)0x000F0000U)        /* SAMP12[3:0] bits (Channel 12 Sample time selection) */
#define ADC_SAMPT2_SAMP12_0                                 ((uint32_t)0x00010000U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP12_1                                 ((uint32_t)0x00020000U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP12_2                                 ((uint32_t)0x00040000U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP12_3                                 ((uint32_t)0x00080000U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP13                                   ((uint32_t)0x00F00000U)        /* SAMP13[3:0] bits (Channel 13 Sample time selection) */
#define ADC_SAMPT2_SAMP13_0                                 ((uint32_t)0x00100000U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP13_1                                 ((uint32_t)0x00200000U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP13_2                                 ((uint32_t)0x00400000U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP13_3                                 ((uint32_t)0x00800000U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP14                                   ((uint32_t)0x0F000000U)        /* SAMP14[3:0] bits (Channel 14 Sample time selection) */
#define ADC_SAMPT2_SAMP14_0                                 ((uint32_t)0x01000000U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP14_1                                 ((uint32_t)0x02000000U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP14_2                                 ((uint32_t)0x04000000U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP14_3                                 ((uint32_t)0x08000000U)        /* Bit 3 */

#define ADC_SAMPT2_SAMP15                                   ((uint32_t)0xF0000000U)        /* SAMP15[3:0] bits (Channel 15 Sample time selection) */
#define ADC_SAMPT2_SAMP15_0                                 ((uint32_t)0x10000000U)        /* Bit 0 */
#define ADC_SAMPT2_SAMP15_1                                 ((uint32_t)0x20000000U)        /* Bit 1 */
#define ADC_SAMPT2_SAMP15_2                                 ((uint32_t)0x40000000U)        /* Bit 2 */
#define ADC_SAMPT2_SAMP15_3                                 ((uint32_t)0x80000000U)        /* Bit 3 */

/******************  Bit definition for ADC_SAMPT3 register  *******************/
#define ADC_SAMPT3_SAMP16                                   ((uint32_t)0x0000000FU)        /* SAMP16[3:0] bits (Channel 16 Sample time selection) */
#define ADC_SAMPT3_SAMP16_0                                 ((uint32_t)0x00000001U)        /* Bit 0 */
#define ADC_SAMPT3_SAMP16_1                                 ((uint32_t)0x00000002U)        /* Bit 1 */
#define ADC_SAMPT3_SAMP16_2                                 ((uint32_t)0x00000004U)        /* Bit 2 */
#define ADC_SAMPT3_SAMP16_3                                 ((uint32_t)0x00000008U)        /* Bit 3 */

#define ADC_SAMPT3_SAMP17                                   ((uint32_t)0x000000F0U)        /* SAMP17[3:0] bits (Channel 17 Sample time selection) */
#define ADC_SAMPT3_SAMP17_0                                 ((uint32_t)0x00000010U)        /* Bit 0 */
#define ADC_SAMPT3_SAMP17_1                                 ((uint32_t)0x00000020U)        /* Bit 1 */
#define ADC_SAMPT3_SAMP17_2                                 ((uint32_t)0x00000040U)        /* Bit 2 */
#define ADC_SAMPT3_SAMP17_3                                 ((uint32_t)0x00000080U)        /* Bit 3 */

#define ADC_SAMPT3_SAMP18                                   ((uint32_t)0x00000F00U)        /* SAMP18[3:0] bits (Channel 18 Sample time selection) */
#define ADC_SAMPT3_SAMP18_0                                 ((uint32_t)0x00000100U)        /* Bit 0 */
#define ADC_SAMPT3_SAMP18_1                                 ((uint32_t)0x00000200U)        /* Bit 1 */
#define ADC_SAMPT3_SAMP18_2                                 ((uint32_t)0x00000400U)        /* Bit 2 */
#define ADC_SAMPT3_SAMP18_3                                 ((uint32_t)0x00000800U)        /* Bit 3 */

#define ADC_SAMPT3_SAMP19                                   ((uint32_t)0x0000F000U)        /* SAMP19[3:0] bits (Channel 19 Sample time selection) */
#define ADC_SAMPT3_SAMP19_0                                 ((uint32_t)0x00001000U)        /* Bit 0 */
#define ADC_SAMPT3_SAMP19_1                                 ((uint32_t)0x00002000U)        /* Bit 1 */
#define ADC_SAMPT3_SAMP19_2                                 ((uint32_t)0x00004000U)        /* Bit 2 */
#define ADC_SAMPT3_SAMP19_3                                 ((uint32_t)0x00008000U)        /* Bit 3 */

/********************  Bit definition for ADC_DIFSEL register  *****************/
#define ADC_DIFSEL_DIFSEL                                   ((uint32_t)0x000FFFFEU)        /* SAMP19[3:0] bits (Differential mode for channels 19 to 1) */
#define ADC_DIFSEL_DIFSEL_CH1                               ((uint32_t)0x00000002U)        /* Bit1 */ 
#define ADC_DIFSEL_DIFSEL_CH2                               ((uint32_t)0x00000004U)        /* Bit2 */ 
#define ADC_DIFSEL_DIFSEL_CH3                               ((uint32_t)0x00000008U)        /* Bit3 */ 
#define ADC_DIFSEL_DIFSEL_CH4                               ((uint32_t)0x00000010U)        /* Bit4 */ 
#define ADC_DIFSEL_DIFSEL_CH5                               ((uint32_t)0x00000020U)        /* Bit5 */ 
#define ADC_DIFSEL_DIFSEL_CH6                               ((uint32_t)0x00000040U)        /* Bit6 */ 
#define ADC_DIFSEL_DIFSEL_CH7                               ((uint32_t)0x00000080U)        /* Bit7 */ 
#define ADC_DIFSEL_DIFSEL_CH8                               ((uint32_t)0x00000100U)        /* Bit8 */ 
#define ADC_DIFSEL_DIFSEL_CH9                               ((uint32_t)0x00000200U)        /* Bit9 */ 
#define ADC_DIFSEL_DIFSEL_CH10                              ((uint32_t)0x00000400U)        /* Bit10 */
#define ADC_DIFSEL_DIFSEL_CH11                              ((uint32_t)0x00000800U)        /* Bit11 */
#define ADC_DIFSEL_DIFSEL_CH12                              ((uint32_t)0x00001000U)        /* Bit12 */
#define ADC_DIFSEL_DIFSEL_CH13                              ((uint32_t)0x00002000U)        /* Bit13 */
#define ADC_DIFSEL_DIFSEL_CH14                              ((uint32_t)0x00004000U)        /* Bit14 */
#define ADC_DIFSEL_DIFSEL_CH15                              ((uint32_t)0x00008000U)        /* Bit15 */
#define ADC_DIFSEL_DIFSEL_CH16                              ((uint32_t)0x00010000U)        /* Bit16 */
#define ADC_DIFSEL_DIFSEL_CH17                              ((uint32_t)0x00020000U)        /* Bit17 */
#define ADC_DIFSEL_DIFSEL_CH18                              ((uint32_t)0x00040000U)        /* Bit18 */
#define ADC_DIFSEL_DIFSEL_CH19                              ((uint32_t)0x00080000U)        /* Bit19 */

/********************  Bit definition for ADC_AWDOTIM register  ***************/
#define ADC_AWDCTRL_AWD3TIMEN                               ((uint32_t)0x00000004U)        /* Bit[2] Analog watchdog 3 event to timer enable*/
#define ADC_AWDCTRL_AWD2TIMEN                               ((uint32_t)0x00000002U)        /* Bit[1] Analog watchdog 2 event to timer enable*/
#define ADC_AWDCTRL_AWD1TIMEN                               ((uint32_t)0x00000001U)        /* Bit[0] Analog watchdog 1 event to timer enable*/


/******************  Bit definition for ADC_OFFSET1 register  *******************/
#define ADC_OFFSET1_OFFSCH1DAT                              ((uint32_t)0x00000FFFU)        /* ADC offset number 1 offset date */
#define ADC_OFFSET1_OFFSCH1DIR                              ((uint32_t)0x01000000U)        /* ADC offset number 1 positive */
#define ADC_OFFSET1_OFFSCH1SATEN                            ((uint32_t)0x02000000U)        /* ADC offset number 1 saturation enable */

#define ADC_OFFSET1_OFFSCH1CH                               ((uint32_t)0x7C000000U)        /* OFFSCH1CH[4:0] bits (ADC offset number 1 channel selection) */
#define ADC_OFFSET1_OFFSCH1CH_0                             ((uint32_t)0x04000000U)        /* Bit 0 */
#define ADC_OFFSET1_OFFSCH1CH_1                             ((uint32_t)0x08000000U)        /* Bit 1 */
#define ADC_OFFSET1_OFFSCH1CH_2                             ((uint32_t)0x10000000U)        /* Bit 2 */
#define ADC_OFFSET1_OFFSCH1CH_3                             ((uint32_t)0x20000000U)        /* Bit 3 */
#define ADC_OFFSET1_OFFSCH1CH_4                             ((uint32_t)0x40000000U)        /* Bit 4 */

#define ADC_OFFSET1_OFFSCH1EN                               ((uint32_t)0x80000000U)        /* ADC offset number 1 offset enable */

/******************  Bit definition for ADC_OFFSET2 register  *******************/
#define ADC_OFFSET2_OFFSCH2DAT                              ((uint32_t)0x00000FFFU)        /* ADC offset number 2 offset date */
#define ADC_OFFSET2_OFFSCH2DIR                              ((uint32_t)0x01000000U)        /* ADC offset number 2 positive */
#define ADC_OFFSET2_OFFSCH2SATEN                            ((uint32_t)0x02000000U)        /* ADC offset number 2 saturation enable */

#define ADC_OFFSET2_OFFSCH2CH                               ((uint32_t)0x7C000000U)        /* OFFSCH2CH[4:0] bits (ADC offset number 2 channel selection) */
#define ADC_OFFSET2_OFFSCH2CH_0                             ((uint32_t)0x04000000U)        /* Bit 0 */
#define ADC_OFFSET2_OFFSCH2CH_1                             ((uint32_t)0x08000000U)        /* Bit 1 */
#define ADC_OFFSET2_OFFSCH2CH_2                             ((uint32_t)0x10000000U)        /* Bit 2 */
#define ADC_OFFSET2_OFFSCH2CH_3                             ((uint32_t)0x20000000U)        /* Bit 3 */
#define ADC_OFFSET2_OFFSCH2CH_4                             ((uint32_t)0x40000000U)        /* Bit 4 */

#define ADC_OFFSET2_OFFSCH2EN                               ((uint32_t)0x80000000U)        /* ADC offset number 2 offset enable */

/******************  Bit definition for ADC_OFFSET3 register  *******************/
#define ADC_OFFSET3_OFFSCH3DAT                              ((uint32_t)0x00000FFFU)        /* ADC offset number 3 offset date */
#define ADC_OFFSET3_OFFSCH3DIR                              ((uint32_t)0x01000000U)        /* ADC offset number 3 positive */
#define ADC_OFFSET3_OFFSCH3SATEN                            ((uint32_t)0x02000000U)        /* ADC offset number 3 saturation enable */

#define ADC_OFFSET3_OFFSCH3CH                               ((uint32_t)0x7C000000U)        /* OFFSCH3CH[4:0] bits (ADC offset number 3 channel selection) */
#define ADC_OFFSET3_OFFSCH3CH_0                             ((uint32_t)0x04000000U)        /* Bit 0 */
#define ADC_OFFSET3_OFFSCH3CH_1                             ((uint32_t)0x08000000U)        /* Bit 1 */
#define ADC_OFFSET3_OFFSCH3CH_2                             ((uint32_t)0x10000000U)        /* Bit 2 */
#define ADC_OFFSET3_OFFSCH3CH_3                             ((uint32_t)0x20000000U)        /* Bit 3 */
#define ADC_OFFSET3_OFFSCH3CH_4                             ((uint32_t)0x40000000U)        /* Bit 4 */

#define ADC_OFFSET3_OFFSCH3EN                               ((uint32_t)0x80000000U)        /* ADC offset number 3 offset enable */

/******************  Bit definition for ADC_OFFSET4 register  *******************/
#define ADC_OFFSET4_OFFSCH4DAT                              ((uint32_t)0x00000FFFU)        /* ADC offset number 4 offset date */
#define ADC_OFFSET4_OFFSCH4DIR                              ((uint32_t)0x01000000U)        /* ADC offset number 4 positive */
#define ADC_OFFSET4_OFFSCH4SATEN                            ((uint32_t)0x02000000U)        /* ADC offset number 4 saturation enable */

#define ADC_OFFSET4_OFFSCH4CH                               ((uint32_t)0x7C000000U)        /* OFFSCH4CH[4:0] bits (ADC offset number 4 channel selection) */
#define ADC_OFFSET4_OFFSCH4CH_0                             ((uint32_t)0x04000000U)        /* Bit 0 */
#define ADC_OFFSET4_OFFSCH4CH_1                             ((uint32_t)0x08000000U)        /* Bit 1 */
#define ADC_OFFSET4_OFFSCH4CH_2                             ((uint32_t)0x10000000U)        /* Bit 2 */
#define ADC_OFFSET4_OFFSCH4CH_3                             ((uint32_t)0x20000000U)        /* Bit 3 */
#define ADC_OFFSET4_OFFSCH4CH_4                             ((uint32_t)0x40000000U)        /* Bit 4 */

#define ADC_OFFSET4_OFFSCH1EN                               ((uint32_t)0x80000000U)        /* ADC offset number 4 offset enable */

/****************** Bit definition for ADC_AWD1HIGH register  *******************/
#define ADC_AWD1HIGH_HTH                                    ((uint32_t)0x00000FFFU)        /* Analog watchdog 1 high threshold */

/****************** Bit definition for ADC_AWD1LOW register  ********************/
#define ADC_AWD1LOW_LTH                                     ((uint32_t)0x00000FFFU)        /* Analog watchdog 1 low threshold */

#define ADC_AWD1LOW_AWDFIL                                  ((uint32_t)0x00007000U)        /* AWDFIL[2:0] bits (Analog watchdog 1 Filter value) */
#define ADC_AWD1LOW_AWDFIL_0                                ((uint32_t)0x00001000U)        /* Bit 0 */
#define ADC_AWD1LOW_AWDFIL_1                                ((uint32_t)0x00002000U)        /* Bit 1 */
#define ADC_AWD1LOW_AWDFIL_2                                ((uint32_t)0x00004000U)        /* Bit 2 */

/******************* Bit definition for ADC_AWD2HIGH register  *****************/
#define ADC_AWD2HIGH_HTH                                    ((uint32_t)0x00000FFFU)        /* Analog watchdog 2 high threshold */

/******************* Bit definition for ADC_AWD2LOW register  ******************/
#define ADC_AWD2LOW_LTH                                     ((uint32_t)0x00000FFFU)        /* Analog watchdog 2 low threshold */

/*******************  Bit definition for ADC_AWD3HIGH register *****************/
#define ADC_AWD3HIGH_HTH                                    ((uint32_t)0x00000FFFU)        /* Analog watchdog 3 high threshold */

/******************* Bit definition for ADC_AWD3LOW register  ******************/
#define ADC_AWD3LOW_LTH                                     ((uint32_t)0x00000FFFU)        /* Analog watchdog 3 low threshold */

/********************  Bit definition for ADC_AWD2EN register  ****************/
#define ADC_AWD2EN_AWD2EN                                   ((uint32_t)0x000FFFFFU)        /* AWD2EN[19:0] bits (ADC analog watchdog 2 monitored channel selection) */
#define ADC_AWD2EN_AWD2EN_CH0                               ((uint32_t)0x00000001U)        /* ADC analog watchdog 2 monitored channel 0 */
#define ADC_AWD2EN_AWD2EN_CH1                               ((uint32_t)0x00000002U)        /* ADC analog watchdog 2 monitored channel 1 */
#define ADC_AWD2EN_AWD2EN_CH2                               ((uint32_t)0x00000004U)        /* ADC analog watchdog 2 monitored channel 2 */
#define ADC_AWD2EN_AWD2EN_CH3                               ((uint32_t)0x00000008U)        /* ADC analog watchdog 2 monitored channel 3 */
#define ADC_AWD2EN_AWD2EN_CH4                               ((uint32_t)0x00000010U)        /* ADC analog watchdog 2 monitored channel 4 */
#define ADC_AWD2EN_AWD2EN_CH5                               ((uint32_t)0x00000020U)        /* ADC analog watchdog 2 monitored channel 5 */
#define ADC_AWD2EN_AWD2EN_CH6                               ((uint32_t)0x00000040U)        /* ADC analog watchdog 2 monitored channel 6 */
#define ADC_AWD2EN_AWD2EN_CH7                               ((uint32_t)0x00000080U)        /* ADC analog watchdog 2 monitored channel 7 */
#define ADC_AWD2EN_AWD2EN_CH8                               ((uint32_t)0x00000100U)        /* ADC analog watchdog 2 monitored channel 8 */
#define ADC_AWD2EN_AWD2EN_CH9                               ((uint32_t)0x00000200U)        /* ADC analog watchdog 2 monitored channel 9 */
#define ADC_AWD2EN_AWD2EN_CH10                              ((uint32_t)0x00000400U)        /* ADC analog watchdog 2 monitored channel 10 */
#define ADC_AWD2EN_AWD2EN_CH11                              ((uint32_t)0x00000800U)        /* ADC analog watchdog 2 monitored channel 11 */
#define ADC_AWD2EN_AWD2EN_CH12                              ((uint32_t)0x00001000U)        /* ADC analog watchdog 2 monitored channel 12 */
#define ADC_AWD2EN_AWD2EN_CH13                              ((uint32_t)0x00002000U)        /* ADC analog watchdog 2 monitored channel 13 */
#define ADC_AWD2EN_AWD2EN_CH14                              ((uint32_t)0x00004000U)        /* ADC analog watchdog 2 monitored channel 14 */
#define ADC_AWD2EN_AWD2EN_CH15                              ((uint32_t)0x00008000U)        /* ADC analog watchdog 2 monitored channel 15 */
#define ADC_AWD2EN_AWD2EN_CH16                              ((uint32_t)0x00010000U)        /* ADC analog watchdog 2 monitored channel 16 */
#define ADC_AWD2EN_AWD2EN_CH17                              ((uint32_t)0x00020000U)        /* ADC analog watchdog 2 monitored channel 17 */
#define ADC_AWD2EN_AWD2EN_CH18                              ((uint32_t)0x00040000U)        /* ADC analog watchdog 2 monitored channel 18 */
#define ADC_AWD2EN_AWD2EN_CH19                              ((uint32_t)0x00080000U)        /* ADC analog watchdog 2 monitored channel 19 */

/********************  Bit definition for ADC_AWD3EN register  ****************/
#define ADC_AWD3EN_AWD3EN                                   ((uint32_t)0x000FFFFFU)        /* AWD3EN[19:0] bits (ADC analog watchdog 3 monitored channel selection) */
#define ADC_AWD3EN_AWD3EN_CH0                               ((uint32_t)0x00000001U)        /* ADC analog watchdog 3 monitored channel 0 */
#define ADC_AWD3EN_AWD3EN_CH1                               ((uint32_t)0x00000002U)        /* ADC analog watchdog 3 monitored channel 1 */
#define ADC_AWD3EN_AWD3EN_CH2                               ((uint32_t)0x00000004U)        /* ADC analog watchdog 3 monitored channel 2 */
#define ADC_AWD3EN_AWD3EN_CH3                               ((uint32_t)0x00000008U)        /* ADC analog watchdog 3 monitored channel 3 */
#define ADC_AWD3EN_AWD3EN_CH4                               ((uint32_t)0x00000010U)        /* ADC analog watchdog 3 monitored channel 4 */
#define ADC_AWD3EN_AWD3EN_CH5                               ((uint32_t)0x00000020U)        /* ADC analog watchdog 3 monitored channel 5 */
#define ADC_AWD3EN_AWD3EN_CH6                               ((uint32_t)0x00000040U)        /* ADC analog watchdog 3 monitored channel 6 */
#define ADC_AWD3EN_AWD3EN_CH7                               ((uint32_t)0x00000080U)        /* ADC analog watchdog 3 monitored channel 7 */
#define ADC_AWD3EN_AWD3EN_CH8                               ((uint32_t)0x00000100U)        /* ADC analog watchdog 3 monitored channel 8 */
#define ADC_AWD3EN_AWD3EN_CH9                               ((uint32_t)0x00000200U)        /* ADC analog watchdog 3 monitored channel 9 */
#define ADC_AWD3EN_AWD3EN_CH10                              ((uint32_t)0x00000400U)        /* ADC analog watchdog 3 monitored channel 10 */
#define ADC_AWD3EN_AWD3EN_CH11                              ((uint32_t)0x00000800U)        /* ADC analog watchdog 3 monitored channel 11 */
#define ADC_AWD3EN_AWD3EN_CH12                              ((uint32_t)0x00001000U)        /* ADC analog watchdog 3 monitored channel 12 */
#define ADC_AWD3EN_AWD3EN_CH13                              ((uint32_t)0x00002000U)        /* ADC analog watchdog 3 monitored channel 13 */
#define ADC_AWD3EN_AWD3EN_CH14                              ((uint32_t)0x00004000U)        /* ADC analog watchdog 3 monitored channel 14 */
#define ADC_AWD3EN_AWD3EN_CH15                              ((uint32_t)0x00008000U)        /* ADC analog watchdog 3 monitored channel 15 */
#define ADC_AWD3EN_AWD3EN_CH16                              ((uint32_t)0x00010000U)        /* ADC analog watchdog 3 monitored channel 16 */
#define ADC_AWD3EN_AWD3EN_CH17                              ((uint32_t)0x00020000U)        /* ADC analog watchdog 3 monitored channel 17 */
#define ADC_AWD3EN_AWD3EN_CH18                              ((uint32_t)0x00040000U)        /* ADC analog watchdog 3 monitored channel 18 */
#define ADC_AWD3EN_AWD3EN_CH19                              ((uint32_t)0x00080000U)        /* ADC analog watchdog 3 monitored channel 19 */

/********************  Bit definition for ADC_AWD2INTEN register  ****************/
#define ADC_AWD2INTEN                                       ((uint32_t)0x000FFFFFU)        /* AWD2INTEN[19:0] bits (ADC analog watchdog 2 channel interrupt enable) */
#define ADC_AWD2INTEN_CH0                                   ((uint32_t)0x00000001U)        /* ADC analog watchdog 2 channel0 interrupt enable */
#define ADC_AWD2INTEN_CH1                                   ((uint32_t)0x00000002U)        /* ADC analog watchdog 2 channel1 interrupt enable */
#define ADC_AWD2INTEN_CH2                                   ((uint32_t)0x00000004U)        /* ADC analog watchdog 2 channel2 interrupt enable */
#define ADC_AWD2INTEN_CH3                                   ((uint32_t)0x00000008U)        /* ADC analog watchdog 2 channel3 interrupt enable */
#define ADC_AWD2INTEN_CH4                                   ((uint32_t)0x00000010U)        /* ADC analog watchdog 2 channel4 interrupt enable */
#define ADC_AWD2INTEN_CH5                                   ((uint32_t)0x00000020U)        /* ADC analog watchdog 2 channel5 interrupt enable */
#define ADC_AWD2INTEN_CH6                                   ((uint32_t)0x00000040U)        /* ADC analog watchdog 2 channel6 interrupt enable */
#define ADC_AWD2INTEN_CH7                                   ((uint32_t)0x00000080U)        /* ADC analog watchdog 2 channel7 interrupt enable */
#define ADC_AWD2INTEN_CH8                                   ((uint32_t)0x00000100U)        /* ADC analog watchdog 2 channel8 interrupt enable */
#define ADC_AWD2INTEN_CH9                                   ((uint32_t)0x00000200U)        /* ADC analog watchdog 2 channel9 interrupt enable */
#define ADC_AWD2INTEN_CH10                                  ((uint32_t)0x00000400U)        /* ADC analog watchdog 2 channel10 interrupt enable */
#define ADC_AWD2INTEN_CH11                                  ((uint32_t)0x00000800U)        /* ADC analog watchdog 2 channel11 interrupt enable */
#define ADC_AWD2INTEN_CH12                                  ((uint32_t)0x00001000U)        /* ADC analog watchdog 2 channel12 interrupt enable */
#define ADC_AWD2INTEN_CH13                                  ((uint32_t)0x00002000U)        /* ADC analog watchdog 2 channel13 interrupt enable */
#define ADC_AWD2INTEN_CH14                                  ((uint32_t)0x00004000U)        /* ADC analog watchdog 2 channel14 interrupt enable */
#define ADC_AWD2INTEN_CH15                                  ((uint32_t)0x00008000U)        /* ADC analog watchdog 2 channel15 interrupt enable */
#define ADC_AWD2INTEN_CH16                                  ((uint32_t)0x00010000U)        /* ADC analog watchdog 2 channel16 interrupt enable */
#define ADC_AWD2INTEN_CH17                                  ((uint32_t)0x00020000U)        /* ADC analog watchdog 2 channel17 interrupt enable */
#define ADC_AWD2INTEN_CH18                                  ((uint32_t)0x00040000U)        /* ADC analog watchdog 2 channel18 interrupt enable */
#define ADC_AWD2INTEN_CH19                                  ((uint32_t)0x00080000U)        /* ADC analog watchdog 2 channel19 interrupt enable */

/********************  Bit definition for ADC_AWD3EN register  ****************/
#define ADC_AWD3INTEN                                       ((uint32_t)0x000FFFFFU)        /* AWD3INTEN[19:0] bits (ADC analog watchdog 3 channel interrupt enable) */
#define ADC_AWD3INTEN_CH0                                   ((uint32_t)0x00000001U)        /* ADC analog watchdog 3 channel0 interrupt enable */
#define ADC_AWD3INTEN_CH1                                   ((uint32_t)0x00000002U)        /* ADC analog watchdog 3 channel1 interrupt enable */
#define ADC_AWD3INTEN_CH2                                   ((uint32_t)0x00000004U)        /* ADC analog watchdog 3 channel2 interrupt enable */
#define ADC_AWD3INTEN_CH3                                   ((uint32_t)0x00000008U)        /* ADC analog watchdog 3 channel3 interrupt enable */
#define ADC_AWD3INTEN_CH4                                   ((uint32_t)0x00000010U)        /* ADC analog watchdog 3 channel4 interrupt enable */
#define ADC_AWD3INTEN_CH5                                   ((uint32_t)0x00000020U)        /* ADC analog watchdog 3 channel5 interrupt enable */
#define ADC_AWD3INTEN_CH6                                   ((uint32_t)0x00000040U)        /* ADC analog watchdog 3 channel6 interrupt enable */
#define ADC_AWD3INTEN_CH7                                   ((uint32_t)0x00000080U)        /* ADC analog watchdog 3 channel7 interrupt enable */
#define ADC_AWD3INTEN_CH8                                   ((uint32_t)0x00000100U)        /* ADC analog watchdog 3 channel8 interrupt enable */
#define ADC_AWD3INTEN_CH9                                   ((uint32_t)0x00000200U)        /* ADC analog watchdog 3 channel9 interrupt enable */
#define ADC_AWD3INTEN_CH10                                  ((uint32_t)0x00000400U)        /* ADC analog watchdog 3 channel10 interrupt enable */
#define ADC_AWD3INTEN_CH11                                  ((uint32_t)0x00000800U)        /* ADC analog watchdog 3 channel11 interrupt enable */
#define ADC_AWD3INTEN_CH12                                  ((uint32_t)0x00001000U)        /* ADC analog watchdog 3 channel12 interrupt enable */
#define ADC_AWD3INTEN_CH13                                  ((uint32_t)0x00002000U)        /* ADC analog watchdog 3 channel13 interrupt enable */
#define ADC_AWD3INTEN_CH14                                  ((uint32_t)0x00004000U)        /* ADC analog watchdog 3 channel14 interrupt enable */
#define ADC_AWD3INTEN_CH15                                  ((uint32_t)0x00008000U)        /* ADC analog watchdog 3 channel15 interrupt enable */
#define ADC_AWD3INTEN_CH16                                  ((uint32_t)0x00010000U)        /* ADC analog watchdog 3 channel16 interrupt enable */
#define ADC_AWD3INTEN_CH17                                  ((uint32_t)0x00020000U)        /* ADC analog watchdog 3 channel17 interrupt enable */
#define ADC_AWD3INTEN_CH18                                  ((uint32_t)0x00040000U)        /* ADC analog watchdog 3 channel18 interrupt enable */
#define ADC_AWD3INTEN_CH19                                  ((uint32_t)0x00080000U)        /* ADC analog watchdog 3 channel19 interrupt enable */

/********************  Bit definition for ADC_AWD2STS register  ****************/
#define ADC_AWD2STS                                         ((uint32_t)0x000FFFFFU)        /* AWD2FLAG[18:0] bits (ADC analog watchdog 2 status flag) */
#define ADC_AWD2STS_AWD2FLAG_CH0                            ((uint32_t)0x00000001U)        /* ADC analog watchdog 2 channel0 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH1                            ((uint32_t)0x00000002U)        /* ADC analog watchdog 2 channel1 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH2                            ((uint32_t)0x00000004U)        /* ADC analog watchdog 2 channel2 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH3                            ((uint32_t)0x00000008U)        /* ADC analog watchdog 2 channel3 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH4                            ((uint32_t)0x00000010U)        /* ADC analog watchdog 2 channel4 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH5                            ((uint32_t)0x00000020U)        /* ADC analog watchdog 2 channel5 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH6                            ((uint32_t)0x00000040U)        /* ADC analog watchdog 2 channel6 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH7                            ((uint32_t)0x00000080U)        /* ADC analog watchdog 2 channel7 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH8                            ((uint32_t)0x00000100U)        /* ADC analog watchdog 2 channel8 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH9                            ((uint32_t)0x00000200U)        /* ADC analog watchdog 2 channel9 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH10                           ((uint32_t)0x00000400U)        /* ADC analog watchdog 2 channel10 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH11                           ((uint32_t)0x00000800U)        /* ADC analog watchdog 2 channel11 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH12                           ((uint32_t)0x00001000U)        /* ADC analog watchdog 2 channel12 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH13                           ((uint32_t)0x00002000U)        /* ADC analog watchdog 2 channel13 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH14                           ((uint32_t)0x00004000U)        /* ADC analog watchdog 2 channel14 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH15                           ((uint32_t)0x00008000U)        /* ADC analog watchdog 2 channel15 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH16                           ((uint32_t)0x00010000U)        /* ADC analog watchdog 2 channel16 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH17                           ((uint32_t)0x00020000U)        /* ADC analog watchdog 2 channel17 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH18                           ((uint32_t)0x00040000U)        /* ADC analog watchdog 2 channel18 status flag */
#define ADC_AWD2STS_AWD2FLAG_CH19                           ((uint32_t)0x00080000U)        /* ADC analog watchdog 2 channel19 status flag */

/********************  Bit definition for ADC_AWD3STS register  ****************/
#define ADC_AWD3STS                                         ((uint32_t)0x000FFFFFU)        /* AWD3FLAG[19:0] bits (ADC analog watchdog 3 status flag) */
#define ADC_AWD3STS_AWD3FLAG_CH0                            ((uint32_t)0x00000001U)        /* ADC analog watchdog 3 channel0 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH1                            ((uint32_t)0x00000002U)        /* ADC analog watchdog 3 channel1 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH2                            ((uint32_t)0x00000004U)        /* ADC analog watchdog 3 channel2 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH3                            ((uint32_t)0x00000008U)        /* ADC analog watchdog 3 channel3 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH4                            ((uint32_t)0x00000010U)        /* ADC analog watchdog 3 channel4 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH5                            ((uint32_t)0x00000020U)        /* ADC analog watchdog 3 channel5 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH6                            ((uint32_t)0x00000040U)        /* ADC analog watchdog 3 channel6 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH7                            ((uint32_t)0x00000080U)        /* ADC analog watchdog 3 channel7 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH8                            ((uint32_t)0x00000100U)        /* ADC analog watchdog 3 channel8 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH9                            ((uint32_t)0x00000200U)        /* ADC analog watchdog 3 channel9 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH10                           ((uint32_t)0x00000400U)        /* ADC analog watchdog 3 channel10 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH11                           ((uint32_t)0x00000800U)        /* ADC analog watchdog 3 channel11 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH12                           ((uint32_t)0x00001000U)        /* ADC analog watchdog 3 channel12 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH13                           ((uint32_t)0x00002000U)        /* ADC analog watchdog 3 channel13 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH14                           ((uint32_t)0x00004000U)        /* ADC analog watchdog 3 channel14 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH15                           ((uint32_t)0x00008000U)        /* ADC analog watchdog 3 channel15 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH16                           ((uint32_t)0x00010000U)        /* ADC analog watchdog 3 channel16 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH17                           ((uint32_t)0x00020000U)        /* ADC analog watchdog 3 channel17 status flag */
#define ADC_AWD3STS_AWD3FLAG_CH18                           ((uint32_t)0x00040000U)        /* ADC analog watchdog 3 channel18 status flag */
#define ADC_AWD2STS_AWD3FLAG_CH19                           ((uint32_t)0x00080000U)        /* ADC analog watchdog 3 channel19 status flag */

/*******************  Bit definition for ADC_RSEQ1 register  *******************/
#define ADC_RSEQ1_SEQ19                                 ((uint32_t)0x0000001FU)            /* SEQ19[4:0] bits (19th conversion in regular sequence) */
#define ADC_RSEQ1_SEQ19_0                               ((uint32_t)0x00000001U)            /* Bit 0 */
#define ADC_RSEQ1_SEQ19_1                               ((uint32_t)0x00000002U)            /* Bit 1 */
#define ADC_RSEQ1_SEQ19_2                               ((uint32_t)0x00000004U)            /* Bit 2 */
#define ADC_RSEQ1_SEQ19_3                               ((uint32_t)0x00000008U)            /* Bit 3 */
#define ADC_RSEQ1_SEQ19_4                               ((uint32_t)0x00000010U)            /* Bit 4 */
    
#define ADC_RSEQ1_SEQ20                                 ((uint32_t)0x000003E0U)            /* SEQ20[4:0] bits (20th conversion in regular sequence) */
#define ADC_RSEQ1_SEQ20_0                               ((uint32_t)0x00000020U)            /* Bit 0 */
#define ADC_RSEQ1_SEQ20_1                               ((uint32_t)0x00000040U)            /* Bit 1 */
#define ADC_RSEQ1_SEQ20_2                               ((uint32_t)0x00000080U)            /* Bit 2 */
#define ADC_RSEQ1_SEQ20_3                               ((uint32_t)0x00000100U)            /* Bit 3 */
#define ADC_RSEQ1_SEQ20_4                               ((uint32_t)0x00000200U)            /* Bit 4 */
    
#define ADC_RSEQ1_LEN                                   ((uint32_t)0x00007C00U)            /* LEN[4:0] bits (Regular channel sequence length) */
#define ADC_RSEQ1_LEN_0                                 ((uint32_t)0x00000400U)            /* Bit 0 */
#define ADC_RSEQ1_LEN_1                                 ((uint32_t)0x00000800U)            /* Bit 1 */
#define ADC_RSEQ1_LEN_2                                 ((uint32_t)0x00001000U)            /* Bit 2 */
#define ADC_RSEQ1_LEN_3                                 ((uint32_t)0x00002000U)            /* Bit 3 */
#define ADC_RSEQ1_LEN_4                                 ((uint32_t)0x00004000U)            /* Bit 4 */

/*******************  Bit definition for ADC_RSEQ2 register  *******************/
#define ADC_RSEQ2_SEQ13                                 ((uint32_t)0x0000001FU)            /* SEQ13[4:0] bits (13th conversion in regular sequence) */
#define ADC_RSEQ2_SEQ13_0                               ((uint32_t)0x00000001U)            /* Bit 0 */
#define ADC_RSEQ2_SEQ13_1                               ((uint32_t)0x00000002U)            /* Bit 1 */
#define ADC_RSEQ2_SEQ13_2                               ((uint32_t)0x00000004U)            /* Bit 2 */
#define ADC_RSEQ2_SEQ13_3                               ((uint32_t)0x00000008U)            /* Bit 3 */
#define ADC_RSEQ2_SEQ13_4                               ((uint32_t)0x00000010U)            /* Bit 4 */

#define ADC_RSEQ2_SEQ14                                 ((uint32_t)0x000003E0U)            /* SEQ14[4:0] bits (14th conversion in regular sequence) */
#define ADC_RSEQ2_SEQ14_0                               ((uint32_t)0x00000020U)            /* Bit 0 */
#define ADC_RSEQ2_SEQ14_1                               ((uint32_t)0x00000040U)            /* Bit 1 */
#define ADC_RSEQ2_SEQ14_2                               ((uint32_t)0x00000080U)            /* Bit 2 */
#define ADC_RSEQ2_SEQ14_3                               ((uint32_t)0x00000100U)            /* Bit 3 */
#define ADC_RSEQ2_SEQ14_4                               ((uint32_t)0x00000200U)            /* Bit 4 */

#define ADC_RSEQ2_SEQ15                                 ((uint32_t)0x00007C00U)            /* SEQ15[4:0] bits (15th conversion in regular sequence) */
#define ADC_RSEQ2_SEQ15_0                               ((uint32_t)0x00000400U)            /* Bit 0 */
#define ADC_RSEQ2_SEQ15_1                               ((uint32_t)0x00000800U)            /* Bit 1 */
#define ADC_RSEQ2_SEQ15_2                               ((uint32_t)0x00001000U)            /* Bit 2 */
#define ADC_RSEQ2_SEQ15_3                               ((uint32_t)0x00002000U)            /* Bit 3 */
#define ADC_RSEQ2_SEQ15_4                               ((uint32_t)0x00004000U)            /* Bit 4 */

#define ADC_RSEQ2_SEQ16                                 ((uint32_t)0x000F8000U)            /* SEQ16[4:0] bits (16th conversion in regular sequence) */
#define ADC_RSEQ2_SEQ16_0                               ((uint32_t)0x00008000U)            /* Bit 0 */
#define ADC_RSEQ2_SEQ16_1                               ((uint32_t)0x00010000U)            /* Bit 1 */
#define ADC_RSEQ2_SEQ16_2                               ((uint32_t)0x00020000U)            /* Bit 2 */
#define ADC_RSEQ2_SEQ16_3                               ((uint32_t)0x00040000U)            /* Bit 3 */
#define ADC_RSEQ2_SEQ16_4                               ((uint32_t)0x00080000U)            /* Bit 4 */

#define ADC_RSEQ2_SEQ17                                 ((uint32_t)0x01F00000U)            /* SEQ17[4:0] bits (17th conversion in regular sequence) */
#define ADC_RSEQ2_SEQ17_0                               ((uint32_t)0x00100000U)            /* Bit 0 */
#define ADC_RSEQ2_SEQ17_1                               ((uint32_t)0x00200000U)            /* Bit 1 */
#define ADC_RSEQ2_SEQ17_2                               ((uint32_t)0x00400000U)            /* Bit 2 */
#define ADC_RSEQ2_SEQ17_3                               ((uint32_t)0x00800000U)            /* Bit 3 */
#define ADC_RSEQ2_SEQ17_4                               ((uint32_t)0x01000000U)            /* Bit 4 */

#define ADC_RSEQ2_SEQ18                                 ((uint32_t)0x3E000000U)            /* SEQ18[4:0] bits (18th conversion in regular sequence) */
#define ADC_RSEQ2_SEQ18_0                               ((uint32_t)0x02000000U)            /* Bit 0 */
#define ADC_RSEQ2_SEQ18_1                               ((uint32_t)0x04000000U)            /* Bit 1 */
#define ADC_RSEQ2_SEQ18_2                               ((uint32_t)0x08000000U)            /* Bit 2 */
#define ADC_RSEQ2_SEQ18_3                               ((uint32_t)0x10000000U)            /* Bit 3 */
#define ADC_RSEQ2_SEQ18_4                               ((uint32_t)0x20000000U)            /* Bit 4 */

/*******************  Bit definition for ADC_RSEQ3 register  *******************/
#define ADC_RSEQ3_SEQ7                                  ((uint32_t)0x0000001FU)            /* SEQ7[4:0] bits (7th conversion in regular sequence) */
#define ADC_RSEQ3_SEQ7_0                                ((uint32_t)0x00000001U)            /* Bit 0 */
#define ADC_RSEQ3_SEQ7_1                                ((uint32_t)0x00000002U)            /* Bit 1 */
#define ADC_RSEQ3_SEQ7_2                                ((uint32_t)0x00000004U)            /* Bit 2 */
#define ADC_RSEQ3_SEQ7_3                                ((uint32_t)0x00000008U)            /* Bit 3 */
#define ADC_RSEQ3_SEQ7_4                                ((uint32_t)0x00000010U)            /* Bit 4 */

#define ADC_RSEQ3_SEQ8                                  ((uint32_t)0x000003E0U)            /* SEQ8[4:0] bits (8th conversion in regular sequence) */
#define ADC_RSEQ3_SEQ8_0                                ((uint32_t)0x00000020U)            /* Bit 0 */
#define ADC_RSEQ3_SEQ8_1                                ((uint32_t)0x00000040U)            /* Bit 1 */
#define ADC_RSEQ3_SEQ8_2                                ((uint32_t)0x00000080U)            /* Bit 2 */
#define ADC_RSEQ3_SEQ8_3                                ((uint32_t)0x00000100U)            /* Bit 3 */
#define ADC_RSEQ3_SEQ8_4                                ((uint32_t)0x00000200U)            /* Bit 4 */

#define ADC_RSEQ3_SEQ9                                  ((uint32_t)0x00007C00U)            /* SEQ9[4:0] bits (9th conversion in regular sequence) */
#define ADC_RSEQ3_SEQ9_0                                ((uint32_t)0x00000400U)            /* Bit 0 */
#define ADC_RSEQ3_SEQ9_1                                ((uint32_t)0x00000800U)            /* Bit 1 */
#define ADC_RSEQ3_SEQ9_2                                ((uint32_t)0x00001000U)            /* Bit 2 */
#define ADC_RSEQ3_SEQ9_3                                ((uint32_t)0x00002000U)            /* Bit 3 */
#define ADC_RSEQ3_SEQ9_4                                ((uint32_t)0x00004000U)            /* Bit 4 */

#define ADC_RSEQ3_SEQ10                                 ((uint32_t)0x000F8000U)            /* SEQ10[4:0] bits (10th conversion in regular sequence) */
#define ADC_RSEQ3_SEQ10_0                               ((uint32_t)0x00008000U)            /* Bit 0 */
#define ADC_RSEQ3_SEQ10_1                               ((uint32_t)0x00010000U)            /* Bit 1 */
#define ADC_RSEQ3_SEQ10_2                               ((uint32_t)0x00020000U)            /* Bit 2 */
#define ADC_RSEQ3_SEQ10_3                               ((uint32_t)0x00040000U)            /* Bit 3 */
#define ADC_RSEQ3_SEQ10_4                               ((uint32_t)0x00080000U)            /* Bit 4 */

#define ADC_RSEQ3_SEQ11                                 ((uint32_t)0x01F00000U)            /* SEQ11[4:0] bits (11th conversion in regular sequence) */
#define ADC_RSEQ3_SEQ11_0                               ((uint32_t)0x00100000U)            /* Bit 0 */
#define ADC_RSEQ3_SEQ11_1                               ((uint32_t)0x00200000U)            /* Bit 1 */
#define ADC_RSEQ3_SEQ11_2                               ((uint32_t)0x00400000U)            /* Bit 2 */
#define ADC_RSEQ3_SEQ11_3                               ((uint32_t)0x00800000U)            /* Bit 3 */
#define ADC_RSEQ3_SEQ11_4                               ((uint32_t)0x01000000U)            /* Bit 4 */

#define ADC_RSEQ3_SEQ12                                 ((uint32_t)0x3E000000U)            /* SEQ12[4:0] bits (12th conversion in regular sequence) */
#define ADC_RSEQ3_SEQ12_0                               ((uint32_t)0x02000000U)            /* Bit 0 */
#define ADC_RSEQ3_SEQ12_1                               ((uint32_t)0x04000000U)            /* Bit 1 */
#define ADC_RSEQ3_SEQ12_2                               ((uint32_t)0x08000000U)            /* Bit 2 */
#define ADC_RSEQ3_SEQ12_3                               ((uint32_t)0x10000000U)            /* Bit 3 */
#define ADC_RSEQ3_SEQ12_4                               ((uint32_t)0x20000000U)            /* Bit 4 */

/*******************  Bit definition for ADC_RSEQ4 register  *******************/
#define ADC_RSEQ4_SEQ1                                  ((uint32_t)0x0000001FU)            /* SEQ1[4:0] bits (1st conversion in regular sequence) */
#define ADC_RSEQ4_SEQ1_0                                ((uint32_t)0x00000001U)            /* Bit 0 */
#define ADC_RSEQ4_SEQ1_1                                ((uint32_t)0x00000002U)            /* Bit 1 */
#define ADC_RSEQ4_SEQ1_2                                ((uint32_t)0x00000004U)            /* Bit 2 */
#define ADC_RSEQ4_SEQ1_3                                ((uint32_t)0x00000008U)            /* Bit 3 */
#define ADC_RSEQ4_SEQ1_4                                ((uint32_t)0x00000010U)            /* Bit 4 */

#define ADC_RSEQ4_SEQ2                                  ((uint32_t)0x000003E0U)            /* SEQ2[4:0] bits (2nd conversion in regular sequence) */
#define ADC_RSEQ4_SEQ2_0                                ((uint32_t)0x00000020U)            /* Bit 0 */
#define ADC_RSEQ4_SEQ2_1                                ((uint32_t)0x00000040U)            /* Bit 1 */
#define ADC_RSEQ4_SEQ2_2                                ((uint32_t)0x00000080U)            /* Bit 2 */
#define ADC_RSEQ4_SEQ2_3                                ((uint32_t)0x00000100U)            /* Bit 3 */
#define ADC_RSEQ4_SEQ2_4                                ((uint32_t)0x00000200U)            /* Bit 4 */

#define ADC_RSEQ4_SEQ3                                  ((uint32_t)0x00007C00U)            /* SEQ3[4:0] bits (3rd conversion in regular sequence) */
#define ADC_RSEQ4_SEQ3_0                                ((uint32_t)0x00000400U)            /* Bit 0 */
#define ADC_RSEQ4_SEQ3_1                                ((uint32_t)0x00000800U)            /* Bit 1 */
#define ADC_RSEQ4_SEQ3_2                                ((uint32_t)0x00001000U)            /* Bit 2 */
#define ADC_RSEQ4_SEQ3_3                                ((uint32_t)0x00002000U)            /* Bit 3 */
#define ADC_RSEQ4_SEQ3_4                                ((uint32_t)0x00004000U)            /* Bit 4 */

#define ADC_RSEQ4_SEQ4                                  ((uint32_t)0x000F8000U)            /* SEQ4[4:0] bits (4th conversion in regular sequence) */
#define ADC_RSEQ4_SEQ4_0                                ((uint32_t)0x00008000U)            /* Bit 0 */
#define ADC_RSEQ4_SEQ4_1                                ((uint32_t)0x00010000U)            /* Bit 1 */
#define ADC_RSEQ4_SEQ4_2                                ((uint32_t)0x00020000U)            /* Bit 2 */
#define ADC_RSEQ4_SEQ4_3                                ((uint32_t)0x00040000U)            /* Bit 3 */
#define ADC_RSEQ4_SEQ4_4                                ((uint32_t)0x00080000U)            /* Bit 4 */

#define ADC_RSEQ4_SEQ5                                  ((uint32_t)0x01F00000U)            /* SEQ5[4:0] bits (5th conversion in regular sequence) */
#define ADC_RSEQ4_SEQ5_0                                ((uint32_t)0x00100000U)            /* Bit 0 */
#define ADC_RSEQ4_SEQ5_1                                ((uint32_t)0x00200000U)            /* Bit 1 */
#define ADC_RSEQ4_SEQ5_2                                ((uint32_t)0x00400000U)            /* Bit 2 */
#define ADC_RSEQ4_SEQ5_3                                ((uint32_t)0x00800000U)            /* Bit 3 */
#define ADC_RSEQ4_SEQ5_4                                ((uint32_t)0x01000000U)            /* Bit 4 */

#define ADC_RSEQ4_SEQ6                                  ((uint32_t)0x3E000000U)            /* SEQ6[4:0] bits (6th conversion in regular sequence) */
#define ADC_RSEQ4_SEQ6_0                                ((uint32_t)0x02000000U)            /* Bit 0 */
#define ADC_RSEQ4_SEQ6_1                                ((uint32_t)0x04000000U)            /* Bit 1 */
#define ADC_RSEQ4_SEQ6_2                                ((uint32_t)0x08000000U)            /* Bit 2 */
#define ADC_RSEQ4_SEQ6_3                                ((uint32_t)0x10000000U)            /* Bit 3 */
#define ADC_RSEQ4_SEQ6_4                                ((uint32_t)0x20000000U)            /* Bit 4 */

/*******************  Bit definition for ADC_JSEQ register  *******************/
#define ADC_JSEQ_JSEQ1                                  ((uint32_t)0x0000001FU)            /* JSEQ1[4:0] bits (1st conversion in injected sequence) */
#define ADC_JSEQ_JSEQ1_0                                ((uint32_t)0x00000001U)            /* Bit 0 */
#define ADC_JSEQ_JSEQ1_1                                ((uint32_t)0x00000002U)            /* Bit 1 */
#define ADC_JSEQ_JSEQ1_2                                ((uint32_t)0x00000004U)            /* Bit 2 */
#define ADC_JSEQ_JSEQ1_3                                ((uint32_t)0x00000008U)            /* Bit 3 */
#define ADC_JSEQ_JSEQ1_4                                ((uint32_t)0x00000010U)            /* Bit 4 */

#define ADC_JSEQ_JSEQ2                                  ((uint32_t)0x000003E0U)            /* JSEQ2[4:0] bits (2nd conversion in injected sequence) */
#define ADC_JSEQ_JSEQ2_0                                ((uint32_t)0x00000020U)            /* Bit 0 */
#define ADC_JSEQ_JSEQ2_1                                ((uint32_t)0x00000040U)            /* Bit 1 */
#define ADC_JSEQ_JSEQ2_2                                ((uint32_t)0x00000080U)            /* Bit 2 */
#define ADC_JSEQ_JSEQ2_3                                ((uint32_t)0x00000100U)            /* Bit 3 */
#define ADC_JSEQ_JSEQ2_4                                ((uint32_t)0x00000200U)            /* Bit 4 */

#define ADC_JSEQ_JSEQ3                                  ((uint32_t)0x00007C00U)            /* JSEQ3[4:0] bits (3rd conversion in injected sequence) */
#define ADC_JSEQ_JSEQ3_0                                ((uint32_t)0x00000400U)            /* Bit 0 */
#define ADC_JSEQ_JSEQ3_1                                ((uint32_t)0x00000800U)            /* Bit 1 */
#define ADC_JSEQ_JSEQ3_2                                ((uint32_t)0x00001000U)            /* Bit 2 */
#define ADC_JSEQ_JSEQ3_3                                ((uint32_t)0x00002000U)            /* Bit 3 */
#define ADC_JSEQ_JSEQ3_4                                ((uint32_t)0x00004000U)            /* Bit 4 */

#define ADC_JSEQ_JSEQ4                                  ((uint32_t)0x000F8000U)            /* JSEQ4[4:0] bits (4th conversion in injected sequence) */
#define ADC_JSEQ_JSEQ4_0                                ((uint32_t)0x00008000U)            /* Bit 0 */
#define ADC_JSEQ_JSEQ4_1                                ((uint32_t)0x00010000U)            /* Bit 1 */
#define ADC_JSEQ_JSEQ4_2                                ((uint32_t)0x00020000U)            /* Bit 2 */
#define ADC_JSEQ_JSEQ4_3                                ((uint32_t)0x00040000U)            /* Bit 3 */
#define ADC_JSEQ_JSEQ4_4                                ((uint32_t)0x00080000U)            /* Bit 4 */

#define ADC_JSEQ_JLEN                                   ((uint32_t)0x06000000U)            /* JLEN[1:0] bits (Injected Sequence length) */
#define ADC_JSEQ_JLEN_0                                 ((uint32_t)0x02000000U)            /* Bit 0 */
#define ADC_JSEQ_JLEN_1                                 ((uint32_t)0x04000000U)            /* Bit 1 */

/*******************  Bit definition for ADC_JDAT1 register  *******************/
#define ADC_JDAT1_JDAT                                  ((uint16_t)0xFFFFU)                /* Injected data */

/*******************  Bit definition for ADC_JDAT2 register  *******************/
#define ADC_JDAT2_JDAT                                  ((uint16_t)0xFFFFU)                /* Injected data */

/*******************  Bit definition for ADC_JDAT3 register  *******************/
#define ADC_JDAT3_JDAT                                  ((uint16_t)0xFFFFU)                /* Injected data */

/*******************  Bit definition for ADC_JDAT4 register  *******************/
#define ADC_JDAT4_JDAT                                  ((uint16_t)0xFFFFU)                /* Injected data */

/********************  Bit definition for ADC_DAT register  ********************/
#define ADC_DAT_DAT                                     ((uint32_t)0x0000FFFFU)            /* Regular data */
#define ADC_DAT_ADC2DAT                                 ((uint32_t)0xFFFF0000U)            /* Slave ADC data when operating on Muti-ADC */

/********************  Bit definition for ADC_FIFOCFG register  ********************/
#define ADC_FIFOCFG_FINTEN                              ((uint32_t)0x00000004U)            /* FIFO full interrup enable */
#define ADC_FIFOCFG_EINTEN                              ((uint32_t)0x00000008U)            /* FIFO empty interrup enable */
#define ADC_FIFOCFG_HFINTEN                             ((uint32_t)0x00000010U)            /* FIFO half-full interrup enable */
#define ADC_FIFOCFG_EN                                  ((uint32_t)0x00000020U)            /* FIFO enable */

#define ADC_FIFOCFG_WL                                  ((uint32_t)0x000003C0U)            /* WL[1:0] bits (FIFO water level) */
#define ADC_FIFOCFG_WL_0                                ((uint32_t)0x00000040U)            /* Bit 0 */
#define ADC_FIFOCFG_WL_1                                ((uint32_t)0x00000080U)            /* Bit 1 */
#define ADC_FIFOCFG_WL_2                                ((uint32_t)0x00000100U)            /* Bit 2 */
#define ADC_FIFOCFG_WL_3                                ((uint32_t)0x00000200U)            /* Bit 3 */

#define ADC_FIFOCFG_CLR                                 ((uint32_t)0x00000400U)            /* FIFO clear enable */
#define ADC_FIFOCFG_NEINTEN                             ((uint32_t)0x00000800U)            /* FIFO non-empty interrupt enable */

/********************  Bit definition for ADC_FIFOSTS register     ********************/
#define ADC_FIFOSTS_FFLAG                               ((uint32_t)0x00000004U)            /* FIFO full status flag */
#define ADC_FIFOSTS_EFLAG                               ((uint32_t)0x00000008U)            /* FIFO empty status flag*/
#define ADC_FIFOSTS_HFFLAG                              ((uint32_t)0x00000010U)            /* FIFO half-full status flag */

#define ADC_FIFOSTS_DATCNT                              ((uint32_t)0x000003E0U)            /* DATCNT[4:0] bits (FIFO invalid data count) */
#define ADC_FIFOSTS_DATCNT_0                            ((uint32_t)0x00000020U)            /* Bit 0 */
#define ADC_FIFOSTS_DATCNT_1                            ((uint32_t)0x00000040U)            /* Bit 1 */
#define ADC_FIFOSTS_DATCNT_2                            ((uint32_t)0x00000080U)            /* Bit 2 */
#define ADC_FIFOSTS_DATCNT_3                            ((uint32_t)0x00000100U)            /* Bit 3 */
#define ADC_FIFOSTS_DATCNT_4                            ((uint32_t)0x00000200U)            /* Bit 4 */

#define ADC_FIFOSTS_NEFLAG                              ((uint32_t)0x00000800U)            /* FIFO non-empty status flag */

/********************  Bit definition for ADC_DLYSMP register  ********************/
#define ADC_DLYSMP_INTLEADVAL                           ((uint32_t)0xF0000000U)            /* Bit[31:28] The delay time when operating on interleaved mode of dual-ADC or Tripple- ADC */
#define ADC_DLYSMP_INTLEADVAL_0                         ((uint32_t)0x10000000U)            /* Bit28*/
#define ADC_DLYSMP_INTLEADVAL_1                         ((uint32_t)0x20000000U)            /* Bit29*/
#define ADC_DLYSMP_INTLEADVAL_2                         ((uint32_t)0x40000000U)            /* Bit30*/
#define ADC_DLYSMP_INTLEADVAL_3                         ((uint32_t)0x80000000U)            /* Bit31*/

#define ADC_DLYSMP_DLYVAL                               ((uint32_t)0x0F000000U)            /* Bit[27:24] Delayed sampling cycle configuration in independent mode*/
#define ADC_DLYSMP_DLYVAL_0                             ((uint32_t)0x01000000U)            /* Bit24*/
#define ADC_DLYSMP_DLYVAL_1                             ((uint32_t)0x02000000U)            /* Bit25*/
#define ADC_DLYSMP_DLYVAL_2                             ((uint32_t)0x04000000U)            /* Bit26*/
#define ADC_DLYSMP_DLYVAL_3                             ((uint32_t)0x08000000U)            /* Bit27*/

#define ADC_DLYSMP_DLYSAMPEN                            ((uint32_t)0x00800000U)            /* Bit[23] */

/********************  Bit definition for ADC_OSCFG register  *****************/
#define ADC_OSCFG_OSAWD                                 ((uint32_t)0x01000000U)            /* Bit[24] Oversampling data for analog watchdog comparision */
#define ADC_OSCFG_OSRMD                                 ((uint32_t)0x00800000U)            /* Bit[23] Regular channels oversample mode */
#define ADC_OSCFG_OSRTRIG                               ((uint32_t)0x00400000U)            /* Bit[22] egular channels oversample triagger mode */

#define ADC_OSCFG_OSS                                   ((uint32_t)0x003C0000U)            /* Bit[21:18] Oversample data right shift */
#define ADC_OSCFG_OSS_0                                 ((uint32_t)0x00040000U)            /* Bit18*/
#define ADC_OSCFG_OSS_1                                 ((uint32_t)0x00080000U)            /* Bit19*/
#define ADC_OSCFG_OSS_2                                 ((uint32_t)0x00100000U)            /* Bit20*/
#define ADC_OSCFG_OSS_3                                 ((uint32_t)0x00200000U)            /* Bit21*/

#define ADC_OSCFG_OSR                                   ((uint32_t)0x0003C000U)            /* Bit[17:14] ADC oversampling ratio times */
#define ADC_OSCFG_OSR_0                                 ((uint32_t)0x00004000U)            /* Bit14*/
#define ADC_OSCFG_OSR_1                                 ((uint32_t)0x00008000U)            /* Bit15*/
#define ADC_OSCFG_OSR_2                                 ((uint32_t)0x00010000U)            /* Bit16*/
#define ADC_OSCFG_OSR_3                                 ((uint32_t)0x00020000U)            /* Bit17*/

#define ADC_OSCFG_OSJE                                  ((uint32_t)0x00002000U)            /* Bit[13] Injected channels oversample enable*/
#define ADC_OSCFG_OSRE                                  ((uint32_t)0x00001000U)            /* Bit[12] Regular channels oversample enable */

/********************  Bit definition for ADC_INTLRCFG register  ****************/
#define ADC_INTLRCFG_WEN                                ((uint32_t)0x80000000U)            /* WEN bits (Write enable) */
#define ADC_INTLRCFG_RWSTART                            ((uint32_t)0x40000000U)            /* RWSTART bits (Start Write/Read Internal Register) */
#define ADC_INTLRCFG_DONE                               ((uint32_t)0x20000000U)            /* DONE bits (Write/Read Internal Register Finish Flag) */

#define ADC_INTLRCFG_ADDR                               ((uint32_t)0x1C000000U)            /* ADDR[2:0] bits (The address of internal registers) */
#define ADC_INTLRCFG_WDATA                              ((uint32_t)0x03FC0000U)            /* WDATA[7:0] bits (Data write into internal register) */
#define ADC_INTLRCFG_RDATA                              ((uint32_t)0x00003FC0U)            /* RDATA[7:0] bits (Data read from internal register) */

/********************  Bit definition for ADC_GCOMP register  ****************/
#define ADC_GCOMP_GCOMPDAT                              ((uint32_t)0x00003FFFU)            /* GCOMPDAT[13:0] bits (ADC Gain Compensation Coefficient) */


/***    Digital to Analog Converter Peripheral Interface   ***/
/********************  Bit definition for DAC_CTRL register  ********************/
#define DAC_CTRL_DACxEN                                 ((uint32_t)0x00000001U)           /* DACx enable */
#define DAC_CTRL_DMAxEN                                 ((uint32_t)0x00000002U)           /* DACx DMA enable */
#define DAC_CTRL_BxEN                                   ((uint32_t)0x00000004U)           /* DACx output buffer enable */
#define DAC_CTRL_TxEN                                   ((uint32_t)0x00000008U)           /* DACx Trigger enable */
#define DAC_CTRL_DMAUDRxIEn                             ((uint32_t)0x00000010U)           /* DACx DMA underrun interrupt enable */
#define DAC_CTRL_HDBxEN                                 ((uint32_t)0x00000020U)           /* DACx high driver output buffer enable */
#define DAC_CTRL_DMADOUBLExEN                           ((uint32_t)0x00000040U)           /* DACx DMA double data mode enable */
#define DAC_CTRL_SINFORMATxEN                           ((uint32_t)0x00000080U)           /* DACx signed format enable */

#define DAC_CTRL_WxEN                                   ((uint32_t)0x00000700U)           /* WAVE1[1:0] (DACx noise/triangle wave generation enable) */
#define DAC_CTRL_WxEN_0                                 ((uint32_t)0x00000100U)           /* Bit 0 */
#define DAC_CTRL_WxEN_1                                 ((uint32_t)0x00000200U)           /* Bit 1 */
#define DAC_CTRL_WxEN_2                                 ((uint32_t)0x00000400U)           /* Bit 2 */

#define DAC_CTRL_CALxEN                                 ((uint32_t)0x00000800U)           /* DACx calibrate enable */
#define DAC_CTRL_INOUTx                                 ((uint32_t)0x00001000U)           /* DACx is connected to on chip peripherals enable */
#define DAC_CTRL_EXOUTx                                 ((uint32_t)0x00002000U)           /* DACx is connected to external pin enable */
#define DAC_CTRL_TROVCxIEN                              ((uint32_t)0x00004000U)           /* DACx's trigger overclock interrupt enable */

#define DAC_CTRL_DACyEN                                 ((uint32_t)0x00010000U)           /* DACy enable */
#define DAC_CTRL_DMAyEN                                 ((uint32_t)0x00020000U)           /* DACy DMA enable */
#define DAC_CTRL_ByEN                                   ((uint32_t)0x00040000U)           /* DACy output buffer enable */
#define DAC_CTRL_TyEN                                   ((uint32_t)0x00080000U)           /* DACy Trigger enable */
#define DAC_CTRL_DMAUDRyIEn                             ((uint32_t)0x00100000U)           /* DACy DMA underrun interrupt enable */
#define DAC_CTRL_HDByEN                                 ((uint32_t)0x00200000U)           /* DACy high driver output buffer enable */
#define DAC_CTRL_DMADOUBLEyEN                           ((uint32_t)0x00400000U)           /* DACy DMA double data mode enable */
#define DAC_CTRL_SINFORMATyEN                           ((uint32_t)0x00800000U)           /* DACy signed format enable */

#define DAC_CTRL_WyEN                                   ((uint32_t)0x07000000U)           /* WAVE2[1:0] (DACy noise/triangle wave generation enable) */
#define DAC_CTRL_WyEN_0                                 ((uint32_t)0x01000000U)           /* Bit 0 */
#define DAC_CTRL_WyEN_1                                 ((uint32_t)0x02000000U)           /* Bit 1 */
#define DAC_CTRL_WyEN_2                                 ((uint32_t)0x04000000U)           /* Bit 2 */

#define DAC_CTRL_CALyEN                                 ((uint32_t)0x08000000U)           /* DACy calibrate enable */
#define DAC_CTRL_INOUTy                                 ((uint32_t)0x10000000U)           /* DACy is connected to on chip peripherals enable */
#define DAC_CTRL_EXOUTy                                 ((uint32_t)0x20000000U)           /* DACy is connected to external pin enable */
#define DAC_CTRL_TROVCyIEN                              ((uint32_t)0x40000000U)           /* DACy's trigger overclock interrupt enable */

/*****************  Bit definition for DAC_SOTTR register  ******************/
#define DAC_SOTTR_TRxEN                                 ((uint32_t)0x00000001U)           /* DACx software trigger */
#define DAC_SOTTR_TRyEN                                 ((uint32_t)0x00000002U)           /* DACy software trigger */
#define DAC_SOTTR_TRBxEN                                ((uint32_t)0x00010000U)           /* DACx sawtooth step signal software trigger */
#define DAC_SOTTR_TRByEN                                ((uint32_t)0x00020000U)           /* DACy sawtooth step signal software trigger */

/*******************  Bit definiti on for DAC_DATO1 register  *******************/
#define DACx_DATO_DACxDO                                ((uint16_t)0x0FFFU)               /* DACx data output */

/*******************  Bit definition for DAC_DATO2 register  *******************/
#define DACy_DATO_DACyDO                                ((uint16_t)0x0FFFU)               /* DACy data output */

/******************  Bit definition for DAC_DR8CH1 register  ******************/
#define DACx_DR8_DACxD                                  ((uint16_t)0xFF00U)               /* DACx 8-bit Right aligned data */
#define DACx_DR8_DACxDB                                 ((uint16_t)0x00FFU)               /* DACx 8-bit Right aligned data, operating only on double data mode */

/*****************  Bit definition for DAC_DL12CH1 register  ******************/
#define DACx_DL12_DACxDB                                ((uint32_t)0x0000FFF0U)           /* DACx 12-bit Left aligned data */
#define DACx_DL12_DACxD                                 ((uint32_t)0xFFF00000U)           /* DACx 12-bit Left aligned data, operating only on double data mode  */

/*****************  Bit definition for DAC_DR12CH1 register  ******************/
#define DACx_DR12_DACxDB                                ((uint32_t)0x00000FFFU)           /* DACx 12-bit Right aligned data */
#define DACx_DR12_DACxD                                 ((uint32_t)0x0FFF0000U)           /* DACx 12-bit Right aligned data, operating only on double data mode  */

/******************  Bit definition for DAC_DR8CH2 register  ******************/
#define DACy_DR8_DACyD                                  ((uint16_t)0xFF00U)               /* DACy 8-bit Right aligned data */
#define DACy_DR8_DACyDB                                 ((uint16_t)0x00FFU)               /* DACy 8-bit Right aligned data, operating only on double data mode */

/*****************  Bit definition for DAC_DL12CH2 register  ******************/
#define DACy_DL12_DACyDB                                ((uint32_t)0x0000FFF0U)           /* DACy 12-bit Left aligned data */
#define DACy_DL12_DACyD                                 ((uint32_t)0xFFF00000U)           /* DACy 12-bit Left aligned data, operating only on double data mode  */

/*****************  Bit definition for DAC_DR12CH2 register  ******************/
#define DACy_DR12_DACyDB                                ((uint32_t)0x00000FFFU)           /* DACy 12-bit Right aligned data */
#define DACy_DR12_DACyD                                 ((uint32_t)0x0FFF0000U)           /* DACy 12-bit Right aligned data, operating only on double data mode  */

/******************  Bit definition for DAC_DR8DCH register  ******************/
#define DAC_DR8D_DACxD                                  ((uint16_t)0x00FFU)               /* DACx 8-bit Right aligned data */
#define DAC_DR8D_DACyD                                  ((uint16_t)0xFF00U)               /* DACy 8-bit Right aligned data */

/*****************  Bit definition for DAC_DL12DCH register  ******************/
#define DAC_DL12D_DACxD                                 ((uint32_t)0x0000FFF0U)           /* DACx 12-bit Left aligned data */
#define DAC_DL12D_DACyD                                 ((uint32_t)0xFFF00000U)           /* DACy 12-bit Left aligned data */

/*****************  Bit definition for DAC_DR12DCH register  ******************/
#define DAC_DR12D_DACxD                                 ((uint32_t)0x00000FFFU)           /* DACx 12-bit Right aligned data */
#define DAC_DR12D_DACyD                                 ((uint32_t)0x0FFF0000U)           /* DACy 12-bit Right aligned data */

/*****************  Bit definition for DAC_SELCTRL register  ******************/
#define DAC_SETCTRL_SINCSELx                            ((uint32_t)0x0000003EU)           /* DACx sawtooth increment trigger selection */
#define DAC_SETCTRL_SINCSELx_0                          ((uint32_t)0x00000002U)           /* Bit 0 */
#define DAC_SETCTRL_SINCSELx_1                          ((uint32_t)0x00000004U)           /* Bit 1 */
#define DAC_SETCTRL_SINCSELx_2                          ((uint32_t)0x00000008U)           /* Bit 2 */
#define DAC_SETCTRL_SINCSELx_3                          ((uint32_t)0x00000010U)           /* Bit 3 */
#define DAC_SETCTRL_SINCSELx_4                          ((uint32_t)0x00000020U)           /* Bit 4 */

#define DAC_SETCTRL_MAxSEL                              ((uint32_t)0x000003C0U)           /* MAMPx[3:0] (DACx Mask/Amplitude selector) */
#define DAC_SETCTRL_MAxSEL_0                            ((uint32_t)0x00000040U)           /* Bit 0 */
#define DAC_SETCTRL_MAxSEL_1                            ((uint32_t)0x00000080U)           /* Bit 1 */
#define DAC_SETCTRL_MAxSEL_2                            ((uint32_t)0x00000100U)           /* Bit 2 */
#define DAC_SETCTRL_MAxSEL_3                            ((uint32_t)0x00000200U)           /* Bit 3 */

#define DAC_SETCTRL_TxSEL                               ((uint32_t)0x0000F100U)           /* TSELx[4:0] (DACx Trigger source selection) */
#define DAC_SETCTRL_TxSEL_0                             ((uint32_t)0x00000100U)           /* Bit 0 */
#define DAC_SETCTRL_TxSEL_1                             ((uint32_t)0x00001000U)           /* Bit 1 */
#define DAC_SETCTRL_TxSEL_2                             ((uint32_t)0x00002000U)           /* Bit 2 */
#define DAC_SETCTRL_TxSEL_3                             ((uint32_t)0x00004000U)           /* Bit 3 */
#define DAC_SETCTRL_TxSEL_4                             ((uint32_t)0x00008000U)           /* Bit 4 */

#define DAC_SETCTRL_SINCSELy                            ((uint32_t)0x003E0000U)           /* SINCSELy[3:0] (DACy sawtooth increment trigger selection) */
#define DAC_SETCTRL_SINCSELy_0                          ((uint32_t)0x00020000U)           /* Bit 0 */
#define DAC_SETCTRL_SINCSELy_1                          ((uint32_t)0x00040000U)           /* Bit 1 */
#define DAC_SETCTRL_SINCSELy_2                          ((uint32_t)0x00080000U)           /* Bit 2 */
#define DAC_SETCTRL_SINCSELy_3                          ((uint32_t)0x00100000U)           /* Bit 3 */
#define DAC_SETCTRL_SINCSELy_4                          ((uint32_t)0x00200000U)           /* Bit 4 */

#define DAC_SETCTRL_MAySEL                              ((uint32_t)0x03C00000U)           /* MAMPy[3:0] (DACy Mask/Amplitude selector) */
#define DAC_SETCTRL_MAySEL_0                            ((uint32_t)0x00400000U)           /* Bit 0 */
#define DAC_SETCTRL_MAySEL_1                            ((uint32_t)0x00800000U)           /* Bit 1 */
#define DAC_SETCTRL_MAySEL_2                            ((uint32_t)0x01000000U)           /* Bit 2 */
#define DAC_SETCTRL_MAySEL_3                            ((uint32_t)0x02000000U)           /* Bit 3 */

#define DAC_SETCTRL_TySEL                               ((uint32_t)0xF1000000U)           /* TSELy[4:0] (DACy Trigger source selection) */
#define DAC_SETCTRL_TySEL_0                             ((uint32_t)0x01000000U)           /* Bit 0 */
#define DAC_SETCTRL_TySEL_1                             ((uint32_t)0x10000000U)           /* Bit 1 */
#define DAC_SETCTRL_TySEL_2                             ((uint32_t)0x20000000U)           /* Bit 2 */
#define DAC_SETCTRL_TySEL_3                             ((uint32_t)0x40000000U)           /* Bit 3 */
#define DAC_SETCTRL_TySEL_4                             ((uint32_t)0x80000000U)           /* Bit 4 */

/*****************  Bit definition for DAC_STS register  ******************/
#define DAC_STS_DMAUDRx                                 ((uint32_t)0x00000001U)           /* DACx DMA underrun status flag  */
#define DAC_STS_CALFLAGx                                ((uint32_t)0x00000002U)           /* DACx calibrate offset status flag  */
#define DAC_STS_DORSTATx                                ((uint32_t)0x00000004U)           /* DACx data output register status flag  */
#define DAC_STS_TROVCFLAGx                              ((uint32_t)0x00000008U)           /* DACx trigger source overclock status flag  */
#define DAC_STS_VFLAGxCOMP                              ((uint32_t)0x00000010U)           /* Status flag that indicates DACx output is stable or not */

#define DAC_STS_DMAUDRy                                 ((uint32_t)0x00010000U)           /* DACy DMA underrun status flag  */
#define DAC_STS_CALFLAGy                                ((uint32_t)0x00020000U)           /* DACy calibrate offset status flag  */
#define DAC_STS_DORSTATy                                ((uint32_t)0x00040000U)           /* DACy data output register status flag  */
#define DAC_STS_TROVCFLAGy                              ((uint32_t)0x00080000U)           /* DACy trigger source overclock status flag  */
#define DAC_STS_VFLAGyCOMP                              ((uint32_t)0x00100000U)           /* Status flag that indicates DACy output is stable or not */

/*****************  Bit definition for DAC_GCTRL register  ******************/
#define DAC12_GCTRL_HFSEL                               ((uint32_t)0x00000006U)           /* HFSEL[1:0] (High frequency interface mode selection for DAC1/DAC2)  */
#define DAC12_GCTRL_HFSEL_0                             ((uint32_t)0x00000002U)           /* Bit 0 */
#define DAC12_GCTRL_HFSEL_1                             ((uint32_t)0x00000004U)           /* Bit 1 */

#define DAC12_GCTRL_PCS                                 ((uint32_t)0x00FF0000U)           /* PCS[7:0] (The clock prescale of DAC1/DAC2 selection)  */
#define DAC12_GCTRL_PCS_0                               ((uint32_t)0x00010000U)           /* Bit 0 */
#define DAC12_GCTRL_PCS_1                               ((uint32_t)0x00020000U)           /* Bit 1 */
#define DAC12_GCTRL_PCS_2                               ((uint32_t)0x00040000U)           /* Bit 2 */
#define DAC12_GCTRL_PCS_3                               ((uint32_t)0x00080000U)           /* Bit 3 */
#define DAC12_GCTRL_PCS_4                               ((uint32_t)0x00100000U)           /* Bit 4 */
#define DAC12_GCTRL_PCS_5                               ((uint32_t)0x00200000U)           /* Bit 5 */
#define DAC12_GCTRL_PCS_6                               ((uint32_t)0x00400000U)           /* Bit 6 */
#define DAC12_GCTRL_PCS_7                               ((uint32_t)0x00800000U)           /* Bit 7 */

#define DAC3456_GCTRL_PCS                               ((uint32_t)0x001F0000U)           /* PCS[4:0] (The clock prescale of DAC3/DAC4DAC5/DAC6 selection)  */
#define DAC3456_GCTRL_PCS_0                             ((uint32_t)0x00010000U)           /* Bit 0 */
#define DAC3456_GCTRL_PCS_1                             ((uint32_t)0x00020000U)           /* Bit 1 */
#define DAC3456_GCTRL_PCS_2                             ((uint32_t)0x00040000U)           /* Bit 2 */
#define DAC3456_GCTRL_PCS_3                             ((uint32_t)0x00080000U)           /* Bit 3 */
#define DAC3456_GCTRL_PCS_4                             ((uint32_t)0x00100000U)           /* Bit 4 */

/*****************  Bit definition for DAC_STINC register  ******************/
#define DAC_STINC_STINCDATAx                            ((uint32_t)0x00000FFFU)           /* STINCDATAx[11:0] (The sawtooth step value of DACx)  */
#define DAC_STINC_STINCDATAy                            ((uint32_t)0x0FFF0000U)           /* STINCDATAy[11:0] (The sawtooth step value of DACy)  */

/*****************  Bit definition for DAC_STRST register  ******************/
#define DAC_STRST_STRSTDATAx                            ((uint32_t)0x00000FFFU)           /* STRSTDATAx[11:0] (The sawtooth reset value of DACx)  */
#define DAC_STRST_STRSTDATAy                            ((uint32_t)0x0FFF0000U)           /* STRSTDATAy[11:0] (The sawtooth reset value of DACy)  */

/*****************  Bit definition for DAC_CALC register  ******************/
#define DAC_CALC_OTRIMx                                 ((uint32_t)0x0000001FU)           /* OTRIMx[4:0] (The calibration offset value of DACx)  */
#define DAC_CALC_OTRIMy                                 ((uint32_t)0x001F0000U)           /* OTRIMy[4:0] (The calibration offset value of DACy)  */


/***   Comparators Peripheral Interface   ***/
/******** Bit definition for COMP1_CTRL register  ********/
#define COMP1_CTRL_VV1TRM                                   ((uint32_t)0x1F800000U)         /* Bit[28:23] Internal 6bit-dac1 output voltage size*/
#define COMP1_CTRL_VV1TRM_0                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define COMP1_CTRL_VV1TRM_1                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define COMP1_CTRL_VV1TRM_2                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define COMP1_CTRL_VV1TRM_3                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define COMP1_CTRL_VV1TRM_4                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define COMP1_CTRL_VV1TRM_5                                 ((uint32_t)0x10000000U)         /* Bit28*/

#define COMP1_CTRL_VV1EN                                    ((uint32_t)0x00400000U)         /* Bit[22] Internal 6bit-dac1 output enable*/

#define COMP1_CTRL_OUT                                      ((uint32_t)0x00200000U)         /* Bit[21] Output state of Comparator_1 */

#define COMP1_CTRL_BLKINGEN                                 ((uint32_t)0x00100000U)         /* Bit[20] Comparator_1 Blanking enable */

#define COMP1_CTRL_BLKING                                   ((uint32_t)0x000F0000U)         /* Bit[19:16] Blanking source select of Comparator_1 */
#define COMP1_CTRL_BLKING_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define COMP1_CTRL_BLKING_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define COMP1_CTRL_BLKING_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define COMP1_CTRL_BLKING_3                                 ((uint32_t)0x00080000U)         /* Bit19*/

#define COMP1_CTRL_HYST                                     ((uint32_t)0x0000C000U)         /* Bit[15:14] Hysteresis level select of Comparator_1*/
#define COMP1_CTRL_HYST_0                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define COMP1_CTRL_HYST_1                                   ((uint32_t)0x00008000U)         /* Bit15*/

#define COMP1_CTRL_POL                                      ((uint32_t)0x00002000U)         /* Bit[13] */

#define COMP1_CTRL_INPSEL                                   ((uint32_t)0x000001E0U)         /* Bit[8:5] Non inverting input select of Comparator_1*/
#define COMP1_CTRL_INPSEL_0                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define COMP1_CTRL_INPSEL_1                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP1_CTRL_INPSEL_2                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP1_CTRL_INPSEL_3                                 ((uint32_t)0x00000100U)         /* Bit8*/

#define COMP1_CTRL_INMSEL                                   ((uint32_t)0x0000001EU)         /* Bit[4:1] Inverting input select of Comparator_1*/
#define COMP1_CTRL_INMSEL_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP1_CTRL_INMSEL_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP1_CTRL_INMSEL_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP1_CTRL_INMSEL_3                                 ((uint32_t)0x00000010U)         /* Bit4*/

#define COMP1_CTRL_EN                                       ((uint32_t)0x00000001U)         /* Bit[0] Comparator_1 enable */

/******** Bit definition for COMP1_FILC register  ********/
#define COMP1_FILC_VN_FLAG                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define COMP1_FILC_VP_FLAG                                  ((uint32_t)0x00000800U)         /* Bit11*/

#define COMP1_FILC_SAMPW                                    ((uint32_t)0x000007C0U)         /* Bit[10:6] Comparator_1 filter window size*/
#define COMP1_FILC_SAMPW_0                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP1_FILC_SAMPW_1                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP1_FILC_SAMPW_2                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define COMP1_FILC_SAMPW_3                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define COMP1_FILC_SAMPW_4                                  ((uint32_t)0x00000400U)         /* Bit10*/

#define COMP1_FILC_THRESH                                   ((uint32_t)0x0000003EU)         /* Bit[5:1] Comparator_1 filter threshold size*/
#define COMP1_FILC_THRESH_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP1_FILC_THRESH_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP1_FILC_THRESH_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP1_FILC_THRESH_3                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define COMP1_FILC_THRESH_4                                 ((uint32_t)0x00000020U)         /* Bit5*/

#define COMP1_FILC_FILEN                                    ((uint32_t)0x00000001U)         /* Bit[0] Comparator_1 filter enable*/

/******** Bit definition for COMP1_FILP register  ********/
#define COMP1_FILP_CLKPSC                                   ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Comparator_1 filter sample clock prescale*/

/******** Bit definition for COMP2_CTRL register  ********/
#define COMP2_CTRL_VV2TRM                                   ((uint32_t)0x1F800000U)         /* Bit[28:23] Internal 6bit-dac2 output voltage size*/
#define COMP2_CTRL_VV2TRM_0                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define COMP2_CTRL_VV2TRM_1                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define COMP2_CTRL_VV2TRM_2                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define COMP2_CTRL_VV2TRM_3                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define COMP2_CTRL_VV2TRM_4                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define COMP2_CTRL_VV2TRM_5                                 ((uint32_t)0x10000000U)         /* Bit28*/

#define COMP2_CTRL_VV2EN                                    ((uint32_t)0x00400000U)         /* Bit[22] Internal 6bit-dac2 output enable*/
#define COMP2_CTRL_OUT                                      ((uint32_t)0x00200000U)         /* Bit[21] Output state of Comparator_2*/

#define COMP2_CTRL_BLKINGEN                                 ((uint32_t)0x00100000U)         /* Bit[20] Comparator_2 Blanking enable*/

#define COMP2_CTRL_BLKING                                   ((uint32_t)0x000F0000U)         /* Bit[19:16] Blanking source select of Comparator_2*/
#define COMP2_CTRL_BLKING_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define COMP2_CTRL_BLKING_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define COMP2_CTRL_BLKING_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define COMP2_CTRL_BLKING_3                                 ((uint32_t)0x00080000U)         /* Bit19*/

#define COMP2_CTRL_HYST                                     ((uint32_t)0x0000C000U)         /* Bit[15:14] Hysteresis level select of Comparator_2*/
#define COMP2_CTRL_HYST_0                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define COMP2_CTRL_HYST_1                                   ((uint32_t)0x00008000U)         /* Bit15*/

#define COMP2_CTRL_POL                                      ((uint32_t)0x00002000U)         /* Bit[13] */

#define COMP2_CTRL_INPSEL                                   ((uint32_t)0x000001E0U)         /* Bit[8:5] Non inverting input select of Comparator_2*/
#define COMP2_CTRL_INPSEL_0                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define COMP2_CTRL_INPSEL_1                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP2_CTRL_INPSEL_2                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP2_CTRL_INPSEL_3                                 ((uint32_t)0x00000100U)         /* Bit8*/

#define COMP2_CTRL_INMSEL                                   ((uint32_t)0x0000001EU)         /* Bit[4:1] Inverting input select of Comparator_2*/
#define COMP2_CTRL_INMSEL_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP2_CTRL_INMSEL_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP2_CTRL_INMSEL_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP2_CTRL_INMSEL_3                                 ((uint32_t)0x00000010U)         /* Bit4*/

#define COMP2_CTRL_EN                                       ((uint32_t)0x00000001U)         /* Bit[0] Comparator_2 enable*/

/******** Bit definition for COMP2_FILC register  ********/
#define COMP2_FILC_SAMPW                                    ((uint32_t)0x000007C0U)         /* Bit[10:6] Comparator_2 filter window size*/
#define COMP2_FILC_SAMPW_0                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP2_FILC_SAMPW_1                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP2_FILC_SAMPW_2                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define COMP2_FILC_SAMPW_3                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define COMP2_FILC_SAMPW_4                                  ((uint32_t)0x00000400U)         /* Bit10*/

#define COMP2_FILC_THRESH                                   ((uint32_t)0x0000003EU)         /* Bit[5:1] Comparator_2 filter threshold size*/
#define COMP2_FILC_THRESH_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP2_FILC_THRESH_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP2_FILC_THRESH_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP2_FILC_THRESH_3                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define COMP2_FILC_THRESH_4                                 ((uint32_t)0x00000020U)         /* Bit5*/

#define COMP2_FILC_FILEN                                    ((uint32_t)0x00000001U)         /* Bit[0] Comparator_2 filter enable */

/******** Bit definition for COMP2_FILP register  ********/
#define COMP2_FILP_CLKPSC                                   ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Comparator_2 filter sample clock prescale*/

/******** Bit definition for COMP3_CTRL register  ********/
#define COMP3_CTRL_OUT                                      ((uint32_t)0x00200000U)         /* Bit[21] Output state of Comparator_3*/

#define COMP3_CTRL_BLKINGEN                                 ((uint32_t)0x00100000U)         /* Bit[20] Comparator_3 Blanking enable*/

#define COMP3_CTRL_BLKING                                   ((uint32_t)0x000F0000U)         /* Bit[19:16] Blanking source select of Comparator_3*/
#define COMP3_CTRL_BLKING_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define COMP3_CTRL_BLKING_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define COMP3_CTRL_BLKING_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define COMP3_CTRL_BLKING_3                                 ((uint32_t)0x00080000U)         /* Bit19*/

#define COMP3_CTRL_HYST                                     ((uint32_t)0x0000C000U)         /* Bit[15:14] Hysteresis level select of Comparator_3*/
#define COMP3_CTRL_HYST_0                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define COMP3_CTRL_HYST_1                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define COMP3_CTRL_POL                                      ((uint32_t)0x00002000U)         /* Bit[13] */

#define COMP3_CTRL_INPSEL                                   ((uint32_t)0x000001E0U)         /* Bit[8:5] Non inverting input select of Comparator_3*/
#define COMP3_CTRL_INPSEL_0                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define COMP3_CTRL_INPSEL_1                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP3_CTRL_INPSEL_2                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP3_CTRL_INPSEL_3                                 ((uint32_t)0x00000100U)         /* Bit8*/

#define COMP3_CTRL_INMSEL                                   ((uint32_t)0x0000001EU)         /* Bit[4:1] Inverting input select of Comparator_3*/
#define COMP3_CTRL_INMSEL_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP3_CTRL_INMSEL_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP3_CTRL_INMSEL_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP3_CTRL_INMSEL_3                                 ((uint32_t)0x00000010U)         /* Bit4*/

#define COMP3_CTRL_EN                                       ((uint32_t)0x00000001U)         /* Bit[0] Comparator_3 enable*/

/******** Bit definition for COMP3_FILC register  ********/
#define COMP3_FILC_SAMPW                                    ((uint32_t)0x000007C0U)         /* Bit[10:6] Comparator_3 filter window size*/
#define COMP3_FILC_SAMPW_0                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP3_FILC_SAMPW_1                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP3_FILC_SAMPW_2                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define COMP3_FILC_SAMPW_3                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define COMP3_FILC_SAMPW_4                                  ((uint32_t)0x00000400U)         /* Bit10*/

#define COMP3_FILC_THRESH                                   ((uint32_t)0x0000003EU)         /* Bit[5:1] Comparator_3 filter threshold size*/
#define COMP3_FILC_THRESH_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP3_FILC_THRESH_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP3_FILC_THRESH_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP3_FILC_THRESH_3                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define COMP3_FILC_THRESH_4                                 ((uint32_t)0x00000020U)         /* Bit5*/

#define COMP3_FILC_FILEN                                    ((uint32_t)0x00000001U)         /* Bit[0] Comparator_3 filter enable */

/******** Bit definition for COMP3_FILP register  ********/
#define COMP3_FILP_CLKPSC                                   ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Comparator_3 filter sample clock prescale*/

/******** Bit definition for COMP4_CTRL register  ********/
#define COMP4_CTRL_OUT                                      ((uint32_t)0x00100000U)          /* Bit[20] Output state of Comparator_4*/

#define COMP4_CTRL_BLKINGEN                                 ((uint32_t)0x00100000U)          /* Bit[20] Comparator_4 Blanking enable*/

#define COMP4_CTRL_BLKING                                   ((uint32_t)0x000F0000U)         /* Bit[19:16] Blanking source select of Comparator_4*/
#define COMP4_CTRL_BLKING_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define COMP4_CTRL_BLKING_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define COMP4_CTRL_BLKING_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define COMP4_CTRL_BLKING_3                                 ((uint32_t)0x00080000U)         /* Bit19*/

#define COMP4_CTRL_HYST                                     ((uint32_t)0x0000C000U)         /* Bit[15:14] Hysteresis level select of Comparator_4*/
#define COMP4_CTRL_HYST_0                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define COMP4_CTRL_HYST_1                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define COMP4_CTRL_POL                                      ((uint32_t)0x00002000U)         /* Bit[13] */

#define COMP4_CTRL_INPSEL                                   ((uint32_t)0x000001E0U)         /* Bit[8:5] Non inverting input select of Comparator_4*/
#define COMP4_CTRL_INPSEL_0                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define COMP4_CTRL_INPSEL_1                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP4_CTRL_INPSEL_2                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP4_CTRL_INPSEL_3                                 ((uint32_t)0x00000100U)         /* Bit8*/

#define COMP4_CTRL_INMSEL                                   ((uint32_t)0x0000001EU)         /* Bit[4:1] Inverting input select of Comparator_4*/
#define COMP4_CTRL_INMSEL_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP4_CTRL_INMSEL_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP4_CTRL_INMSEL_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP4_CTRL_INMSEL_3                                 ((uint32_t)0x00000010U)         /* Bit4*/

#define COMP4_CTRL_EN                                       ((uint32_t)0x00000001U)         /* Bit[0] Comparator_4 enable*/

/******** Bit definition for COMP4_FILC register  ********/
#define COMP4_FILC_SAMPW                                    ((uint32_t)0x000007C0U)         /* Bit[10:6] Comparator_4 filter window size*/
#define COMP4_FILC_SAMPW_0                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define COMP4_FILC_SAMPW_1                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define COMP4_FILC_SAMPW_2                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define COMP4_FILC_SAMPW_3                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define COMP4_FILC_SAMPW_4                                  ((uint32_t)0x00000400U)         /* Bit10*/

#define COMP4_FILC_THRESH                                   ((uint32_t)0x0000003EU)         /* Bit[5:1] Comparator_4 filter threshold size*/
#define COMP4_FILC_THRESH_0                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define COMP4_FILC_THRESH_1                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define COMP4_FILC_THRESH_2                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define COMP4_FILC_THRESH_3                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define COMP4_FILC_THRESH_4                                 ((uint32_t)0x00000020U)         /* Bit5*/

#define COMP4_FILC_FILEN                                    ((uint32_t)0x00000001U)         /* Bit[0] Comparator_4 filter enable */

/******** Bit definition for COMP4_FILP register  ********/
#define COMP4_FILP_CLKPSC                                   ((uint32_t)0x0000FFFFU)         /* Bit[15:0] Comparator_4 filter sample clock prescale*/

/******** Bit definition for COMP_LPR register  ********/
#define COMP_LPR_CLKSEL                                     ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for COMP_WINMODE register  ********/
#define COMP_WINMODE_COMP34MD                                ((uint32_t)0x00000002U)         /* Bit[1] Comparator_3&4 XOR output*/
#define COMP_WINMODE_COMP12MD                                ((uint32_t)0x00000001U)         /* Bit[0] Comparator_1&2 XOR output*/

/******** Bit definition for COMP_LOCK register  ********/
#define COMP_LOCK_MASK                                      ((uint32_t)0x0000000FU)         /* All comparator lock enable */
#define COMP_LOCK_CMP4LK                                    ((uint32_t)0x00000008U)         /* Bit[3] */
#define COMP_LOCK_CMP3LK                                    ((uint32_t)0x00000004U)         /* Bit[2] */
#define COMP_LOCK_CMP2LK                                    ((uint32_t)0x00000002U)         /* Bit[1] */
#define COMP_LOCK_CMP1LK                                    ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for COMP_INTEN register  ********/
#define COMP_INTEN_MASK                                     ((uint32_t)0x0000000FU)         /* Interrupt enable for all COMP */
#define COMP_INTEN_CMP4IEN                                  ((uint32_t)0x00000008U)         /* Bit[3] */
#define COMP_INTEN_CMP3IEN                                  ((uint32_t)0x00000004U)         /* Bit[2] */
#define COMP_INTEN_CMP2IEN                                  ((uint32_t)0x00000002U)         /* Bit[1] */
#define COMP_INTEN_CMP1IEN                                  ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for COMP_STS register  ********/
#define COMP_STS_MASK                                       ((uint32_t)0x0000007FU)         /* status of all Comparator */
#define COMP_STS_CMP4IS                                     ((uint32_t)0x00000008U)         /* Bit[3] */
#define COMP_STS_CMP3IS                                     ((uint32_t)0x00000004U)         /* Bit[2] */
#define COMP_STS_CMP2IS                                     ((uint32_t)0x00000002U)         /* Bit[1] */
#define COMP_STS_CMP1IS                                     ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for COMP_OTIMEN register  ********/
#define COMP_OTIMEN_MASK                                    ((uint32_t)0x0000000FU)         /* Output to timer for all Comparator */
#define COMP_OTIMEN_CMP4OEN                                 ((uint32_t)0x00000008U)         /* Bit[3] */
#define COMP_OTIMEN_CMP3OEN                                 ((uint32_t)0x00000004U)         /* Bit[2] */
#define COMP_OTIMEN_CMP2OEN                                 ((uint32_t)0x00000002U)         /* Bit[1] */
#define COMP_OTIMEN_CMP1OEN                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/*** VREFBUF ***/
/******** Bit definition for VREFBUF_TRIM1 register  ********/
#define VREFBUF_TRIM1_2_5V_MASK                             ((uint32_t)0x003F0000U)         /* VREFBUF 2.5V TRIMMING*/
#define VREFBUF_TRIM1_2_048V_MASK                           ((uint32_t)0x0FC00000U)         /* VREFBUF 2.048V TRIMMING */

/******** Bit definition for VREFBUF_STS register  ********/
#define VREFBUF_STS_RDY                                     ((uint32_t)0x20000000U)         /* VREFBUF ready flag */

/******** Bit definition for VREFBUF_CTRL1 register  ********/
#define VREFBUF_CTRL1_EN                                    ((uint32_t)0x00000080U)         /* VREFBUF enable */
#define VREFBUF_CTRL1_HIM                                   ((uint32_t)0x00000200U)         /* VREFBUF high implement enable */

/******** Bit definition for VREFBUF_CTRL2 register  ********/
#define VREFBUF_CTRL2_VLSEL                                 ((uint32_t)0x00000003U) /* VLSEL[1:0]*/ 
#define VREFBUF_CTRL2_VLSEL_0                               ((uint32_t)0x00000001U) /* Bit 0 */ 
#define VREFBUF_CTRL2_VLSEL_1                               ((uint32_t)0x00000002U) /* Bit 1 */ 

/******** Bit definition for VREFBUF_TRIM1 register  ********/
#define VREFBUF_TRIM1_1_5V_MASK                             ((uint32_t)0x00003F00U)         /* VREFBUF 1.5V TRIMMING*/
#define VREFBUF_TRIM1_1_8V_MASK                             ((uint32_t)0x0000003FU)         /* VREFBUF 1.8V TRIMMING */


/*** TIM ***/

/** Bit definition for TIM_CTRL1 register  **/
#define TIM_CTRL1_CNTEN                         ((uint32_t)0x00000001U) /* Counter enable */
#define TIM_CTRL1_DIR                           ((uint32_t)0x00000002U) /* Direction */

#define TIM_CTRL1_CAMSEL                        ((uint32_t)0x0000000CU) /* CMS[1:0] bits (Center-aligned mode selection) */
#define TIM_CTRL1_CAMSEL_0                      ((uint32_t)0x00000004U) /* Bit 0 */
#define TIM_CTRL1_CAMSEL_1                      ((uint32_t)0x00000008U) /* Bit 1 */

#define TIM_CTRL1_UPRS                          ((uint32_t)0x00000010U) /* Update request source */
#define TIM_CTRL1_UPDIS                         ((uint32_t)0x00000020U) /* Update disable */

#define TIM_CTRL1_CLKD                          ((uint32_t)0x000000C0U) /* CKD[1:0] bits (clock division) */
#define TIM_CTRL1_CLKD_0                        ((uint32_t)0x00000040U) /* Bit 0 */
#define TIM_CTRL1_CLKD_1                        ((uint32_t)0x00000080U) /* Bit 1 */

#define TIM_CTRL1_ONEPM                         ((uint32_t)0x00000100U) /* One pulse mode */
#define TIM_CTRL1_ARPEN                         ((uint32_t)0x00000200U) /* Auto-reload preload enable */
#define TIM_CTRL1_LBKPEN                        ((uint32_t)0x00000400U) /* LOCKUP as bkp Enable*/
#define TIM_CTRL1_PBKPEN                        ((uint32_t)0x00000800U) /* PVD as bkp Enable */
#define TIM_CTRL1_SMPARERREN                    ((uint32_t)0x00001000U) /* Sram parity error as bkp Enable */
#define TIM_CTRL1_CLRSEL                        ((uint32_t)0x00002000U) /* OCxRef clear selection */
#define TIM_CTRL1_SMECCERREN                    ((uint32_t)0x00008000U) /* Sram ecc error as bkp Enable */

#define TIM_CTRL1_C1SEL                         ((uint32_t)0x00010000U) /* Channel 1 selection */
#define TIM_CTRL1_C2SEL                         ((uint32_t)0x00020000U) /* Channel 2 selection */
#define TIM_CTRL1_C3SEL                         ((uint32_t)0x00040000U) /* Channel 3 selection */
#define TIM_CTRL1_C4SEL                         ((uint32_t)0x00080000U) /* Channel 4 selection */

#define TIM_CTRL1_CMODE                         ((uint32_t)0x00300000U)  /* In center-aligned mode, channel 4/7/8/9 trigger mode */
#define TIM_CTRL1_CMODE_0                       ((uint32_t)0x00100000U)  /* Bit0 */
#define TIM_CTRL1_CMODE_1                       ((uint32_t)0x00200000U)  /* Bit1 */

#define TIM_CTRL1_ASMMETRIC                     ((uint32_t)0x00800000U)  /* Asynmmetric mode enable in center-aligned */
#define TIM_CTRL1_UDITFREMAP                    ((uint32_t)0x01000000U)  /* UDITF status bit remapping */

/** Bit definition for TIM_CTRL2 register **/
#define TIM_CTRL2_OI1                           ((uint32_t)0x00000001U) /* Output Idle state 1 (OC1 output) */
#define TIM_CTRL2_OI1N                          ((uint32_t)0x00000002U) /* Output Idle state 1 (OC1N output) */
#define TIM_CTRL2_OI2                           ((uint32_t)0x00000004U) /* Output Idle state 2 (OC2 output) */
#define TIM_CTRL2_OI2N                          ((uint32_t)0x00000008U) /* Output Idle state 2 (OC2N output) */
#define TIM_CTRL2_OI3                           ((uint32_t)0x00000010U) /* Output Idle state 3 (OC3 output) */
#define TIM_CTRL2_OI3N                          ((uint32_t)0x00000020U) /* Output Idle state 3 (OC3N output) */
#define TIM_CTRL2_OI4                           ((uint32_t)0x00000040U) /* Output Idle state 4 (OC4 output) */
#define TIM_CTRL2_OI4N                          ((uint32_t)0x00000080U) /* Output Idle state 4 (OC4N output) */
#define TIM_CTRL2_OI5                           ((uint32_t)0x00000100U) /* Output Idle state 5 (OC5 output) */
#define TIM_CTRL2_OI6                           ((uint32_t)0x00000400U) /* Output Idle state 6 (OC6 output) */

#define TIM_CTRL2_MMSEL                         ((uint32_t)0x0000F000U) /* MMSEL[3:0] bits (Master Mode Selection) */
#define TIM_CTRL2_MMSEL_0                       ((uint32_t)0x00001000U) /* Bit 0 */
#define TIM_CTRL2_MMSEL_1                       ((uint32_t)0x00002000U) /* Bit 1 */
#define TIM_CTRL2_MMSEL_2                       ((uint32_t)0x00004000U) /* Bit 2 */
#define TIM_CTRL2_MMSEL_3                       ((uint32_t)0x00008000U) /* Bit 3 */

#define TIM_CTRL2_CCUSEL                        ((uint32_t)0x00010000U) /* Capture/Compare Control Update Selection */
#define TIM_CTRL2_CCDSEL                        ((uint32_t)0x00020000U) /* Capture/Compare DMA Selection */
#define TIM_CTRL2_CCPCTL                        ((uint32_t)0x00040000U) /* Capture/Compare Preloaded Control */
#define TIM_CTRL2_TI1SEL                        ((uint32_t)0x00080000U) /* TI1 Selection */
#define TIM_CTRL2_TRIG4                         ((uint32_t)0x00100000U) /* OC4REF trigger to ADC enable */
#define TIM_CTRL2_TRIG7                         ((uint32_t)0x00200000U) /* OC7REF trigger to ADC enable */
#define TIM_CTRL2_TRIG8                         ((uint32_t)0x00400000U) /* OC7REF trigger to ADC enable */
#define TIM_CTRL2_TRIG9                         ((uint32_t)0x00800000U) /* OC7REF trigger to ADC enable */

#define TIM_CTRL2_MMSEL2                        ((uint32_t)0x0F000000U) /* MMSEL2[3:0] bits (Master Mode Selection) */
#define TIM_CTRL2_MMSEL2_0                      ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_CTRL2_MMSEL2_1                      ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_CTRL2_MMSEL2_2                      ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_CTRL2_MMSEL2_3                      ((uint32_t)0x08000000U) /* Bit 3 */

/** Bit definition for TIM_STS register **/
#define TIM_STS_CC1ITF                          ((uint32_t)0x00000001U) /* Capture/Compare 1 interrupt Flag */
#define TIM_STS_CC2ITF                          ((uint32_t)0x00000002U) /* Capture/Compare 2 interrupt Flag */
#define TIM_STS_CC3ITF                          ((uint32_t)0x00000004U) /* Capture/Compare 3 interrupt Flag */
#define TIM_STS_CC4ITF                          ((uint32_t)0x00000008U) /* Capture/Compare 4 interrupt Flag */
#define TIM_STS_CC5ITF                          ((uint32_t)0x00000010U) /* Capture/Compare 5 interrupt Flag */
#define TIM_STS_CC6ITF                          ((uint32_t)0x00000020U) /* Capture/Compare 6 interrupt Flag */
#define TIM_STS_CC1OCF                          ((uint32_t)0x00000100U) /* Capture/Compare 1 Overcapture Flag */
#define TIM_STS_CC2OCF                          ((uint32_t)0x00000200U) /* Capture/Compare 2 Overcapture Flag */
#define TIM_STS_CC3OCF                          ((uint32_t)0x00000400U) /* Capture/Compare 3 Overcapture Flag */
#define TIM_STS_CC4OCF                          ((uint32_t)0x00000800U) /* Capture/Compare 4 Overcapture Flag */
#define TIM_STS_UDITF                           ((uint32_t)0x00010000U) /* Update interrupt Flag */
#define TIM_STS_COMITF                          ((uint32_t)0x00020000U) /* COM interrupt Flag */
#define TIM_STS_TITF                            ((uint32_t)0x00040000U) /* Trigger interrupt Flag */
#define TIM_STS_BITF                            ((uint32_t)0x00080000U) /* Break interrupt Flag */
#define TIM_STS_BITF2                           ((uint32_t)0x00100000U) /* Break2 interrupt Flag */
#define TIM_STS_SBITF                           ((uint32_t)0x00200000U) /* System Break interrupt Flag */
#define TIM_STS_CC7ITF                          ((uint32_t)0x01000000U) /* Capture/Compare 7 interrupt Flag */
#define TIM_STS_CC8ITF                          ((uint32_t)0x02000000U) /* Capture/Compare 8 interrupt Flag */
#define TIM_STS_CC9ITF                          ((uint32_t)0x04000000U) /* Capture/Compare 9 interrupt Flag */

/** Bit definition for TIM_EVTGEN register **/
#define TIM_EVTGEN_CC1GN                        ((uint32_t)0x00000001U) /* Capture/Compare 1 Generation */
#define TIM_EVTGEN_CC2GN                        ((uint32_t)0x00000002U) /* Capture/Compare 2 Generation */
#define TIM_EVTGEN_CC3GN                        ((uint32_t)0x00000004U) /* Capture/Compare 3 Generation */
#define TIM_EVTGEN_CC4GN                        ((uint32_t)0x00000008U) /* Capture/Compare 4 Generation */
#define TIM_EVTGEN_UDGN                         ((uint32_t)0x00000100U) /* Update Generation */
#define TIM_EVTGEN_CCUDGN                       ((uint32_t)0x00000200U) /* Capture/Compare Control Update Generation */
#define TIM_EVTGEN_TGN                          ((uint32_t)0x00000400U) /* Trigger Generation */
#define TIM_EVTGEN_BGN                          ((uint32_t)0x00000800U) /* Break Generation */
#define TIM_EVTGEN_BGN2                         ((uint32_t)0x00001000U) /* Break2 Generation */

/** Bit definition for TIM_SMCTRL register **/
#define TIM_SMCTRL_TSEL                         ((uint32_t)0x00000007U) /* TS[2:0] bits (Trigger selection) */
#define TIM_SMCTRL_TSEL_0                       ((uint32_t)0x00000001U) /* Bit 0 */
#define TIM_SMCTRL_TSEL_1                       ((uint32_t)0x00000002U) /* Bit 1 */
#define TIM_SMCTRL_TSEL_2                       ((uint32_t)0x00000004U) /* Bit 2 */

#define TIM_SMCTRL_SMSEL                        ((uint32_t)0x000000F0U) /* SMS[2:0] bits (Slave mode selection) */
#define TIM_SMCTRL_SMSEL_0                      ((uint32_t)0x00000010U) /* Bit 0 */
#define TIM_SMCTRL_SMSEL_1                      ((uint32_t)0x00000020U) /* Bit 1 */
#define TIM_SMCTRL_SMSEL_2                      ((uint32_t)0x00000040U) /* Bit 2 */
#define TIM_SMCTRL_SMSEL_3                      ((uint32_t)0x00000080U) /* Bit 3 */

#define TIM_SMCTRL_EXTPS                        ((uint32_t)0x00000300U) /* ETPS[1:0] bits (External trigger prescaler) */
#define TIM_SMCTRL_EXTPS_0                      ((uint32_t)0x00000100U) /* Bit 0 */
#define TIM_SMCTRL_EXTPS_1                      ((uint32_t)0x00000200U) /* Bit 1 */

#define TIM_SMCTRL_EXCEN                        ((uint32_t)0x00000400U) /* External clock enable */
#define TIM_SMCTRL_EXTP                         ((uint32_t)0x00000800U) /* External trigger polarity */

#define TIM_SMCTRL_EXTF                         ((uint32_t)0x0000F000U) /* ETF[3:0] bits (External trigger filter) */
#define TIM_SMCTRL_EXTF_0                       ((uint32_t)0x00001000U) /* Bit 0 */
#define TIM_SMCTRL_EXTF_1                       ((uint32_t)0x00002000U) /* Bit 1 */
#define TIM_SMCTRL_EXTF_2                       ((uint32_t)0x00004000U) /* Bit 2 */
#define TIM_SMCTRL_EXTF_3                       ((uint32_t)0x00008000U) /* Bit 3 */

#define TIM_SMCTRL_MSMD                         ((uint32_t)0x00010000U) /* Master/slave mode */

#define TIM_SMCTRL_OCREFCLRP                    ((uint32_t)0x00080000U) /* Ocrefclear signal polarity */

#define TIM_SMCTRL_OCREFCLRF                    ((uint32_t)0x00F00000U) /* OCREFCLRF[3:0] bits (Ocrefclear signal prescaler) */
#define TIM_SMCTRL_OCREFCLRF_0                  ((uint32_t)0x00100000U) /* Bit 0 */
#define TIM_SMCTRL_OCREFCLRF_1                  ((uint32_t)0x00200000U) /* Bit 1 */
#define TIM_SMCTRL_OCREFCLRF_2                  ((uint32_t)0x00400000U) /* Bit 2 */
#define TIM_SMCTRL_OCREFCLRF_3                  ((uint32_t)0x00800000U) /* Bit 3 */

/** Bit definition for TIM_DINTEN register **/
#define TIM_DINTEN_CC1IEN                       ((uint32_t)0x00000001U) /* Capture/Compare 1 interrupt enable */
#define TIM_DINTEN_CC2IEN                       ((uint32_t)0x00000002U) /* Capture/Compare 2 interrupt enable */
#define TIM_DINTEN_CC3IEN                       ((uint32_t)0x00000004U) /* Capture/Compare 3 interrupt enable */
#define TIM_DINTEN_CC4IEN                       ((uint32_t)0x00000008U) /* Capture/Compare 4 interrupt enable */
#define TIM_DINTEN_CC5IEN                       ((uint32_t)0x00000010U) /* Capture/Compare 5 interrupt enable */
#define TIM_DINTEN_CC6IEN                       ((uint32_t)0x00000020U) /* Capture/Compare 6 interrupt enable */
#define TIM_DINTEN_CC7IEN                       ((uint32_t)0x00000040U) /* Capture/Compare 7 interrupt enable */
#define TIM_DINTEN_CC8IEN                       ((uint32_t)0x00000080U) /* Capture/Compare 8 interrupt enable */
#define TIM_DINTEN_CC1DEN                       ((uint32_t)0x00000100U) /* Capture/Compare 1 DMA request enable */
#define TIM_DINTEN_CC2DEN                       ((uint32_t)0x00000200U) /* Capture/Compare 2 DMA request enable */
#define TIM_DINTEN_CC3DEN                       ((uint32_t)0x00000400U) /* Capture/Compare 3 DMA request enable */
#define TIM_DINTEN_CC4DEN                       ((uint32_t)0x00000800U) /* Capture/Compare 4 DMA request enable */
#define TIM_DINTEN_UIEN                         ((uint32_t)0x00010000U) /* Update interrupt enable */
#define TIM_DINTEN_TIEN                         ((uint32_t)0x00020000U) /* Trigger interrupt enable */
#define TIM_DINTEN_BIEN                         ((uint32_t)0x00040000U) /* Break interrupt enable */
#define TIM_DINTEN_UDEN                         ((uint32_t)0x00080000U) /* Update DMA request enable */
#define TIM_DINTEN_COMDEN                       ((uint32_t)0x00100000U) /* COM DMA request enable */
#define TIM_DINTEN_TDEN                         ((uint32_t)0x00200000U) /* Trigger DMA request enable */
#define TIM_DINTEN_COMIEN                       ((uint32_t)0x00400000U) /* COM interrupt enable */
#define TIM_DINTEN_CC9IEN                       ((uint32_t)0x00800000U) /* Capture/Compare 9 interrupt enable */

/** Bit definition for TIM_CCMOD1 register **/
#define TIM_CCMOD1_CC1SEL                       ((uint32_t)0x00000003U) /* CC1S[1:0] bits (Capture/Compare 1 Selection) */
#define TIM_CCMOD1_CC1SEL_0                     ((uint32_t)0x00000001U) /* Bit 0 */
#define TIM_CCMOD1_CC1SEL_1                     ((uint32_t)0x00000002U) /* Bit 1 */

#define TIM_CCMOD1_OC1PEN                       ((uint32_t)0x00000004U) /* Output Compare 1 Preload enable */
#define TIM_CCMOD1_OC1FEN                       ((uint32_t)0x00000008U) /* Output Compare 1 Fast enable */
#define TIM_CCMOD1_OC1CEN                       ((uint32_t)0x00000010U) /* Output Compare 1 Clear Enable */

#define TIM_CCMOD1_OC1MD                        ((uint32_t)0x000000E0U) /* OC1MD[2:0] bits (Output Compare 1 Mode) */
#define TIM_CCMOD1_OC1MD_0                      ((uint32_t)0x00000020U) /* Bit 0 */
#define TIM_CCMOD1_OC1MD_1                      ((uint32_t)0x00000040U) /* Bit 1 */
#define TIM_CCMOD1_OC1MD_2                      ((uint32_t)0x00000080U) /* Bit 2 */

#define TIM_CCMOD1_CC2SEL                       ((uint32_t)0x00000300U) /* CC2S[1:0] bits (Capture/Compare 2 Selection) */
#define TIM_CCMOD1_CC2SEL_0                     ((uint32_t)0x00000100U) /* Bit 0 */
#define TIM_CCMOD1_CC2SEL_1                     ((uint32_t)0x00000200U) /* Bit 1 */

#define TIM_CCMOD1_OC2PEN                       ((uint32_t)0x00000400U) /* Output Compare 2 Preload enable */
#define TIM_CCMOD1_OC2FEN                       ((uint32_t)0x00000800U) /* Output Compare 2 Fast enable */
#define TIM_CCMOD1_OC2CEN                       ((uint32_t)0x00001000U) /* Output Compare 2 Clear Enable */

#define TIM_CCMOD1_OC2MD                        ((uint32_t)0x0000E000U) /* OC2MD[2:0] bits (Output Compare 2 Mode) */
#define TIM_CCMOD1_OC2MD_0                      ((uint32_t)0x00002000U) /* Bit 0 */
#define TIM_CCMOD1_OC2MD_1                      ((uint32_t)0x00004000U) /* Bit 1 */
#define TIM_CCMOD1_OC2MD_2                      ((uint32_t)0x00008000U) /* Bit 2 */

#define TIM_CCMOD1_OC1MD_3                      ((uint32_t)0x00020000U) /* OC1MD3 bit (Output Compare 1 Mode) */
#define TIM_CCMOD1_OC2MD_3                      ((uint32_t)0x00040000U) /* OC2MD3 bit (Output Compare 2 Mode) */

#define TIM_CCMOD1_IC1PSC                       ((uint32_t)0x0000000CU) /* IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
#define TIM_CCMOD1_IC1PSC_0                     ((uint32_t)0x00000004U) /* Bit 0 */
#define TIM_CCMOD1_IC1PSC_1                     ((uint32_t)0x00000008U) /* Bit 1 */

#define TIM_CCMOD1_IC1F                         ((uint32_t)0x000000F0U) /* IC1F[3:0] bits (Input Capture 1 Filter) */
#define TIM_CCMOD1_IC1F_0                       ((uint32_t)0x00000010U) /* Bit 0 */
#define TIM_CCMOD1_IC1F_1                       ((uint32_t)0x00000020U) /* Bit 1 */
#define TIM_CCMOD1_IC1F_2                       ((uint32_t)0x00000040U) /* Bit 2 */
#define TIM_CCMOD1_IC1F_3                       ((uint32_t)0x00000080U) /* Bit 3 */

#define TIM_CCMOD1_IC2PSC                       ((uint32_t)0x00000C00U) /* IC2PSC[1:0] bits (Input Capture 2 Prescaler) */
#define TIM_CCMOD1_IC2PSC_0                     ((uint32_t)0x00000400U) /* Bit 0 */
#define TIM_CCMOD1_IC2PSC_1                     ((uint32_t)0x00000800U) /* Bit 1 */

#define TIM_CCMOD1_IC2F                         ((uint32_t)0x0000F000U) /* IC2F[3:0] bits (Input Capture 2 Filter) */
#define TIM_CCMOD1_IC2F_0                       ((uint32_t)0x00001000U) /* Bit 0 */
#define TIM_CCMOD1_IC2F_1                       ((uint32_t)0x00002000U) /* Bit 1 */
#define TIM_CCMOD1_IC2F_2                       ((uint32_t)0x00004000U) /* Bit 2 */
#define TIM_CCMOD1_IC2F_3                       ((uint32_t)0x00008000U) /* Bit 3 */

/** Bit definition for TIM_CCMOD2 register **/
#define TIM_CCMOD2_CC3SEL                       ((uint32_t)0x00000003U) /* CC3S[1:0] bits (Capture/Compare 3 Selection) */
#define TIM_CCMOD2_CC3SEL_0                     ((uint32_t)0x00000001U) /* Bit 0 */
#define TIM_CCMOD2_CC3SEL_1                     ((uint32_t)0x00000002U) /* Bit 1 */

#define TIM_CCMOD2_OC3PEN                       ((uint32_t)0x00000004U) /* Output Compare 3 Preload enable */
#define TIM_CCMOD2_OC3FEN                       ((uint32_t)0x00000008U) /* Output Compare 3 Fast enable */
#define TIM_CCMOD2_OC3CEN                       ((uint32_t)0x00000010U) /* Output Compare 3 Clear Enable */

#define TIM_CCMOD2_OC3MD                        ((uint32_t)0x000000E0U) /* OC3MD[2:0] bits (Output Compare 3 Mode) */
#define TIM_CCMOD2_OC3MD_0                      ((uint32_t)0x00000020U) /* Bit 0 */
#define TIM_CCMOD2_OC3MD_1                      ((uint32_t)0x00000040U) /* Bit 1 */
#define TIM_CCMOD2_OC3MD_2                      ((uint32_t)0x00000080U) /* Bit 2 */

#define TIM_CCMOD2_CC4SEL                       ((uint32_t)0x00000300U) /* CC3S[1:0] bits (Capture/Compare 4 Selection) */
#define TIM_CCMOD2_CC4SEL_0                     ((uint32_t)0x00000100U) /* Bit 0 */
#define TIM_CCMOD2_CC4SEL_1                     ((uint32_t)0x00000200U) /* Bit 1 */

#define TIM_CCMOD2_OC4PEN                       ((uint32_t)0x00000400U) /* Output Compare 4 Preload enable */
#define TIM_CCMOD2_OC4FEN                       ((uint32_t)0x00000800U) /* Output Compare 4 Fast enable */
#define TIM_CCMOD2_OC4CEN                       ((uint32_t)0x00001000U) /* Output Compare 4 Clear Enable */

#define TIM_CCMOD2_OC4MD                        ((uint32_t)0x0000E000U) /* OC4MD[2:0] bits (Output Compare 4 Mode) */
#define TIM_CCMOD2_OC4MD_0                      ((uint32_t)0x00002000U) /* Bit 0 */
#define TIM_CCMOD2_OC4MD_1                      ((uint32_t)0x00004000U) /* Bit 1 */
#define TIM_CCMOD2_OC4MD_2                      ((uint32_t)0x00008000U) /* Bit 2 */

#define TIM_CCMOD2_OC3MD_3                      ((uint32_t)0x00020000U) /* OC3MD3 bit (Output Compare 3 Mode) */
#define TIM_CCMOD2_OC4MD_3                      ((uint32_t)0x00040000U) /* OC4MD3 bit (Output Compare 4 Mode) */

#define TIM_CCMOD2_IC3PSC                       ((uint32_t)0x0000000CU) /* IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
#define TIM_CCMOD2_IC3PSC_0                     ((uint32_t)0x00000004U) /* Bit 0 */
#define TIM_CCMOD2_IC3PSC_1                     ((uint32_t)0x00000008U) /* Bit 1 */

#define TIM_CCMOD2_IC3F                         ((uint32_t)0x000000F0U) /* IC3F[3:0] bits (Input Capture 3 Filter) */
#define TIM_CCMOD2_IC3F_0                       ((uint32_t)0x00000010U) /* Bit 0 */
#define TIM_CCMOD2_IC3F_1                       ((uint32_t)0x00000020U) /* Bit 1 */
#define TIM_CCMOD2_IC3F_2                       ((uint32_t)0x00000040U) /* Bit 2 */
#define TIM_CCMOD2_IC3F_3                       ((uint32_t)0x00000080U) /* Bit 3 */

#define TIM_CCMOD2_IC4PSC                       ((uint32_t)0x00000C00U) /* IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
#define TIM_CCMOD2_IC4PSC_0                     ((uint32_t)0x00000400U) /* Bit 0 */
#define TIM_CCMOD2_IC4PSC_1                     ((uint32_t)0x00000800U) /* Bit 1 */

#define TIM_CCMOD2_IC4F                         ((uint32_t)0x0000F000U) /* IC4F[3:0] bits (Input Capture 4 Filter) */
#define TIM_CCMOD2_IC4F_0                       ((uint32_t)0x00001000U) /* Bit 0 */
#define TIM_CCMOD2_IC4F_1                       ((uint32_t)0x00002000U) /* Bit 1 */
#define TIM_CCMOD2_IC4F_2                       ((uint32_t)0x00004000U) /* Bit 2 */
#define TIM_CCMOD2_IC4F_3                       ((uint32_t)0x00008000U) /* Bit 3 */

/** Bit definition for TIM_CCMOD3 register **/
#define TIM_CCMOD3_OC5PEN                       ((uint32_t)0x00000004U) /* Output Compare 5 Preload enable */
#define TIM_CCMOD3_OC5FEN                       ((uint32_t)0x00000008U) /* Output Compare 5 Fast enable */
#define TIM_CCMOD3_OC5CEN                       ((uint32_t)0x00000010U) /* Output Compare 5 Clear Enable */

#define TIM_CCMOD3_OC5MD                        ((uint32_t)0x000000E0U) /* OC5M[2:0] bits (Output Compare 5 Mode) */
#define TIM_CCMOD3_OC5MD_0                      ((uint32_t)0x00000020U) /* Bit 0 */
#define TIM_CCMOD3_OC5MD_1                      ((uint32_t)0x00000040U) /* Bit 1 */
#define TIM_CCMOD3_OC5MD_2                      ((uint32_t)0x00000080U) /* Bit 2 */

#define TIM_CCMOD3_OC6PEN                       ((uint32_t)0x00000400U) /* Output Compare 6 Preload enable */
#define TIM_CCMOD3_OC6FEN                       ((uint32_t)0x00000800U) /* Output Compare 6 Fast enable */
#define TIM_CCMOD3_OC6CEN                       ((uint32_t)0x00001000U) /* Output Compare 6 Clear Enable */

#define TIM_CCMOD3_OC6MD                        ((uint32_t)0x0000E000U) /* OC6M[2:0] bits (Output Compare 6 Mode) */
#define TIM_CCMOD3_OC6MD_0                      ((uint32_t)0x00002000U) /* Bit 0 */
#define TIM_CCMOD3_OC6MD_1                      ((uint32_t)0x00004000U) /* Bit 1 */
#define TIM_CCMOD3_OC6MD_2                      ((uint32_t)0x00008000U) /* Bit 2 */

#define TIM_CCMOD3_OC7PEN                       ((uint32_t)0x00010000U) /* Output Compare 7 Preload enable */
#define TIM_CCMOD3_OC8PEN                       ((uint32_t)0x00100000U) /* Output Compare 8 Preload enable */
#define TIM_CCMOD3_OC9PEN                       ((uint32_t)0x01000000U) /* Output Compare 9 Preload enable */

/** Bit definition for TIM_CCEN register **/
#define TIM_CCEN_CC1NEN                         ((uint32_t)0x00000001U) /* Capture/Compare 1 Complementary output enable */
#define TIM_CCEN_CC1NP                          ((uint32_t)0x00000002U) /* Capture/Compare 1 Complementary output Polarity */
#define TIM_CCEN_CC1EN                          ((uint32_t)0x00000004U) /* Capture/Compare 1 output enable */
#define TIM_CCEN_CC1P                           ((uint32_t)0x00000008U) /* Capture/Compare 1 output Polarity */
#define TIM_CCEN_CC2NEN                         ((uint32_t)0x00000010U) /* Capture/Compare 2 Complementary output enable */
#define TIM_CCEN_CC2NP                          ((uint32_t)0x00000020U) /* Capture/Compare 2 Complementary output Polarity */
#define TIM_CCEN_CC2EN                          ((uint32_t)0x00000040U) /* Capture/Compare 2 output enable */
#define TIM_CCEN_CC2P                           ((uint32_t)0x00000080U) /* Capture/Compare 2 output Polarity */
#define TIM_CCEN_CC3NEN                         ((uint32_t)0x00000100U) /* Capture/Compare 3 Complementary output enable */
#define TIM_CCEN_CC3NP                          ((uint32_t)0x00000200U) /* Capture/Compare 3 Complementary output Polarity */
#define TIM_CCEN_CC3EN                          ((uint32_t)0x00000400U) /* Capture/Compare 3 output enable */
#define TIM_CCEN_CC3P                           ((uint32_t)0x00000800U) /* Capture/Compare 3 output Polarity */
#define TIM_CCEN_CC4NEN                         ((uint32_t)0x00001000U) /* Capture/Compare 4 Complementary output enable */
#define TIM_CCEN_CC4NP                          ((uint32_t)0x00002000U) /* Capture/Compare 4 Complementary output Polarity */
#define TIM_CCEN_CC4EN                          ((uint32_t)0x00004000U) /* Capture/Compare 4 output enable */
#define TIM_CCEN_CC4P                           ((uint32_t)0x00008000U) /* Capture/Compare 4 output Polarity */
#define TIM_CCEN_CC5EN                          ((uint32_t)0x00040000U) /* Capture/Compare 5 output enable */
#define TIM_CCEN_CC5P                           ((uint32_t)0x00080000U) /* Capture/Compare 5 output Polarity */
#define TIM_CCEN_CC6EN                          ((uint32_t)0x00400000U) /* Capture/Compare 6 output enable */
#define TIM_CCEN_CC6P                           ((uint32_t)0x00800000U) /* Capture/Compare 6 output Polarity */

/** Bit definition for TIM_CCDAT1 register **/
#define TIM_CCDAT1_CCDAT1                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 1 Value */
#define TIM_CCDAT1_CCDDAT1                      ((uint32_t)0xFFFF0000U)  /* Capture/Compare 1 down-counting Value */

/** Bit definition for TIM_CCDAT2 register **/
#define TIM_CCDAT2_CCDAT2                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 2 Value */
#define TIM_CCDAT2_CCDDAT2                      ((uint32_t)0xFFFF0000U)  /* Capture/Compare 2 down-counting Value */

/** Bit definition for TIM_CCDAT3 register **/
#define TIM_CCDAT3_CCDAT3                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 3 Value */
#define TIM_CCDAT3_CCDDAT3                      ((uint32_t)0xFFFF0000U)  /* Capture/Compare 3 down-counting Value */

/** Bit definition for TIM_CCDAT4 register **/
#define TIM_CCDAT4_CCDAT4                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 4 Value */
#define TIM_CCDAT4_CCDDAT4                      ((uint32_t)0xFFFF0000U)  /* Capture/Compare 4 down-counting Value */

/** Bit definition for TIM_CCDAT5 register **/
#define TIM_CCDAT5_CCDAT5                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 5 Value */

/** Bit definition for TIM_CCDAT6 register **/
#define TIM_CCDAT6_CCDAT6                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 6 Value */

/** Bit definition for TIM_PSC register **/
#define TIM_PSC_PSC                             ((uint32_t)0x0000FFFFU)  /* Prescaler Value */

/** Bit definition for TIM_AR register **/
#define TIM_AR_AR                               ((uint32_t)0x0000FFFFU)  /* actual auto-reload Value */

/** Bit definition for TIM_CNT register **/
#define TIM_CNT_CNT                             ((uint32_t)0xFFFFFFFFU)  /* Counter Value */

/** Bit definition for TIM_REPCNT register **/
#define TIM_REPCNT_REPCNT                       ((uint32_t)0x000000FFU) /* Repetition Counter Value */

/** Bit definition for TIM_BKDT register **/
#define TIM_BKDT_DTGN                           ((uint32_t)0x000000FFU) /* DTG[0:7] bits (Dead-Time Generator set-up) */
#define TIM_BKDT_DTGN_0                         ((uint32_t)0x00000001U) /* Bit 0 */
#define TIM_BKDT_DTGN_1                         ((uint32_t)0x00000002U) /* Bit 1 */
#define TIM_BKDT_DTGN_2                         ((uint32_t)0x00000004U) /* Bit 2 */
#define TIM_BKDT_DTGN_3                         ((uint32_t)0x00000008U) /* Bit 3 */
#define TIM_BKDT_DTGN_4                         ((uint32_t)0x00000010U) /* Bit 4 */
#define TIM_BKDT_DTGN_5                         ((uint32_t)0x00000020U) /* Bit 5 */
#define TIM_BKDT_DTGN_6                         ((uint32_t)0x00000040U) /* Bit 6 */
#define TIM_BKDT_DTGN_7                         ((uint32_t)0x00000080U) /* Bit 7 */

#define TIM_BKDT_MOEN                           ((uint32_t)0x00000100U) /* Main Output enable */
#define TIM_BKDT_AOEN                           ((uint32_t)0x00000200U) /* Automatic Output enable */
#define TIM_BKDT_BKP                            ((uint32_t)0x00000400U) /* Break Polarity */
#define TIM_BKDT_BKEN                           ((uint32_t)0x00000800U) /* Break enable */
#define TIM_BKDT_OSSI                           ((uint32_t)0x00001000U) /* Off-State Selection for Idle mode */
#define TIM_BKDT_OSSR                           ((uint32_t)0x00002000U) /* Off-State Selection for Run mode */

#define TIM_BKDT_LCKCFG                         ((uint32_t)0x0000C000U) /* LOCK[1:0] bits (Lock Configuration) */
#define TIM_BKDT_LCKCFG_0                       ((uint32_t)0x00004000U) /* Bit 0 */
#define TIM_BKDT_LCKCFG_1                       ((uint32_t)0x00008000U) /* Bit 1 */

#define TIM_BKDT_BK2P                           ((uint32_t)0x00010000U) /* Break2 Polarity */
#define TIM_BKDT_BK2EN                           ((uint32_t)0x00020000U) /* Break2 enable */
#define TIM_BKDT_BRKDSRM                        ((uint32_t)0x00040000U) /* Break disarm */
#define TIM_BKDT_BRK2DSRM                       ((uint32_t)0x00080000U) /* Break2 disarm */
#define TIM_BKDT_BRKBID                         ((uint32_t)0x00100000U) /* Break bidirectional enable */
#define TIM_BKDT_BRK2BID                        ((uint32_t)0x00200000U) /* Break2 bidirectional enable */

/** Bit definition for TIM_CCDAT7 register **/
#define TIM_CCDAT7_CCDAT7                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 7 Value */

/** Bit definition for TIM_CCDAT8 register **/
#define TIM_CCDAT8_CCDAT8                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 8 Value */

/** Bit definition for TIM_CCDAT9 register **/
#define TIM_CCDAT9_CCDAT9                       ((uint32_t)0x0000FFFFU)  /* Capture/Compare 9 Value */

/** Bit definition for TIM_BKFR register **/     
#define TIM_BKFR_THRESH                         ((uint32_t)0x3F000000U) /* Break1 filter threshold */
#define TIM_BKFR_THRESH_0                       ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_BKFR_THRESH_1                       ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_BKFR_THRESH_2                       ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_BKFR_THRESH_3                       ((uint32_t)0x08000000U) /* Bit 3 */
#define TIM_BKFR_THRESH_4                       ((uint32_t)0x10000000U) /* Bit 4 */
#define TIM_BKFR_THRESH_5                       ((uint32_t)0x20000000U) /* Bit 5 */

#define TIM_BKFR_WSIZE                          ((uint32_t)0x007E0000U) /* Break1 filter window size */
#define TIM_BKFR_WSIZE_0                        ((uint32_t)0x00020000U) /* Bit 0 */
#define TIM_BKFR_WSIZE_1                        ((uint32_t)0x00040000U) /* Bit 1 */
#define TIM_BKFR_WSIZE_2                        ((uint32_t)0x00080000U) /* Bit 2 */
#define TIM_BKFR_WSIZE_3                        ((uint32_t)0x00100000U) /* Bit 3 */
#define TIM_BKFR_WSIZE_4                        ((uint32_t)0x00200000U) /* Bit 4 */
#define TIM_BKFR_WSIZE_5                        ((uint32_t)0x00400000U) /* Bit 5 */

#define TIM_BKFR_FILTEN                         ((uint32_t)0x00010000U) /* Break1 filter enable */
#define TIM_BKFR_SFPSC                          ((uint32_t)0x0000FFFFU)  

/** Bit definition for TIM_C1FILT register **/
#define TIM_C1FILT_THRESH                       ((uint32_t)0x3F000000U) /* CH1 filter threshold */
#define TIM_C1FILT_THRESH_0                     ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_C1FILT_THRESH_1                     ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_C1FILT_THRESH_2                     ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_C1FILT_THRESH_3                     ((uint32_t)0x08000000U) /* Bit 3 */
#define TIM_C1FILT_THRESH_4                     ((uint32_t)0x10000000U) /* Bit 4 */
#define TIM_C1FILT_THRESH_5                     ((uint32_t)0x20000000U) /* Bit 5 */

#define TIM_C1FILT_WSIZE                        ((uint32_t)0x007E0000U) /* CH1 filter window size */
#define TIM_C1FILT_WSIZE_0                      ((uint32_t)0x00020000U) /* Bit 0 */
#define TIM_C1FILT_WSIZE_1                      ((uint32_t)0x00040000U) /* Bit 1 */
#define TIM_C1FILT_WSIZE_2                      ((uint32_t)0x00080000U) /* Bit 2 */
#define TIM_C1FILT_WSIZE_3                      ((uint32_t)0x00100000U) /* Bit 3 */
#define TIM_C1FILT_WSIZE_4                      ((uint32_t)0x00200000U) /* Bit 4 */
#define TIM_C1FILT_WSIZE_5                      ((uint32_t)0x00400000U) /* Bit 5 */

#define TIM_C1FILT_FILTEN                       ((uint32_t)0x00010000U)
#define TIM_C1FILT_SFPSC                        ((uint32_t)0x0000FFFFU)  

/** Bit definition for TIM_C2FILT register **/
#define TIM_C2FILT_THRESH                       ((uint32_t)0x3F000000U) /* CH2 filter threshold */
#define TIM_C2FILT_THRESH_0                     ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_C2FILT_THRESH_1                     ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_C2FILT_THRESH_2                     ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_C2FILT_THRESH_3                     ((uint32_t)0x08000000U) /* Bit 3 */
#define TIM_C2FILT_THRESH_4                     ((uint32_t)0x10000000U) /* Bit 4 */
#define TIM_C2FILT_THRESH_5                     ((uint32_t)0x20000000U) /* Bit 5 */

#define TIM_C2FILT_WSIZE                        ((uint32_t)0x007E0000U) /* CH2 filter window size */
#define TIM_C2FILT_WSIZE_0                      ((uint32_t)0x00020000U) /* Bit 0 */
#define TIM_C2FILT_WSIZE_1                      ((uint32_t)0x00040000U) /* Bit 1 */
#define TIM_C2FILT_WSIZE_2                      ((uint32_t)0x00080000U) /* Bit 2 */
#define TIM_C2FILT_WSIZE_3                      ((uint32_t)0x00100000U) /* Bit 3 */
#define TIM_C2FILT_WSIZE_4                      ((uint32_t)0x00200000U) /* Bit 4 */
#define TIM_C2FILT_WSIZE_5                      ((uint32_t)0x00400000U) /* Bit 5 */

#define TIM_C2FILT_FILTEN                       ((uint32_t)0x00010000U)
#define TIM_C2FILT_SFPSC                        ((uint32_t)0x0000FFFFU) 

/** Bit definition for TIM_C3FILT register **/
#define TIM_C3FILT_THRESH                       ((uint32_t)0x3F000000U) /* CH3 filter threshold */
#define TIM_C3FILT_THRESH_0                     ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_C3FILT_THRESH_1                     ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_C3FILT_THRESH_2                     ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_C3FILT_THRESH_3                     ((uint32_t)0x08000000U) /* Bit 3 */
#define TIM_C3FILT_THRESH_4                     ((uint32_t)0x10000000U) /* Bit 4 */
#define TIM_C3FILT_THRESH_5                     ((uint32_t)0x20000000U) /* Bit 5 */

#define TIM_C3FILT_WSIZE                        ((uint32_t)0x007E0000U) /* CH3 filter window size */
#define TIM_C3FILT_WSIZE_0                      ((uint32_t)0x00020000U) /* Bit 0 */
#define TIM_C3FILT_WSIZE_1                      ((uint32_t)0x00040000U) /* Bit 1 */
#define TIM_C3FILT_WSIZE_2                      ((uint32_t)0x00080000U) /* Bit 2 */
#define TIM_C3FILT_WSIZE_3                      ((uint32_t)0x00100000U) /* Bit 3 */
#define TIM_C3FILT_WSIZE_4                      ((uint32_t)0x00200000U) /* Bit 4 */
#define TIM_C3FILT_WSIZE_5                      ((uint32_t)0x00400000U) /* Bit 5 */

#define TIM_C3FILT_FILTEN                       ((uint32_t)0x00010000U)
#define TIM_C3FILT_SFPSC                        ((uint32_t)0x0000FFFFU) 

/** Bit definition for TIM_C4FILT register **/
#define TIM_C4FILT_THRESH                       ((uint32_t)0x3F000000U) /* CH4 filter threshold */
#define TIM_C4FILT_THRESH_0                     ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_C4FILT_THRESH_1                     ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_C4FILT_THRESH_2                     ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_C4FILT_THRESH_3                     ((uint32_t)0x08000000U) /* Bit 3 */
#define TIM_C4FILT_THRESH_4                     ((uint32_t)0x10000000U) /* Bit 4 */
#define TIM_C4FILT_THRESH_5                     ((uint32_t)0x20000000U) /* Bit 5 */

#define TIM_C4FILT_WSIZE                        ((uint32_t)0x007E0000U) /* CH4 filter window size */
#define TIM_C4FILT_WSIZE_0                      ((uint32_t)0x00020000U) /* Bit 0 */
#define TIM_C4FILT_WSIZE_1                      ((uint32_t)0x00040000U) /* Bit 1 */
#define TIM_C4FILT_WSIZE_2                      ((uint32_t)0x00080000U) /* Bit 2 */
#define TIM_C4FILT_WSIZE_3                      ((uint32_t)0x00100000U) /* Bit 3 */
#define TIM_C4FILT_WSIZE_4                      ((uint32_t)0x00200000U) /* Bit 4 */
#define TIM_C4FILT_WSIZE_5                      ((uint32_t)0x00400000U) /* Bit 5 */

#define TIM_C4FILT_FILTEN                       ((uint32_t)0x00010000U)
#define TIM_C4FILT_SFPSC                        ((uint32_t)0x0000FFFFU) 

/** Bit definition for TIM_FILTO register **/
#define TIM_FILTO_C1FILTO                       ((uint32_t)0x00000001U) /* CH1 filter output state */
#define TIM_FILTO_C2FILTO                       ((uint32_t)0x00000002U) /* CH2 filter output state */
#define TIM_FILTO_C3FILTO                       ((uint32_t)0x00000004U) /* CH3 filter output state */
#define TIM_FILTO_C4FILTO                       ((uint32_t)0x00000008U) /* CH4 filter output state */

/** Bit definition for TIM_INSEL register **/
#define TIM_INSEL_TI1S                          ((uint32_t)0x0000000FU) /* TI1 signal selection */
#define TIM_INSEL_TI1S_0                        ((uint32_t)0x00000001U) /* Bit 0 */
#define TIM_INSEL_TI1S_1                        ((uint32_t)0x00000002U) /* Bit 1 */
#define TIM_INSEL_TI1S_2                        ((uint32_t)0x00000004U) /* Bit 2 */
#define TIM_INSEL_TI1S_3                        ((uint32_t)0x00000008U) /* Bit 3 */

#define TIM_INSEL_TI2S                          ((uint32_t)0x000000F0U) /* TI2 signal selection */
#define TIM_INSEL_TI2S_0                        ((uint32_t)0x00000010U) /* Bit 0 */
#define TIM_INSEL_TI2S_1                        ((uint32_t)0x00000020U) /* Bit 1 */
#define TIM_INSEL_TI2S_2                        ((uint32_t)0x00000040U) /* Bit 2 */
#define TIM_INSEL_TI2S_3                        ((uint32_t)0x00000080U) /* Bit 3 */

#define TIM_INSEL_TI3S                          ((uint32_t)0x00000F00U) /* TI3 signal selection */
#define TIM_INSEL_TI3S_0                        ((uint32_t)0x00000100U) /* Bit 0 */
#define TIM_INSEL_TI3S_1                        ((uint32_t)0x00000200U) /* Bit 1 */
#define TIM_INSEL_TI3S_2                        ((uint32_t)0x00000400U) /* Bit 2 */
#define TIM_INSEL_TI3S_3                        ((uint32_t)0x00000800U) /* Bit 3 */

#define TIM_INSEL_TI4S                          ((uint32_t)0x0000F000U) /* TI4 signal selection */
#define TIM_INSEL_TI4S_0                        ((uint32_t)0x00001000U) /* Bit 0 */
#define TIM_INSEL_TI4S_1                        ((uint32_t)0x00002000U) /* Bit 1 */
#define TIM_INSEL_TI4S_2                        ((uint32_t)0x00004000U) /* Bit 2 */
#define TIM_INSEL_TI4S_3                        ((uint32_t)0x00008000U) /* Bit 3 */

#define TIM_INSEL_ETRS                          ((uint32_t)0x000F0000U) /* etr signal selection */
#define TIM_INSEL_ETRS_0                        ((uint32_t)0x00010000U) /* Bit 0 */
#define TIM_INSEL_ETRS_1                        ((uint32_t)0x00020000U) /* Bit 1 */
#define TIM_INSEL_ETRS_2                        ((uint32_t)0x00040000U) /* Bit 2 */
#define TIM_INSEL_ETRS_3                        ((uint32_t)0x00080000U) /* Bit 3 */

#define TIM_INSEL_ITRS                          ((uint32_t)0x00F00000U) /* itr signal selection */
#define TIM_INSEL_ITRS_0                        ((uint32_t)0x00100000U) /* Bit 0 */
#define TIM_INSEL_ITRS_1                        ((uint32_t)0x00200000U) /* Bit 1 */
#define TIM_INSEL_ITRS_2                        ((uint32_t)0x00400000U) /* Bit 2 */
#define TIM_INSEL_ITRS_3                        ((uint32_t)0x00800000U) /* Bit 3 */

#define TIM_INSEL_CLRS                          ((uint32_t)0x0F000000U) /* Ocrefclear signal selection */
#define TIM_INSEL_CLRS_0                        ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_INSEL_CLRS_1                        ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_INSEL_CLRS_2                        ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_INSEL_CLRS_3                        ((uint32_t)0x08000000U) /* Bit 3 */

/** Bit definition for TIM_AF1 register **/
#define TIM_AF1_IOMBRKEN                        ((uint32_t)0x00000001U) /* Enable IOM as break1 input */
#define TIM_AF1_COMP1BRKEN                      ((uint32_t)0x00000002U) /* Enable COMP1 as break1 input */
#define TIM_AF1_COMP2BRKEN                      ((uint32_t)0x00000004U) /* Enable COMP2 as break1 input */
#define TIM_AF1_COMP3BRKEN                      ((uint32_t)0x00000008U) /* Enable COMP3 as break1 input */
#define TIM_AF1_COMP4BRKEN                      ((uint32_t)0x00000010U) /* Enable COMP4 as break1 input */
#define TIM_AF1_DSMU0BRKEN                      ((uint32_t)0x01000000U) /* Enable DSMU0 as break1 input */
#define TIM_AF1_DSMU1BRKEN                      ((uint32_t)0x02000000U) /* Enable DSMU1 as break1 input */
#define TIM_AF1_DSMU2BRKEN                      ((uint32_t)0x04000000U) /* Enable DSMU2 as break1 input */
#define TIM_AF1_DSMU3BRKEN                      ((uint32_t)0x08000000U) /* Enable DSMU3 as break1 input */

#define TIM_AF1_IOMBRKP                         ((uint32_t)0x00000200U) /* Select polarity of break1 input from IOM */
#define TIM_AF1_COMP1BRKP                       ((uint32_t)0x00000400U) /* Select polarity of break1 input from COMP1 */
#define TIM_AF1_COMP2BRKP                       ((uint32_t)0x00000800U) /* Select polarity of break1 input from COMP2 */
#define TIM_AF1_COMP3BRKP                       ((uint32_t)0x00001000U) /* Select polarity of break1 input from COMP3 */
#define TIM_AF1_COMP4BRKP                       ((uint32_t)0x00002000U) /* Select polarity of break1 input from COMP4 */

/** Bit definition for TIM_AF2 register **/
#define TIM_AF2_IOMBRK2EN                       ((uint32_t)0x00000001U) /* Enable IOM as break2 input */
#define TIM_AF2_COMP1BRK2EN                     ((uint32_t)0x00000002U) /* Enable COMP1 as break2 input */
#define TIM_AF2_COMP2BRK2EN                     ((uint32_t)0x00000004U) /* Enable COMP2 as break2 input */
#define TIM_AF2_COMP3BRK2EN                     ((uint32_t)0x00000008U) /* Enable COMP3 as break2 input */
#define TIM_AF2_COMP4BRK2EN                     ((uint32_t)0x00000010U) /* Enable COMP4 as break2 input */
#define TIM_AF2_DSMU0BRK2EN                     ((uint32_t)0x01000000U) /* Enable DSMU0 as break2 input */
#define TIM_AF2_DSMU1BRK2EN                     ((uint32_t)0x02000000U) /* Enable DSMU1 as break2 input */
#define TIM_AF2_DSMU2BRK2EN                     ((uint32_t)0x04000000U) /* Enable DSMU2 as break2 input */
#define TIM_AF2_DSMU3BRK2EN                     ((uint32_t)0x08000000U) /* Enable DSMU3 as break2 input */


#define TIM_AF2_IOMBRK2P                        ((uint32_t)0x00000200U) /* Select polarity of break2 input from IOM */
#define TIM_AF2_COMP1BRK2P                      ((uint32_t)0x00000400U) /* Select polarity of break2 input from COMP1 */
#define TIM_AF2_COMP2BRK2P                      ((uint32_t)0x00000800U) /* Select polarity of break2 input from COMP2 */
#define TIM_AF2_COMP3BRK2P                      ((uint32_t)0x00001000U) /* Select polarity of break2 input from COMP3 */
#define TIM_AF2_COMP4BRK2P                      ((uint32_t)0x00002000U) /* Select polarity of break2 input from COMP4 */

/** Bit definition for TIM_BKFR2 register **/
#define TIM_BKFR2_THRESH                        ((uint32_t)0x3F000000U) /* Break2 filter threshold */
#define TIM_BKFR2_THRESH_0                      ((uint32_t)0x01000000U) /* Bit 0 */
#define TIM_BKFR2_THRESH_1                      ((uint32_t)0x02000000U) /* Bit 1 */
#define TIM_BKFR2_THRESH_2                      ((uint32_t)0x04000000U) /* Bit 2 */
#define TIM_BKFR2_THRESH_3                      ((uint32_t)0x08000000U) /* Bit 3 */
#define TIM_BKFR2_THRESH_4                      ((uint32_t)0x10000000U) /* Bit 4 */
#define TIM_BKFR2_THRESH_5                      ((uint32_t)0x20000000U) /* Bit 5 */

#define TIM_BKFR2_WSIZE                         ((uint32_t)0x007E0000U)  /* Break2 filter window size */
#define TIM_BKFR2_WSIZE_0                       ((uint32_t)0x00020000U) /* Bit 0 */
#define TIM_BKFR2_WSIZE_1                       ((uint32_t)0x00040000U) /* Bit 1 */
#define TIM_BKFR2_WSIZE_2                       ((uint32_t)0x00080000U) /* Bit 2 */
#define TIM_BKFR2_WSIZE_3                       ((uint32_t)0x00100000U) /* Bit 3 */
#define TIM_BKFR2_WSIZE_4                       ((uint32_t)0x00200000U) /* Bit 4 */
#define TIM_BKFR2_WSIZE_5                       ((uint32_t)0x00400000U) /* Bit 5 */

#define TIM_BKFR2_FILTEN                        ((uint32_t)0x00010000U)
#define TIM_BKFR2_SFPSC                         ((uint32_t)0x0000FFFFU)  



/** Bit definition for TIM_DCTRL register **/
#define TIM_DCTRL_DBADDR                        ((uint32_t)0x00003F00U) /* DBA[5:0] bits (DMA Base Address) */
#define TIM_DCTRL_DBADDR_0                      ((uint32_t)0x00000100U) /* Bit 0 */
#define TIM_DCTRL_DBADDR_1                      ((uint32_t)0x00000200U) /* Bit 1 */
#define TIM_DCTRL_DBADDR_2                      ((uint32_t)0x00000400U) /* Bit 2 */
#define TIM_DCTRL_DBADDR_3                      ((uint32_t)0x00000800U) /* Bit 3 */
#define TIM_DCTRL_DBADDR_4                      ((uint32_t)0x00001000U) /* Bit 4 */
#define TIM_DCTRL_DBADDR_5                      ((uint32_t)0x00002000U) /* Bit 5 */

#define TIM_DCTRL_DBLEN                         ((uint32_t)0x0000003FU) /* DBL[5:0] bits (DMA Burst Length) */
#define TIM_DCTRL_DBLEN_0                       ((uint32_t)0x00000001U) /* Bit 0 */
#define TIM_DCTRL_DBLEN_1                       ((uint32_t)0x00000002U) /* Bit 1 */
#define TIM_DCTRL_DBLEN_2                       ((uint32_t)0x00000004U) /* Bit 2 */
#define TIM_DCTRL_DBLEN_3                       ((uint32_t)0x00000008U) /* Bit 3 */
#define TIM_DCTRL_DBLEN_4                       ((uint32_t)0x00000010U) /* Bit 4 */
#define TIM_DCTRL_DBLEN_5                       ((uint32_t)0x00000020U) /* Bit 5 */

/** Bit definition for TIM_DADDR register **/
#define TIM_DADDR_BURST                         ((uint32_t)0xFFFFFFFFU) /* DMA register for burst accesses */

/*** LCDC ***/

/** Bit definition for LCDC_SYNCCTRL register **/
#define LCDC_SYNCCTRL_VSH                       ((uint32_t)0x0000FFFFU) /* Vertical synchronization height */
#define LCDC_SYNCCTRL_HSW                       ((uint32_t)0xFFFF0000U) /* Horizontal synchronization width */

/** Bit definition for LCDC_BPCTRL register **/
#define LCDC_BPCTRL_AHBP                        ((uint32_t)0x0000FFFFU) /* Accumulated vertical back porch */
#define LCDC_BPCTRL_AVBP                        ((uint32_t)0xFFFF0000U) /* Accumulated horizontal back porch */

/** Bit definition for LCDC_AWCTRL register **/
#define LCDC_AWCTRL_AAH                         ((uint32_t)0x0000FFFFU) /* Accumulated active height */
#define LCDC_AWCTRL_AAW                         ((uint32_t)0xFFFF0000U) /* Accumulated active width */

/** Bit definition for LCDC_TWCTRL register **/
#define LCDC_TWCTRL_TOTALH                      ((uint32_t)0x0000FFFFU) /* Total height */
#define LCDC_TWCTRL_TOTALW                      ((uint32_t)0xFFFF0000U) /* Total width */

/** Bit definition for LCDC_GCTRL register **/
#define LCDC_GCTRL_EN                           ((uint32_t)0x00000001U) /* LCDC enable */
#define LCDC_GCTRL_GCEN                         ((uint32_t)0x00000002U) /* Gamma correction enable */
#define LCDC_GCTRL_DBW                          ((uint32_t)0x00000070U) /* Bit[6:4] Dither blue width */
#define LCDC_GCTRL_DGW                          ((uint32_t)0x00000700U) /* Bit[10:8] Dither green width */
#define LCDC_GCTRL_DRW                          ((uint32_t)0x00007000U) /* Bit[14:12] Dither red width */
#define LCDC_GCTRL_DEN                          ((uint32_t)0x00010000U) /* Dither enable */
#define LCDC_GCTRL_PCLKPOL                      ((uint32_t)0x10000000U) /* Pixel clock polarity */
#define LCDC_GCTRL_DEPOL                        ((uint32_t)0x20000000U) /* Data enable polarity */
#define LCDC_GCTRL_VSPOL                        ((uint32_t)0x40000000U) /* Vertical polarity */
#define LCDC_GCTRL_HSPOL                        ((uint32_t)0x80000000U) /* Horizontal polarity */

/** Bit definition for LCDC_SRCTRL register **/
#define LCDC_SRCTRL_IMR                         ((uint32_t)0x00000001U) /* Immediate reload */
#define LCDC_SRCTRL_VBR                         ((uint32_t)0x00000002U) /* Vertical blanking reload */

/** Bit definition for LCDC_BGCCTRL register **/
#define LCDC_BGCCTRL_BCB                        ((uint32_t)0x000000FFU) /* Background blue value */
#define LCDC_BGCCTRL_BCG                        ((uint32_t)0x0000FF00U) /* Background green value */
#define LCDC_BGCCTRL_BCR                        ((uint32_t)0x00FF0000U) /* Background red value */

/** Bit definition for LCDC_INTEN register **/
#define LCDC_INTEN_LIEN                         ((uint32_t)0x00000001U) /* Line interrupt enable */
#define LCDC_INTEN_FUIEN                        ((uint32_t)0x00000002U) /* FIFO underrun interrupt enable */
#define LCDC_INTEN_BEIEN                        ((uint32_t)0x00000004U) /* BUS error interrupt enable */
#define LCDC_INTEN_RRIEN                        ((uint32_t)0x00000008U) /* Register reload interrupt enable */
#define LCDC_INTEN_STNSIGIEN                    ((uint32_t)0x00000010U) /* Slave timing no signal interrupt enable */
#define LCDC_INTEN_STNSYNCIEN                   ((uint32_t)0x00000020U) /* Slave timing not in sync interrupt enable */
#define LCDC_INTEN_FUKIEN                       ((uint32_t)0x00000040U) /* FIFO underrun killing interrupt enable */
#define LCDC_INTEN_CRCIEN                       ((uint32_t)0x00000080U) /* CRC interrupt enable */
#define LCDC_INTEN_RFEIEN                       ((uint32_t)0x00000100U) /* Rotation FIFO error interrupt enable */

/** Bit definition for LCDC_INTSTS register **/
#define LCDC_INTSTS_LIF                         ((uint32_t)0x00000001U) /* Line interrupt flag */
#define LCDC_INTSTS_FUIF                        ((uint32_t)0x00000002U) /* FIFO underrun interrupt flag */
#define LCDC_INTSTS_BEIF                        ((uint32_t)0x00000004U) /* BUS error interrupt flag */
#define LCDC_INTSTS_RRIF                        ((uint32_t)0x00000008U) /* Register reload interrupt flag */
#define LCDC_INTSTS_STNSIGIF                    ((uint32_t)0x00000010U) /* Slave timing no signal interrupt flag */
#define LCDC_INTSTS_STNSYNCIF                   ((uint32_t)0x00000020U) /* Slave timing not in sync interrupt flag */
#define LCDC_INTSTS_FUKIF                       ((uint32_t)0x00000040U) /* FIFO underrun killing interrupt flag */
#define LCDC_INTSTS_CRCIF                       ((uint32_t)0x00000080U) /* CRC interrupt flag */
#define LCDC_INTSTS_RFEIF                       ((uint32_t)0x00000100U) /* Rotation FIFO error interrupt flag */

/** Bit definition for LCDC_INTCLR register **/
#define LCDC_INTCLR_LICLR                       ((uint32_t)0x00000001U) /* Line interrupt flag clear */
#define LCDC_INTCLR_FUICLR                      ((uint32_t)0x00000002U) /* FIFO underrun interrupt flag clear */
#define LCDC_INTCLR_BEICLR                      ((uint32_t)0x00000004U) /* BUS error interrupt flag clear */
#define LCDC_INTCLR_RRICLR                      ((uint32_t)0x00000008U) /* Register reload interrupt flag clear */
#define LCDC_INTCLR_STNSIGICLR                  ((uint32_t)0x00000010U) /* Slave timing no signal interrupt flag clear */
#define LCDC_INTCLR_STNSYNCICLR                 ((uint32_t)0x00000020U) /* Slave timing not in sync interrupt flag clear */
#define LCDC_INTCLR_FUKICLR                     ((uint32_t)0x00000040U) /* FIFO underrun killing interrupt flag clear */
#define LCDC_INTCLR_CRCICLR                     ((uint32_t)0x00000080U) /* CRC interrupt flag clear */
#define LCDC_INTCLR_RFEICLR                     ((uint32_t)0x00000100U) /* Rotation FIFO error interrupt flag clear */

/** Bit definition for LCDC_LINTPCTRL register **/
#define LCDC_LINTPCTRL_LINTP                    ((uint32_t)0x0000FFFFU) /* Line interrupt position */

/** Bit definition for LCDC_CPSTS register **/
#define LCDC_CPSTS_CYPOS                        ((uint32_t)0x0000FFFFU) /* Current Y position */
#define LCDC_CPSTS_CXPOS                        ((uint32_t)0xFFFF0000U) /* Current X position */

/** Bit definition for LCDC_CDSTS register **/
#define LCDC_CDSTS_VBS                          ((uint32_t)0x00000001U) /* Vertical blanking status */
#define LCDC_CDSTS_HBS                          ((uint32_t)0x00000002U) /* Horizontal blanking status */
#define LCDC_CDSTS_VSYNCS                       ((uint32_t)0x00000004U) /* Vertical synchronization status */
#define LCDC_CDSTS_HSYNCS                       ((uint32_t)0x00000008U) /* Horizontal synchronization status */

/** Bit definition for LCDC_EXTDCTRL register **/
#define LCDC_EXTDCTRL_DVEN                      ((uint32_t)0x00100000U) /* Dual view enable */
#define LCDC_EXTDCTRL_SPMEN                     ((uint32_t)0x00200000U) /* Sub-pixel mixing enable */
#define LCDC_EXTDCTRL_PCLKHEEN                  ((uint32_t)0x00400000U) /* Pixel clock half even enable */
#define LCDC_EXTDCTRL_PCLKHOEN                  ((uint32_t)0x00800000U) /* Pixel clock half odd enable */
#define LCDC_EXTDCTRL_PCLKHES                   ((uint32_t)0x01000000U) /* Pixel clock half odd/even active edge shift */

/** Bit definition for LCDC_LSRCTRL register **/
#define LCDC_LSRCTRL_IMR                        ((uint32_t)0x00000001U) /* Layer reload immediate */
#define LCDC_LSRCTRL_VBR                        ((uint32_t)0x00000002U) /* Layer reload vertical blanking */
#define LCDC_LSRCTRL_MGR                        ((uint32_t)0x00000004U) /* Layer reload mask global */

/** Bit definition for LCDC_LCTRL register **/
#define LCDC_LCTRL_LEN                          ((uint32_t)0x00000001U) /* Layer enable */
#define LCDC_LCTRL_CKEN                         ((uint32_t)0x00000002U) /* Color key enable */
#define LCDC_LCTRL_VDEN                         ((uint32_t)0x00000004U) /* Vertical duplication enable */
#define LCDC_LCTRL_HDEN                         ((uint32_t)0x00000008U) /* Horizontal duplication enable */
#define LCDC_LCTRL_CLUTEN                       ((uint32_t)0x00000010U) /* CLUT enable */
#define LCDC_LCTRL_CKREN                        ((uint32_t)0x00000020U) /* Color key replace enable */

#define LCDC_LCTRL_DVMD                         ((uint32_t)0x000000C0U) /* Dual-view insertion mode */
#define LCDC_LCTRL_DVMD_0                       ((uint32_t)0x00000040U) /* Bit 0 */
#define LCDC_LCTRL_DVMD_1                       ((uint32_t)0x00000080U) /* Bit 1 */

#define LCDC_LCTRL_HMEN                         ((uint32_t)0x00000100U) /* Horizontal mirroring enable */
#define LCDC_LCTRL_DCBEN                        ((uint32_t)0x00000200U) /* Default color blending enable */
#define LCDC_LCTRL_SEN                          ((uint32_t)0x00000400U) /* Scaler enable */

/** Bit definition for LCDC_WHCTRL register **/
#define LCDC_WHPCTRL_WHSTPOS                    ((uint32_t)0x0000FFFFU) /* Window horizontal start position */
#define LCDC_WHPCTRL_WHSPPOS                    ((uint32_t)0xFFFF0000U) /* Window horizontal stop position */

/** Bit definition for LCDC_WVCTRL register **/
#define LCDC_WVPCTRL_WVSTPOS                     ((uint32_t)0x0000FFFFU) /* Window vertical start position */
#define LCDC_WVPCTRL_WVSPPOS                     ((uint32_t)0xFFFF0000U) /* Window vertical stop position */

/** Bit definition for LCDC_CKCTRL register **/
#define LCDC_CKCTRL_CKB                         ((uint32_t)0x000000FFU) /* Color key blue value */
#define LCDC_CKCTRL_CKG                         ((uint32_t)0x0000FF00U) /* Color key green value */
#define LCDC_CKCTRL_CKR                         ((uint32_t)0x00FF0000U) /* Color key red value */

/** Bit definition for LCDC_PFCTRL register **/
#define LCDC_PFCTRL_PF                          ((uint32_t)0x00000007U) /* Pixel format */
#define LCDC_PFCTRL_PF_0                        ((uint32_t)0x00000001U) /* Bit 0 */
#define LCDC_PFCTRL_PF_1                        ((uint32_t)0x00000002U) /* Bit 1 */
#define LCDC_PFCTRL_PF_2                        ((uint32_t)0x00000004U) /* Bit 2 */

/** Bit definition for LCDC_CACTRL register **/
#define LCDC_CACTRL_CA                          ((uint32_t)0x000000FFU) /* Constant alpha */

/** Bit definition for LCDC_DCCTRL register **/
#define LCDC_DCCTRL_DCB                         ((uint32_t)0x000000FFU) /* Default color blue */
#define LCDC_DCCTRL_DCG                         ((uint32_t)0x0000FF00U) /* Default color green */
#define LCDC_DCCTRL_DCR                         ((uint32_t)0x00FF0000U) /* Default color red */
#define LCDC_DCCTRL_DCA                         ((uint32_t)0xFF000000U) /* Default color alpha */

/** Bit definition for LCDC_BFCTRL register **/
#define LCDC_BFCTRL_BF2                         ((uint32_t)0x00000007U) /* Blending factor 2 */
#define LCDC_BFCTRL_BF2_0                       ((uint32_t)0x00000001U) /* Bit 0 */
#define LCDC_BFCTRL_BF2_1                       ((uint32_t)0x00000002U) /* Bit 1 */
#define LCDC_BFCTRL_BF2_2                       ((uint32_t)0x00000004U) /* Bit 2 */

#define LCDC_BFCTRL_BF1                         ((uint32_t)0x00000700U) /* Blending factor 2 */
#define LCDC_BFCTRL_BF1_0                       ((uint32_t)0x00000100U) /* Bit 0 */
#define LCDC_BFCTRL_BF1_1                       ((uint32_t)0x00000200U) /* Bit 1 */
#define LCDC_BFCTRL_BF1_2                       ((uint32_t)0x00000400U) /* Bit 2 */

#define LCDC_BFCTRL_LBOP                        ((uint32_t)0x000F0000U) /* Layer blending order position */
#define LCDC_BFCTRL_LBOP_0                      ((uint32_t)0x00010000U) /* Bit 0 */
#define LCDC_BFCTRL_LBOP_1                      ((uint32_t)0x00020000U) /* Bit 1 */
#define LCDC_BFCTRL_LBOP_2                      ((uint32_t)0x00040000U) /* Bit 2 */
#define LCDC_BFCTRL_LBOP_3                      ((uint32_t)0x00080000U) /* Bit 3 */

/** Bit definition for LCDC_FBBCTRL register **/
#define LCDC_FBBCTRL_NWB                        ((uint32_t)0x000000FFU) /* Number of words per burst */

/** Bit definition for LCDC_AFBCTRL register **/
#define LCDC_AFBCTRL_APEN                       ((uint32_t)0x00000001U) /* Alpha plane enable */
#define LCDC_AFBCTRL_VDEN                       ((uint32_t)0x00000002U) /* Vertical duplication enable */
#define LCDC_AFBCTRL_HDEN                       ((uint32_t)0x00000004U) /* Horizontal duplication enable */
#define LCDC_AFBCTRL_YUVEN                     ((uint32_t)0x00000008U) /* YUV conversion enable */

#define LCDC_AFBCTRL_YUVMD                     ((uint32_t)0x00000030U) /* YUV conversion mode */
#define LCDC_AFBCTRL_YUVMD_0                   ((uint32_t)0x00000010U) /* Bit 0 */
#define LCDC_AFBCTRL_YUVMD_1                   ((uint32_t)0x00000020U) /* Bit 1 */
#define LCDC_AFBCTRL_YUVMD_2                   ((uint32_t)0x00000040U) /* Bit 2 */

#define LCDC_AFBCTRL_YUVIMDO                    ((uint32_t)0x000001C0U) /* YUV interleaved mode order */
#define LCDC_AFBCTRL_YHEN                       ((uint32_t)0x00000200U) /* Y headroom enable */

/** Bit definition for LCDC_CFBADDR register **/
#define LCDC_CFBADDR_CFBADDR                    ((uint32_t)0xFFFFFFFFU) /* Color frame buffer start address */

/** Bit definition for LCDC_CFBLEN register **/
#define LCDC_CFBLEN_CFBLLEN                     ((uint32_t)0x0000FFFFU) /* Color frame buffer line length */
#define LCDC_CFBLEN_CFBP                        ((uint32_t)0xFFFF0000U) /* Color frame buffer pitch in bytes */

/** Bit definition for LCDC_CFBLNUM register **/
#define LCDC_CFBLNUM_CFBLNUM                    ((uint32_t)0x0000FFFFU) /* Color frame buffer line number */

/** Bit definition for LCDC_AFBADDR0 register **/
#define LCDC_AFBADDR0_AFBADDR0                  ((uint32_t)0xFFFFFFFFU) /* Auxiliary 0 frame buffer start address */

/** Bit definition for LCDC_AFBADDR1 register **/
#define LCDC_AFBADDR0_AFBADDR1                  ((uint32_t)0xFFFFFFFFU) /* Auxiliary 1 frame buffer start address */

/** Bit definition for LCDC_AFBLEN register **/
#define LCDC_AFBLEN_AFBLLEN                     ((uint32_t)0x0000FFFFU) /* Auxiliary frame buffer line length */
#define LCDC_AFBLEN_AFBP                        ((uint32_t)0xFFFF0000U) /* Auxiliary frame buffer pitch in bytes */

/** Bit definition for LCDC_AFBLNUM register **/
#define LCDC_AFBLNUM_AFBLNUM                    ((uint32_t)0x0000FFFFU) /* Auxiliary frame buffer line number */

/** Bit definition for LCDC_CLUTWR register **/
#define LCDC_CLUTWR_CLUTB                       ((uint32_t)0x000000FFU) /* CLUT blue value */
#define LCDC_CLUTWR_CLUTG                       ((uint32_t)0x0000FF00U) /* CLUT green value */
#define LCDC_CLUTWR_CLUTR                       ((uint32_t)0x00FF0000U) /* CLUT red value */
#define LCDC_CLUTWR_CLUTADDR                    ((uint32_t)0xFF000000U) /* CLUT address */

/** Bit definition for LCDC_SINS register **/
#define LCDC_SINS_SINW                          ((uint32_t)0x00000FFFU) /* Scaler input width */
#define LCDC_SINS_SINH                          ((uint32_t)0x0FFF0000U) /* Scaler input height */

/** Bit definition for LCDC_SOUTS register **/
#define LCDC_SOUTS_SOUTW                        ((uint32_t)0x00000FFFU) /* Scaler output width */
#define LCDC_SOUTS_SOUTH                        ((uint32_t)0x0FFF0000U) /* Scaler output height */

/** Bit definition for LCDC_VSF register **/
#define LCDC_VSF_VSF                            ((uint32_t)0x0000FFFFU) /* Vertical scaling factor */

/** Bit definition for LCDC_VSP register **/
#define LCDC_VSP_VSP                            ((uint32_t)0x0000FFFFU) /* Vertical scaling phase */

/** Bit definition for LCDC_HSF register **/
#define LCDC_HSF_HSF                            ((uint32_t)0x0000FFFFU) /* Horizontal scaling factor */

/** Bit definition for LCDC_HSP register **/
#define LCDC_HSP_HSP                            ((uint32_t)0x0000FFFFU) /* Horizontal scaling phase */

/** Bit definition for LCDC_YUVS1 register **/
#define LCDC_YUVS1_RVCS                          ((uint32_t)0x000003FFU) /* Red Cr(V) scale */
#define LCDC_YUVS1_BUCS                          ((uint32_t)0x03FF0000U) /* Blue Cb(U) scale */

/** Bit definition for LCDC_YUVS2 register **/
#define LCDC_YUVS2_GVCS                         ((uint32_t)0x000003FFU) /* Green Cr(V) scale */
#define LCDC_YUVS2_GUCS                         ((uint32_t)0x03FF0000U) /* Green Cb(U) scale */

/** Bit definition for LCDC_FCF1 register **/
#define LCDC_FCF1_ASB                           ((uint32_t)0x0000001FU) /* Alpha start bit */
#define LCDC_FCF1_ALENB                         ((uint32_t)0x000001E0U) /* Alpha length bit */
#define LCDC_FCF1_RSB                           ((uint32_t)0x00003E00U) /* Red start bit */
#define LCDC_FCF1_RLENB                         ((uint32_t)0x0003C000U) /* Red length bit */

/** Bit definition for LCDC_FCF2 register **/
#define LCDC_FCF2_GSB                           ((uint32_t)0x0000001FU) /* Green start bit */
#define LCDC_FCF2_GLENB                         ((uint32_t)0x000001E0U) /* Green length bit */
#define LCDC_FCF2_BSB                           ((uint32_t)0x00003E00U) /* Blue start bit */
#define LCDC_FCF2_BLENB                         ((uint32_t)0x0003C000U) /* Blue length bit */
#define LCDC_FCF2_BPP                           ((uint32_t)0x001C0000U) /* Bytes per pixel */

/**** JPEG controller ****/

/*** JPEG CTRL controller ***/
/** Bit definition for JPEG_CTRL register  **/
#define JPEG_CTRL_TYPE                                       ((uint32_t)0x00000001U)         /* Choose JPEG operation */
#define JPEG_CTRL_SWAP                                       ((uint32_t)0x00000002U)         /* Swap Data for YCbCr 4:2:2 Format in BRC bit */


/*** JPEG BRC controller ***/
/** Bit definition for JPEGBRC_INIT register  **/
#define JPEGBRC_INIT_INITF                                   ((uint32_t)0x00000010U)         /* Initialization completion flag bit */
#define JPEGBRC_INIT_BUSY                                    ((uint32_t)0x00000002U)         /* busy bit */
#define JPEGBRC_INIT_INIT                                    ((uint32_t)0x00000001U)         /* init bit */

/** Bit definition for JPEGBRC_EN register  **/
#define JPEGBRC_EN_EN                                        ((uint32_t)0x00000001U)         /* Enables stream processing of the core */

/** Bit definition for JPEGBRC_BUFBADDR register  **/
#define JPEGBRC_BUFBADDR_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* AXI buffer base address */
#define JPEGBRC_BUFBADDR_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGBRC_BUFBADDR_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGBRC_BUFBADDR_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGBRC_BUFBADDR_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGBRC_BUFBADDR_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGBRC_BUFBADDR_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGBRC_BUFBADDR_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGBRC_BUFBADDR_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGBRC_BUFBADDR_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGBRC_BUFBADDR_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGBRC_BUFBADDR_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGBRC_BUFBADDR_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGBRC_BUFBADDR_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGBRC_BUFBADDR_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGBRC_BUFBADDR_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGBRC_BUFBADDR_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGBRC_BUFBADDR_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGBRC_BUFBADDR_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGBRC_BUFBADDR_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGBRC_BUFBADDR_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGBRC_BUFBADDR_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGBRC_BUFBADDR_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGBRC_BUFBADDR_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGBRC_BUFBADDR_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGBRC_BUFBADDR_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGBRC_BUFBADDR_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGBRC_BUFBADDR_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGBRC_BUFBADDR_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGBRC_BUFBADDR_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGBRC_BUFBADDR_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGBRC_BUFBADDR_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGBRC_BUFBADDR_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGBRC_BUFSIZE register  **/
#define JPEGBRC_BUFSIZE_SIZE                                    ((uint32_t)0x0000FFFFU)         /* AXI buffer size */
#define JPEGBRC_BUFSIZE_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGBRC_BUFSIZE_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGBRC_BUFSIZE_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGBRC_BUFSIZE_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGBRC_BUFSIZE_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGBRC_BUFSIZE_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGBRC_BUFSIZE_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGBRC_BUFSIZE_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGBRC_BUFSIZE_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGBRC_BUFSIZE_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGBRC_BUFSIZE_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGBRC_BUFSIZE_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGBRC_BUFSIZE_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGBRC_BUFSIZE_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGBRC_BUFSIZE_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGBRC_BUFSIZE_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGBRC_USMODE register  **/
#define JPEGBRC_USMODE_MODE                                    ((uint32_t)0x00000003U)         /* Up sampling mode */
#define JPEGBRC_USMODE_MODE_0                                  ((uint32_t)0x00000001U)         /* bit1 */
#define JPEGBRC_USMODE_MODE_1                                  ((uint32_t)0x00000002U)         /* bit0 */



/*** JPEG RBC controller ***/
/** Bit definition for JPEGRBC_INIT register  **/
#define JPEGRBC_INIT_INITF                                   ((uint32_t)0x00000010U)         /* Init complete flag */
#define JPEGRBC_INIT_INIT                                    ((uint32_t)0x00000001U)         /* Init bit */

/** Bit definition for JPEGRBC_EN register  **/
#define JPEGRBC_EN_EN                                        ((uint32_t)0x00000001U)         /* Enables stream processing of the core */

/** Bit definition for JPEGRBC_SWITCH register  **/
#define JPEGRBC_SWITCH_SWITCH                                ((uint32_t)0x00000001U)         /* Switch input sample order */

/** Bit definition for JPEGRBC_FRMW register  **/
#define JPEGRBC_FRMW_WIDTH                                   ((uint32_t)0x0000FFFFU)         /* Frame width */
#define JPEGRBC_FRMW_WIDTH_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_FRMW_WIDTH_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_FRMW_WIDTH_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_FRMW_WIDTH_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_FRMW_WIDTH_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_FRMW_WIDTH_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_FRMW_WIDTH_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_FRMW_WIDTH_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_FRMW_WIDTH_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_FRMW_WIDTH_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_FRMW_WIDTH_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_FRMW_WIDTH_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_FRMW_WIDTH_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_FRMW_WIDTH_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_FRMW_WIDTH_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_FRMW_WIDTH_15                                ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGRBC_FRMH register  **/
#define JPEGRBC_FRMH_HEIGHT                                  ((uint32_t)0x0000FFFFU)         /* Frame height */
#define JPEGRBC_FRMH_HEIGHT_0                                ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_FRMH_HEIGHT_1                                ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_FRMH_HEIGHT_2                                ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_FRMH_HEIGHT_3                                ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_FRMH_HEIGHT_4                                ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_FRMH_HEIGHT_5                                ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_FRMH_HEIGHT_6                                ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_FRMH_HEIGHT_7                                ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_FRMH_HEIGHT_8                                ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_FRMH_HEIGHT_9                                ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_FRMH_HEIGHT_10                               ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_FRMH_HEIGHT_11                               ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_FRMH_HEIGHT_12                               ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_FRMH_HEIGHT_13                               ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_FRMH_HEIGHT_14                               ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_FRMH_HEIGHT_15                               ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGRBC_PFORM register  **/
#define JPEGRBC_PFORM_FORMAT                                  ((uint32_t)0x00000007U)         /* Pixel format */
#define JPEGRBC_PFORM_FORMAT_0                                ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_PFORM_FORMAT_1                                ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_PFORM_FORMAT_2                                ((uint32_t)0x00000004U)         /* Bit2*/

/** Bit definition for JPEGRBC_CNAME register  **/
#define JPEGRBC_CNAME_C2                                      ((uint32_t)0x00FF0000U)         /* Name of component 2 */
#define JPEGRBC_CNAME_C2_0                                    ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_CNAME_C2_1                                    ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_CNAME_C2_2                                    ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_CNAME_C2_3                                    ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_CNAME_C2_4                                    ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_CNAME_C2_5                                    ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_CNAME_C2_6                                    ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_CNAME_C2_7                                    ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_CNAME_C1                                      ((uint32_t)0x0000FF00U)         /* Name of component 1 */
#define JPEGRBC_CNAME_C1_0                                    ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_CNAME_C1_1                                    ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_CNAME_C1_2                                    ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_CNAME_C1_3                                    ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_CNAME_C1_4                                    ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_CNAME_C1_5                                    ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_CNAME_C1_6                                    ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_CNAME_C1_7                                    ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_CNAME_C0                                      ((uint32_t)0x000000FFU)         /* Name of component 0 */
#define JPEGRBC_CNAME_C0_0                                    ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_CNAME_C0_1                                    ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_CNAME_C0_2                                    ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_CNAME_C0_3                                    ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_CNAME_C0_4                                    ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_CNAME_C0_5                                    ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_CNAME_C0_6                                    ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_CNAME_C0_7                                    ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGRBC_C0SADD register  **/
#define JPEGRBC_C0SADD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Component 0 start address */
#define JPEGRBC_C0SADD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_C0SADD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_C0SADD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_C0SADD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_C0SADD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_C0SADD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_C0SADD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_C0SADD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_C0SADD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_C0SADD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_C0SADD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_C0SADD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_C0SADD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_C0SADD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_C0SADD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_C0SADD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_C0SADD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_C0SADD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_C0SADD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_C0SADD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_C0SADD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_C0SADD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_C0SADD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_C0SADD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_C0SADD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGRBC_C0SADD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGRBC_C0SADD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGRBC_C0SADD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGRBC_C0SADD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGRBC_C0SADD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGRBC_C0SADD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGRBC_C0SADD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGRBC_C0EADD register  **/
#define JPEGRBC_C0EADD_ADDR                                    ((uint32_t)0x000003FFU)         /* Component 0 end address */
#define JPEGRBC_C0EADD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_C0EADD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_C0EADD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_C0EADD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_C0EADD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_C0EADD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_C0EADD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_C0EADD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_C0EADD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_C0EADD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/

/** Bit definition for JPEGRBC_BPS0 register  **/
#define JPEGRBC_BPS0_NUM                                     ((uint32_t)0x0FFFFFFFU)         /* Blocks per Scan 0 */
#define JPEGRBC_BPS0_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_BPS0_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_BPS0_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_BPS0_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_BPS0_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_BPS0_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_BPS0_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_BPS0_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_BPS0_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_BPS0_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_BPS0_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_BPS0_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_BPS0_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_BPS0_NUM_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_BPS0_NUM_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_BPS0_NUM_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_BPS0_NUM_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_BPS0_NUM_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_BPS0_NUM_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_BPS0_NUM_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_BPS0_NUM_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_BPS0_NUM_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_BPS0_NUM_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_BPS0_NUM_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_BPS0_NUM_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGRBC_BPS0_NUM_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGRBC_BPS0_NUM_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGRBC_BPS0_NUM_27                                  ((uint32_t)0x08000000U)         /* Bit27*/

/** Bit definition for JPEGRBC_BPS12 register  **/
#define JPEGRBC_BPS12_NUM                                     ((uint32_t)0x0FFFFFFFU)         /* Blocks per Scan 1,2 */
#define JPEGRBC_BPS12_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_BPS12_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_BPS12_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_BPS12_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_BPS12_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_BPS12_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_BPS12_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_BPS12_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_BPS12_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_BPS12_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_BPS12_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_BPS12_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_BPS12_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_BPS12_NUM_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_BPS12_NUM_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_BPS12_NUM_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_BPS12_NUM_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_BPS12_NUM_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_BPS12_NUM_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_BPS12_NUM_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_BPS12_NUM_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_BPS12_NUM_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_BPS12_NUM_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_BPS12_NUM_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_BPS12_NUM_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGRBC_BPS12_NUM_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGRBC_BPS12_NUM_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGRBC_BPS12_NUM_27                                  ((uint32_t)0x08000000U)         /* Bit27*/

/** Bit definition for JPEGRBC_ROWS0 register  **/
#define JPEGRBC_ROWS0_NUM                                     ((uint32_t)0x00001FFFU)         /* MCU rows Scan 0 */
#define JPEGRBC_ROWS0_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_ROWS0_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_ROWS0_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_ROWS0_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_ROWS0_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_ROWS0_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_ROWS0_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_ROWS0_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_ROWS0_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_ROWS0_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_ROWS0_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_ROWS0_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_ROWS0_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/

/** Bit definition for JPEGRBC_ROWS12 register  **/
#define JPEGRBC_ROWS12_NUM                                     ((uint32_t)0x00001FFFU)         /* MCU rows Scan 1,2 */
#define JPEGRBC_ROWS12_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_ROWS12_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_ROWS12_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_ROWS12_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_ROWS12_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_ROWS12_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_ROWS12_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_ROWS12_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_ROWS12_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_ROWS12_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_ROWS12_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_ROWS12_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_ROWS12_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/

/** Bit definition for JPEGRBC_HHALF register  **/
#define JPEGRBC_HHALF_HHALF                                   ((uint32_t)0x00007FFFU)         /* Frame height half */
#define JPEGRBC_HHALF_HHALF_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_HHALF_HHALF_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_HHALF_HHALF_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_HHALF_HHALF_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_HHALF_HHALF_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_HHALF_HHALF_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_HHALF_HHALF_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_HHALF_HHALF_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_HHALF_HHALF_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_HHALF_HHALF_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_HHALF_HHALF_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_HHALF_HHALF_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_HHALF_HHALF_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_HHALF_HHALF_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_HHALF_HHALF_14                                ((uint32_t)0x00004000U)         /* Bit14*/

/** Bit definition for JPEGRBC_BLSS0 register  **/
#define JPEGRBC_BLSS0_SIZE                                    ((uint32_t)0x0003FFFFU)         /* Block line stride Scan 0 */
#define JPEGRBC_BLSS0_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_BLSS0_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_BLSS0_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_BLSS0_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_BLSS0_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_BLSS0_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_BLSS0_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_BLSS0_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_BLSS0_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_BLSS0_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_BLSS0_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_BLSS0_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_BLSS0_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_BLSS0_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_BLSS0_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_BLSS0_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_BLSS0_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_BLSS0_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/

/** Bit definition for JPEGRBC_BLSS12 register  **/
#define JPEGRBC_BLSS12_SIZE                                    ((uint32_t)0x0003FFFFU)         /* Block line stride Scan 1,2 */
#define JPEGRBC_BLSS12_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_BLSS12_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_BLSS12_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_BLSS12_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_BLSS12_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_BLSS12_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_BLSS12_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_BLSS12_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_BLSS12_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_BLSS12_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_BLSS12_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_BLSS12_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_BLSS12_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_BLSS12_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_BLSS12_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_BLSS12_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_BLSS12_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_BLSS12_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/

/** Bit definition for JPEGRBC_BPRS0 register  **/
#define JPEGRBC_BPRS0_NUM                                     ((uint32_t)0x00007FFFU)         /* Blocks per MCU row Scan 0 */
#define JPEGRBC_BPRS0_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_BPRS0_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_BPRS0_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_BPRS0_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_BPRS0_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_BPRS0_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_BPRS0_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_BPRS0_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_BPRS0_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_BPRS0_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_BPRS0_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_BPRS0_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_BPRS0_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_BPRS0_NUM_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_BPRS0_NUM_14                                  ((uint32_t)0x00004000U)         /* Bit14*/

/** Bit definition for JPEGRBC_BPRS12 register  **/
#define JPEGRBC_BPRS12_NUM                                     ((uint32_t)0x00007FFFU)         /*  Blocks per MCU row Scan 1,2 */
#define JPEGRBC_BPRS12_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_BPRS12_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_BPRS12_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_BPRS12_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_BPRS12_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_BPRS12_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_BPRS12_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_BPRS12_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_BPRS12_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_BPRS12_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_BPRS12_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_BPRS12_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_BPRS12_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_BPRS12_NUM_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_BPRS12_NUM_14                                  ((uint32_t)0x00004000U)         /* Bit14*/

/** Bit definition for JPEGRBC_MAXW register  **/
#define JPEGRBC_MAXW_WIDTH                                   ((uint32_t)0xFFFFFFFFU)         /* Maximum supported width */
#define JPEGRBC_MAXW_WIDTH_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_MAXW_WIDTH_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_MAXW_WIDTH_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_MAXW_WIDTH_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_MAXW_WIDTH_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_MAXW_WIDTH_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_MAXW_WIDTH_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_MAXW_WIDTH_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_MAXW_WIDTH_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_MAXW_WIDTH_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_MAXW_WIDTH_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_MAXW_WIDTH_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_MAXW_WIDTH_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_MAXW_WIDTH_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_MAXW_WIDTH_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_MAXW_WIDTH_15                                ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_MAXW_WIDTH_16                                ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_MAXW_WIDTH_17                                ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_MAXW_WIDTH_18                                ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_MAXW_WIDTH_19                                ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_MAXW_WIDTH_20                                ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_MAXW_WIDTH_21                                ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_MAXW_WIDTH_22                                ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_MAXW_WIDTH_23                                ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_MAXW_WIDTH_24                                ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGRBC_MAXW_WIDTH_25                                ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGRBC_MAXW_WIDTH_26                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGRBC_MAXW_WIDTH_27                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGRBC_MAXW_WIDTH_28                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGRBC_MAXW_WIDTH_29                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGRBC_MAXW_WIDTH_30                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGRBC_MAXW_WIDTH_31                                ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGRBC_MAXH register  **/
#define JPEGRBC_MAXH_HEIGHT                                  ((uint32_t)0xFFFFFFFFU)         /* Maximum supported height */
#define JPEGRBC_MAXH_HEIGHT_0                                ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_MAXH_HEIGHT_1                                ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_MAXH_HEIGHT_2                                ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_MAXH_HEIGHT_3                                ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_MAXH_HEIGHT_4                                ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_MAXH_HEIGHT_5                                ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_MAXH_HEIGHT_6                                ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_MAXH_HEIGHT_7                                ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_MAXH_HEIGHT_8                                ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_MAXH_HEIGHT_9                                ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_MAXH_HEIGHT_10                               ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_MAXH_HEIGHT_11                               ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_MAXH_HEIGHT_12                               ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_MAXH_HEIGHT_13                               ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_MAXH_HEIGHT_14                               ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_MAXH_HEIGHT_15                               ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_MAXH_HEIGHT_16                               ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_MAXH_HEIGHT_17                               ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_MAXH_HEIGHT_18                               ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_MAXH_HEIGHT_19                               ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_MAXH_HEIGHT_20                               ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_MAXH_HEIGHT_21                               ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_MAXH_HEIGHT_22                               ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_MAXH_HEIGHT_23                               ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_MAXH_HEIGHT_24                               ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGRBC_MAXH_HEIGHT_25                               ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGRBC_MAXH_HEIGHT_26                               ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGRBC_MAXH_HEIGHT_27                               ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGRBC_MAXH_HEIGHT_28                               ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGRBC_MAXH_HEIGHT_29                               ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGRBC_MAXH_HEIGHT_30                               ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGRBC_MAXH_HEIGHT_31                               ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGRBC_MBSIZE register  **/
#define JPEGRBC_MBSIZE_SIZE                                    ((uint32_t)0xFFFFFFFFU)         /* Maximum supported buffer size */
#define JPEGRBC_MBSIZE_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGRBC_MBSIZE_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGRBC_MBSIZE_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGRBC_MBSIZE_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGRBC_MBSIZE_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGRBC_MBSIZE_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGRBC_MBSIZE_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGRBC_MBSIZE_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGRBC_MBSIZE_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGRBC_MBSIZE_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGRBC_MBSIZE_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGRBC_MBSIZE_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGRBC_MBSIZE_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGRBC_MBSIZE_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGRBC_MBSIZE_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGRBC_MBSIZE_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGRBC_MBSIZE_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGRBC_MBSIZE_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGRBC_MBSIZE_SIZE_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGRBC_MBSIZE_SIZE_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGRBC_MBSIZE_SIZE_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGRBC_MBSIZE_SIZE_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGRBC_MBSIZE_SIZE_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGRBC_MBSIZE_SIZE_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGRBC_MBSIZE_SIZE_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGRBC_MBSIZE_SIZE_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGRBC_MBSIZE_SIZE_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGRBC_MBSIZE_SIZE_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGRBC_MBSIZE_SIZE_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGRBC_MBSIZE_SIZE_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGRBC_MBSIZE_SIZE_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGRBC_MBSIZE_SIZE_31                                 ((uint32_t)0x80000000U)         /* Bit31*/


/*** JPEG SGDMA(P2H/H2P) controller ***/
/** Bit definition for JPEGDMA_CTRL register  **/
#define JPEGDMA_CTRL_HARDRST                                 ((uint32_t)0x80000000U)         /* Software hard reset */
#define JPEGDMA_CTRL_SGLTRST                                 ((uint32_t)0x00000200U)         /* Reset the TAIL of the SGList to zero */
#define JPEGDMA_CTRL_MMODE                                   ((uint32_t)0x000001C0U)         /* Descriptor Memory Mode settings */
#define JPEGDMA_CTRL_MMODE_0                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_CTRL_MMODE_1                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_CTRL_MMODE_2                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_CTRL_OPMODE                                  ((uint32_t)0x00000038U)         /* Operation Mode Settings */
#define JPEGDMA_CTRL_OPMODE_0                                ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_CTRL_OPMODE_1                                ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_CTRL_OPMODE_2                                ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_CTRL_START                                   ((uint32_t)0x00000004U)         /* DMA Start */
#define JPEGDMA_CTRL_EN                                      ((uint32_t)0x00000002U)         /* Software enable */
#define JPEGDMA_CTRL_CLR                                     ((uint32_t)0x00000001U)         /* Software reset for the entire H2P/P2H */

/** Bit definition for JPEGDMA_STS register  **/
#define JPEGDMA_STS_RRERR                                   ((uint32_t)0x00008000U)         /* AXI Read response when error has occurred (MSB) */
#define JPEGDMA_STS_WRERR                                   ((uint32_t)0x00004000U)         /* MSB)(AXI Write response when error has occurred (MSB) */
#define JPEGDMA_STS_WDATAERR                                ((uint32_t)0x00002000U)         /* AXI MM Write Error when writing data */
#define JPEGDMA_STS_RDATAERR                                ((uint32_t)0x00001000U)         /* AXI MM Read Error when reading data */
#define JPEGDMA_STS_WDESCERR                                ((uint32_t)0x00000800U)         /* AXI MM Write Error when writing a descriptor */
#define JPEGDMA_STS_RDESCERR                                ((uint32_t)0x00000400U)         /* AXI MM Read Error when reading a descriptor */
#define JPEGDMA_STS_FIFOFULL                                ((uint32_t)0x00000100U)         /* Data FIFO is full */
#define JPEGDMA_STS_FIFOEMPTY                               ((uint32_t)0x00000080U)         /* Data FIFO is empty */
#define JPEGDMA_STS_EOD                                     ((uint32_t)0x00000040U)         /* End-Of-Descriptor */
#define JPEGDMA_STS_AOOD                                    ((uint32_t)0x00000020U)         /* Channel is Almost Out of Descriptors */
#define JPEGDMA_STS_OOD                                     ((uint32_t)0x00000010U)         /* Out Of Descriptors */
#define JPEGDMA_STS_EOFIN                                   ((uint32_t)0x00000008U)         /* End-Of-Frame sampled at the input of the channel */
#define JPEGDMA_STS_EOFOUT                                  ((uint32_t)0x00000004U)         /* End-Of-Frame sampled at the output of the channel */
#define JPEGDMA_STS_GINT                                    ((uint32_t)0x00000002U)         /* Global interrupt status bit for the Channel */
#define JPEGDMA_STS_BUSY                                    ((uint32_t)0x00000001U)         /* H2P/P2H is processing a transfer */

/** Bit definition for JPEGDMA_IE register  **/
#define JPEGDMA_IE_WDATAERREN                              ((uint32_t)0x00002000U)         /* Enable interrupt on AXI MM Write Error when writing data */
#define JPEGDMA_IE_RDATAERREN                              ((uint32_t)0x00001000U)         /* Enable interrupt on AXI MM Read Error when reading data */
#define JPEGDMA_IE_WDESCERREN                              ((uint32_t)0x00000800U)         /* Enable interrupt on AXI MM Write Error when writing a descriptor */
#define JPEGDMA_IE_RDESCERREN                              ((uint32_t)0x00000400U)         /* Enable interrupt on AXI MM Read Error when reading a descriptor */
#define JPEGDMA_IE_EODINTEN                                ((uint32_t)0x00000040U)         /* Enable for the End of Descriptor interrupt */
#define JPEGDMA_IE_AOODINTEN                               ((uint32_t)0x00000020U)         /* Enable for the Almost Out of Descriptors interrupt */
#define JPEGDMA_IE_OODINTEN                                ((uint32_t)0x00000010U)         /* Enable for the Out of Descriptors interrupt */
#define JPEGDMA_IE_EOFININTEN                              ((uint32_t)0x00000008U)         /* Enable for the input EOF interrupt */
#define JPEGDMA_IE_EOFOUTINTEN                             ((uint32_t)0x00000004U)         /* Enable for the output EOF interrupt */
#define JPEGDMA_IE_GINTEN                                  ((uint32_t)0x00000002U)         /* Global interrupt enable for the Channel */

/** Bit definition for JPEGDMA_INTSTS register  **/
#define JPEGDMA_INTSTS_WDATAERR                                ((uint32_t)0x00002000U)         /* AXI MM Write Error when writing data */
#define JPEGDMA_INTSTS_RDATAERR                                ((uint32_t)0x00001000U)         /* AXI MM Read Error when reading data */
#define JPEGDMA_INTSTS_WDESCERR                                ((uint32_t)0x00000800U)         /* AXI MM Write Error when writing a descriptor */
#define JPEGDMA_INTSTS_RDESCERR                                ((uint32_t)0x00000400U)         /* AXI MM Read Error when reading a descriptor */
#define JPEGDMA_INTSTS_EOD                                     ((uint32_t)0x00000040U)         /* End-Of-Descriptor */
#define JPEGDMA_INTSTS_AOOD                                    ((uint32_t)0x00000020U)         /* Channel is Almost Out of Descriptors */
#define JPEGDMA_INTSTS_OOD                                     ((uint32_t)0x00000010U)         /* Out Of Descriptors */
#define JPEGDMA_INTSTS_EOFIN                                   ((uint32_t)0x00000008U)         /* End-Of-Frame sampled at the input of the channel */
#define JPEGDMA_INTSTS_EOFOUT                                  ((uint32_t)0x00000004U)         /* End-Of-Frame sampled at the output of the channel */
#define JPEGDMA_INTSTS_GINT                                    ((uint32_t)0x00000002U)         /* Global interrupt status bit for the Channel */

/** Bit definition for JPEGDMA_AOODT register  **/
#define JPEGDMA_AOODT_VALUE                                   ((uint32_t)0xFFFFFFFFU)         /* Almost Out Of Descriptors Threshold */
#define JPEGDMA_AOODT_VALUE_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_AOODT_VALUE_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_AOODT_VALUE_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_AOODT_VALUE_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_AOODT_VALUE_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_AOODT_VALUE_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_AOODT_VALUE_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_AOODT_VALUE_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_AOODT_VALUE_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_AOODT_VALUE_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_AOODT_VALUE_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_AOODT_VALUE_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_AOODT_VALUE_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_AOODT_VALUE_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_AOODT_VALUE_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_AOODT_VALUE_15                                ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_AOODT_VALUE_16                                ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_AOODT_VALUE_17                                ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_AOODT_VALUE_18                                ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_AOODT_VALUE_19                                ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_AOODT_VALUE_20                                ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_AOODT_VALUE_21                                ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_AOODT_VALUE_22                                ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_AOODT_VALUE_23                                ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_AOODT_VALUE_24                                ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_AOODT_VALUE_25                                ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_AOODT_VALUE_26                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_AOODT_VALUE_27                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_AOODT_VALUE_28                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_AOODT_VALUE_29                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_AOODT_VALUE_30                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_AOODT_VALUE_31                                ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_MBSIZE register  **/
#define JPEGDMA_MBSIZE_SIZE                                    ((uint32_t)0xFFFFFFFFU)         /* Maximum allowed size for an AXI4 MM burst */
#define JPEGDMA_MBSIZE_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_MBSIZE_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_MBSIZE_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_MBSIZE_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_MBSIZE_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_MBSIZE_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_MBSIZE_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_MBSIZE_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_MBSIZE_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_MBSIZE_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_MBSIZE_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_MBSIZE_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_MBSIZE_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_MBSIZE_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_MBSIZE_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_MBSIZE_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_MBSIZE_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_MBSIZE_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_MBSIZE_SIZE_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_MBSIZE_SIZE_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_MBSIZE_SIZE_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_MBSIZE_SIZE_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_MBSIZE_SIZE_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_MBSIZE_SIZE_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_MBSIZE_SIZE_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_MBSIZE_SIZE_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_MBSIZE_SIZE_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_MBSIZE_SIZE_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_MBSIZE_SIZE_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_MBSIZE_SIZE_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_MBSIZE_SIZE_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_MBSIZE_SIZE_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_SGLPL register  **/
#define JPEGDMA_SGLPL_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Scatter-Gather List Pointer LSB */
#define JPEGDMA_SGLPL_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_SGLPL_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_SGLPL_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_SGLPL_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_SGLPL_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_SGLPL_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_SGLPL_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_SGLPL_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_SGLPL_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_SGLPL_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_SGLPL_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_SGLPL_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_SGLPL_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_SGLPL_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_SGLPL_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_SGLPL_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_SGLPL_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_SGLPL_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_SGLPL_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_SGLPL_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_SGLPL_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_SGLPL_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_SGLPL_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_SGLPL_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_SGLPL_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_SGLPL_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_SGLPL_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_SGLPL_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_SGLPL_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_SGLPL_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_SGLPL_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_SGLPL_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_SGLPM register  **/
#define JPEGDMA_SGLPM_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Scatter-Gather List Pointer MSB */
#define JPEGDMA_SGLPM_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_SGLPM_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_SGLPM_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_SGLPM_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_SGLPM_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_SGLPM_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_SGLPM_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_SGLPM_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_SGLPM_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_SGLPM_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_SGLPM_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_SGLPM_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_SGLPM_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_SGLPM_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_SGLPM_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_SGLPM_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_SGLPM_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_SGLPM_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_SGLPM_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_SGLPM_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_SGLPM_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_SGLPM_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_SGLPM_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_SGLPM_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_SGLPM_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_SGLPM_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_SGLPM_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_SGLPM_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_SGLPM_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_SGLPM_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_SGLPM_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_SGLPM_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_SGL_SIZE register  **/
#define JPEGDMA_SGL_SIZE_SIZE                                    ((uint32_t)0xFFFFFFFFU)         /* Scatter-Gather List Size */
#define JPEGDMA_SGL_SIZE_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_SGL_SIZE_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_SGL_SIZE_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_SGL_SIZE_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_SGL_SIZE_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_SGL_SIZE_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_SGL_SIZE_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_SGL_SIZE_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_SGL_SIZE_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_SGL_SIZE_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_SGL_SIZE_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_SGL_SIZE_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_SGL_SIZE_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_SGL_SIZE_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_SGL_SIZE_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_SGL_SIZE_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_SGL_SIZE_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_SGL_SIZE_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_SGL_SIZE_SIZE_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_SGL_SIZE_SIZE_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_SGL_SIZE_SIZE_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_SGL_SIZE_SIZE_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_SGL_SIZE_SIZE_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_SGL_SIZE_SIZE_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_SGL_SIZE_SIZE_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_SGL_SIZE_SIZE_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_SGL_SIZE_SIZE_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_SGL_SIZE_SIZE_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_SGL_SIZE_SIZE_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_SGL_SIZE_SIZE_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_SGL_SIZE_SIZE_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_SGL_SIZE_SIZE_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_SGL_HEAD register  **/
#define JPEGDMA_SGL_HEAD_POS                                     ((uint32_t)0xFFFFFFFFU)         /* Scatter-Gather List Head index pointer defines the position of the Head pointer in the list/ring */
#define JPEGDMA_SGL_HEAD_POS_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_SGL_HEAD_POS_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_SGL_HEAD_POS_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_SGL_HEAD_POS_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_SGL_HEAD_POS_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_SGL_HEAD_POS_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_SGL_HEAD_POS_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_SGL_HEAD_POS_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_SGL_HEAD_POS_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_SGL_HEAD_POS_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_SGL_HEAD_POS_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_SGL_HEAD_POS_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_SGL_HEAD_POS_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_SGL_HEAD_POS_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_SGL_HEAD_POS_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_SGL_HEAD_POS_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_SGL_HEAD_POS_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_SGL_HEAD_POS_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_SGL_HEAD_POS_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_SGL_HEAD_POS_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_SGL_HEAD_POS_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_SGL_HEAD_POS_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_SGL_HEAD_POS_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_SGL_HEAD_POS_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_SGL_HEAD_POS_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_SGL_HEAD_POS_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_SGL_HEAD_POS_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_SGL_HEAD_POS_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_SGL_HEAD_POS_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_SGL_HEAD_POS_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_SGL_HEAD_POS_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_SGL_HEAD_POS_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_SGL_TAIL register  **/
#define JPEGDMA_SGL_TAIL_POS                                     ((uint32_t)0xFFFFFFFFU)         /* Scatter-Gather List Tail index pointer defines the position of the tail pointer in the list/ring */
#define JPEGDMA_SGL_TAIL_POS_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_SGL_TAIL_POS_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_SGL_TAIL_POS_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_SGL_TAIL_POS_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_SGL_TAIL_POS_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_SGL_TAIL_POS_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_SGL_TAIL_POS_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_SGL_TAIL_POS_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_SGL_TAIL_POS_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_SGL_TAIL_POS_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_SGL_TAIL_POS_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_SGL_TAIL_POS_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_SGL_TAIL_POS_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_SGL_TAIL_POS_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_SGL_TAIL_POS_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_SGL_TAIL_POS_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_SGL_TAIL_POS_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_SGL_TAIL_POS_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_SGL_TAIL_POS_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_SGL_TAIL_POS_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_SGL_TAIL_POS_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_SGL_TAIL_POS_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_SGL_TAIL_POS_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_SGL_TAIL_POS_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_SGL_TAIL_POS_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_SGL_TAIL_POS_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_SGL_TAIL_POS_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_SGL_TAIL_POS_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_SGL_TAIL_POS_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_SGL_TAIL_POS_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_SGL_TAIL_POS_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_SGL_TAIL_POS_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_MRADDL register  **/
#define JPEGDMA_MRADDL_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* AXI memory read address reports the current address LSB of the AXI MM interface's read channel accesses */
#define JPEGDMA_MRADDL_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_MRADDL_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_MRADDL_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_MRADDL_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_MRADDL_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_MRADDL_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_MRADDL_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_MRADDL_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_MRADDL_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_MRADDL_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_MRADDL_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_MRADDL_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_MRADDL_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_MRADDL_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_MRADDL_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_MRADDL_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_MRADDL_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_MRADDL_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_MRADDL_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_MRADDL_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_MRADDL_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_MRADDL_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_MRADDL_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_MRADDL_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_MRADDL_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_MRADDL_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_MRADDL_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_MRADDL_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_MRADDL_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_MRADDL_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_MRADDL_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_MRADDL_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_MRADDM register  **/
#define JPEGDMA_MRADDM_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* AXI memory read address reports the current address MSB of the AXI MM interface's read channel accesses */
#define JPEGDMA_MRADDM_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_MRADDM_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_MRADDM_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_MRADDM_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_MRADDM_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_MRADDM_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_MRADDM_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_MRADDM_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_MRADDM_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_MRADDM_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_MRADDM_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_MRADDM_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_MRADDM_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_MRADDM_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_MRADDM_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_MRADDM_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_MRADDM_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_MRADDM_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_MRADDM_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_MRADDM_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_MRADDM_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_MRADDM_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_MRADDM_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_MRADDM_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_MRADDM_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_MRADDM_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_MRADDM_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_MRADDM_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_MRADDM_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_MRADDM_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_MRADDM_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_MRADDM_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_MWADDL register  **/
#define JPEGDMA_MWADDL_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* AXI memory write address reports the current address LSB of the AXI MM interface's read channel accesses */
#define JPEGDMA_MWADDL_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_MWADDL_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_MWADDL_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_MWADDL_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_MWADDL_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_MWADDL_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_MWADDL_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_MWADDL_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_MWADDL_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_MWADDL_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_MWADDL_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_MWADDL_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_MWADDL_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_MWADDL_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_MWADDL_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_MWADDL_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_MWADDL_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_MWADDL_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_MWADDL_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_MWADDL_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_MWADDL_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_MWADDL_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_MWADDL_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_MWADDL_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_MWADDL_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_MWADDL_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_MWADDL_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_MWADDL_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_MWADDL_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_MWADDL_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_MWADDL_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_MWADDL_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_MWADDM register  **/
#define JPEGDMA_MWADDM_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* AXI memory write address reports the current address MSB of the AXI MM interface's read channel accesses */
#define JPEGDMA_MWADDM_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_MWADDM_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_MWADDM_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_MWADDM_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_MWADDM_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_MWADDM_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_MWADDM_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_MWADDM_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_MWADDM_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_MWADDM_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_MWADDM_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_MWADDM_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_MWADDM_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_MWADDM_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_MWADDM_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_MWADDM_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_MWADDM_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_MWADDM_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_MWADDM_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_MWADDM_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_MWADDM_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_MWADDM_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_MWADDM_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_MWADDM_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_MWADDM_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_MWADDM_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_MWADDM_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_MWADDM_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_MWADDM_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_MWADDM_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_MWADDM_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_MWADDM_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_DESCF register  **/
#define JPEGDMA_DESCF_LINKE                                   ((uint32_t)0x00000001U)         /* Link Enable */
#define JPEGDMA_DESCF_START                                   ((uint32_t)0x00000002U)         /* Start of Frame */
#define JPEGDMA_DESCF_END                                     ((uint32_t)0x00000004U)         /* End of Frame */
#define JPEGDMA_DESCF_DESCCON                                 ((uint32_t)0x00000008U)         /* Descriptor Consumed */

/** Bit definition for JPEGDMA_DESC_MBSIZE register  **/
#define JPEGDMA_DESC_MBSIZE_SIZE                                    ((uint32_t)0xFFFFFFFFU)         /* Descriptor Memory Block Size */
#define JPEGDMA_DESC_MBSIZE_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_DESC_MBSIZE_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_DESC_MBSIZE_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_DESC_MBSIZE_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_DESC_MBSIZE_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_DESC_MBSIZE_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_DESC_MBSIZE_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_DESC_MBSIZE_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_DESC_MBSIZE_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_DESC_MBSIZE_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_DESC_MBSIZE_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_DESC_MBSIZE_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_DESC_MBSIZE_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_DESC_MBSIZE_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_DESC_MBSIZE_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_DESC_MBSIZE_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_DESC_MBSIZE_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_DESC_MBSIZE_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_DESC_MBSIZE_SIZE_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_DESC_MBSIZE_SIZE_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_DESC_MBSIZE_SIZE_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_DESC_MBSIZE_SIZE_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_DESC_MBSIZE_SIZE_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_DESC_MBSIZE_SIZE_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_DESC_MBSIZE_SIZE_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_DESC_MBSIZE_SIZE_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_DESC_MBSIZE_SIZE_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_DESC_MBSIZE_SIZE_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_DESC_MBSIZE_SIZE_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_DESC_MBSIZE_SIZE_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_DESC_MBSIZE_SIZE_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_DESC_MBSIZE_SIZE_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_DESC_MUS register  **/
#define JPEGDMA_DESC_MUS_SIZE                                    ((uint32_t)0xFFFFFFFFU)         /* Descriptor Memory Used Space */
#define JPEGDMA_DESC_MUS_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_DESC_MUS_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_DESC_MUS_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_DESC_MUS_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_DESC_MUS_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_DESC_MUS_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_DESC_MUS_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_DESC_MUS_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_DESC_MUS_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_DESC_MUS_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_DESC_MUS_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_DESC_MUS_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_DESC_MUS_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_DESC_MUS_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_DESC_MUS_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_DESC_MUS_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_DESC_MUS_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_DESC_MUS_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_DESC_MUS_SIZE_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_DESC_MUS_SIZE_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_DESC_MUS_SIZE_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_DESC_MUS_SIZE_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_DESC_MUS_SIZE_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_DESC_MUS_SIZE_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_DESC_MUS_SIZE_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_DESC_MUS_SIZE_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_DESC_MUS_SIZE_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_DESC_MUS_SIZE_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_DESC_MUS_SIZE_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_DESC_MUS_SIZE_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_DESC_MUS_SIZE_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_DESC_MUS_SIZE_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_DESC_MBADDL register  **/
#define JPEGDMA_DESC_MBADDL_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Descriptor Memory Block Address LSB */
#define JPEGDMA_DESC_MBADDL_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_DESC_MBADDL_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_DESC_MBADDL_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_DESC_MBADDL_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_DESC_MBADDL_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_DESC_MBADDL_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_DESC_MBADDL_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_DESC_MBADDL_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_DESC_MBADDL_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_DESC_MBADDL_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_DESC_MBADDL_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_DESC_MBADDL_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_DESC_MBADDL_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_DESC_MBADDL_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_DESC_MBADDL_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_DESC_MBADDL_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_DESC_MBADDL_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_DESC_MBADDL_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_DESC_MBADDL_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_DESC_MBADDL_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_DESC_MBADDL_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_DESC_MBADDL_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_DESC_MBADDL_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_DESC_MBADDL_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_DESC_MBADDL_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_DESC_MBADDL_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_DESC_MBADDL_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_DESC_MBADDL_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_DESC_MBADDL_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_DESC_MBADDL_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_DESC_MBADDL_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_DESC_MBADDL_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_DESC_MBADDH register  **/
#define JPEGDMA_DESC_MBADDH_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Descriptor Memory Block Address MSB */
#define JPEGDMA_DESC_MBADDH_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_DESC_MBADDH_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_DESC_MBADDH_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_DESC_MBADDH_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_DESC_MBADDH_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_DESC_MBADDH_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_DESC_MBADDH_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_DESC_MBADDH_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_DESC_MBADDH_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_DESC_MBADDH_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_DESC_MBADDH_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_DESC_MBADDH_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_DESC_MBADDH_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_DESC_MBADDH_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_DESC_MBADDH_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_DESC_MBADDH_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_DESC_MBADDH_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_DESC_MBADDH_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_DESC_MBADDH_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_DESC_MBADDH_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_DESC_MBADDH_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_DESC_MBADDH_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_DESC_MBADDH_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_DESC_MBADDH_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_DESC_MBADDH_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_DESC_MBADDH_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_DESC_MBADDH_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_DESC_MBADDH_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_DESC_MBADDH_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_DESC_MBADDH_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_DESC_MBADDH_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_DESC_MBADDH_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_DESC_LINKL register  **/
#define JPEGDMA_DESC_LINKL_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Descriptor Link Address LSB - link to the next descriptor */
#define JPEGDMA_DESC_LINKL_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_DESC_LINKL_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_DESC_LINKL_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_DESC_LINKL_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_DESC_LINKL_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_DESC_LINKL_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_DESC_LINKL_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_DESC_LINKL_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_DESC_LINKL_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_DESC_LINKL_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_DESC_LINKL_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_DESC_LINKL_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_DESC_LINKL_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_DESC_LINKL_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_DESC_LINKL_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_DESC_LINKL_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_DESC_LINKL_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_DESC_LINKL_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_DESC_LINKL_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_DESC_LINKL_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_DESC_LINKL_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_DESC_LINKL_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_DESC_LINKL_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_DESC_LINKL_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_DESC_LINKL_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_DESC_LINKL_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_DESC_LINKL_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_DESC_LINKL_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_DESC_LINKL_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_DESC_LINKL_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_DESC_LINKL_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_DESC_LINKL_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_DESC_LINKH register  **/
#define JPEGDMA_DESC_LINKH_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Descriptor Link Address MSB - link to the next descriptor */
#define JPEGDMA_DESC_LINKH_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_DESC_LINKH_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_DESC_LINKH_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_DESC_LINKH_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_DESC_LINKH_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_DESC_LINKH_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_DESC_LINKH_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_DESC_LINKH_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_DESC_LINKH_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_DESC_LINKH_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_DESC_LINKH_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_DESC_LINKH_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_DESC_LINKH_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_DESC_LINKH_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_DESC_LINKH_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_DESC_LINKH_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_DESC_LINKH_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_DESC_LINKH_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_DESC_LINKH_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_DESC_LINKH_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_DESC_LINKH_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_DESC_LINKH_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_DESC_LINKH_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_DESC_LINKH_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_DESC_LINKH_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_DESC_LINKH_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_DESC_LINKH_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_DESC_LINKH_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_DESC_LINKH_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_DESC_LINKH_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_DESC_LINKH_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_DESC_LINKH_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDMA_PARACFG register  **/
#define JPEGDMA_PARACFG_ALIGNEN                                 ((uint32_t)0x00000004U)         /* Instance alignment */
#define JPEGDMA_PARACFG_DESCSIZE                                ((uint32_t)0x00000002U)         /* Size of descriptor */
#define JPEGDMA_PARACFG_DTYPE                                   ((uint32_t)0x00000001U)         /* Type of DMA Channel */

/** Bit definition for JPEGDMA_FIFODP register  **/
#define JPEGDMA_FIFODP_DEPTH                                   ((uint32_t)0xFFFFFFFFU)         /* Field mirroring the DATA_FIFO_DEPTH parameter */
#define JPEGDMA_FIFODP_DEPTH_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDMA_FIFODP_DEPTH_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDMA_FIFODP_DEPTH_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDMA_FIFODP_DEPTH_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDMA_FIFODP_DEPTH_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDMA_FIFODP_DEPTH_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDMA_FIFODP_DEPTH_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDMA_FIFODP_DEPTH_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDMA_FIFODP_DEPTH_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDMA_FIFODP_DEPTH_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDMA_FIFODP_DEPTH_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDMA_FIFODP_DEPTH_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDMA_FIFODP_DEPTH_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDMA_FIFODP_DEPTH_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDMA_FIFODP_DEPTH_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDMA_FIFODP_DEPTH_15                                ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDMA_FIFODP_DEPTH_16                                ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDMA_FIFODP_DEPTH_17                                ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDMA_FIFODP_DEPTH_18                                ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDMA_FIFODP_DEPTH_19                                ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDMA_FIFODP_DEPTH_20                                ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDMA_FIFODP_DEPTH_21                                ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDMA_FIFODP_DEPTH_22                                ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDMA_FIFODP_DEPTH_23                                ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDMA_FIFODP_DEPTH_24                                ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDMA_FIFODP_DEPTH_25                                ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDMA_FIFODP_DEPTH_26                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDMA_FIFODP_DEPTH_27                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDMA_FIFODP_DEPTH_28                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDMA_FIFODP_DEPTH_29                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDMA_FIFODP_DEPTH_30                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDMA_FIFODP_DEPTH_31                                ((uint32_t)0x80000000U)         /* Bit31*/


/*** JPEG DEC controller ***/
/** Bit definition for JPEGDEC_MODE register  **/
#define JPEGDEC_MODE_EN                                       ((uint32_t)0x00000001U)         /* Enable the decode mode */

/** Bit definition for JPEGDEC_ERROR register  **/
#define JPEGDEC_ERROR_HTERR                                   ((uint32_t)0x00000020U)         /* A Huffman table referenced in a scan (SOS header) is invalid */
#define JPEGDEC_ERROR_QTERR                                   ((uint32_t)0x00000010U)         /* A Quantisation table referenced in a component referenced in a scan (SOS header) selected an invalid Quantisation table */
#define JPEGDEC_ERROR_CERR                                    ((uint32_t)0x00000008U)         /* A component referenced in the scan header (SOS) was not defined in the previous frame header (SOF) */
#define JPEGDEC_ERROR_HUF                                     ((uint32_t)0x00000004U)         /* Huffman decode error detected */
#define JPEGDEC_ERROR_UNEXP                                   ((uint32_t)0x00000002U)         /* Unexpected marker detected */
#define JPEGDEC_ERROR_UNK                                     ((uint32_t)0x00000001U)         /* Unknown marker detected */

/** Bit definition for JPEGDEC_UNLOC register  **/
#define JPEGDEC_UNLOC_POS                                     ((uint32_t)0xFFFFFFFFU)         /* Unknown marker error location */
#define JPEGDEC_UNLOC_POS_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_UNLOC_POS_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_UNLOC_POS_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_UNLOC_POS_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_UNLOC_POS_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_UNLOC_POS_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_UNLOC_POS_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_UNLOC_POS_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_UNLOC_POS_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_UNLOC_POS_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_UNLOC_POS_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_UNLOC_POS_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_UNLOC_POS_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_UNLOC_POS_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_UNLOC_POS_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_UNLOC_POS_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDEC_UNLOC_POS_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_UNLOC_POS_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_UNLOC_POS_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_UNLOC_POS_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_UNLOC_POS_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_UNLOC_POS_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_UNLOC_POS_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_UNLOC_POS_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_UNLOC_POS_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_UNLOC_POS_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_UNLOC_POS_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_UNLOC_POS_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_UNLOC_POS_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_UNLOC_POS_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_UNLOC_POS_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_UNLOC_POS_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDEC_UELOC register  **/
#define JPEGDEC_UELOC_POS                                     ((uint32_t)0xFFFFFFFFU)         /* Unexpected marker error location */
#define JPEGDEC_UELOC_POS_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_UELOC_POS_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_UELOC_POS_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_UELOC_POS_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_UELOC_POS_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_UELOC_POS_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_UELOC_POS_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_UELOC_POS_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_UELOC_POS_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_UELOC_POS_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_UELOC_POS_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_UELOC_POS_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_UELOC_POS_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_UELOC_POS_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_UELOC_POS_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_UELOC_POS_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDEC_UELOC_POS_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_UELOC_POS_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_UELOC_POS_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_UELOC_POS_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_UELOC_POS_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_UELOC_POS_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_UELOC_POS_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_UELOC_POS_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_UELOC_POS_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_UELOC_POS_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_UELOC_POS_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_UELOC_POS_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_UELOC_POS_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_UELOC_POS_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_UELOC_POS_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_UELOC_POS_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDEC_HESYM register  **/
#define JPEGDEC_HESYM_HESYM                                   ((uint32_t)0x0000FFFFU)         /* The Huffman symbol that is in error */
#define JPEGDEC_HESYM_HESYM_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HESYM_HESYM_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HESYM_HESYM_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HESYM_HESYM_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HESYM_HESYM_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HESYM_HESYM_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HESYM_HESYM_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HESYM_HESYM_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HESYM_HESYM_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HESYM_HESYM_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HESYM_HESYM_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HESYM_HESYM_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HESYM_HESYM_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HESYM_HESYM_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HESYM_HESYM_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HESYM_HESYM_15                                ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGDEC_HESYMECS register  **/
#define JPEGDEC_HESYMECS_NUM                                     ((uint32_t)0xFFFFFFFFU)         /* Huffman ECS Number Symbol */
#define JPEGDEC_HESYMECS_NUM_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HESYMECS_NUM_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HESYMECS_NUM_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HESYMECS_NUM_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HESYMECS_NUM_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HESYMECS_NUM_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HESYMECS_NUM_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HESYMECS_NUM_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HESYMECS_NUM_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HESYMECS_NUM_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HESYMECS_NUM_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HESYMECS_NUM_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HESYMECS_NUM_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HESYMECS_NUM_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HESYMECS_NUM_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HESYMECS_NUM_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDEC_HESYMECS_NUM_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HESYMECS_NUM_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HESYMECS_NUM_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HESYMECS_NUM_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HESYMECS_NUM_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HESYMECS_NUM_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HESYMECS_NUM_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HESYMECS_NUM_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HESYMECS_NUM_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HESYMECS_NUM_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HESYMECS_NUM_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HESYMECS_NUM_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HESYMECS_NUM_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HESYMECS_NUM_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HESYMECS_NUM_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HESYMECS_NUM_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDEC_HUF_SELOC register  **/
#define JPEGDEC_HUF_SELOC_POS                                     ((uint32_t)0xFFFFFFFFU)         /* Huffman ECS Number Symbol Error location */
#define JPEGDEC_HUF_SELOC_POS_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUF_SELOC_POS_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUF_SELOC_POS_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUF_SELOC_POS_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUF_SELOC_POS_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUF_SELOC_POS_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUF_SELOC_POS_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUF_SELOC_POS_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUF_SELOC_POS_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUF_SELOC_POS_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUF_SELOC_POS_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUF_SELOC_POS_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUF_SELOC_POS_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUF_SELOC_POS_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUF_SELOC_POS_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUF_SELOC_POS_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDEC_HUF_SELOC_POS_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUF_SELOC_POS_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUF_SELOC_POS_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUF_SELOC_POS_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUF_SELOC_POS_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUF_SELOC_POS_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUF_SELOC_POS_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUF_SELOC_POS_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUF_SELOC_POS_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUF_SELOC_POS_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUF_SELOC_POS_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUF_SELOC_POS_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUF_SELOC_POS_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUF_SELOC_POS_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUF_SELOC_POS_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUF_SELOC_POS_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDEC_TAB_ACCREQ register  **/
#define JPEGDEC_TAB_ACCREQ_AOK                                     ((uint32_t)0x00000002U)         /* Table access flag */
#define JPEGDEC_TAB_ACCREQ_AQEQ                                    ((uint32_t)0x00000001U)         /* Table access request */

/** Bit definition for JPEGDEC_HUFTAB0_EOB register  **/
#define JPEGDEC_HUFTAB0_EOB_EOB0M                                   ((uint32_t)0xFFFF0000U)         /* Contains the EOB symbol mask for Huffman table 0 */
#define JPEGDEC_HUFTAB0_EOB_EOB0M_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_3                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_4                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_5                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_6                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_7                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_8                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_9                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_10                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_11                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_12                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_13                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_14                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUFTAB0_EOB_EOB0M_15                                ((uint32_t)0x80000000U)         /* Bit31*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C                                   ((uint32_t)0x0000FFFFU)         /* Contains the EOB symbol for Huffman table 0 */
#define JPEGDEC_HUFTAB0_EOB_EOB0C_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUFTAB0_EOB_EOB0C_15                                ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGDEC_HUFTAB1_EOB register  **/
#define JPEGDEC_HUFTAB1_EOB_EOB1M                                   ((uint32_t)0xFFFF0000U)         /* Contains the EOB symbol mask for Huffman table 1 */
#define JPEGDEC_HUFTAB1_EOB_EOB1M_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_3                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_4                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_5                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_6                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_7                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_8                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_9                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_10                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_11                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_12                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_13                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_14                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUFTAB1_EOB_EOB1M_15                                ((uint32_t)0x80000000U)         /* Bit31*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C                                   ((uint32_t)0x0000FFFFU)         /* Contains the EOB symbol for Huffman table 1 */
#define JPEGDEC_HUFTAB1_EOB_EOB1C_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUFTAB1_EOB_EOB1C_15                                ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGDEC_HUFTAB2_EOB register  **/
#define JPEGDEC_HUFTAB2_EOB_EOB2M                                   ((uint32_t)0xFFFF0000U)         /* Contains the EOB symbol mask for Huffman table 2 */
#define JPEGDEC_HUFTAB2_EOB_EOB2M_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_3                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_4                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_5                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_6                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_7                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_8                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_9                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_10                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_11                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_12                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_13                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_14                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUFTAB2_EOB_EOB2M_15                                ((uint32_t)0x80000000U)         /* Bit31*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C                                   ((uint32_t)0x0000FFFFU)         /* Contains the EOB symbol for Huffman table 2 */
#define JPEGDEC_HUFTAB2_EOB_EOB2C_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUFTAB2_EOB_EOB2C_15                                ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGDEC_HUFTAB3_EOB register  **/
#define JPEGDEC_HUFTAB3_EOB_EOB3M                                   ((uint32_t)0xFFFF0000U)         /* Contains the EOB symbol mask for Huffman table 3 */
#define JPEGDEC_HUFTAB3_EOB_EOB3M_0                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_1                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_2                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_3                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_4                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_5                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_6                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_7                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_8                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_9                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_10                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_11                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_12                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_13                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_14                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUFTAB3_EOB_EOB3M_15                                ((uint32_t)0x80000000U)         /* Bit31*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C                                   ((uint32_t)0x0000FFFFU)         /* Contains the EOB symbol for Huffman table 3 */
#define JPEGDEC_HUFTAB3_EOB_EOB3C_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUFTAB3_EOB_EOB3C_15                                ((uint32_t)0x00008000U)         /* Bit15*/

/** Bit definition for JPEGDEC_HUF_ADDR register  **/
#define JPEGDEC_HUF_ADDR_TABLE                                   ((uint32_t)0x00000300U)         /* Selects which table to access */
#define JPEGDEC_HUF_ADDR_TABLE_0                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUF_ADDR_TABLE_1                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUF_ADDR_ACDC                                    ((uint32_t)0x00000010U)         /* AC/DC table selector encoded */
#define JPEGDEC_HUF_ADDR_HNUM                                    ((uint32_t)0x00000003U)         /* Selects which Huffman table to access */
#define JPEGDEC_HUF_ADDR_HNUM_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUF_ADDR_HNUM_1                                  ((uint32_t)0x00000002U)         /* Bit1*/

/** Bit definition for JPEGDEC_HUF_DATA register  **/
#define JPEGDEC_HUF_DATA_HDATA                                   ((uint32_t)0xFFFFFFFFU)         /* Huffman table access data */
#define JPEGDEC_HUF_DATA_HDATA_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUF_DATA_HDATA_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUF_DATA_HDATA_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUF_DATA_HDATA_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUF_DATA_HDATA_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUF_DATA_HDATA_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUF_DATA_HDATA_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUF_DATA_HDATA_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUF_DATA_HDATA_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUF_DATA_HDATA_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUF_DATA_HDATA_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUF_DATA_HDATA_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUF_DATA_HDATA_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUF_DATA_HDATA_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUF_DATA_HDATA_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUF_DATA_HDATA_15                                ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDEC_HUF_DATA_HDATA_16                                ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUF_DATA_HDATA_17                                ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUF_DATA_HDATA_18                                ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUF_DATA_HDATA_19                                ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUF_DATA_HDATA_20                                ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUF_DATA_HDATA_21                                ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUF_DATA_HDATA_22                                ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUF_DATA_HDATA_23                                ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUF_DATA_HDATA_24                                ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUF_DATA_HDATA_25                                ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUF_DATA_HDATA_26                                ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUF_DATA_HDATA_27                                ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUF_DATA_HDATA_28                                ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUF_DATA_HDATA_29                                ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUF_DATA_HDATA_30                                ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUF_DATA_HDATA_31                                ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDEC_HUF_REM register  **/
#define JPEGDEC_HUF_REM_HREM                                    ((uint32_t)0xFFFFFFFFU)         /* Huffman table access number of words remaining */
#define JPEGDEC_HUF_REM_HREM_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_HUF_REM_HREM_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_HUF_REM_HREM_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_HUF_REM_HREM_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_HUF_REM_HREM_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_HUF_REM_HREM_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_HUF_REM_HREM_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_HUF_REM_HREM_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGDEC_HUF_REM_HREM_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGDEC_HUF_REM_HREM_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGDEC_HUF_REM_HREM_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGDEC_HUF_REM_HREM_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGDEC_HUF_REM_HREM_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGDEC_HUF_REM_HREM_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGDEC_HUF_REM_HREM_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGDEC_HUF_REM_HREM_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGDEC_HUF_REM_HREM_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGDEC_HUF_REM_HREM_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGDEC_HUF_REM_HREM_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGDEC_HUF_REM_HREM_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGDEC_HUF_REM_HREM_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGDEC_HUF_REM_HREM_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGDEC_HUF_REM_HREM_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGDEC_HUF_REM_HREM_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGDEC_HUF_REM_HREM_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGDEC_HUF_REM_HREM_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGDEC_HUF_REM_HREM_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGDEC_HUF_REM_HREM_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGDEC_HUF_REM_HREM_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGDEC_HUF_REM_HREM_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGDEC_HUF_REM_HREM_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGDEC_HUF_REM_HREM_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGDEC_QT0 register  **/
#define JPEGDEC_QT0_QT0                                     ((uint32_t)0x000000FFU)         /* 8-bits of the quantisation value */
#define JPEGDEC_QT0_QT0_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_QT0_QT0_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_QT0_QT0_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_QT0_QT0_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_QT0_QT0_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_QT0_QT0_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_QT0_QT0_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_QT0_QT0_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGDEC_QT1 register  **/
#define JPEGDEC_QT1_QT1                                     ((uint32_t)0x000000FFU)         /* 8-bits of the quantisation value */
#define JPEGDEC_QT1_QT1_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_QT1_QT1_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_QT1_QT1_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_QT1_QT1_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_QT1_QT1_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_QT1_QT1_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_QT1_QT1_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_QT1_QT1_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGDEC_QT2 register  **/
#define JPEGDEC_QT2_QT2                                     ((uint32_t)0x000000FFU)         /* 8-bits of the quantisation value */
#define JPEGDEC_QT2_QT2_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_QT2_QT2_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_QT2_QT2_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_QT2_QT2_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_QT2_QT2_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_QT2_QT2_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_QT2_QT2_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_QT2_QT2_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGDEC_QT3 register  **/
#define JPEGDEC_QT3_QT3                                     ((uint32_t)0x000000FFU)         /* 8-bits of the quantisation value */
#define JPEGDEC_QT3_QT3_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGDEC_QT3_QT3_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGDEC_QT3_QT3_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGDEC_QT3_QT3_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGDEC_QT3_QT3_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGDEC_QT3_QT3_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGDEC_QT3_QT3_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGDEC_QT3_QT3_7                                   ((uint32_t)0x00000080U)         /* Bit7*/


/*** JPEG ENC controller ***/
/** Bit definition for JPEGENC_QT0 register  **/
#define JPEGENC_QT0_QT0                                     ((uint32_t)0x000000FFU)         /* Quantisation Table 0 */
#define JPEGENC_QT0_QT0_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_QT0_QT0_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_QT0_QT0_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_QT0_QT0_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_QT0_QT0_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_QT0_QT0_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_QT0_QT0_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_QT0_QT0_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGENC_QT1 register  **/
#define JPEGENC_QT1_QT1                                     ((uint32_t)0x000000FFU)         /* Quantisation Table 1 */
#define JPEGENC_QT1_QT1_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_QT1_QT1_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_QT1_QT1_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_QT1_QT1_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_QT1_QT1_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_QT1_QT1_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_QT1_QT1_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_QT1_QT1_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGENC_QT2 register  **/
#define JPEGENC_QT2_QT2                                     ((uint32_t)0x000000FFU)         /* Quantisation Table 2 */
#define JPEGENC_QT2_QT2_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_QT2_QT2_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_QT2_QT2_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_QT2_QT2_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_QT2_QT2_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_QT2_QT2_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_QT2_QT2_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_QT2_QT2_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGENC_QT3 register  **/
#define JPEGENC_QT3_QT3                                     ((uint32_t)0x000000FFU)         /* Quantisation Table 3 */
#define JPEGENC_QT3_QT3_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_QT3_QT3_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_QT3_QT3_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_QT3_QT3_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_QT3_QT3_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_QT3_QT3_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_QT3_QT3_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_QT3_QT3_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for JPEGENC_HEADD register  **/
#define JPEGENC_HEADD_ADDR                                    ((uint32_t)0x000007FFU)         /* End address of JPEG footer */
#define JPEGENC_HEADD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_HEADD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_HEADD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_HEADD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_HEADD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_HEADD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_HEADD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_HEADD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_HEADD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_HEADD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_HEADD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/

/** Bit definition for JPEGENC_HUFTAB0E register  **/
#define JPEGENC_HUFTAB0E_ADDR                                    ((uint32_t)0x000007FFU)         /* End address of JPEG Huffman table 0 */
#define JPEGENC_HUFTAB0E_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_HUFTAB0E_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_HUFTAB0E_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_HUFTAB0E_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_HUFTAB0E_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_HUFTAB0E_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_HUFTAB0E_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_HUFTAB0E_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_HUFTAB0E_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_HUFTAB0E_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_HUFTAB0E_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/

/** Bit definition for JPEGENC_HUFTAB1E register  **/
#define JPEGENC_HUFTAB1E_ADDR                                    ((uint32_t)0x000007FFU)         /* End address of JPEG Huffman table 1 */
#define JPEGENC_HUFTAB1E_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_HUFTAB1E_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_HUFTAB1E_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_HUFTAB1E_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_HUFTAB1E_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_HUFTAB1E_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_HUFTAB1E_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_HUFTAB1E_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_HUFTAB1E_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_HUFTAB1E_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_HUFTAB1E_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/

/** Bit definition for JPEGENC_HUFTAB2E register  **/
#define JPEGENC_HUFTAB2E_ADDR                                    ((uint32_t)0x000007FFU)         /* End address of JPEG Huffman table 2 */
#define JPEGENC_HUFTAB2E_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_HUFTAB2E_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_HUFTAB2E_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_HUFTAB2E_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_HUFTAB2E_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_HUFTAB2E_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_HUFTAB2E_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_HUFTAB2E_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_HUFTAB2E_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_HUFTAB2E_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_HUFTAB2E_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/

/** Bit definition for JPEGENC_HUFTAB3E register  **/
#define JPEGENC_HUFTAB3E_ADDR                                    ((uint32_t)0x000007FFU)         /* End address of JPEG Huffman table 3 */
#define JPEGENC_HUFTAB3E_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_HUFTAB3E_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_HUFTAB3E_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_HUFTAB3E_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_HUFTAB3E_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_HUFTAB3E_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_HUFTAB3E_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_HUFTAB3E_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_HUFTAB3E_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_HUFTAB3E_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_HUFTAB3E_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/

/** Bit definition for JPEGENC_FEADD register  **/
#define JPEGENC_FEADD_ADDR                                    ((uint32_t)0x000007FFU)         /* End address of JPEG footer */
#define JPEGENC_FEADD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_FEADD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_FEADD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_FEADD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_FEADD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_FEADD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_FEADD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_FEADD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_FEADD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_FEADD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_FEADD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/

/** Bit definition for JPEGENC_CTRL register  **/
#define JPEGENC_CTRL_QT3                                     ((uint32_t)0x000C0000U)         /* Quantisation table selector for component 3 */
#define JPEGENC_CTRL_QT3_0                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGENC_CTRL_QT3_1                                   ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGENC_CTRL_QT2                                     ((uint32_t)0x00030000U)         /* Quantisation table selector for component 2 */
#define JPEGENC_CTRL_QT2_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGENC_CTRL_QT2_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGENC_CTRL_QT1                                     ((uint32_t)0x0000C000U)         /* Quantisation table selector for component 1 */
#define JPEGENC_CTRL_QT1_0                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGENC_CTRL_QT1_1                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGENC_CTRL_QT0                                     ((uint32_t)0x00003000U)         /* Quantisation table selector for component 0 */
#define JPEGENC_CTRL_QT0_0                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGENC_CTRL_QT0_1                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGENC_CTRL_HUF3                                    ((uint32_t)0x00000C00U)         /* Huffman table selector for component 3 */
#define JPEGENC_CTRL_HUF3_0                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGENC_CTRL_HUF3_1                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGENC_CTRL_HUF2                                    ((uint32_t)0x00000300U)         /* Huffman table selector for component 2 */
#define JPEGENC_CTRL_HUF2_0                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_CTRL_HUF2_1                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_CTRL_HUF1                                    ((uint32_t)0x000000C0U)         /* Huffman table selector for component 1 */
#define JPEGENC_CTRL_HUF1_0                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_CTRL_HUF1_1                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_CTRL_HUF0                                    ((uint32_t)0x00000030U)         /* Huffman table selector for component 0 */
#define JPEGENC_CTRL_HUF0_0                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_CTRL_HUF0_1                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_CTRL_ERST                                    ((uint32_t)0x00000002U)         /* Core reset */
#define JPEGENC_CTRL_EN                                      ((uint32_t)0x00000001U)         /* Core enable */

/** Bit definition for JPEGENC_DYNRCFG register  **/
#define JPEGENC_DYNRCFG_HSAFE                                ((uint32_t)0x00000004U)         /* change the contents of the Header/Footer buffer */
#define JPEGENC_DYNRCFG_DYNF                                 ((uint32_t)0x00000002U)         /* state of the pipeline */
#define JPEGENC_DYNRCFG_DYNEN                                ((uint32_t)0x00000001U)         /* Dynamic enable */

/** Bit definition for JPEGENC_HSEL register  **/
#define JPEGENC_HSEL_ATF                                     ((uint32_t)0x00000200U)         /* ATF */
#define JPEGENC_HSEL_NFD                                     ((uint32_t)0x00000100U)         /* NFD */
#define JPEGENC_HSEL_HT3                                     ((uint32_t)0x00000080U)         /* Ouptut Huffman table 3 in output stream */
#define JPEGENC_HSEL_HT2                                     ((uint32_t)0x00000040U)         /* Ouptut Huffman table 2 in output stream */
#define JPEGENC_HSEL_HT1                                     ((uint32_t)0x00000020U)         /* Ouptut Huffman table 1 in output stream */
#define JPEGENC_HSEL_HT0                                     ((uint32_t)0x00000010U)         /* Ouptut Huffman table 0 in output stream */
#define JPEGENC_HSEL_QT3                                     ((uint32_t)0x00000008U)         /* Ouptut quantisation table 3 in output stream */
#define JPEGENC_HSEL_QT2                                     ((uint32_t)0x00000004U)         /* Ouptut quantisation table 2 in output stream */
#define JPEGENC_HSEL_QT1                                     ((uint32_t)0x00000002U)         /* Ouptut quantisation table 1 in output stream */
#define JPEGENC_HSEL_QT0                                     ((uint32_t)0x00000001U)         /* Ouptut quantisation table 0 in output stream */

/** Bit definition for JPEGENC_PIPESTS register  **/
#define JPEGENC_PIPESTS_OOVF                                    ((uint32_t)0x00000001U)         /* Assembly buffer overflow */

/** Bit definition for JPEGENC_RICTRL register  **/
#define JPEGENC_RICTRL_RIEN                                    ((uint32_t)0x10000000U)         /* Enable restart marker generation */
#define JPEGENC_RICTRL_BRI                                     ((uint32_t)0x0FFFFFFFU)         /* Number of blocks per restart interval minus one */
#define JPEGENC_RICTRL_BRI_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_RICTRL_BRI_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_RICTRL_BRI_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_RICTRL_BRI_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_RICTRL_BRI_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_RICTRL_BRI_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_RICTRL_BRI_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_RICTRL_BRI_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_RICTRL_BRI_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_RICTRL_BRI_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_RICTRL_BRI_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGENC_RICTRL_BRI_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGENC_RICTRL_BRI_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGENC_RICTRL_BRI_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGENC_RICTRL_BRI_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGENC_RICTRL_BRI_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGENC_RICTRL_BRI_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGENC_RICTRL_BRI_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGENC_RICTRL_BRI_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGENC_RICTRL_BRI_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGENC_RICTRL_BRI_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGENC_RICTRL_BRI_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGENC_RICTRL_BRI_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGENC_RICTRL_BRI_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGENC_RICTRL_BRI_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGENC_RICTRL_BRI_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGENC_RICTRL_BRI_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGENC_RICTRL_BRI_27                                  ((uint32_t)0x08000000U)         /* Bit27*/

/** Bit definition for JPEGENC_HFSIZE register  **/
#define JPEGENC_HFSIZE_SIZE                                    ((uint32_t)0xFFFFFFFFU)         /* Header/footer RAM size in bytes */
#define JPEGENC_HFSIZE_SIZE_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_HFSIZE_SIZE_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_HFSIZE_SIZE_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_HFSIZE_SIZE_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_HFSIZE_SIZE_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_HFSIZE_SIZE_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_HFSIZE_SIZE_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_HFSIZE_SIZE_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_HFSIZE_SIZE_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_HFSIZE_SIZE_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_HFSIZE_SIZE_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGENC_HFSIZE_SIZE_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGENC_HFSIZE_SIZE_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGENC_HFSIZE_SIZE_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGENC_HFSIZE_SIZE_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGENC_HFSIZE_SIZE_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGENC_HFSIZE_SIZE_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGENC_HFSIZE_SIZE_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGENC_HFSIZE_SIZE_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGENC_HFSIZE_SIZE_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGENC_HFSIZE_SIZE_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGENC_HFSIZE_SIZE_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGENC_HFSIZE_SIZE_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGENC_HFSIZE_SIZE_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGENC_HFSIZE_SIZE_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGENC_HFSIZE_SIZE_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGENC_HFSIZE_SIZE_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGENC_HFSIZE_SIZE_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGENC_HFSIZE_SIZE_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGENC_HFSIZE_SIZE_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGENC_HFSIZE_SIZE_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGENC_HFSIZE_SIZE_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGENC_PBSIZE register  **/
#define JPEGENC_PBSIZE_PBSIZE                                  ((uint32_t)0xFFFFFFFFU)         /* Pipe buffer size */
#define JPEGENC_PBSIZE_PBSIZE_0                                ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_PBSIZE_PBSIZE_1                                ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_PBSIZE_PBSIZE_2                                ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_PBSIZE_PBSIZE_3                                ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_PBSIZE_PBSIZE_4                                ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_PBSIZE_PBSIZE_5                                ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_PBSIZE_PBSIZE_6                                ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_PBSIZE_PBSIZE_7                                ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_PBSIZE_PBSIZE_8                                ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_PBSIZE_PBSIZE_9                                ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_PBSIZE_PBSIZE_10                               ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGENC_PBSIZE_PBSIZE_11                               ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGENC_PBSIZE_PBSIZE_12                               ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGENC_PBSIZE_PBSIZE_13                               ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGENC_PBSIZE_PBSIZE_14                               ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGENC_PBSIZE_PBSIZE_15                               ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGENC_PBSIZE_PBSIZE_16                               ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGENC_PBSIZE_PBSIZE_17                               ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGENC_PBSIZE_PBSIZE_18                               ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGENC_PBSIZE_PBSIZE_19                               ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGENC_PBSIZE_PBSIZE_20                               ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGENC_PBSIZE_PBSIZE_21                               ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGENC_PBSIZE_PBSIZE_22                               ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGENC_PBSIZE_PBSIZE_23                               ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGENC_PBSIZE_PBSIZE_24                               ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGENC_PBSIZE_PBSIZE_25                               ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGENC_PBSIZE_PBSIZE_26                               ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGENC_PBSIZE_PBSIZE_27                               ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGENC_PBSIZE_PBSIZE_28                               ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGENC_PBSIZE_PBSIZE_29                               ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGENC_PBSIZE_PBSIZE_30                               ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGENC_PBSIZE_PBSIZE_31                               ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for JPEGENC_OBSIZE register  **/
#define JPEGENC_OBSIZE_SIZE                                  ((uint32_t)0xFFFFFFFFU)         /* Output Buffer size */
#define JPEGENC_OBSIZE_SIZE_0                                ((uint32_t)0x00000001U)         /* Bit0*/
#define JPEGENC_OBSIZE_SIZE_1                                ((uint32_t)0x00000002U)         /* Bit1*/
#define JPEGENC_OBSIZE_SIZE_2                                ((uint32_t)0x00000004U)         /* Bit2*/
#define JPEGENC_OBSIZE_SIZE_3                                ((uint32_t)0x00000008U)         /* Bit3*/
#define JPEGENC_OBSIZE_SIZE_4                                ((uint32_t)0x00000010U)         /* Bit4*/
#define JPEGENC_OBSIZE_SIZE_5                                ((uint32_t)0x00000020U)         /* Bit5*/
#define JPEGENC_OBSIZE_SIZE_6                                ((uint32_t)0x00000040U)         /* Bit6*/
#define JPEGENC_OBSIZE_SIZE_7                                ((uint32_t)0x00000080U)         /* Bit7*/
#define JPEGENC_OBSIZE_SIZE_8                                ((uint32_t)0x00000100U)         /* Bit8*/
#define JPEGENC_OBSIZE_SIZE_9                                ((uint32_t)0x00000200U)         /* Bit9*/
#define JPEGENC_OBSIZE_SIZE_10                               ((uint32_t)0x00000400U)         /* Bit10*/
#define JPEGENC_OBSIZE_SIZE_11                               ((uint32_t)0x00000800U)         /* Bit11*/
#define JPEGENC_OBSIZE_SIZE_12                               ((uint32_t)0x00001000U)         /* Bit12*/
#define JPEGENC_OBSIZE_SIZE_13                               ((uint32_t)0x00002000U)         /* Bit13*/
#define JPEGENC_OBSIZE_SIZE_14                               ((uint32_t)0x00004000U)         /* Bit14*/
#define JPEGENC_OBSIZE_SIZE_15                               ((uint32_t)0x00008000U)         /* Bit15*/
#define JPEGENC_OBSIZE_SIZE_16                               ((uint32_t)0x00010000U)         /* Bit16*/
#define JPEGENC_OBSIZE_SIZE_17                               ((uint32_t)0x00020000U)         /* Bit17*/
#define JPEGENC_OBSIZE_SIZE_18                               ((uint32_t)0x00040000U)         /* Bit18*/
#define JPEGENC_OBSIZE_SIZE_19                               ((uint32_t)0x00080000U)         /* Bit19*/
#define JPEGENC_OBSIZE_SIZE_20                               ((uint32_t)0x00100000U)         /* Bit20*/
#define JPEGENC_OBSIZE_SIZE_21                               ((uint32_t)0x00200000U)         /* Bit21*/
#define JPEGENC_OBSIZE_SIZE_22                               ((uint32_t)0x00400000U)         /* Bit22*/
#define JPEGENC_OBSIZE_SIZE_23                               ((uint32_t)0x00800000U)         /* Bit23*/
#define JPEGENC_OBSIZE_SIZE_24                               ((uint32_t)0x01000000U)         /* Bit24*/
#define JPEGENC_OBSIZE_SIZE_25                               ((uint32_t)0x02000000U)         /* Bit25*/
#define JPEGENC_OBSIZE_SIZE_26                               ((uint32_t)0x04000000U)         /* Bit26*/
#define JPEGENC_OBSIZE_SIZE_27                               ((uint32_t)0x08000000U)         /* Bit27*/
#define JPEGENC_OBSIZE_SIZE_28                               ((uint32_t)0x10000000U)         /* Bit28*/
#define JPEGENC_OBSIZE_SIZE_29                               ((uint32_t)0x20000000U)         /* Bit29*/
#define JPEGENC_OBSIZE_SIZE_30                               ((uint32_t)0x40000000U)         /* Bit30*/
#define JPEGENC_OBSIZE_SIZE_31                               ((uint32_t)0x80000000U)         /* Bit31*/


/*** Digital Video Port controller ***/

/** Bit definition for DVP_CTRL register **/
#define DVP_CTRL_DVPEN        ((uint32_t)0x00000001U) /* DVP port enable bit. */
#define DVP_CTRL_CM           ((uint32_t)0x00000002U) /* Capture Mode Control. */
#define DVP_CTRL_CROPEN       ((uint32_t)0x00000100U) /* Cropping Feature Enable bit */
#define DVP_CTRL_VBFLT        ((uint32_t)0xF0000000U) /* VSYNC blanking glitch filtering control */
#define DVP_CTRL_VBFLT_BIT0   ((uint32_t)0x10000000U) /* BIT0 */
#define DVP_CTRL_VBFLT_BIT1   ((uint32_t)0x20000000U) /* BIT1 */
#define DVP_CTRL_VBFLT_BIT2   ((uint32_t)0x40000000U) /* BIT2 */
#define DVP_CTRL_VBFLT_BIT3   ((uint32_t)0x80000000U) /* BIT3 */

/** Bit definition for DVP_INTEN register **/
#define DVP_INTEN_M1SIE       ((uint32_t)0x00000001U) /* Frame Buffer 1 is started to receive image data interrupt enable bit */
#define DVP_INTEN_M2SIE       ((uint32_t)0x00000002U) /* Frame Buffer 2 is started to receive image data interrupt enable bit. */
#define DVP_INTEN_M1TCIE      ((uint32_t)0x00000004U) /* Image data to Frame Buffer 1 transfer complete interrupt enable bit. */
#define DVP_INTEN_M2TCIE      ((uint32_t)0x00000008U) /* Image data to Frame Buffer 2 transfer complete interrupt enable bit. */
#define DVP_INTEN_FOIE        ((uint32_t)0x00000020U) /* Data FIFO Over Flow interrupt enable bit. */
#define DVP_INTEN_AHBERR      ((uint32_t)0x00000080U) /* AHB bus error response interrupt enable bit. */
#define DVP_INTEN_MOIE        ((uint32_t)0x00000100U) /* Frame Buffer Over Flow interrupt enable bit. */
#define DVP_INTEN_SKIPIE      ((uint32_t)0x00010000U) /* Frame skipping interrupt enable bit. */
#define DVP_INTEN_CERRIE      ((uint32_t)0x00020000U) /* SYNC Code mismatch detected interrupt enable bit. */
#define DVP_INTEN_SERRIE      ((uint32_t)0x00040000U) /* SYNC Code error sequence detected interrupt enable bit. */
#define DVP_INTEN_FMSIE       ((uint32_t)0x00080000U) /* Start of Frame detection interrupt Enable bit. */

/** Bit definition for DVP_INTSTS register **/
#define DVP_INTSTS_M1SF       ((uint32_t)0x00000001U) /* Data to Frame Buffer 1 start flag */
#define DVP_INTSTS_M2SF       ((uint32_t)0x00000002U) /* Data to Frame Buffer 2 start flag. */
#define DVP_INTSTS_M1TCF      ((uint32_t)0x00000004U) /* Data to Frame Buffer 1 completion flag. */
#define DVP_INTSTS_M2TCF      ((uint32_t)0x00000008U) /* Data to Frame Buffer 2 completion flag. */
#define DVP_INTSTS_M1FOF      ((uint32_t)0x00000010U) /* Frame Buffer 1 FIFO over flow flag. */
#define DVP_INTSTS_M2FOF      ((uint32_t)0x00000020U) /* Frame Buffer 2 FIFO over flow flag. */
#define DVP_INTSTS_AHBERR1F   ((uint32_t)0x00000040U) /* Receiving AHB bus error response on accessing to Frame Buffer 1 flag. */
#define DVP_INTSTS_AHBERR2F   ((uint32_t)0x00000080U) /* Receiving AHB bus error response on accessing to Frame Buffer 2 flag. */
#define DVP_INTSTS_M1OF       ((uint32_t)0x00000100U) /* Frame Buffer 1 Over Flow */
#define DVP_INTSTS_M2OF       ((uint32_t)0x00000200U) /* Frame Buffer 2 Over Flow */
#define DVP_INTSTS_SKIPF      ((uint32_t)0x00010000U) /* Frame skipping detected flag. */
#define DVP_INTSTS_CERRF      ((uint32_t)0x00020000U) /* SYNC Code mismatch error detected flag. */
#define DVP_INTSTS_SERRF      ((uint32_t)0x00040000U) /* SYNC Code sequence error detected flag. */
#define DVP_INTSTS_FMSF       ((uint32_t)0x00080000U) /* Start of Frame detected flag. */
#define DVP_INTSTS_DVPDIS     ((uint32_t)0x01000000U) /* SDVP port disable bit. */
 
/** Bit definition for DVP_PORTCFG register **/
#define DVP_PORTCFG_PCLKPOL   ((uint32_t)0x00000001U) /* DVP port pixel clock polarity control. */
#define DVP_PORTCFG_HSPOL     ((uint32_t)0x00000002U) /* HSYNC polarity control. */
#define DVP_PORTCFG_VSPOL     ((uint32_t)0x00000004U) /* VSYNC polarity control. */
#define DVP_PORTCFG_DATINV    ((uint32_t)0x00000008U) /* Data bit inversion. */
#define DVP_PORTCFG_DATRVS    ((uint32_t)0x00000010U) /* To reverse data bit order. */
#define DVP_PORTCFG_SLC       ((uint32_t)0x00000040U) /* Embedded Synchronization Code Position. */
#define DVP_PORTCFG_EMBSEN    ((uint32_t)0x00000080U) /* Embedded Synchronization Mode enable bit. */
#define DVP_PORTCFG_DBIT      ((uint32_t)0x00000700U) /* DVP data port mode. */
#define DVP_PORTCFG_DBIT0     ((uint32_t)0x00000100U) /* BIT0. */
#define DVP_PORTCFG_DBIT1     ((uint32_t)0x00000200U) /* BIT1. */
#define DVP_PORTCFG_DBIT2     ((uint32_t)0x00000400U) /* BIT2. */
#define DVP_PORTCFG_PIXELDB   ((uint32_t)0x00001000U) /* 2 bytes per pixel */
#define DVP_PORTCFG_BMAP      ((uint32_t)0x00FF0000U) /* Received pixel data to Frame Buffer mapping. */
#define DVP_PORTCFG_BMAP0     ((uint32_t)0x00010000U) /* BIT0. */
#define DVP_PORTCFG_BMAP1     ((uint32_t)0x00020000U) /* BIT1. */
#define DVP_PORTCFG_BMAP2     ((uint32_t)0x00040000U) /* BIT2. */
#define DVP_PORTCFG_BMAP3     ((uint32_t)0x00080000U) /* BIT3. */
#define DVP_PORTCFG_BMAP4     ((uint32_t)0x00100000U) /* BIT4. */
#define DVP_PORTCFG_BMAP5     ((uint32_t)0x00200000U) /* BIT5. */
#define DVP_PORTCFG_BMAP6     ((uint32_t)0x00400000U) /* BIT6. */
#define DVP_PORTCFG_BMAP7     ((uint32_t)0x00800000U) /* BIT7. */                        
#define DVP_PORTCFG_HISKIP    ((uint32_t)0x0F000000U) /* Initial Frame Line Skip Control */
#define DVP_PORTCFG_HRSKIP    ((uint32_t)0xF0000000U) /* Repeat Line Skip Pattern Control (include even/odd line capturing) */

/** Bit definition for DVP_FIFOCFG register **/
#define DVP_FIFOCFG_M1ADDREN  ((uint32_t)0x00000001U) /* DVP frame buffer 1 enable control. */
#define DVP_FIFOCFG_M2ADDREN  ((uint32_t)0x00000002U) /* DVP frame buffer 2 enable control. */
#define DVP_FIFOCFG_DISPMODE  ((uint32_t)0x00000010U) /* DVP show current frame buffer status. */
#define DVP_FIFOCFG_EN1KBD    ((uint32_t)0x00000020U) /* DVP bursting across 1K boundary control. */
#define DVP_FIFOCFG_TXFTH     ((uint32_t)0x00000700U) /* DVP FIFO transmit threshold setting. */
#define DVP_FIFOCFG_TXFTH0    ((uint32_t)0x00000100U) /* BIT0. */
#define DVP_FIFOCFG_TXFTH1    ((uint32_t)0x00000200U) /* BIT1. */
#define DVP_FIFOCFG_TXFTH2    ((uint32_t)0x00000400U) /* BIT2. */
#define DVP_FIFOCFG_TXBURSZ   ((uint32_t)0x00070000U) /* DVP AHB master data burst setting. */
#define DVP_FIFOCFG_TXBURSZ0  ((uint32_t)0x00010000U) /* BIT0. */
#define DVP_FIFOCFG_TXBURSZ1  ((uint32_t)0x00020000U) /* BIT1. */
#define DVP_FIFOCFG_TXBURSZ2  ((uint32_t)0x00040000U) /* BIT2. */

/** Bit definition for DVP_SMADDR1 register **/
#define DVP_SMADDR1_MADDR     ((uint32_t)0xFFFFFFFFU) /* Frame Buffer 1 Start Address. */

/** Bit definition for DVP_SMADDR2 register **/
#define DVP_SMADDR2_MADDR     ((uint32_t)0xFFFFFFFFU) /* Frame Buffer 2 Start Address. */

/** Bit definition for DVP_FBS register **/
#define DVP_FBS_FMSIZE        ((uint32_t)0x003FFFFFU) /* Frame Buffer Size. */

/** Bit definition for DVP_CSXY register **/
#define DVP_CSXY_CSTAX        ((uint32_t)0x000007FFU) /* X-coordinate of crop image start point. */
#define DVP_CSXY_CSTAY        ((uint32_t)0x07FF0000U) /* Y-coordinate of crop image start point.*/

/** Bit definition for DVP_CEXY register **/
#define DVP_CEXY_CENDX        ((uint32_t)0x000007FFU) /* X-coordinate of crop image end point. */
#define DVP_CEXY_CENDY        ((uint32_t)0x07FF0000U) /* Y-coordinate of crop image end point.*/

/** Bit definition for DVP_EMSC register **/
#define DVP_EMSC_VS_PTTN      ((uint32_t)0x000000FFU) /* Frame start synchronization code. */
#define DVP_EMSC_VE_PTTN      ((uint32_t)0x0000FF00U) /* Frame end synchronization code. */
#define DVP_EMSC_HS_PTTN      ((uint32_t)0x00FF0000U) /* Active line start synchronization code. */
#define DVP_EMSC_HE_PTTN      ((uint32_t)0xFF000000U) /* Active line end synchronization code. */

/** Bit definition for DVP_EMSCM register **/
#define DVP_EMSCM_VS_MASK     ((uint32_t)0x000000FFU) /* Frame start synchronization code Mask. */
#define DVP_EMSCM_VE_MASK     ((uint32_t)0x0000FF00U) /* Frame end synchronization code Mask. */
#define DVP_EMSCM_HS_MASK     ((uint32_t)0x00FF0000U) /* Active line start synchronization code Mask. */
#define DVP_EMSCM_HE_MASK     ((uint32_t)0xFF000000U) /* Active line end synchronization code Mask. */


/*** Ethernet MAC ***/

/** Bit definition for ETH_MACCFG register **/
#define ETH_MACCFG_RE       ((uint32_t)0x00000001U) /* Receiver Enable */
#define ETH_MACCFG_TE       ((uint32_t)0x00000002U) /* Transmitter Enable */
#define ETH_MACCFG_PRELEN   ((uint32_t)0x0000000CU) /* PRELEN[1:0]: Preamble Length for Transmit packets */
#define ETH_MACCFG_PRELEN_0 ((uint32_t)0x00000004U) /* PRELEN bit 0 */
#define ETH_MACCFG_PRELEN_1 ((uint32_t)0x00000008U) /* PRELEN bit 1 */
#define ETH_MACCFG_DC       ((uint32_t)0x00000010U) /* Deferral Check */
#define ETH_MACCFG_BL       ((uint32_t)0x00000060U) /* BL[1:0]: Back-Off Limit */
#define ETH_MACCFG_BL_0     ((uint32_t)0x00000020U) /* BL bit 0 */
#define ETH_MACCFG_BL_1     ((uint32_t)0x00000040U) /* BL bit 1 */
#define ETH_MACCFG_DR       ((uint32_t)0x00000100U) /* Disable Retry */
#define ETH_MACCFG_DCRS     ((uint32_t)0x00000200U) /* Disable Carrier Sense During Transmission */
#define ETH_MACCFG_DO       ((uint32_t)0x00000400U) /* Disable Receive Own */
#define ETH_MACCFG_ECRSFD   ((uint32_t)0x00000800U) /* Enable Carrier Sense Before Transmission in Full-Duplex Mode */
#define ETH_MACCFG_LM       ((uint32_t)0x00001000U) /* Loopback Mode */
#define ETH_MACCFG_DM       ((uint32_t)0x00002000U) /* Duplex Mode (0: Half-duplex, 1: Full-duplex) */
#define ETH_MACCFG_FES      ((uint32_t)0x00004000U) /* Speed (0: 10Mbps, 1: 100Mbps) */
#define ETH_MACCFG_PS       ((uint32_t)0x00008000U) /* Port Select (0: 1000Mbps, 1: 10 or 100Mbps) */
#define ETH_MACCFG_JE       ((uint32_t)0x00010000U) /* Jumbo Packet Enable */
#define ETH_MACCFG_JD       ((uint32_t)0x00020000U) /* Jabber Disable */
#define ETH_MACCFG_BE       ((uint32_t)0x00040000U) /* Packet Burst Enable (Note: ETH2 does not support this bit) */
#define ETH_MACCFG_WD       ((uint32_t)0x00080000U) /* Watchdog Disable */
#define ETH_MACCFG_ACS      ((uint32_t)0x00100000U) /* Automatic Pad or CRC Stripping */
#define ETH_MACCFG_CST      ((uint32_t)0x00200000U) /* CRC stripping for Type packets */
#define ETH_MACCFG_S2KP     ((uint32_t)0x00400000U) /* IEEE 802.3as Support for 2K Packets */
#define ETH_MACCFG_GPSLCE   ((uint32_t)0x00800000U) /* Giant Packet Size Limit Control Enable */
#define ETH_MACCFG_IPG      ((uint32_t)0x07000000U) /* IPG[2:0]: Inter-Packet Gap */
#define ETH_MACCFG_IPG_0    ((uint32_t)0x01000000U) /* IPG bit 0 */
#define ETH_MACCFG_IPG_1    ((uint32_t)0x02000000U) /* IPG bit 1 */
#define ETH_MACCFG_IPG_2    ((uint32_t)0x04000000U) /* IPG bit 2 */
#define ETH_MACCFG_CSO      ((uint32_t)0x08000000U) /* Checksum Offload */
#define ETH_MACCFG_SARC     ((uint32_t)0x70000000U) /* SARC[2:0]: Source Address Insertion or Replacement Control */
#define ETH_MACCFG_SARC_0   ((uint32_t)0x10000000U) /* SARC bit 0 */
#define ETH_MACCFG_SARC_1   ((uint32_t)0x20000000U) /* SARC bit 1 */
#define ETH_MACCFG_SARC_2   ((uint32_t)0x40000000U) /* SARC bit 2 */
#define ETH_MACCFG_ARPEN    ((uint32_t)0x80000000U) /* ARP Offload Enable */

/** Bit definition for ETH_MACEXTCFG register **/
#define ETH_MACEXTCFG_GPSL   ((uint32_t)0x00003FFFU) /* Giant Packet Size Limit */
#define ETH_MACEXTCFG_DCRCC  ((uint32_t)0x00010000U) /* Disable CRC Checking for Received Packets */
#define ETH_MACEXTCFG_SPEN   ((uint32_t)0x00020000U) /* Slow Protocol Detection Enable */
#define ETH_MACEXTCFG_USP    ((uint32_t)0x00040000U) /* Unicast Slow Protocol Packet Detect */
#define ETH_MACEXTCFG_EIPGEN ((uint32_t)0x01000000U) /* Extended Inter-Packet Gap Enable */
#define ETH_MACEXTCFG_EIPG   ((uint32_t)0x3E000000U) /* EIPG[4:0]: Extended Inter-Packet Gap */
#define ETH_MACEXTCFG_EIPG_0 ((uint32_t)0x02000000U) /* EIPG bit 0 */
#define ETH_MACEXTCFG_EIPG_1 ((uint32_t)0x04000000U) /* EIPG bit 1 */
#define ETH_MACEXTCFG_EIPG_2 ((uint32_t)0x08000000U) /* EIPG bit 2 */
#define ETH_MACEXTCFG_EIPG_3 ((uint32_t)0x10000000U) /* EIPG bit 3 */
#define ETH_MACEXTCFG_EIPG_4 ((uint32_t)0x20000000U) /* EIPG bit 4 */
#define ETH_MACEXTCFG_APDIM  ((uint32_t)0x40000000U) /* ARP Packet Drop if IP Address Mismatch */

/** Bit definition for ETH_MACPFLT register **/
#define ETH_MACPFLT_PM    ((uint32_t)0x00000001U) /* Promiscuous Mode */
#define ETH_MACPFLT_HUC   ((uint32_t)0x00000002U) /* Hash Unicast */
#define ETH_MACPFLT_HMC   ((uint32_t)0x00000004U) /* Hash Multicast */
#define ETH_MACPFLT_DAIF  ((uint32_t)0x00000008U) /* DA Inverse Filtering */
#define ETH_MACPFLT_PAM   ((uint32_t)0x00000010U) /* Pass All Multicast */
#define ETH_MACPFLT_DBP   ((uint32_t)0x00000020U) /* Disable Broadcast Packets */
#define ETH_MACPFLT_PCP   ((uint32_t)0x000000C0U) /* PCF[1:0]: Pass Control Packets */
#define ETH_MACPFLT_PCP_0 ((uint32_t)0x00000040U) /* PCF bit 0 */
#define ETH_MACPFLT_PCP_1 ((uint32_t)0x00000080U) /* PCF bit 1 */
#define ETH_MACPFLT_SAIF  ((uint32_t)0x00000100U) /* SA Inverse Filtering */
#define ETH_MACPFLT_SAF   ((uint32_t)0x00000200U) /* SA Filter Enable */
#define ETH_MACPFLT_HPF   ((uint32_t)0x00000400U) /* Hash or Perfect Filter */
#define ETH_MACPFLT_VTFE  ((uint32_t)0x00010000U) /* VLAN Tag Filter Enable */
#define ETH_MACPFLT_IPFE  ((uint32_t)0x00100000U) /* Layer 3 and Layer 4 Filter Enable */
#define ETH_MACPFLT_DNTU  ((uint32_t)0x00200000U) /* Drop Non-TCP/UDP over IP Packets */
#define ETH_MACPFLT_RA    ((uint32_t)0x80000000U) /* Receive All */

/** Bit definition for ETH_MACWDGTO register **/
#define ETH_MACWDGTO_WTO   ((uint32_t)0x0000000FU) /* WTO[3:0]: Watchdog Timeout */
#define ETH_MACWDGTO_WTO_0 ((uint32_t)0x00000001U) /* WTO bit 0 */
#define ETH_MACWDGTO_WTO_1 ((uint32_t)0x00000002U) /* WTO bit 1 */
#define ETH_MACWDGTO_WTO_2 ((uint32_t)0x00000004U) /* WTO bit 2 */
#define ETH_MACWDGTO_WTO_3 ((uint32_t)0x00000008U) /* WTO bit 3 */
#define ETH_MACWDGTO_PWE   ((uint32_t)0x00000100U) /* Programmable Watchdog Enable */

/** Bit definition for ETH_MACHASHTR0 register **/
#define ETH_MACHASHTR0_HT31T0 ((uint32_t)0xFFFFFFFFU) /* MAC Hash Table First 32 Bits */

/** Bit definition for ETH_MACHASHTR1 register **/
#define ETH_MACHASHTR1_HT63T32 ((uint32_t)0xFFFFFFFFU) /* MAC Hash Table Second 32 Bits */

/** Bit definition for ETH_MACVLANTAG register **/
#define ETH_MACVLANTAG_VL        ((uint32_t)0x0000FFFFU) /* VLAN Tag Identifier for Receive Packets */
#define ETH_MACVLANTAG_VL_UP     ((uint32_t)0x0000E000U) /* VL[15:13]: User Priority */
#define ETH_MACVLANTAG_VL_UP_0   ((uint32_t)0x00002000U) /* VL_UP bit 0 */
#define ETH_MACVLANTAG_VL_UP_1   ((uint32_t)0x00004000U) /* VL_UP bit 1 */
#define ETH_MACVLANTAG_VL_UP_2   ((uint32_t)0x00008000U) /* VL_UP bit 2 */
#define ETH_MACVLANTAG_VL_CFIDEI ((uint32_t)0x00001000U) /* VL[12]: Canonical Format Indicator (CFI) or \
                                                           Drop Eligible Indicator (DEI) */
#define ETH_MACVLANTAG_VL_VID    ((uint32_t)0x00000FFFU) /* VL[11:0]: VLAN Identifier field of VLAN tag */
#define ETH_MACVLANTAG_ETV       ((uint32_t)0x00010000U) /* Enable 12-Bit VLAN Tag Comparison */
#define ETH_MACVLANTAG_VTIM      ((uint32_t)0x00020000U) /* VLAN Tag Inverse Match Enable */
#define ETH_MACVLANTAG_ESVL      ((uint32_t)0x00040000U) /* Enable S-VLAN */
#define ETH_MACVLANTAG_ERSVLM    ((uint32_t)0x00080000U) /* Enable Receive S-VLAN Match */
#define ETH_MACVLANTAG_DOVLTC    ((uint32_t)0x00100000U) /* Disable VLAN Type Check */
#define ETH_MACVLANTAG_EVLS      ((uint32_t)0x00600000U) /* EVLS[1:0]: Enable VLAN Tag Stripping on Receive */
#define ETH_MACVLANTAG_EVLS_0    ((uint32_t)0x00200000U) /* EVLS bit 0 */
#define ETH_MACVLANTAG_EVLS_1    ((uint32_t)0x00400000U) /* EVLS bit 1 */
#define ETH_MACVLANTAG_EVLRXS    ((uint32_t)0x01000000U) /* Enable VLAN Tag in Rx status */
#define ETH_MACVLANTAG_VTHM      ((uint32_t)0x02000000U) /* VLAN Tag Hash Table Match Enable */
#define ETH_MACVLANTAG_EDVLP     ((uint32_t)0x04000000U) /* Enable Double VLAN Processing */
#define ETH_MACVLANTAG_ERIVLT    ((uint32_t)0x08000000U) /* Enable Inner VLAN Tag */
#define ETH_MACVLANTAG_EIVLS     ((uint32_t)0x30000000U) /* EIVLS[1:0]: Enable Inner VLAN Tag Stripping on Receive */
#define ETH_MACVLANTAG_EIVLS_0   ((uint32_t)0x10000000U) /* EIVLS bit 0 */
#define ETH_MACVLANTAG_EIVLS_1   ((uint32_t)0x20000000U) /* EIVLS bit 1 */
#define ETH_MACVLANTAG_EIVLRXS   ((uint32_t)0x80000000U) /* Enable Inner VLAN Tag in Rx Status */

/** Bit definition for ETH_MACVHASHT register **/
#define ETH_MACVHASHT_VLHT ((uint32_t)0x0000FFFFU) /* VLAN Hash Table */

/** Bit definition for ETH_MACVLANINC register **/
#define ETH_MACVLANINC_VLT   ((uint32_t)0x0000FFFFU) /* VLAN Tag for Transmit Packets */
#define ETH_MACVLANINC_VLC   ((uint32_t)0x00030000U) /* VLC[1:0]: VLAN Tag Control in Transmit Packets */
#define ETH_MACVLANINC_VLC_0 ((uint32_t)0x00010000U) /* VLC bit 0 */
#define ETH_MACVLANINC_VLC_1 ((uint32_t)0x00020000U) /* VLC bit 1 */
#define ETH_MACVLANINC_VLP   ((uint32_t)0x00040000U) /* VLAN Priority Control */
#define ETH_MACVLANINC_CSVL  ((uint32_t)0x00080000U) /* C-VLAN or S-VLAN */
#define ETH_MACVLANINC_VLTI  ((uint32_t)0x00100000U) /* VLAN Tag Input */

/** Bit definition for ETH_MACIVLANINC register **/
#define ETH_MACIVLANINC_VLT   ((uint32_t)0x0000FFFFU) /* VLAN Tag for Transmit Packets */
#define ETH_MACIVLANINC_VLC   ((uint32_t)0x00030000U) /* VLC[1:0]: VLAN Tag Control in Transmit Packets */
#define ETH_MACIVLANINC_VLC_0 ((uint32_t)0x00010000U) /* VLC bit 0 */
#define ETH_MACIVLANINC_VLC_1 ((uint32_t)0x00020000U) /* VLC bit 1 */
#define ETH_MACIVLANINC_VLP   ((uint32_t)0x00040000U) /* VLAN Priority Control */
#define ETH_MACIVLANINC_CSVL  ((uint32_t)0x00080000U) /* C-VLAN or S-VLAN */
#define ETH_MACIVLANINC_VLTI  ((uint32_t)0x00100000U) /* VLAN Tag Input */

/** Bit definition for ETH_MACTXFLWCTRL register **/
#define ETH_MACTXFLWCTRL_FCB   ((uint32_t)0x00000001U) /* Flow Control Busy */
#define ETH_MACTXFLWCTRL_BPA   ((uint32_t)0x00000001U) /* Backpressure Activate */
#define ETH_MACTXFLWCTRL_TFE   ((uint32_t)0x00000002U) /* Transmit Flow Control Enable */
#define ETH_MACTXFLWCTRL_PLT   ((uint32_t)0x00000070U) /* PLT[2:0]: Pause Low Threshold */
#define ETH_MACTXFLWCTRL_PLT_0 ((uint32_t)0x00000010U) /* PLT bit 0 */
#define ETH_MACTXFLWCTRL_PLT_1 ((uint32_t)0x00000020U) /* PLT bit 1 */
#define ETH_MACTXFLWCTRL_PLT_2 ((uint32_t)0x00000040U) /* PLT bit 2 */
#define ETH_MACTXFLWCTRL_DZPQ  ((uint32_t)0x00000080U) /* Disable Zero-Quanta Pause */
#define ETH_MACTXFLWCTRL_PT    ((uint32_t)0xFFFF0000U) /* Pause Time */

/** Bit definition for ETH_MACRXFLWCTRL register **/
#define ETH_MACRXFLWCTRL_RFE ((uint32_t)0x00000001U) /* Receive Flow Control Enable */
#define ETH_MACRXFLWCTRL_UP  ((uint32_t)0x00000002U) /* Unicast Pause Packet Detect */

/** Bit definition for ETH_MACINTSTS register **/
#define ETH_MACINTSTS_PHYIS     ((uint32_t)0x00000008U) /* PHY Interrupt */
#define ETH_MACINTSTS_PMTIS     ((uint32_t)0x00000010U) /* PMT Interrupt Status */
#define ETH_MACINTSTS_LPIIS     ((uint32_t)0x00000020U) /* LPI Interrupt Status */
#define ETH_MACINTSTS_MMCIS     ((uint32_t)0x00000100U) /* MMC Interrupt Status */
#define ETH_MACINTSTS_MMCRXIS   ((uint32_t)0x00000200U) /* MMC Receive Interrupt Status */
#define ETH_MACINTSTS_MMCTXIS   ((uint32_t)0x00000400U) /* MMC Transmit Interrupt Status */
#define ETH_MACINTSTS_MMCRXIPIS ((uint32_t)0x00000800U) /* MMC Receive Checksum Offload Interrupt Status */
#define ETH_MACINTSTS_TSIS      ((uint32_t)0x00001000U) /* Timestamp Interrupt Status */
#define ETH_MACINTSTS_TXSTSIS   ((uint32_t)0x00002000U) /* Transmit Status Interrupt */
#define ETH_MACINTSTS_RXSTSIS   ((uint32_t)0x00004000U) /* Receive Status Interrupt */
#define ETH_MACINTSTS_MDIOIS    ((uint32_t)0x00040000U) /* MDIO Interrupt Status */

/** Bit definition for ETH_MACINTEN register **/
#define ETH_MACINTEN_PHYIE   ((uint32_t)0x00000008U) /* PHY Interrupt Enable */
#define ETH_MACINTEN_PMTIE   ((uint32_t)0x00000010U) /* PMT Interrupt Enable */
#define ETH_MACINTEN_LPIIE   ((uint32_t)0x00000020U) /* LPI Interrupt Enable */
#define ETH_MACINTEN_TSIE    ((uint32_t)0x00001000U) /* Timestamp Interrupt Enable */
#define ETH_MACINTEN_TXSTSIE ((uint32_t)0x00002000U) /* Transmit Status Interrupt Enable */
#define ETH_MACINTEN_RXSTSIE ((uint32_t)0x00004000U) /* Receive Status Interrupt Enable */
#define ETH_MACINTEN_MDIOIE  ((uint32_t)0x00040000U) /* MDIO Interrupt Enable */

/** Bit definition for ETH_MACRXTXSTS register **/
#define ETH_MACRXTXSTS_TJT   ((uint32_t)0x00000001U) /* Transmit Jabber Timeout */
#define ETH_MACRXTXSTS_NCARR ((uint32_t)0x00000002U) /* No Carrier */
#define ETH_MACRXTXSTS_LCARR ((uint32_t)0x00000004U) /* Loss of Carrier */
#define ETH_MACRXTXSTS_EXDEF ((uint32_t)0x00000008U) /* Excessive Deferral */
#define ETH_MACRXTXSTS_LCOL  ((uint32_t)0x00000010U) /* Late Collision */
#define ETH_MACRXTXSTS_EXCOL ((uint32_t)0x00000020U) /* Excessive Collisions */
#define ETH_MACRXTXSTS_RWT   ((uint32_t)0x00000100U) /* Receive Watchdog Timeout */

/** Bit definition for ETH_MACPMTCTRLSTS register **/
#define ETH_MACPMTCTRLSTS_PWRDWN     ((uint32_t)0x00000001U) /* Power Down */
#define ETH_MACPMTCTRLSTS_MGKPKTEN   ((uint32_t)0x00000002U) /* Magic Packet Enable */
#define ETH_MACPMTCTRLSTS_RWKPKTEN   ((uint32_t)0x00000004U) /* Remote Wake-Up Packet Enable */
#define ETH_MACPMTCTRLSTS_MGKPRCVD   ((uint32_t)0x00000020U) /* Magic Packet Received */
#define ETH_MACPMTCTRLSTS_RWKPRCVD   ((uint32_t)0x00000040U) /* Remote Wake-Up Packet Received */
#define ETH_MACPMTCTRLSTS_GLBLUCAST  ((uint32_t)0x00000200U) /* Global Unicast */
#define ETH_MACPMTCTRLSTS_RWKPFE     ((uint32_t)0x00000400U) /* Remote Wake-up Packet Forwarding Enable */
#define ETH_MACPMTCTRLSTS_RWKPTR     ((uint32_t)0x1F000000U) /* Remote Wake-up FIFO Pointer */
#define ETH_MACPMTCTRLSTS_RWKFILTRST ((uint32_t)0x80000000U) /* Remote Wake-Up Packet Filter Register Pointer Reset */

/** Bit definition for ETH_MACRWUPFLT register **/
#define ETH_MACRWUPFLT_WKUPFRMFTR ((uint32_t)0xFFFFFFFFU) /* RWK Packet Filter */

/** Bit definition for ETH_MACLPICTRLSTS register **/
#define ETH_MACLPICTRLSTS_TLPIEN  ((uint32_t)0x00000001U) /* Transmit LPI Entry */
#define ETH_MACLPICTRLSTS_TLPIEX  ((uint32_t)0x00000002U) /* Transmit LPI Exit */
#define ETH_MACLPICTRLSTS_RLPIEN  ((uint32_t)0x00000004U) /* Receive LPI Entry */
#define ETH_MACLPICTRLSTS_RLPIEX  ((uint32_t)0x00000008U) /* Receive LPI Exit */
#define ETH_MACLPICTRLSTS_TLPIST  ((uint32_t)0x00000100U) /* Transmit LPI State */
#define ETH_MACLPICTRLSTS_RLPIST  ((uint32_t)0x00000200U) /* Receive LPI State */
#define ETH_MACLPICTRLSTS_LPIEN   ((uint32_t)0x00010000U) /* LPI Enable */
#define ETH_MACLPICTRLSTS_PLS     ((uint32_t)0x00020000U) /* PHY Link Status */
#define ETH_MACLPICTRLSTS_LPITXA  ((uint32_t)0x00080000U) /* LPI Tx Automate */
#define ETH_MACLPICTRLSTS_LPIATE  ((uint32_t)0x00100000U) /* LPI Timer Enable */
#define ETH_MACLPICTRLSTS_LPITCSE ((uint32_t)0x00200000U) /* LPI Tx Clock Stop Enable */

/** Bit definition for ETH_MACLPITIMCTRL register **/
#define ETH_MACLPITIMCTRL_TWT ((uint32_t)0x0000FFFFU) /* LPI TW Timer */
#define ETH_MACLPITIMCTRL_LST ((uint32_t)0x03FF0000U) /* LPI LS Timer */

/** Bit definition for ETH_MACLPIETYTIM register **/
#define ETH_MACLPIETYTIM_LPIET ((uint32_t)0x000FFFF8U) /* LPI Entry Timer */

/** Bit definition for ETH_MAC1USTICCNT register **/
#define ETH_MAC1USTICCNT_TIC1USCNTR ((uint32_t)0x00000FFFU) /* 1US Tick Counter */

/** Bit definition for ETH_MACVER register **/
#define ETH_MACVER_SNPSVER ((uint32_t)0x000000FFU) /* Synopsys-defined Version */
#define ETH_MACVER_USERVER ((uint32_t)0x0000FF00U) /* User-defined Version */

/** Bit definition for ETH_MACDBG register **/
#define ETH_MACDBG_RPESTS     ((uint32_t)0x00000001U) /* MAC GMII or MII Receive Protocol Engine Status */
#define ETH_MACDBG_RFCFCSTS   ((uint32_t)0x00000006U) /* RFCFCSTS[1:0]: MAC Receive Packet Controller FIFO Status */
#define ETH_MACDBG_RFCFCSTS_0 ((uint32_t)0x00000002U) /* RFCFCSTS bit 0 */
#define ETH_MACDBG_RFCFCSTS_1 ((uint32_t)0x00000004U) /* RFCFCSTS bit 1 */
#define ETH_MACDBG_TPESTS     ((uint32_t)0x00010000U) /* MAC GMII or MII Transmit Protocol Engine Status */
#define ETH_MACDBG_TFCSTS     ((uint32_t)0x00060000U) /* TFCSTS[1:0]: MAC Transmit Packet Controller Status */
#define ETH_MACDBG_TFCSTS_0   ((uint32_t)0x00020000U) /* TFCSTS bit 0 */
#define ETH_MACDBG_TFCSTS_1   ((uint32_t)0x00040000U) /* TFCSTS bit 1 */

/** Bit definition for ETH_MACHWF0 register **/
#define ETH_MACHWF0_MIISEL       ((uint32_t)0x00000001U) /* 10 or 100 Mbps Support */
#define ETH_MACHWF0_GMIISEL      ((uint32_t)0x00000002U) /* 1000 Mbps Support */
#define ETH_MACHWF0_HDSEL        ((uint32_t)0x00000004U) /* Half-duplex Support */
#define ETH_MACHWF0_VLHASH       ((uint32_t)0x00000010U) /* VLAN Hash Filter Selected */
#define ETH_MACHWF0_SMASEL       ((uint32_t)0x00000020U) /* SMA (MDIO) Interface */
#define ETH_MACHWF0_RWKSEL       ((uint32_t)0x00000040U) /* PMT Remote Wake-up Packet Enable */
#define ETH_MACHWF0_MGKSEL       ((uint32_t)0x00000080U) /* PMT Magic Packet Enable */
#define ETH_MACHWF0_MMCSEL       ((uint32_t)0x00000100U) /* RMON Module Enable */
#define ETH_MACHWF0_ARPOFFSEL    ((uint32_t)0x00000200U) /* ARP Offload Enabled */
#define ETH_MACHWF0_TSSEL        ((uint32_t)0x00001000U) /* IEEE 1588-2008 Timestamp Enabled */
#define ETH_MACHWF0_EEESEL       ((uint32_t)0x00002000U) /* Energy Efficient Ethernet Enabled */
#define ETH_MACHWF0_TXCOESEL     ((uint32_t)0x00004000U) /* Transmit Checksum Offload Enabled */
#define ETH_MACHWF0_RXCOESEL     ((uint32_t)0x00010000U) /* Receive Checksum Offload Enabled */
#define ETH_MACHWF0_ADDMACADRSEL ((uint32_t)0x007C0000U) /* MAC Addresses 1-31 Selected */
#define ETH_MACHWF0_MACADR32SEL  ((uint32_t)0x00800000U) /* MAC Addresses 32-63 Selected */
#define ETH_MACHWF0_MACADR64SEL  ((uint32_t)0x01000000U) /* MAC Addresses 64-127 Selected */
#define ETH_MACHWF0_TSSTSSEL     ((uint32_t)0x06000000U) /* Timestamp System Time Source */
#define ETH_MACHWF0_SAVLANINS    ((uint32_t)0x08000000U) /* Source Address or VLAN Insertion Enable */
#define ETH_MACHWF0_ACTPHYSEL    ((uint32_t)0x70000000U) /* Active PHY Selected */

/** Bit definition for ETH_MACHWF1 register **/
#define ETH_MACHWF1_RXFIFOSIZE ((uint32_t)0x0000001FU) /* MTL Receive FIFO Size */
#define ETH_MACHWF1_SPRAM      ((uint32_t)0x00000020U) /* Single Port RAM Enable */
#define ETH_MACHWF1_TXFIFOSIZE ((uint32_t)0x000007C0U) /* MTL Transmit FIFO Size */
#define ETH_MACHWF1_OSTEN      ((uint32_t)0x00000800U) /* One-Step Timestamping Enable */
#define ETH_MACHWF1_PTOEN      ((uint32_t)0x00001000U) /* PTP Offload Enable */
#define ETH_MACHWF1_ADVTHWORD  ((uint32_t)0x00002000U) /* IEEE 1588 High Word Register Enable */
#define ETH_MACHWF1_ADDR64     ((uint32_t)0x0000C000U) /* Address Width */
#define ETH_MACHWF1_DCBEN      ((uint32_t)0x00010000U) /* DCB Feature Enable */
#define ETH_MACHWF1_SPHEN      ((uint32_t)0x00020000U) /* Split Header Feature Enable */
#define ETH_MACHWF1_TSOEN      ((uint32_t)0x00040000U) /* TCP Segmentation Offload Enable */
#define ETH_MACHWF1_DBGMEMA    ((uint32_t)0x00080000U) /* DMA Debug Registers Enable */
#define ETH_MACHWF1_AVSEL      ((uint32_t)0x00100000U) /* AV Feature Enable */
#define ETH_MACHWF1_RAVSEL     ((uint32_t)0x00200000U) /* Rx Side Only AV Feature Enable */
#define ETH_MACHWF1_POUOST     ((uint32_t)0x00800000U) /* One Step for PTP over UDP/IP Feature Enable */
#define ETH_MACHWF1_HASHTBLSZ  ((uint32_t)0x03000000U) /* Hash Table Size */
#define ETH_MACHWF1_L3L4FNUM   ((uint32_t)0x78000000U) /* Total number of L3 or L4 Filters */

/** Bit definition for ETH_MACHWF2 register **/
#define ETH_MACHWF2_RXQCNT     ((uint32_t)0x0000000FU) /* Number of MTL Receive Queues */
#define ETH_MACHWF2_TXQCNT     ((uint32_t)0x000003C0U) /* Number of MTL Transmit Queues */
#define ETH_MACHWF2_RXCHCNT    ((uint32_t)0x0000F000U) /* Number of DMA Receive Channels */
#define ETH_MACHWF2_RDCSZ      ((uint32_t)0x00030000U) /* Rx DMA Descriptor Cache Size in terms of \
                                                         16 bytes descriptors */
#define ETH_MACHWF2_TXCHCNT    ((uint32_t)0x003C0000U) /* Number of DMA Transmit Channels */
#define ETH_MACHWF2_TDCSZ      ((uint32_t)0x00C00000U) /* Tx DMA Descriptor Cache Size in terms of \
                                                         16 bytes descriptors */
#define ETH_MACHWF2_PPSOUTNUM  ((uint32_t)0x03000000U) /* Number of PPS Outputs */
#define ETH_MACHWF2_AUXSNAPNUM ((uint32_t)0x70000000U) /* Number of Auxiliary Snapshot Inputs */

/** Bit definition for ETH_MACHWF3 register **/
#define ETH_MACHWF3_NRVF    ((uint32_t)0x00000007U) /* Number of Extended VLAN Tag Filters Enabled */
#define ETH_MACHWF3_CBTISEL ((uint32_t)0x00000010U) /* Queue/Channel based VLAN tag insertion on Tx Enable */
#define ETH_MACHWF3_DVLAN   ((uint32_t)0x00000020U) /* Double VLAN Tag Processing Selected */
#define ETH_MACHWF3_PDUPSEL ((uint32_t)0x00000200U) /* Broadcast/Multicast Packet Duplication */
#define ETH_MACHWF3_FRPSEL  ((uint32_t)0x00000200U) /* Flexible Receive Parser Selected */
#define ETH_MACHWF3_FRPBS   ((uint32_t)0x00001800U) /* Flexible Receive Parser Buffer size */
#define ETH_MACHWF3_FRPES   ((uint32_t)0x00006000U) /* Flexible Receive Parser Table Entries size */
#define ETH_MACHWF3_ESTSEL  ((uint32_t)0x00010000U) /* Enhancements to Scheduled Traffic Enable */
#define ETH_MACHWF3_ESTDEP  ((uint32_t)0x000E0000U) /* Depth of the Gate Control List */
#define ETH_MACHWF3_ESTWID  ((uint32_t)0x00300000U) /* Width of the Time Interval field in the Gate Control List */
#define ETH_MACHWF3_FPESEL  ((uint32_t)0x04000000U) /* Frame Preemption Enable */
#define ETH_MACHWF3_TBSSEL  ((uint32_t)0x08000000U) /* Time Based Scheduling Enable */
#define ETH_MACHWF3_ASP     ((uint32_t)0x30000000U) /* Automotive Safety Package */

/** Bit definition for ETH_MACMDIOADDR register **/
#define ETH_MACMDIOADDR_GB    ((uint32_t)0x00000001U) /* GMII/MII Busy */
#define ETH_MACMDIOADDR_C45E  ((uint32_t)0x00000002U) /* Clause 45 PHY Enable */
#define ETH_MACMDIOADDR_GOC   ((uint32_t)0x0000000CU) /* GMII/MII Operation Command */
#define ETH_MACMDIOADDR_GOC0  ((uint32_t)0x00000004U) /* GMII/MII Operation Command 0 */
#define ETH_MACMDIOADDR_GOC1  ((uint32_t)0x00000008U) /* GMII/MII Operation Command 1 */
#define ETH_MACMDIOADDR_SKAP  ((uint32_t)0x00000010U) /* Skip Address Packet */
#define ETH_MACMDIOADDR_CR    ((uint32_t)0x00000F00U) /* CR[3:0]: CSR Clock Range */
#define ETH_MACMDIOADDR_CR_0  ((uint32_t)0x00000100U) /* CR bit 0 */
#define ETH_MACMDIOADDR_CR_1  ((uint32_t)0x00000200U) /* CR bit 1 */
#define ETH_MACMDIOADDR_CR_2  ((uint32_t)0x00000400U) /* CR bit 2 */
#define ETH_MACMDIOADDR_CR_3  ((uint32_t)0x00000800U) /* CR bit 3 */
#define ETH_MACMDIOADDR_NTC   ((uint32_t)0x00007000U) /* Number of Trailing Clocks */
#define ETH_MACMDIOADDR_RDA   ((uint32_t)0x001F0000U) /* Register/Device Address */
#define ETH_MACMDIOADDR_PA    ((uint32_t)0x003E0000U) /* Physical Layer Address */
#define ETH_MACMDIOADDR_BTB   ((uint32_t)0x04000000U) /* Back to Back transactions */
#define ETH_MACMDIOADDR_PSE   ((uint32_t)0x08000000U) /* Preamble Suppression Enable */

/** Bit definition for ETH_MACMDIODATA register **/
#define ETH_MACMDIODATA_GD ((uint32_t)0x0000FFFFU) /* GMII/MII Data */
#define ETH_MACMDIODATA_RA ((uint32_t)0xFFFF0000U) /* Register Address */

/** Bit definition for ETH_MACARPADDR register **/
#define ETH_MACARPADDR_ARPPA ((uint32_t)0xFFFFFFFFU) /* ARP Protocol Address */

/** Bit definition for ETH_MACCSRSWCTRL register **/
#define ETH_MACCSRSWCTRL_RCWE ((uint32_t)0x00000001U) /* Register Clear on Write 1 Enable */
#define ETH_MACCSRSWCTRL_SEEN ((uint32_t)0x00000100U) /* Slave Error Response Enable */

/** Bit definition for ETH_MACPTNS register **/
#define ETH_MACPTNS_MPTN ((uint32_t)0xFFFFFFFFU) /* MAC 1722 Presentation Time in ns */

/** Bit definition for ETH_MACPTUPDT register **/
#define ETH_MACPTUPDT_MPTN ((uint32_t)0xFFFFFFFFU) /* MAC 1722 Presentation Time Update */

/** Bit definition for ETH_MACADDR0H register **/
#define ETH_MACADDR0H_ADDRHI ((uint32_t)0x0000FFFFU) /* MAC Address0[47:32] */
#define ETH_MACADDR0H_AE     ((uint32_t)0x80000000U) /* Address Enable */

/** Bit definition for ETH_MACADDR0L register **/
#define ETH_MACADDR0L_ADDRLO ((uint32_t)0xFFFFFFFFU) /* MAC Address0[31:0] */

/** Bit definition for ETH_MACADDR1H register **/
#define ETH_MACADDR1H_ADDRHI ((uint32_t)0x0000FFFFU) /* MAC Address1[47:32] */
#define ETH_MACADDR1H_MBC    ((uint32_t)0x3F000000U) /* MBC[5:0]: Mask Byte Control */
#define ETH_MACADDR1H_MBC_0  ((uint32_t)0x01000000U) /* MBC bit 0 */
#define ETH_MACADDR1H_MBC_1  ((uint32_t)0x02000000U) /* MBC bit 1 */
#define ETH_MACADDR1H_MBC_2  ((uint32_t)0x04000000U) /* MBC bit 2 */
#define ETH_MACADDR1H_MBC_3  ((uint32_t)0x08000000U) /* MBC bit 3 */
#define ETH_MACADDR1H_MBC_4  ((uint32_t)0x10000000U) /* MBC bit 4 */
#define ETH_MACADDR1H_MBC_5  ((uint32_t)0x20000000U) /* MBC bit 5 */
#define ETH_MACADDR1H_SA     ((uint32_t)0x40000000U) /* Source Address */
#define ETH_MACADDR1H_AE     ((uint32_t)0x80000000U) /* Address Enable */

/** Bit definition for ETH_MACADDR1L register **/
#define ETH_MACADDR1L_ADDRLO ((uint32_t)0xFFFFFFFFU) /* MAC Address1[31:0] */

/** Bit definition for ETH_MACADDR2H register **/
#define ETH_MACADDR2H_ADDRHI ((uint32_t)0x0000FFFFU) /* MAC Address2[47:32] */
#define ETH_MACADDR2H_MBC    ((uint32_t)0x3F000000U) /* MBC[5:0]: Mask Byte Control */
#define ETH_MACADDR2H_MBC_0  ((uint32_t)0x01000000U) /* MBC bit 0 */
#define ETH_MACADDR2H_MBC_1  ((uint32_t)0x02000000U) /* MBC bit 1 */
#define ETH_MACADDR2H_MBC_2  ((uint32_t)0x04000000U) /* MBC bit 2 */
#define ETH_MACADDR2H_MBC_3  ((uint32_t)0x08000000U) /* MBC bit 3 */
#define ETH_MACADDR2H_MBC_4  ((uint32_t)0x10000000U) /* MBC bit 4 */
#define ETH_MACADDR2H_MBC_5  ((uint32_t)0x20000000U) /* MBC bit 5 */
#define ETH_MACADDR2H_SA     ((uint32_t)0x40000000U) /* Source Address */
#define ETH_MACADDR2H_AE     ((uint32_t)0x80000000U) /* Address Enable */

/** Bit definition for ETH_MACADDR2L register **/
#define ETH_MACADDR2L_ADDRLO ((uint32_t)0xFFFFFFFFU) /* MAC Address2[31:0] */

/** Bit definition for ETH_MACADDR3H register **/
#define ETH_MACADDR3H_ADDRHI ((uint32_t)0x0000FFFFU) /* MAC Address3[47:32] */
#define ETH_MACADDR3H_MBC    ((uint32_t)0x3F000000U) /* MBC[5:0]: Mask Byte Control */
#define ETH_MACADDR3H_MBC_0  ((uint32_t)0x01000000U) /* MBC bit 0 */
#define ETH_MACADDR3H_MBC_1  ((uint32_t)0x02000000U) /* MBC bit 1 */
#define ETH_MACADDR3H_MBC_2  ((uint32_t)0x04000000U) /* MBC bit 2 */
#define ETH_MACADDR3H_MBC_3  ((uint32_t)0x08000000U) /* MBC bit 3 */
#define ETH_MACADDR3H_MBC_4  ((uint32_t)0x10000000U) /* MBC bit 4 */
#define ETH_MACADDR3H_MBC_5  ((uint32_t)0x20000000U) /* MBC bit 5 */
#define ETH_MACADDR3H_SA     ((uint32_t)0x40000000U) /* Source Address */
#define ETH_MACADDR3H_AE     ((uint32_t)0x80000000U) /* Address Enable */

/** Bit definition for ETH_MACADDR3L register **/
#define ETH_MACADDR3L_ADDRLO ((uint32_t)0xFFFFFFFFU) /* MAC Address3[31:0] */

/** Bit definition for ETH_MMCCTRL register **/
#define ETH_MMCCTRL_CNTRST     ((uint32_t)0x00000001U) /* Counters Reset */
#define ETH_MMCCTRL_CNTSTOPRO  ((uint32_t)0x00000002U) /* Counter Stop Rollover */
#define ETH_MMCCTRL_RSTONRD    ((uint32_t)0x00000004U) /* Reset on Read */
#define ETH_MMCCTRL_CNTFREEZ   ((uint32_t)0x00000008U) /* MMC Counter Freeze */
#define ETH_MMCCTRL_CNTPRST    ((uint32_t)0x00000010U) /* Counters Preset */
#define ETH_MMCCTRL_CNTPRSTLVL ((uint32_t)0x00000020U) /* Full-Half Preset */
#define ETH_MMCCTRL_UCDBC      ((uint32_t)0x00000100U) /* Update MMC Counters for Dropped Broadcast Packets */

/** Bit definition for ETH_MMCRXINT register **/
#define ETH_MMCRXINT_RXBCGPIS    ((uint32_t)0x00000008U) /* MMC RX Broadcast Good Packet Counter Interrupt Status */
#define ETH_MMCRXINT_RXMCGPIS    ((uint32_t)0x00000010U) /* MMC RX Multicast Good Packet Counter Interrupt Status */
#define ETH_MMCRXINT_RXCRCERPIS  ((uint32_t)0x00000020U) /* MMC RX CRC Error Packet Counter Interrupt Status */
#define ETH_MMCRXINT_RXALGNERPIS ((uint32_t)0x00000040U) /* MMC RX Alignment Error Packet Counter Interrupt Status */
#define ETH_MMCRXINT_RXUCGPIS    ((uint32_t)0x00020000U) /* MMC RX Unicast Good Packet Counter Interrupt Status */
#define ETH_MMCRXINT_RXLPIUSCIS  ((uint32_t)0x04000000U) /* MMC Receive LPI microsecond counter interrupt status */
#define ETH_MMCRXINT_RXLPITRCIS  ((uint32_t)0x08000000U) /* MMC Receive LPI transition counter interrupt status */

/** Bit definition for ETH_MMCTXINT register **/
#define ETH_MMCTXINT_TXSCOLGPIS ((uint32_t)0x00004000U) /* MMC TX Single Collision Good Packet Counter Interrupt Status */
#define ETH_MMCTXINT_TXMCOLGPIS ((uint32_t)0x00008000U) /* MMC TX Multiple Collision Good Packet Counter Interrupt Status */
#define ETH_MMCTXINT_TXGPKTIS   ((uint32_t)0x00200000U) /* MMC TX Good Packet Counter Interrupt Status */
#define ETH_MMCTXINT_TXLPIUSCIS ((uint32_t)0x04000000U) /* MMC Transmit LPI microsecond counter interrupt status */
#define ETH_MMCTXINT_TXLPITRCIS ((uint32_t)0x08000000U) /* MMC Transmit LPI transition counter interrupt status */

/** Bit definition for ETH_MMCRXINTMSK register **/
#define ETH_MMCRXINTMSK_RXBCGPIM    ((uint32_t)0x00000008U) /* MMC RX Broadcast Good Packet Counter Interrupt Mask */
#define ETH_MMCRXINTMSK_RXMCGPIM    ((uint32_t)0x00000010U) /* MMC RX Multicast Good Packet Counter Interrupt Mask */
#define ETH_MMCRXINTMSK_RXCRCERPIM  ((uint32_t)0x00000020U) /* MMC RX CRC Error Packet Counter Interrupt Mask */
#define ETH_MMCRXINTMSK_RXALGNERPIM ((uint32_t)0x00000040U) /* MMC RX Alignment Error Packet Counter Interrupt Mask */
#define ETH_MMCRXINTMSK_RXUCGPIM    ((uint32_t)0x00020000U) /* MMC RX Unicast Good Packet Counter Interrupt Mask */
#define ETH_MMCRXINTMSK_RXLPIUSCIM  ((uint32_t)0x04000000U) /* MMC Receive LPI microsecond counter interrupt Mask */
#define ETH_MMCRXINTMSK_RXLPITRCIM  ((uint32_t)0x08000000U) /* MMC Receive LPI transition counter interrupt Mask */

/** Bit definition for ETH_MMCTXINTMSK register **/
#define ETH_MMCTXINTMSK_TXSCOLGPIM ((uint32_t)0x00004000U) /* MMC TX Single Collision Good Packet Counter Interrupt Mask */
#define ETH_MMCTXINTMSK_TXMCOLGPIM ((uint32_t)0x00008000U) /* MMC TX Multiple Collision Good Packet Counter Interrupt Mask */
#define ETH_MMCTXINTMSK_TXGPKTIM   ((uint32_t)0x00200000U) /* MMC TX Good Packet Counter Interrupt Mask */
#define ETH_MMCTXINTMSK_TXLPIUSCIM ((uint32_t)0x04000000U) /* MMC Transmit LPI microsecond counter interrupt Mask */
#define ETH_MMCTXINTMSK_TXLPITRCIM ((uint32_t)0x08000000U) /* MMC Transmit LPI transition counter interrupt Mask */

/** Bit definition for ETH_MMCTXSCGP register **/
#define ETH_MMCTXSCGP_TXSNGLCOLG  ((uint32_t)0xFFFFFFFFU) /* Tx Single Collision Good Packets */

/** Bit definition for ETH_MMCTXMCGP register **/
#define ETH_MMCTXMCGP_TXMULTCOLG  ((uint32_t)0xFFFFFFFFU) /* Tx Multiple Collision Good Packets */

/** Bit definition for ETH_MMCTXPCG register **/
#define ETH_MMCTXPCG_TXPKTG       ((uint32_t)0xFFFFFFFFU) /* Tx Packet Count Good */

/** Bit definition for ETH_MMCRXBPG register **/
#define ETH_MMCRXBPG_RXBCASTG     ((uint32_t)0xFFFFFFFFU) /* Rx Broadcast Packets Good */

/** Bit definition for ETH_MMCRXMPG register **/
#define ETH_MMCRXMPG_RXMCASTG     ((uint32_t)0xFFFFFFFFU) /* Rx Multicast Packets Good */

/** Bit definition for ETH_MMCRXCRCEP register **/
#define ETH_MMCRXCRCEP_RXCRCERR   ((uint32_t)0xFFFFFFFFU) /* Rx CRC Error Packets */

/** Bit definition for ETH_MMCRXAEP register **/
#define ETH_MMCRXAEP_RXALGNERR    ((uint32_t)0xFFFFFFFFU) /* Rx Alignment Error Packets */

/** Bit definition for ETH_MMCRXUPG register **/
#define ETH_MMCRXUPG_RXUCASTG     ((uint32_t)0xFFFFFFFFU) /* Rx Unicast Packets Good */

/** Bit definition for ETH_MMCTXLPIUS register **/
#define ETH_MMCTXLPIUS_TXLPIUSC   ((uint32_t)0xFFFFFFFFU) /* Tx LPI Microseconds Counter */

/** Bit definition for ETH_MMCTXLPITRAN register **/
#define ETH_MMCTXLPITRAN_TXLPITRC ((uint32_t)0xFFFFFFFFU) /* Tx LPI Transition Counter */

/** Bit definition for ETH_MMCRXLPIUS register **/
#define ETH_MMCRXLPIUS_RXLPIUSC   ((uint32_t)0xFFFFFFFFU) /* Rx LPI Microseconds Counter */

/** Bit definition for ETH_MMCRXLPITRAN register **/
#define ETH_MMCRXLPITRAN_RXLPITRC ((uint32_t)0xFFFFFFFFU) /* Rx LPI Transition Counter */

/** Bit definition for ETH_MMCIPCRXINTMSK register **/
#define ETH_MMCIPCRXINTMSK_RXIPV4GPIM  ((uint32_t)0x00000001U) /* MMC Receive IPV4 Good Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXIPV6GPIM  ((uint32_t)0x00000020U) /* MMC Receive IPV6 Good Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXUDPGPIM   ((uint32_t)0x00000100U) /* MMC Receive UDP Good Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXUDPERPIM  ((uint32_t)0x00000200U) /* MMC Receive UDP Error Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXTCPGPIM   ((uint32_t)0x00000400U) /* MMC Receive TCP Good Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXTCPERPIM  ((uint32_t)0x00000800U) /* MMC Receive TCP Error Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXICMPGPIM  ((uint32_t)0x00001000U) /* MMC Receive ICMP Good Packet Counter Interrupt Mask */
#define ETH_MMCIPCRXINTMSK_RXICMPERPIM ((uint32_t)0x00002000U) /* MMC Receive ICMP Error Packet Counter Interrupt Mask */

/** Bit definition for ETH_MMCIPCRXINT register **/
#define ETH_MMCIPCRXINT_RXIPV4GPIS  ((uint32_t)0x00000001U) /* MMC Receive IPV4 Good Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXIPV6GPIS  ((uint32_t)0x00000020U) /* MMC Receive IPV6 Good Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXUDPGPIS   ((uint32_t)0x00000100U) /* MMC Receive UDP Good Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXUDPERPIS  ((uint32_t)0x00000200U) /* MMC Receive UDP Error Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXTCPGPIS   ((uint32_t)0x00000400U) /* MMC Receive TCP Good Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXTCPERPIS  ((uint32_t)0x00000800U) /* MMC Receive TCP Error Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXICMPGPIS  ((uint32_t)0x00001000U) /* MMC Receive ICMP Good Packet Counter Interrupt Status */
#define ETH_MMCIPCRXINT_RXICMPERPIS ((uint32_t)0x00002000U) /* MMC Receive ICMP Error Packet Counter Interrupt Status */

/** Bit definition for ETH_MMCRXIPV4GP register **/
#define ETH_MMCRXIPV4GP_RXIPV4GDPKT  ((uint32_t)0xFFFFFFFFU) /* RxIPv4 Good Packets */

/** Bit definition for ETH_MMCRXIPV6GP register **/
#define ETH_MMCRXIPV6GP_RXIPV6GDPKT  ((uint32_t)0xFFFFFFFFU) /* RxIPv6 Good Packets */

/** Bit definition for ETH_MMCRXUDPGP register **/
#define ETH_MMCRXUDPGP_RXUDPGDPKT    ((uint32_t)0xFFFFFFFFU) /* RxUDP Good Packets */

/** Bit definition for ETH_MMCRXUDPEP register **/
#define ETH_MMCRXUDPEP_RXUDPERRPKT   ((uint32_t)0xFFFFFFFFU) /* RxUDP Error Packets */

/** Bit definition for ETH_MMCRXTCPGP register **/
#define ETH_MMCRXTCPGP_RXTCPGDPKT    ((uint32_t)0xFFFFFFFFU) /* RxTCP Good Packets */

/** Bit definition for ETH_MMCRXTCPEP register **/
#define ETH_MMCRXTCPEP_RXTCPERRPKT   ((uint32_t)0xFFFFFFFFU) /* RxTCP Error Packets */

/** Bit definition for ETH_MMCRXICMPGP register **/
#define ETH_MMCRXICMPGP_RXICMPGDPKT  ((uint32_t)0xFFFFFFFFU) /* RxICMP Good Packets */

/** Bit definition for ETH_MMCRXICMPEP register **/
#define ETH_MMCRXICMPEP_RXICMPERRPKT ((uint32_t)0xFFFFFFFFU) /* RxICMP Error Packets */

/** Bit definition for ETH_MACL3L4F0CTRL register **/
#define ETH_MACL3L4F0CTRL_L3PEN    ((uint32_t)0x00000001U) /* Layer 3 Protocol Enable */
#define ETH_MACL3L4F0CTRL_L3SAM    ((uint32_t)0x00000004U) /* Layer 3 IP SA Match Enable */
#define ETH_MACL3L4F0CTRL_L3SAIM   ((uint32_t)0x00000008U) /* Layer 3 IP SA Inverse Match Enable */
#define ETH_MACL3L4F0CTRL_L3DAM    ((uint32_t)0x00000010U) /* Layer 3 IP DA Match Enable */
#define ETH_MACL3L4F0CTRL_L3DAIM   ((uint32_t)0x00000020U) /* Layer 3 IP DA Inverse Match Enable */
#define ETH_MACL3L4F0CTRL_L3HSBM   ((uint32_t)0x000007C0U) /* L3HSBM[4:0]: Layer 3 IP SA Higher Bits Match */
#define ETH_MACL3L4F0CTRL_L3HSBM_0 ((uint32_t)0x00000040U) /* L3HSBM bit 0 */
#define ETH_MACL3L4F0CTRL_L3HSBM_1 ((uint32_t)0x00000080U) /* L3HSBM bit 1 */
#define ETH_MACL3L4F0CTRL_L3HSBM_2 ((uint32_t)0x00000100U) /* L3HSBM bit 2 */
#define ETH_MACL3L4F0CTRL_L3HSBM_3 ((uint32_t)0x00000200U) /* L3HSBM bit 3 */
#define ETH_MACL3L4F0CTRL_L3HSBM_4 ((uint32_t)0x00000400U) /* L3HSBM bit 4 */
#define ETH_MACL3L4F0CTRL_L3HDBM   ((uint32_t)0x0000F800U) /* L3HDBM[4:0]: Layer 3 IP DA Higher Bits Match */
#define ETH_MACL3L4F0CTRL_L3HDBM_0 ((uint32_t)0x00000800U) /* L3HDBM bit 0 */
#define ETH_MACL3L4F0CTRL_L3HDBM_1 ((uint32_t)0x00001000U) /* L3HDBM bit 1 */
#define ETH_MACL3L4F0CTRL_L3HDBM_2 ((uint32_t)0x00002000U) /* L3HDBM bit 2 */
#define ETH_MACL3L4F0CTRL_L3HDBM_3 ((uint32_t)0x00004000U) /* L3HDBM bit 3 */
#define ETH_MACL3L4F0CTRL_L3HDBM_4 ((uint32_t)0x00008000U) /* L3HDBM bit 4 */
#define ETH_MACL3L4F0CTRL_L4PEN    ((uint32_t)0x00010000U) /* Layer 4 Protocol Enable */
#define ETH_MACL3L4F0CTRL_L4SPM    ((uint32_t)0x00040000U) /* Layer 4 Source Port Match Enable */
#define ETH_MACL3L4F0CTRL_L4SPIM   ((uint32_t)0x00080000U) /* Layer 4 Source Port Inverse Match Enable */
#define ETH_MACL3L4F0CTRL_L4DPM    ((uint32_t)0x00100000U) /* Layer 4 Destination Port Match Enable */
#define ETH_MACL3L4F0CTRL_L4DPIM   ((uint32_t)0x00200000U) /* Layer 4 Destination Port Inverse Match Enable */

/** Bit definition for ETH_MACL4F0PORT register **/
#define ETH_MACL4F0PORT_L4SP ((uint32_t)0x0000FFFFU) /* Layer 4 Source Port Number Field */
#define ETH_MACL4F0PORT_L4DP ((uint32_t)0xFFFF0000U) /* Layer 4 Destination Port Number Field */

/** Bit definition for ETH_MACL3F0ADDR0 register **/
#define ETH_MACL3F0ADDR0_L3A0 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 0 Field */

/** Bit definition for ETH_MACL3F0ADDR1 register **/
#define ETH_MACL3F0ADDR1_L3A1 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 1 Field */

/** Bit definition for ETH_MACL3F0ADDR2 register **/
#define ETH_MACL3F0ADDR2_L3A2 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 2 Field */

/** Bit definition for ETH_MACL3F0ADDR3 register **/
#define ETH_MACL3F0ADDR3_L3A3 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 3 Field */

/** Bit definition for ETH_MACL3L4F1CTRL register **/
#define ETH_MACL3L4F1CTRL_L3PEN    ((uint32_t)0x00000001U) /* Layer 3 Protocol Enable */
#define ETH_MACL3L4F1CTRL_L3SAM    ((uint32_t)0x00000004U) /* Layer 3 IP SA Match Enable */
#define ETH_MACL3L4F1CTRL_L3SAIM   ((uint32_t)0x00000008U) /* Layer 3 IP SA Inverse Match Enable */
#define ETH_MACL3L4F1CTRL_L3DAM    ((uint32_t)0x00000010U) /* Layer 3 IP DA Match Enable */
#define ETH_MACL3L4F1CTRL_L3DAIM   ((uint32_t)0x00000020U) /* Layer 3 IP DA Inverse Match Enable */
#define ETH_MACL3L4F1CTRL_L3HSBM   ((uint32_t)0x000007C0U) /* L3HSBM[4:0]: Layer 3 IP SA Higher Bits Match */
#define ETH_MACL3L4F1CTRL_L3HSBM_0 ((uint32_t)0x00000040U) /* L3HSBM bit 0 */
#define ETH_MACL3L4F1CTRL_L3HSBM_1 ((uint32_t)0x00000080U) /* L3HSBM bit 1 */
#define ETH_MACL3L4F1CTRL_L3HSBM_2 ((uint32_t)0x00000100U) /* L3HSBM bit 2 */
#define ETH_MACL3L4F1CTRL_L3HSBM_3 ((uint32_t)0x00000200U) /* L3HSBM bit 3 */
#define ETH_MACL3L4F1CTRL_L3HSBM_4 ((uint32_t)0x00000400U) /* L3HSBM bit 4 */
#define ETH_MACL3L4F1CTRL_L3HDBM   ((uint32_t)0x0000F800U) /* L3HDBM[4:0]: Layer 3 IP DA Higher Bits Match */
#define ETH_MACL3L4F1CTRL_L3HDBM_0 ((uint32_t)0x00000800U) /* L3HDBM bit 0 */
#define ETH_MACL3L4F1CTRL_L3HDBM_1 ((uint32_t)0x00001000U) /* L3HDBM bit 1 */
#define ETH_MACL3L4F1CTRL_L3HDBM_2 ((uint32_t)0x00002000U) /* L3HDBM bit 2 */
#define ETH_MACL3L4F1CTRL_L3HDBM_3 ((uint32_t)0x00004000U) /* L3HDBM bit 3 */
#define ETH_MACL3L4F1CTRL_L3HDBM_4 ((uint32_t)0x00008000U) /* L3HDBM bit 4 */
#define ETH_MACL3L4F1CTRL_L4PEN    ((uint32_t)0x00010000U) /* Layer 4 Protocol Enable */
#define ETH_MACL3L4F1CTRL_L4SPM    ((uint32_t)0x00040000U) /* Layer 4 Source Port Match Enable */
#define ETH_MACL3L4F1CTRL_L4SPIM   ((uint32_t)0x00080000U) /* Layer 4 Source Port Inverse Match Enable */
#define ETH_MACL3L4F1CTRL_L4DPM    ((uint32_t)0x00100000U) /* Layer 4 Destination Port Match Enable */
#define ETH_MACL3L4F1CTRL_L4DPIM   ((uint32_t)0x00200000U) /* Layer 4 Destination Port Inverse Match Enable */

/** Bit definition for ETH_MACL4F1PORT register **/
#define ETH_MACL4F1PORT_L4SP ((uint32_t)0x0000FFFFU) /* Layer 4 Source Port Number Field */
#define ETH_MACL4F1PORT_L4DP ((uint32_t)0xFFFF0000U) /* Layer 4 Destination Port Number Field */

/** Bit definition for ETH_MACL3F1ADDR0 register **/
#define ETH_MACL3F1ADDR0_L3A0 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 0 Field */

/** Bit definition for ETH_MACL3F1ADDR1 register **/
#define ETH_MACL3F1ADDR1_L3A1 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 1 Field */

/** Bit definition for ETH_MACL3F1ADDR2 register **/
#define ETH_MACL3F1ADDR2_L3A2 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 2 Field */

/** Bit definition for ETH_MACL3F1ADDR3 register **/
#define ETH_MACL3F1ADDR3_L3A3 ((uint32_t)0xFFFFFFFFU) /* Layer 3 Address 3 Field */

/** Bit definition for ETH_MACTSCTRL register **/
#define ETH_MACTSCTRL_TSENA       ((uint32_t)0x00000001U) /* Enable Timestamp */
#define ETH_MACTSCTRL_TSCFUPDT    ((uint32_t)0x00000002U) /* Fine or Coarse Timestamp Update */
#define ETH_MACTSCTRL_TSINIT      ((uint32_t)0x00000004U) /* Initialize Timestamp */
#define ETH_MACTSCTRL_TSUPDT      ((uint32_t)0x00000008U) /* Update Timestamp */
#define ETH_MACTSCTRL_TSADDREG    ((uint32_t)0x00000020U) /* Update Addend Register */
#define ETH_MACTSCTRL_PTGE        ((uint32_t)0x00000040U) /* Presentation Time Generation Enable */
#define ETH_MACTSCTRL_TSENALL     ((uint32_t)0x00000100U) /* Enable Timestamp for All Packets */
#define ETH_MACTSCTRL_TSCTRLSSR   ((uint32_t)0x00000200U) /* Timestamp Digital or Binary Rollover Control */
#define ETH_MACTSCTRL_TSVER2ENA   ((uint32_t)0x00000400U) /* Enable PTP Packet Processing for Version 2 Format */
#define ETH_MACTSCTRL_TSIPENA     ((uint32_t)0x00000800U) /* Enable Processing of PTP over Ethernet Packets */
#define ETH_MACTSCTRL_TSIPV6ENA   ((uint32_t)0x00001000U) /* Enable Processing of PTP Packets Sent over IPv6-UDP */
#define ETH_MACTSCTRL_TSIPV4ENA   ((uint32_t)0x00002000U) /* Enable Processing of PTP Packets Sent over IPv4-UDP */
#define ETH_MACTSCTRL_TSEVNTENA   ((uint32_t)0x00004000U) /* Enable Timestamp Snapshot for Event Messages */
#define ETH_MACTSCTRL_TSMSTRENA   ((uint32_t)0x00008000U) /* Enable Snapshot for Messages Relevant to Master */
#define ETH_MACTSCTRL_SNAPTYPSEL  ((uint32_t)0x00030000U) /* Select PTP packets for Taking Snapshots */
#define ETH_MACTSCTRL_TSENMACADDR ((uint32_t)0x00040000U) /* Enable MAC Address for PTP Packet Filtering */
#define ETH_MACTSCTRL_TXTSSTSM    ((uint32_t)0x01000000U) /* Transmit Timestamp Status Mode */
#define ETH_MACTSCTRL_AV8021ASMEN ((uint32_t)0x10000000U) /* AV 802.1AS Mode Enable */

/** Bit definition for ETH_MACSUBSINC register **/
#define ETH_MACSUBSINC_SSINC ((uint32_t)0x00FF0000U) /* Sub-second Increment Value */

/** Bit definition for ETH_MACSYSTS register **/
#define ETH_MACSYSTS_TSS ((uint32_t)0xFFFFFFFFU) /* Timestamp Second */

/** Bit definition for ETH_MACSYSTNS register **/
#define ETH_MACSYSTNS_TSSS ((uint32_t)0x7FFFFFFFU) /* Timestamp Sub Seconds */

/** Bit definition for ETH_MACSYSTSUP register **/
#define ETH_MACSYSTSUP_TSS ((uint32_t)0xFFFFFFFFU) /* Timestamp Seconds */

/** Bit definition for ETH_MACSYSTNSUP register **/
#define ETH_MACSYSTNSUP_TSSS   ((uint32_t)0x7FFFFFFFU) /* Timestamp Sub Seconds */
#define ETH_MACSYSTNSUP_ADDSUB ((uint32_t)0x80000000U) /* Add or Subtract Time */

/** Bit definition for ETH_MACTSADD register **/
#define ETH_MACTSADD_TSAR ((uint32_t)0xFFFFFFFFU) /* Timestamp Addend Register */

/** Bit definition for ETH_MACSYSTHWS register **/
#define ETH_MACSYSTHWS_TSHWR ((uint32_t)0x0000FFFFU) /* Timestamp Higher Word Register */

/** Bit definition for ETH_MACTSSTS register **/
#define ETH_MACTSSTS_TSSOVF     ((uint32_t)0x00000001U) /* Timestamp Seconds Overflow */
#define ETH_MACTSSTS_TSTARGT0   ((uint32_t)0x00000002U) /* Timestamp Target Time Reached */
#define ETH_MACTSSTS_AUXTSTRIG  ((uint32_t)0x00000004U) /* Auxiliary Timestamp Trigger Snapshot */
#define ETH_MACTSSTS_TSTRGTERR0 ((uint32_t)0x00000008U) /* Timestamp Target Time Error */
#define ETH_MACTSSTS_TXTSSIS    ((uint32_t)0x00008000U) /* Tx Timestamp Status Interrupt Status */
#define ETH_MACTSSTS_ATSSTN     ((uint32_t)0x000F0000U) /* ATSSTN[3:0]: Auxiliary Timestamp Snapshot Trigger Identifier */
#define ETH_MACTSSTS_ATSSTN_0   ((uint32_t)0x00010000U) /* ATSSTN bit 0 */
#define ETH_MACTSSTS_ATSSTN_1   ((uint32_t)0x00020000U) /* ATSSTN bit 1 */
#define ETH_MACTSSTS_ATSSTN_2   ((uint32_t)0x00040000U) /* ATSSTN bit 2 */
#define ETH_MACTSSTS_ATSSTN_3   ((uint32_t)0x00080000U) /* ATSSTN bit 3 */
#define ETH_MACTSSTS_ATSSTM     ((uint32_t)0x01000000U) /* Auxiliary Timestamp Snapshot Trigger Missed */
#define ETH_MACTSSTS_ATSNS      ((uint32_t)0x3E000000U) /* Number of Auxiliary Timestamp Snapshots */

/** Bit definition for ETH_MACTXTSSTSNS register **/
#define ETH_MACTXTSSTSNS_TXTSSLO  ((uint32_t)0x7FFFFFFFU) /* Number of Auxiliary Timestamp Snapshots */
#define ETH_MACTXTSSTSNS_TXTSSMIS ((uint32_t)0x80000000U) /* Transmit Timestamp Status Missed */

/** Bit definition for ETH_MACTXTSSTSS register **/
#define ETH_MACTXTSSTSS_TXTSSHI ((uint32_t)0xFFFFFFFFU) /* Transmit Timestamp Status High */

/** Bit definition for ETH_MACAUXCTRL register **/
#define ETH_MACAUXCTRL_ATSFC  ((uint32_t)0x00000001U) /* Auxiliary Snapshot FIFO Clear */
#define ETH_MACAUXCTRL_ATSEN0 ((uint32_t)0x00000010U) /* Auxiliary Snapshot 0 Enable */
#define ETH_MACAUXCTRL_ATSEN1 ((uint32_t)0x00000020U) /* Auxiliary Snapshot 1 Enable */
#define ETH_MACAUXCTRL_ATSEN2 ((uint32_t)0x00000040U) /* Auxiliary Snapshot 2 Enable */
#define ETH_MACAUXCTRL_ATSEN3 ((uint32_t)0x00000080U) /* Auxiliary Snapshot 3 Enable */

/** Bit definition for ETH_MACAUXTSNS register **/
#define ETH_MACAUXTSNS_AUXTSLO ((uint32_t)0x7FFFFFFFU) /* Auxiliary Timestamp Nanoseconds */

/** Bit definition for ETH_MACAUXTSS register **/
#define ETH_MACAUXTSS_AUXTSHI ((uint32_t)0xFFFFFFFFU) /* Auxiliary Timestamp Seconds */

/** Bit definition for ETH_MACTSIGASYC register **/
#define ETH_MACTSIGASYC_OSTIAC ((uint32_t)0xFFFFFFFFU) /* One-Step Timestamp Ingress Asymmetry Correction */

/** Bit definition for ETH_MACTSEGASYC register **/
#define ETH_MACTSEGASYC_OSTEAC ((uint32_t)0xFFFFFFFFU) /* One-Step Timestamp Egress Asymmetry Correction */

/** Bit definition for ETH_MACTSIGCNS register **/
#define ETH_MACTSIGCNS_TSIC ((uint32_t)0xFFFFFFFFU) /* Timestamp Ingress Correction */

/** Bit definition for ETH_MACTSEGCNS register **/
#define ETH_MACTSEGCNS_TSEC ((uint32_t)0xFFFFFFFFU) /* Timestamp Egress Correction */

/** Bit definition for ETH_MACTSIGLAT register **/
#define ETH_MACTSIGLAT_ITLSNS ((uint32_t)0x0000FF00U) /* Ingress Timestamp Latency, in sub-nanoseconds */
#define ETH_MACTSIGLAT_ITLNS  ((uint32_t)0x0FFF0000U) /* Ingress Timestamp Latency, in nanoseconds */

/** Bit definition for ETH_MACTSEGLAT register **/
#define ETH_MACTSEGLAT_ETLSNS ((uint32_t)0x0000FF00U) /* Egress Timestamp Latency, in sub-nanoseconds */
#define ETH_MACTSEGLAT_ETLNS  ((uint32_t)0x0FFF0000U) /* Egress Timestamp Latency, in nanoseconds */

/** Bit definition for ETH_MACPPSCTRL register **/
#define ETH_MACPPSCTRL_PPSCTRL       ((uint32_t)0x0000000FU) /* PPSCTRL[3:0]: PPS Output Frequency Control */
#define ETH_MACPPSCTRL_PPSCTRL_0     ((uint32_t)0x00000001U) /* PPSCTRL bit 0 */
#define ETH_MACPPSCTRL_PPSCTRL_1     ((uint32_t)0x00000002U) /* PPSCTRL bit 1 */
#define ETH_MACPPSCTRL_PPSCTRL_2     ((uint32_t)0x00000004U) /* PPSCTRL bit 2 */
#define ETH_MACPPSCTRL_PPSCTRL_3     ((uint32_t)0x00000008U) /* PPSCTRL bit 3 */
#define ETH_MACPPSCTRL_PPSCMD        ((uint32_t)0x0000000FU) /* PPSCMD[3:0]: Flexible PPS Output (ptp_pps_o [0]) Control, Presentation Time Control */
#define ETH_MACPPSCTRL_PPSCMD_0      ((uint32_t)0x00000001U) /* PPSCMD bit 0 */
#define ETH_MACPPSCTRL_PPSCMD_1      ((uint32_t)0x00000002U) /* PPSCMD bit 1 */
#define ETH_MACPPSCTRL_PPSCMD_2      ((uint32_t)0x00000004U) /* PPSCMD bit 2 */
#define ETH_MACPPSCTRL_PPSCMD_3      ((uint32_t)0x00000008U) /* PPSCMD bit 3 */
#define ETH_MACPPSCTRL_PPSEN0        ((uint32_t)0x00000010U) /* Flexible PPS Output Mode Enable */
#define ETH_MACPPSCTRL_TRGTMODSEL0   ((uint32_t)0x00000060U) /* TRGTMODSEL0[3:0]: Target Time Register Mode for PPS0 Output */
#define ETH_MACPPSCTRL_TRGTMODSEL0_0 ((uint32_t)0x00000020U) /* TRGTMODSEL0 bit 0 */
#define ETH_MACPPSCTRL_TRGTMODSEL0_1 ((uint32_t)0x00000040U) /* TRGTMODSEL0 bit 1 */
#define ETH_MACPPSCTRL_MCGREN0       ((uint32_t)0x00000080U) /* MCGR Mode Enable for PPS0 Output */
#define ETH_MACPPSCTRL_TIMESEL       ((uint32_t)0x10000000U) /* Time Select */

/** Bit definition for ETH_MACPPSTTS register **/
#define ETH_MACPPSTTS_TSTRH0 ((uint32_t)0xFFFFFFFFU) /* PPS Target Time Seconds Register */

/** Bit definition for ETH_MACPPSTTNS register **/
#define ETH_MACPPSTTNS_TTSL0     ((uint32_t)0x7FFFFFFFU) /* Target Time Low for PPS Register */
#define ETH_MACPPSTTNS_TRGTBUSY0 ((uint32_t)0x80000000U) /* PPS Target Time Register Busy */

/** Bit definition for ETH_MACPPSINTE register **/
#define ETH_MACPPSINTE_PPSINT0 ((uint32_t)0xFFFFFFFFU) /* PPS Output Signal Interval */

/** Bit definition for ETH_MACPPSWID register **/
#define ETH_MACPPSWID_PPSWIDTH0 ((uint32_t)0xFFFFFFFFU) /* PPS Output Signal Width */

/** Bit definition for ETH_MACPTOCTRL register **/
#define ETH_MACPTOCTRL_PTOEN      ((uint32_t)0x00000001U) /* PTP Offload Enable */
#define ETH_MACPTOCTRL_ASYNCEN    ((uint32_t)0x00000002U) /* Automatic PTP SYNC message Enable */
#define ETH_MACPTOCTRL_APDREQEN   ((uint32_t)0x00000004U) /* Automatic PTP Pdelay_Req message Enable */
#define ETH_MACPTOCTRL_ASYNCTRIG  ((uint32_t)0x00000010U) /* Automatic PTP SYNC message Trigger */
#define ETH_MACPTOCTRL_APDREQTRIG ((uint32_t)0x00000020U) /* Automatic PTP Pdelay_Req message Trigger */
#define ETH_MACPTOCTRL_DRRDIS     ((uint32_t)0x00000040U) /* Disable PTO Delay Request/Response response generation */
#define ETH_MACPTOCTRL_PDRDIS     ((uint32_t)0x00000080U) /* Disable Peer Delay Response response generation */
#define ETH_MACPTOCTRL_DN         ((uint32_t)0x0000FF00U) /* Domain Number */

/** Bit definition for ETH_MACSRCPID0 register **/
#define ETH_MACSRCPID0_SPI0 ((uint32_t)0xFFFFFFFFU) /* Source Port Identity 0 */

/** Bit definition for ETH_MACSRCPID1 register **/
#define ETH_MACSRCPID1_SPI1 ((uint32_t)0xFFFFFFFFU) /* Source Port Identity 1 */

/** Bit definition for ETH_MACSRCPID2 register **/
#define ETH_MACSRCPID2_SPI2 ((uint32_t)0x0000FFFFU) /* Source Port Identity 2 */

/** Bit definition for ETH_MACLOGMINTE register **/
#define ETH_MACLOGMINTE_LSI       ((uint32_t)0x000000FFU) /* Log Sync Interval */
#define ETH_MACLOGMINTE_DRSYNCR   ((uint32_t)0x00000700U) /* DRSYNCR[2:0]: Delay_Req to SYNC Ratio */
#define ETH_MACLOGMINTE_DRSYNCR_0 ((uint32_t)0x00000100U) /* DRSYNCR bit 0 */
#define ETH_MACLOGMINTE_DRSYNCR_1 ((uint32_t)0x00000200U) /* DRSYNCR bit 1 */
#define ETH_MACLOGMINTE_DRSYNCR_2 ((uint32_t)0x00000400U) /* DRSYNCR bit 2 */
#define ETH_MACLOGMINTE_LMPDRI    ((uint32_t)0xFF000000U) /* Log Min Pdelay_Req Interval */


/*** Ethernet MTL ***/

/** Bit definition for ETH_MTLOPMOD register **/
#define ETH_MTLOPMOD_DTXSTS  ((uint32_t)0x00000002U) /* Drop Transmit Status */
#define ETH_MTLOPMOD_CNTPRST ((uint32_t)0x00000100U) /* Counters Preset */
#define ETH_MTLOPMOD_CNTCLR  ((uint32_t)0x00000200U) /* Counters Reset */

/** Bit definition for ETH_MTLINTSTS register **/
#define ETH_MTLINTSTS_Q0IS ((uint32_t)0x00000001U) /* Queue 0 Interrupt status */


/*** Ethernet MTL Queue ***/

/** Bit definition for ETH_MTLTXQOPMOD register **/
#define ETH_MTLTXQOPMOD_FTQ   ((uint32_t)0x00000001U) /* Flush Transmit Queue */
#define ETH_MTLTXQOPMOD_TSF   ((uint32_t)0x00000002U) /* Transmit Store and Forward */
#define ETH_MTLTXQOPMOD_TTC   ((uint32_t)0x00000070U) /* TTC[2:0]: Transmit Threshold Control */
#define ETH_MTLTXQOPMOD_TTC_0 ((uint32_t)0x00000010U) /* TTC bit 0 */
#define ETH_MTLTXQOPMOD_TTC_1 ((uint32_t)0x00000020U) /* TTC bit 1 */
#define ETH_MTLTXQOPMOD_TTC_2 ((uint32_t)0x00000040U) /* TTC bit 2 */

/** Bit definition for ETH_MTLTXQUDF register **/
#define ETH_MTLTXQUDF_UFFRMCNT ((uint32_t)0x000007FFU) /* Underflow Packet Counter */
#define ETH_MTLTXQUDF_UFCNTOVF ((uint32_t)0x00000800U) /* Overflow Bit for Underflow Packet Counter */

/** Bit definition for ETH_MTLTXQDBG register **/
#define ETH_MTLTXQDBG_TXQPAUSED ((uint32_t)0x00000001U) /* Transmit Queue in Pause */
#define ETH_MTLTXQDBG_TRCSTS    ((uint32_t)0x00000006U) /* TRCSTS[1:0]: MTL Tx Queue Read Controller Status */
#define ETH_MTLTXQDBG_TRCSTS_0  ((uint32_t)0x00000002U) /* TRCSTS bit 0 */
#define ETH_MTLTXQDBG_TRCSTS_1  ((uint32_t)0x00000004U) /* TRCSTS bit 1 */
#define ETH_MTLTXQDBG_TWCSTS    ((uint32_t)0x00000008U) /* MTL Tx Queue Write Controller Status */
#define ETH_MTLTXQDBG_TXQSTS    ((uint32_t)0x00000010U) /* MTL Tx Queue Not Empty Status */
#define ETH_MTLTXQDBG_TXSTSFSTS ((uint32_t)0x00000020U) /* MTL Tx Status FIFO Full Status */
#define ETH_MTLTXQDBG_PTXQ      ((uint32_t)0x00070000U) /* Number of Packets in the Transmit Queue */
#define ETH_MTLTXQDBG_STXSTSF   ((uint32_t)0x00700000U) /* Number of Status Words in Tx Status FIFO of Queue */

/** Bit definition for ETH_MTLQINTCTRLSTS register **/
#define ETH_MTLQINTCTRLSTS_TXUNFIS ((uint32_t)0x00000001U) /* Transmit Queue Underflow Interrupt Status */
#define ETH_MTLQINTCTRLSTS_TXUIE   ((uint32_t)0x00000100U) /* Transmit Queue Underflow Interrupt Enable */
#define ETH_MTLQINTCTRLSTS_RXOVFIS ((uint32_t)0x00010000U) /* Receive Queue Overflow Interrupt Status */
#define ETH_MTLQINTCTRLSTS_RXOIE   ((uint32_t)0x01000000U) /* Receive Queue Overflow Interrupt Enable */

/** Bit definition for ETH_MTLRXQOPMOD register **/
#define ETH_MTLRXQOPMOD_RTC      ((uint32_t)0x00000003U) /* RTC[1:0]: Receive Queue Threshold Control */
#define ETH_MTLRXQOPMOD_RTC_0    ((uint32_t)0x00000001U) /* RTC bit 0 */
#define ETH_MTLRXQOPMOD_RTC_1    ((uint32_t)0x00000002U) /* RTC bit 1 */
#define ETH_MTLRXQOPMOD_FUP      ((uint32_t)0x00000008U) /* Forward Undersized Good Packets */
#define ETH_MTLRXQOPMOD_FEP      ((uint32_t)0x00000010U) /* Forward Error Packets */
#define ETH_MTLRXQOPMOD_RSF      ((uint32_t)0x00000020U) /* Receive Queue Store and Forward */
#define ETH_MTLRXQOPMOD_DISTCPEF ((uint32_t)0x00000040U) /* Disable Dropping of TCP/IP Checksum Error Packets */

/** Bit definition for ETH_MTLRXQMPOFCNT register **/
#define ETH_MTLRXQMPOFCNT_OVFPKTCNT ((uint32_t)0x000007FFU) /* Overflow Packet Counter */
#define ETH_MTLRXQMPOFCNT_OVFCNTOVF ((uint32_t)0x00000800U) /* Overflow Counter Overflow Bit */
#define ETH_MTLRXQMPOFCNT_MISPKTCNT ((uint32_t)0x07FF0000U) /* Missed Packet Counter */
#define ETH_MTLRXQMPOFCNT_MISCNTOVF ((uint32_t)0x08000000U) /* Missed Packet Counter Overflow Bit */

/** Bit definition for ETH_MTLRXQDBG register **/
#define ETH_MTLRXQDBG_RWCSTS    ((uint32_t)0x00000001U) /* MTL Rx Queue Write Controller Active Status */
#define ETH_MTLRXQDBG_RRCSTS    ((uint32_t)0x00000006U) /* RRCSTS[1:0]: MTL Rx Queue Read Controller State */
#define ETH_MTLRXQDBG_RRCSTS_0  ((uint32_t)0x00000002U) /* RRCSTS bit 0 */
#define ETH_MTLRXQDBG_RRCSTS_1  ((uint32_t)0x00000004U) /* RRCSTS bit 1 */
#define ETH_MTLRXQDBG_RXQSTS    ((uint32_t)0x00000030U) /* RXQSTS[1:0]: MTL Rx Queue Fill-Level Status */
#define ETH_MTLRXQDBG_RXQSTS_0  ((uint32_t)0x00000010U) /* RXQSTS bit 0 */
#define ETH_MTLRXQDBG_RXQSTS_1  ((uint32_t)0x00000020U) /* RXQSTS bit 1 */
#define ETH_MTLRXQDBG_PRXQ      ((uint32_t)0x3FFF0000U) /* Number of Packets in Receive Queue */


/*** Ethernet DMA ***/

/** Bit definition for ETH_DMAMODE register **/
#define ETH_DMAMODE_SWR    ((uint32_t)0x00000001U) /* Software Reset */
#define ETH_DMAMODE_DA     ((uint32_t)0x00000002U) /* DMA Tx or Rx Arbitration Scheme */
#define ETH_DMAMODE_TXPR   ((uint32_t)0x00000800U) /* Transmit Priority */
#define ETH_DMAMODE_PR     ((uint32_t)0x00007000U) /* PR[2:0]: Priority Ratio */
#define ETH_DMAMODE_PR_0   ((uint32_t)0x00001000U) /* PR bit 0 */
#define ETH_DMAMODE_PR_1   ((uint32_t)0x00002000U) /* PR bit 1 */
#define ETH_DMAMODE_PR_2   ((uint32_t)0x00004000U) /* PR bit 2 */
#define ETH_DMAMODE_INTM   ((uint32_t)0x00030000U) /* INTM[1:0]: Interrupt Mode */
#define ETH_DMAMODE_INTM_0 ((uint32_t)0x00010000U) /* INTM bit 0 */
#define ETH_DMAMODE_INTM_1 ((uint32_t)0x00020000U) /* INTM bit 1 */
#define ETH_DMAMODE_DCHE   ((uint32_t)0x00080000U) /* Descriptor Cache Enable */
#define ETH_DMAMODE_TNDF   ((uint32_t)0x00300000U) /* TNDF[1:0]: Tx DMA鈥檚 Maximum Number of Descriptors to be fetched in a burst */
#define ETH_DMAMODE_TNDF_0 ((uint32_t)0x00100000U) /* TNDF bit 0 */
#define ETH_DMAMODE_TNDF_1 ((uint32_t)0x00200000U) /* TNDF bit 1 */
#define ETH_DMAMODE_RNDF   ((uint32_t)0x00C00000U) /* RNDF[1:0]: Rx DMA鈥檚 Maximum Number of Descriptors to be fetched in a burst */
#define ETH_DMAMODE_RNDF_0 ((uint32_t)0x00400000U) /* RNDF bit 0 */
#define ETH_DMAMODE_RNDF_1 ((uint32_t)0x00800000U) /* RNDF bit 1 */

/** Bit definition for ETH_DMASBMODE register **/
#define ETH_DMASBMODE_FB  ((uint32_t)0x00000001U) /* Fixed Burst Length */
#define ETH_DMASBMODE_AAL ((uint32_t)0x00001000U) /* Address-Aligned Beats */
#define ETH_DMASBMODE_MB  ((uint32_t)0x00004000U) /* Mixed Burst */
#define ETH_DMASBMODE_RB  ((uint32_t)0x00008000U) /* Rebuild INCRx Burst */

/** Bit definition for ETH_DMAINTSTS register **/
#define ETH_DMAINTSTS_DC0IS ((uint32_t)0x00000001U) /* DMA Channel 0 Interrupt Status */
#define ETH_DMAINTSTS_MTLIS ((uint32_t)0x00010000U) /* MTL Interrupt Status */
#define ETH_DMAINTSTS_MACIS ((uint32_t)0x00020000U) /* MAC Interrupt Status */

/** Bit definition for ETH_DMADBGSTS register **/
#define ETH_DMADBGSTS_AHBMS  ((uint32_t)0x00000001U) /* AHB Master Status */
#define ETH_DMADBGSTS_RPS0   ((uint32_t)0x00000F00U) /* RPS0[3:0]: DMA Channel 0 Receive Process State */
#define ETH_DMADBGSTS_RPS0_0 ((uint32_t)0x00000100U) /* RPS0 bit 0 */
#define ETH_DMADBGSTS_RPS0_1 ((uint32_t)0x00000200U) /* RPS0 bit 1 */
#define ETH_DMADBGSTS_RPS0_2 ((uint32_t)0x00000400U) /* RPS0 bit 2 */
#define ETH_DMADBGSTS_RPS0_3 ((uint32_t)0x00000800U) /* RPS0 bit 3 */
#define ETH_DMADBGSTS_TPS0   ((uint32_t)0x0000F000U) /* TPS0[3:0]: DMA Channel 0 Transmit Process State */
#define ETH_DMADBGSTS_TPS0_0 ((uint32_t)0x00001000U) /* TPS0 bit 0 */
#define ETH_DMADBGSTS_TPS0_1 ((uint32_t)0x00002000U) /* TPS0 bit 1 */
#define ETH_DMADBGSTS_TPS0_2 ((uint32_t)0x00004000U) /* TPS0 bit 2 */
#define ETH_DMADBGSTS_TPS0_3 ((uint32_t)0x00008000U) /* TPS0 bit 3 */


/*** Ethernet DMA Channel 0 ***/

/** Bit definition for ETH_DMACH0CTRL register **/
#define ETH_DMACH0CTRL_MSS   ((uint32_t)0x00003FFFU) /* Maximum Segment Size */
#define ETH_DMACH0CTRL_PBLx8 ((uint32_t)0x00010000U) /* 8xPBL mode */
#define ETH_DMACH0CTRL_DSL   ((uint32_t)0x001C0000U) /* DSL[2:0]: Descriptor Skip Length */
#define ETH_DMACH0CTRL_DSL_0 ((uint32_t)0x00040000U) /* DSL bit 0 */
#define ETH_DMACH0CTRL_DSL_1 ((uint32_t)0x00080000U) /* DSL bit 1 */
#define ETH_DMACH0CTRL_DSL_2 ((uint32_t)0x00100000U) /* DSL bit 2 */

/** Bit definition for ETH_DMACH0TXCTRL register **/
#define ETH_DMACH0TXCTRL_ST      ((uint32_t)0x00000001U) /* Start or Stop Transmission Command */
#define ETH_DMACH0TXCTRL_OSF     ((uint32_t)0x00000010U) /* Operate on Second Packet */
#define ETH_DMACH0TXCTRL_TSE     ((uint32_t)0x00001000U) /* TCP Segmentation Enabled */
#define ETH_DMACH0TXCTRL_TxPBL   ((uint32_t)0x003F0000U) /* TxPBL[5:0]: Transmit Programmable Burst Length */
#define ETH_DMACH0TXCTRL_TxPBL_0 ((uint32_t)0x00010000U) /* TxPBL bit 0 */
#define ETH_DMACH0TXCTRL_TxPBL_1 ((uint32_t)0x00020000U) /* TxPBL bit 1 */
#define ETH_DMACH0TXCTRL_TxPBL_2 ((uint32_t)0x00040000U) /* TxPBL bit 2 */
#define ETH_DMACH0TXCTRL_TxPBL_3 ((uint32_t)0x00080000U) /* TxPBL bit 3 */
#define ETH_DMACH0TXCTRL_TxPBL_4 ((uint32_t)0x00100000U) /* TxPBL bit 4 */
#define ETH_DMACH0TXCTRL_TxPBL_5 ((uint32_t)0x00200000U) /* TxPBL bit 5 */
#define ETH_DMACH0TXCTRL_ETIC    ((uint32_t)0x00400000U) /* Early Transmit Interrupt Control */

/** Bit definition for ETH_DMACH0RXCTRL register **/
#define ETH_DMACH0RXCTRL_SR      ((uint32_t)0x00000001U) /* Start or Stop Receive Command */
#define ETH_DMACH0RXCTRL_RBSZL   ((uint32_t)0x00000006U) /* Receive Buffer size Low */
#define ETH_DMACH0RXCTRL_RBSZH   ((uint32_t)0x00007FF8U) /* Receive Buffer size High */
#define ETH_DMACH0RXCTRL_RxPBL   ((uint32_t)0x003F0000U) /* RxPBL[5:0]: Receive Programmable Burst Length */
#define ETH_DMACH0RXCTRL_RxPBL_0 ((uint32_t)0x00010000U) /* RxPBL bit 0 */
#define ETH_DMACH0RXCTRL_RxPBL_1 ((uint32_t)0x00020000U) /* RxPBL bit 1 */
#define ETH_DMACH0RXCTRL_RxPBL_2 ((uint32_t)0x00040000U) /* RxPBL bit 2 */
#define ETH_DMACH0RXCTRL_RxPBL_3 ((uint32_t)0x00080000U) /* RxPBL bit 3 */
#define ETH_DMACH0RXCTRL_RxPBL_4 ((uint32_t)0x00100000U) /* RxPBL bit 4 */
#define ETH_DMACH0RXCTRL_RxPBL_5 ((uint32_t)0x00200000U) /* RxPBL bit 5 */
#define ETH_DMACH0RXCTRL_ERIC    ((uint32_t)0x00400000U) /* Early Receive Interrupt Control */
#define ETH_DMACH0RXCTRL_RPF     ((uint32_t)0x80000000U) /* Rx Packet Flush */

/** Bit definition for ETH_DMACH0TXDLA register **/
#define ETH_DMACH0TXDLA_TDESLA ((uint32_t)0xFFFFFFFCU) /* Start of Transmit List */

/** Bit definition for ETH_DMACH0RXDLA register **/
#define ETH_DMACH0RXDLA_RDESLA ((uint32_t)0xFFFFFFFCU) /* Start of Receive List */

/** Bit definition for ETH_DMACH0TXDTP register **/
#define ETH_DMACH0TXDTP_TDTP ((uint32_t)0xFFFFFFFCU) /* Transmit Descriptor Tail Pointer */

/** Bit definition for ETH_DMACH0RXDTP register **/
#define ETH_DMACH0RXDTP_RDTP ((uint32_t)0xFFFFFFFCU) /* Receive Descriptor Tail Pointer */

/** Bit definition for ETH_DMACH0TXDRLEN register **/
#define ETH_DMACH0TXDRLEN_TDRL ((uint32_t)0x000003FFU) /* Transmit Descriptor Ring Length */

/** Bit definition for ETH_DMACH0RXCTRL2 register **/
#define ETH_DMACH0RXCTRL2_RDRL ((uint32_t)0x000003FFU) /* Receive Descriptor Ring Length */
#define ETH_DMACH0RXCTRL2_ARBS ((uint32_t)0x00FF0000U) /* Alternate Receive Buffer Size */

/** Bit definition for ETH_DMACH0INTEN register **/
#define ETH_DMACH0INTEN_TIE  ((uint32_t)0x00000001U) /* Transmit Interrupt Enable */
#define ETH_DMACH0INTEN_TXSE ((uint32_t)0x00000002U) /* Transmit Stopped Enable */
#define ETH_DMACH0INTEN_TBUE ((uint32_t)0x00000004U) /* Transmit Buffer Unavailable Enable */
#define ETH_DMACH0INTEN_RIE  ((uint32_t)0x00000040U) /* Receive Interrupt Enable */
#define ETH_DMACH0INTEN_RBUE ((uint32_t)0x00000080U) /* Receive Buffer Unavailable Enable */
#define ETH_DMACH0INTEN_RSE  ((uint32_t)0x00000100U) /* Receive Stopped Enable */
#define ETH_DMACH0INTEN_RWTE ((uint32_t)0x00000200U) /* Receive Watchdog Timeout Enable */
#define ETH_DMACH0INTEN_ETIE ((uint32_t)0x00000400U) /* Early Transmit Interrupt Enable */
#define ETH_DMACH0INTEN_ERIE ((uint32_t)0x00000800U) /* Early Receive Interrupt Enable */
#define ETH_DMACH0INTEN_FBEE ((uint32_t)0x00001000U) /* Fatal Bus Error Enable */
#define ETH_DMACH0INTEN_CDEE ((uint32_t)0x00002000U) /* Context Descriptor Error Enable */
#define ETH_DMACH0INTEN_AIE  ((uint32_t)0x00004000U) /* Abnormal Interrupt Summary Enable */
#define ETH_DMACH0INTEN_NIE  ((uint32_t)0x00008000U) /* Normal Interrupt Summary Enable */

/** Bit definition for ETH_DMACH0RXINTWT register **/
#define ETH_DMACH0RXINTWT_RWT    ((uint32_t)0x000000FFU) /* Receive Interrupt Watchdog Timer Count */
#define ETH_DMACH0RXINTWT_RWTU   ((uint32_t)0x00030000U) /* RWTU[1:0]: Receive Interrupt Watchdog Timer \
                                                           Count Units */
#define ETH_DMACH0RXINTWT_RWTU_0 ((uint32_t)0x00010000U) /* RWTU bit 0 */
#define ETH_DMACH0RXINTWT_RWTU_1 ((uint32_t)0x00020000U) /* RWTU bit 1 */

/** Bit definition for ETH_DMACH0CATXD register **/
#define ETH_DMACH0CATXD_CURTDESAPTR ((uint32_t)0xFFFFFFFFU) /* Application Transmit Descriptor Address Pointer */

/** Bit definition for ETH_DMACH0CARXD register **/
#define ETH_DMACH0CARXD_CURRDESAPTR ((uint32_t)0xFFFFFFFFU) /* Application Receive Descriptor Address Pointer */

/** Bit definition for ETH_DMACH0CATXB register **/
#define ETH_DMACH0CATXB_CURTBUFAPTR ((uint32_t)0xFFFFFFFFU) /* Application Transmit Buffer Address Pointer */

/** Bit definition for ETH_DMACH0CARXB register **/
#define ETH_DMACH0CARXB_CURRBUFAPTR ((uint32_t)0xFFFFFFFFU) /* Application Receive Buffer Address Pointer */

/** Bit definition for ETH_DMACH0STS register **/
#define ETH_DMACH0STS_TI    ((uint32_t)0x00000001U) /* Transmit Interrupt */
#define ETH_DMACH0STS_TPS   ((uint32_t)0x00000002U) /* Transmit Process Stopped */
#define ETH_DMACH0STS_TBU   ((uint32_t)0x00000004U) /* Transmit Buffer Unavailable */
#define ETH_DMACH0STS_RI    ((uint32_t)0x00000040U) /* Receive Interrupt */
#define ETH_DMACH0STS_RBU   ((uint32_t)0x00000080U) /* Receive Buffer Unavailable */
#define ETH_DMACH0STS_RPS   ((uint32_t)0x00000100U) /* Receive Process Stopped */
#define ETH_DMACH0STS_RWT   ((uint32_t)0x00000200U) /* Receive Watchdog Timeout */
#define ETH_DMACH0STS_ETI   ((uint32_t)0x00000400U) /* Early Transmit Interrupt */
#define ETH_DMACH0STS_ERI   ((uint32_t)0x00000800U) /* Early Receive Interrupt */
#define ETH_DMACH0STS_FBE   ((uint32_t)0x00001000U) /* Fatal Bus Error */
#define ETH_DMACH0STS_CDE   ((uint32_t)0x00002000U) /* Context Descriptor Error */
#define ETH_DMACH0STS_AIS   ((uint32_t)0x00004000U) /* Abnormal Interrupt Summary */
#define ETH_DMACH0STS_NIS   ((uint32_t)0x00008000U) /* Normal Interrupt Summary */
#define ETH_DMACH0STS_TEB   ((uint32_t)0x00070000U) /* TEB[2:0]: Tx DMA Error Bits */
#define ETH_DMACH0STS_TEB_0 ((uint32_t)0x00010000U) /* TEB bit 0 */
#define ETH_DMACH0STS_TEB_1 ((uint32_t)0x00020000U) /* TEB bit 1 */
#define ETH_DMACH0STS_TEB_2 ((uint32_t)0x00040000U) /* TEB bit 2 */
#define ETH_DMACH0STS_REB   ((uint32_t)0x00380000U) /* REB[2:0]: Rx DMA Error Bits */
#define ETH_DMACH0STS_REB_0 ((uint32_t)0x00080000U) /* REB bit 0 */
#define ETH_DMACH0STS_REB_1 ((uint32_t)0x00100000U) /* REB bit 1 */
#define ETH_DMACH0STS_REB_2 ((uint32_t)0x00200000U) /* REB bit 2 */

/** Bit definition for ETH_DMACH0DPCNT register **/
#define ETH_DMACH0DPCNT_DPC  ((uint32_t)0x000007FFU) /* Dropped Packet Counters */
#define ETH_DMACH0DPCNT_DPCO ((uint32_t)0x00008000U) /* Overflow status of the DPC Counter */

/** Bit definition for ETH_DMACH0RXERICNT register **/
#define ETH_DMACH0RXERICNT_ECNT ((uint32_t)0x00000FFFU) /* ERI Counter */


/*** DMA Controller on AHB Bus (DMA1,DMA2,DMA3) ***/

/** Bit definition for DMA_CHNSA register **/
#define DMA_CHNSA_ADDR ((uint32_t)0xFFFFFFFFU) /* Current Source Address of DMA transfer */

/** Bit definition for DMA_CHNDA register **/
#define DMA_CHNDA_ADDR ((uint32_t)0xFFFFFFFFU) /* Current Destination Address of DMA transfer */

/** Bit definition for DMA_CHNLLP register **/
#define DMA_CHNLLP_LOC   ((uint32_t)0xFFFFFFFCU) /* Starting Address In Memory of next LLI if block chaining is enabled */
#define DMA_CHNLLP_LMS   ((uint32_t)0x00000003U) /* LMS[1:0] bits (List Master Select) */
#define DMA_CHNLLP_LMS_0 ((uint32_t)0x00000001U) /* Bit 0 */
#define DMA_CHNLLP_LMS_1 ((uint32_t)0x00000002U) /* Bit 1 */

/** Bit definition for DMA_CHNCTRL register **/
#define DMA_CHNCTRL_DONE       ((uint64_t)0x100000000000U) /* Done bit */
#define DMA_CHNCTRL_BTS        ((uint64_t)0x0FFF00000000U) /* Block Transfer Size */
#define DMA_CHNCTRL_LLPSRCEN   ((uint64_t)0x000010000000U) /* Linked List Pointer for Source Enable */
#define DMA_CHNCTRL_LLPDSTEN   ((uint64_t)0x000008000000U) /* Linked List Pointer for Destination Enable */
#define DMA_CHNCTRL_SMS        ((uint64_t)0x000006000000U) /* Source Master Select */
#define DMA_CHNCTRL_SMS_1      ((uint64_t)0x000004000000U) /* Bit 1 */
#define DMA_CHNCTRL_SMS_0      ((uint64_t)0x000002000000U) /* Bit 0 */
#define DMA_CHNCTRL_DMS        ((uint64_t)0x000001800000U) /* Destination Master Select */
#define DMA_CHNCTRL_DMS_1      ((uint64_t)0x000001000000U) /* Bit 1 */
#define DMA_CHNCTRL_DMS_0      ((uint64_t)0x000000800000U) /* Bit 0 */
#define DMA_CHNCTRL_TTFC       ((uint64_t)0x000000700000U) /* Transfer Type and Flow Control */
#define DMA_CHNCTRL_TTFC_2     ((uint64_t)0x000000400000U) /* Bit 2 */
#define DMA_CHNCTRL_TTFC_1     ((uint64_t)0x000000200000U) /* Bit 1 */
#define DMA_CHNCTRL_TTFC_0     ((uint64_t)0x000000100000U) /* Bit 0 */
#define DMA_CHNCTRL_DSTSCAEN   ((uint64_t)0x000000040000U) /* Destination scatter enable */
#define DMA_CHNCTRL_SRCGATEN   ((uint64_t)0x000000020000U) /* Source gather enable */
#define DMA_CHNCTRL_SRCMSIZE   ((uint64_t)0x00000001C000U) /* Source Burst Transaction Length */
#define DMA_CHNCTRL_SRCMSIZE_2 ((uint64_t)0x000000010000U) /* Bit 2 */
#define DMA_CHNCTRL_SRCMSIZE_1 ((uint64_t)0x000000008000U) /* Bit 1 */
#define DMA_CHNCTRL_SRCMSIZE_0 ((uint64_t)0x000000004000U) /* Bit 0 */
#define DMA_CHNCTRL_DSTMSIZE   ((uint64_t)0x000000003800U) /* Destination  Burst Transaction Length */
#define DMA_CHNCTRL_DSTMSIZE_2 ((uint64_t)0x000000002000U) /* Bit 2 */
#define DMA_CHNCTRL_DSTMSIZE_1 ((uint64_t)0x000000001000U) /* Bit 1 */
#define DMA_CHNCTRL_DSTMSIZE_0 ((uint64_t)0x000000000800U) /* Bit 0 */
#define DMA_CHNCTRL_SINC       ((uint64_t)0x000000000600U) /* Source Address Increment */
#define DMA_CHNCTRL_SINC_1     ((uint64_t)0x000000000400U) /* Bit 1 */
#define DMA_CHNCTRL_SINC_0     ((uint64_t)0x000000000200U) /* Bit 0 */
#define DMA_CHNCTRL_DINC       ((uint64_t)0x000000000180U) /* Destination Address Increment */
#define DMA_CHNCTRL_DINC_1     ((uint64_t)0x000000000100U) /* Bit 1 */
#define DMA_CHNCTRL_DINC_0     ((uint64_t)0x000000000080U) /* Bit 0 */
#define DMA_CHNCTRL_STW        ((uint64_t)0x000000000070U) /* Source Transfer Width */
#define DMA_CHNCTRL_STW_2      ((uint64_t)0x000000000040U) /* Bit 2 */
#define DMA_CHNCTRL_STW_1      ((uint64_t)0x000000000020U) /* Bit 1 */
#define DMA_CHNCTRL_STW_0      ((uint64_t)0x000000000010U) /* Bit 0 */
#define DMA_CHNCTRL_DTW        ((uint64_t)0x00000000000EU) /* Destination Transfer Width */
#define DMA_CHNCTRL_DTW_2      ((uint64_t)0x000000000008U) /* Bit 2 */
#define DMA_CHNCTRL_DTW_1      ((uint64_t)0x000000000004U) /* Bit 1 */
#define DMA_CHNCTRL_DTW_0      ((uint64_t)0x000000000002U) /* Bit 0 */
#define DMA_CHNCTRL_INTEN      ((uint64_t)0x000000000001U) /* Interrupt Enable Bit */

/** Bit definition for DMA_CHNCFG register **/
#define DMA_CHNCFG_DSTPER    ((uint64_t)0x380000000000U) /* Destination Peripheral hardware interface */
#define DMA_CHNCFG_DSTPER_2  ((uint64_t)0x200000000000U) /* Bit 2 */
#define DMA_CHNCFG_DSTPER_1  ((uint64_t)0x100000000000U) /* Bit 1 */
#define DMA_CHNCFG_DSTPER_0  ((uint64_t)0x080000000000U) /* Bit 0 */
#define DMA_CHNCFG_SRCPER    ((uint64_t)0x038000000000U) /* Source Peripheral hardware interface */
#define DMA_CHNCFG_SRCPER_2  ((uint64_t)0x020000000000U) /* Bit 2 */
#define DMA_CHNCFG_SRCPER_1  ((uint64_t)0x010000000000U) /* Bit 1 */
#define DMA_CHNCFG_SRCPER_0  ((uint64_t)0x008000000000U) /* Bit 0 */
#define DMA_CHNCFG_PROTCTL   ((uint64_t)0x001C00000000U) /* Protection Control */
#define DMA_CHNCFG_PROTCTL_2 ((uint64_t)0x001000000000U) /* Bit 2 */
#define DMA_CHNCFG_PROTCTL_1 ((uint64_t)0x000800000000U) /* Bit 1 */
#define DMA_CHNCFG_PROTCTL_0 ((uint64_t)0x000400000000U) /* Bit 0 */
#define DMA_CHNCFG_FIFOMS    ((uint64_t)0x000200000000U) /* FIFO Mode Select */
#define DMA_CHNCFG_FCM       ((uint64_t)0x000100000000U) /* Flow Control Mode */
#define DMA_CHNCFG_ADR       ((uint64_t)0x000080000000U) /* Automatic Destination Reload */
#define DMA_CHNCFG_ASR       ((uint64_t)0x000040000000U) /* Automatic Source Reload */
#define DMA_CHNCFG_MAMBABL   ((uint64_t)0x00003FF00000U) /* Maximum AMBA Burst Length */
#define DMA_CHNCFG_SRCHSPOL  ((uint64_t)0x000000080000U) /* Source Handshaking Interface Polarity */
#define DMA_CHNCFG_DSTHSPOL  ((uint64_t)0x000000040000U) /* Destination Handshaking Interface Polarity */
#define DMA_CHNCFG_LOCKB     ((uint64_t)0x000000020000U) /* Bus Lock Bit */
#define DMA_CHNCFG_LOCKCH    ((uint64_t)0x000000010000U) /* Channel Lock Bit */
#define DMA_CHNCFG_LOCKBL    ((uint64_t)0x00000000C000U) /* Bus lock level */
#define DMA_CHNCFG_LOCKBL_1  ((uint64_t)0x000000008000U) /* Bit 1 */
#define DMA_CHNCFG_LOCKBL_0  ((uint64_t)0x000000004000U) /* Bit 0 */
#define DMA_CHNCFG_LOCKCHL   ((uint64_t)0x000000003000U) /* Channel lock level */
#define DMA_CHNCFG_LOCKCHL_1 ((uint64_t)0x000000002000U) /* Bit 1 */
#define DMA_CHNCFG_LOCKCHL_0 ((uint64_t)0x000000001000U) /* Bit 0 */
#define DMA_CHNCFG_HSSELSRC  ((uint64_t)0x000000000800U) /* Source Software or Hardware Handshaking Select */
#define DMA_CHNCFG_HSSELDST  ((uint64_t)0x000000000400U) /* Destination Software or Hardware Handshaking Select */
#define DMA_CHNCFG_FIFOEMPTY ((uint64_t)0x000000000200U) /* Channel FIFO status */
#define DMA_CHNCFG_CHSUSP    ((uint64_t)0x000000000100U) /* Channel Suspend */
#define DMA_CHNCFG_CHPRIOR   ((uint64_t)0x0000000000E0U) /* Channel Priority */
#define DMA_CHNCFG_CHPRIOR_2 ((uint64_t)0x000000000080U) /* Bit 2 */
#define DMA_CHNCFG_CHPRIOR_1 ((uint64_t)0x000000000040U) /* Bit 1 */
#define DMA_CHNCFG_CHPRIOR_0 ((uint64_t)0x000000000020U) /* Bit 0 */

/** Bit definition for DMA_CHNSG register **/
#define DMA_CHNSG_SGC ((uint32_t)0x1FF00000U) /* Source Gather Count */
#define DMA_CHNSG_SGI ((uint32_t)0x000FFFFFU) /* Source Gather Interval */

/** Bit definition for DMA_CHNDS register **/
#define DMA_CHNDS_DSC ((uint32_t)0x1FF00000U) /* Destination Gather Count */
#define DMA_CHNDS_DSI ((uint32_t)0x000FFFFFU) /* Destination Gather Interval */

/** Bit definition for DMA_RAWTCINTSTS register **/
#define DMA_RAWTCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Raw Status for IntTfr Interrupt */
#define DMA_RAWTCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Raw Status for IntTfr Interrupt */

/** Bit definition for DMA_RAWBTCINTSTS register **/
#define DMA_RAWBTCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Raw Status for IntBlock Interrupt */
#define DMA_RAWBTCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Raw Status for IntBlock Interrupt */

/** Bit definition for DMA_RAWSTCINTSTS register **/
#define DMA_RAWSTCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Raw Status for IntSrcTran Interrupt */
#define DMA_RAWSTCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Raw Status for IntSrcTran Interrupt */

/** Bit definition for DMA_RAWDTCINTSTS register **/
#define DMA_RAWDTCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Raw Status for IntDstTran Interrupt */
#define DMA_RAWDTCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Raw Status for IntDstTran Interrupt */

/** Bit definition for DMA_RAWERRINTSTS register **/
#define DMA_RAWERRINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Raw Status for IntErr Interrupt */
#define DMA_RAWERRINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Raw Status for IntErr Interrupt */

/** Bit definition for DMA_TCINTSTS register **/
#define DMA_TCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Status for IntTfr Interrupt */
#define DMA_TCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Status for IntTfr Interrupt */

/** Bit definition for DMA_BTCINTSTS register **/
#define DMA_BTCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Status for IntBlock Interrupt */
#define DMA_BTCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Status for IntBlock Interrupt */

/** Bit definition for DMA_STCINTSTS register **/
#define DMA_STCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Status for IntSrcTran Interrupt */
#define DMA_STCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Status for IntSrcTran Interrupt */

/** Bit definition for DMA_DTCINTSTS register **/
#define DMA_DTCINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Status for IntDstTran Interrupt */
#define DMA_DTCINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Status for IntDstTran Interrupt */

/** Bit definition for DMA_ERRINTSTS register **/
#define DMA_ERRINTSTS_CH7 ((uint32_t)0x00000080U) /* Channel 7 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH6 ((uint32_t)0x00000040U) /* Channel 6 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH5 ((uint32_t)0x00000020U) /* Channel 5 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH4 ((uint32_t)0x00000010U) /* Channel 4 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH3 ((uint32_t)0x00000008U) /* Channel 3 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH2 ((uint32_t)0x00000004U) /* Channel 2 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH1 ((uint32_t)0x00000002U) /* Channel 1 Status for IntErr Interrupt */
#define DMA_ERRINTSTS_CH0 ((uint32_t)0x00000001U) /* Channel 0 Status for IntErr Interrupt */

/** Bit definition for DMA_TCINTMSK register **/
#define DMA_TCINTMSK_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Interrupt Mask Write Enable */
#define DMA_TCINTMSK_CH7    ((uint32_t)0x00000080U) /* Channel 7 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH6    ((uint32_t)0x00000040U) /* Channel 6 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH5    ((uint32_t)0x00000020U) /* Channel 5 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH4    ((uint32_t)0x00000010U) /* Channel 4 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH3    ((uint32_t)0x00000008U) /* Channel 3 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH2    ((uint32_t)0x00000004U) /* Channel 2 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH1    ((uint32_t)0x00000002U) /* Channel 1 IntTfr Interrupt Mask */
#define DMA_TCINTMSK_CH0    ((uint32_t)0x00000001U) /* Channel 0 IntTfr Interrupt Mask */

/** Bit definition for DMA_BTCINTMSK register **/
#define DMA_BTCINTMSK_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Interrupt Mask Write Enable */
#define DMA_BTCINTMSK_CH7    ((uint32_t)0x00000080U) /* Channel 7 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH6    ((uint32_t)0x00000040U) /* Channel 6 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH5    ((uint32_t)0x00000020U) /* Channel 5 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH4    ((uint32_t)0x00000010U) /* Channel 4 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH3    ((uint32_t)0x00000008U) /* Channel 3 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH2    ((uint32_t)0x00000004U) /* Channel 2 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH1    ((uint32_t)0x00000002U) /* Channel 1 IntBlock Interrupt Mask */
#define DMA_BTCINTMSK_CH0    ((uint32_t)0x00000001U) /* Channel 0 IntBlock Interrupt Mask */

/** Bit definition for DMA_STCINTMSK register **/
#define DMA_STCINTMSK_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Interrupt Mask Write Enable */
#define DMA_STCINTMSK_CH7    ((uint32_t)0x00000080U) /* Channel 7 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH6    ((uint32_t)0x00000040U) /* Channel 6 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH5    ((uint32_t)0x00000020U) /* Channel 5 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH4    ((uint32_t)0x00000010U) /* Channel 4 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH3    ((uint32_t)0x00000008U) /* Channel 3 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH2    ((uint32_t)0x00000004U) /* Channel 2 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH1    ((uint32_t)0x00000002U) /* Channel 1 IntSrcTran Interrupt Mask */
#define DMA_STCINTMSK_CH0    ((uint32_t)0x00000001U) /* Channel 0 IntSrcTran Interrupt Mask */

/** Bit definition for DMA_DTCINTMSK register **/
#define DMA_DTCINTMSK_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Interrupt Mask Write Enable */
#define DMA_DTCINTMSK_CH7    ((uint32_t)0x00000080U) /* Channel 7 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH6    ((uint32_t)0x00000040U) /* Channel 6 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH5    ((uint32_t)0x00000020U) /* Channel 5 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH4    ((uint32_t)0x00000010U) /* Channel 4 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH3    ((uint32_t)0x00000008U) /* Channel 3 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH2    ((uint32_t)0x00000004U) /* Channel 2 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH1    ((uint32_t)0x00000002U) /* Channel 1 IntDstTran Interrupt Mask */
#define DMA_DTCINTMSK_CH0    ((uint32_t)0x00000001U) /* Channel 0 IntDstTran Interrupt Mask */

/** Bit definition for DMA_ERRINTMSK register **/
#define DMA_ERRINTMSK_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Interrupt Mask Write Enable */
#define DMA_ERRINTMSK_CH7    ((uint32_t)0x00000080U) /* Channel 7 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH6    ((uint32_t)0x00000040U) /* Channel 6 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH5    ((uint32_t)0x00000020U) /* Channel 5 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH4    ((uint32_t)0x00000010U) /* Channel 4 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH3    ((uint32_t)0x00000008U) /* Channel 3 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH2    ((uint32_t)0x00000004U) /* Channel 2 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH1    ((uint32_t)0x00000002U) /* Channel 1 IntErr Interrupt Mask */
#define DMA_ERRINTMSK_CH0    ((uint32_t)0x00000001U) /* Channel 0 IntErr Interrupt Mask */

/** Bit definition for DMA_TCINTCLR register **/
#define DMA_TCINTCLR_CH7 ((uint32_t)0x00000080U) /* Channel 7 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH6 ((uint32_t)0x00000040U) /* Channel 6 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH5 ((uint32_t)0x00000020U) /* Channel 5 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH4 ((uint32_t)0x00000010U) /* Channel 4 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH3 ((uint32_t)0x00000008U) /* Channel 3 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH2 ((uint32_t)0x00000004U) /* Channel 2 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH1 ((uint32_t)0x00000002U) /* Channel 1 Clear for IntTfr Interrupt */
#define DMA_TCINTCLR_CH0 ((uint32_t)0x00000001U) /* Channel 0 Clear for IntTfr Interrupt */

/** Bit definition for DMA_BTCINTCLR register **/
#define DMA_BTCINTCLR_CH7 ((uint32_t)0x00000080U) /* Channel 7 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH6 ((uint32_t)0x00000040U) /* Channel 6 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH5 ((uint32_t)0x00000020U) /* Channel 5 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH4 ((uint32_t)0x00000010U) /* Channel 4 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH3 ((uint32_t)0x00000008U) /* Channel 3 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH2 ((uint32_t)0x00000004U) /* Channel 2 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH1 ((uint32_t)0x00000002U) /* Channel 1 Clear for IntBlock Interrupt */
#define DMA_BTCINTCLR_CH0 ((uint32_t)0x00000001U) /* Channel 0 Clear for IntBlock Interrupt */

/** Bit definition for DMA_STCINTCLR register **/
#define DMA_STCINTCLR_CH7 ((uint32_t)0x00000080U) /* Channel 7 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH6 ((uint32_t)0x00000040U) /* Channel 6 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH5 ((uint32_t)0x00000020U) /* Channel 5 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH4 ((uint32_t)0x00000010U) /* Channel 4 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH3 ((uint32_t)0x00000008U) /* Channel 3 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH2 ((uint32_t)0x00000004U) /* Channel 2 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH1 ((uint32_t)0x00000002U) /* Channel 1 Clear for IntSrcTran Interrupt */
#define DMA_STCINTCLR_CH0 ((uint32_t)0x00000001U) /* Channel 0 Clear for IntSrcTran Interrupt */

/** Bit definition for DMA_DTCINTCLR register **/
#define DMA_DTCINTCLR_CH7 ((uint32_t)0x00000080U) /* Channel 7 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH6 ((uint32_t)0x00000040U) /* Channel 6 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH5 ((uint32_t)0x00000020U) /* Channel 5 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH4 ((uint32_t)0x00000010U) /* Channel 4 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH3 ((uint32_t)0x00000008U) /* Channel 3 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH2 ((uint32_t)0x00000004U) /* Channel 2 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH1 ((uint32_t)0x00000002U) /* Channel 1 Clear for IntDstTran Interrupt */
#define DMA_DTCINTCLR_CH0 ((uint32_t)0x00000001U) /* Channel 0 Clear for IntDstTran Interrupt */

/** Bit definition for DMA_ERRINTCLR register **/
#define DMA_ERRINTCLR_CH7 ((uint32_t)0x00000080U) /* Channel 7 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH6 ((uint32_t)0x00000040U) /* Channel 6 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH5 ((uint32_t)0x00000020U) /* Channel 5 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH4 ((uint32_t)0x00000010U) /* Channel 4 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH3 ((uint32_t)0x00000008U) /* Channel 3 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH2 ((uint32_t)0x00000004U) /* Channel 2 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH1 ((uint32_t)0x00000002U) /* Channel 1 Clear for IntErr Interrupt */
#define DMA_ERRINTCLR_CH0 ((uint32_t)0x00000001U) /* Channel 0 Clear for IntErr Interrupt */

/** Bit definition for DMA_INTCBESTS register **/
#define DMA_INTCBESTS_ERR   ((uint32_t)0x00000010U) /* OR of the contents of DMA_ERRINTSTS register */
#define DMA_INTCBESTS_DSTT  ((uint32_t)0x00000008U) /* OR of the contents of DMA_DTCINTSTS register */
#define DMA_INTCBESTS_SRCT  ((uint32_t)0x00000004U) /* OR of the contents of DMA_STCINTSTS register */
#define DMA_INTCBESTS_BLOCK ((uint32_t)0x00000002U) /* OR of the contents of DMA_BTCINTSTS register */
#define DMA_INTCBESTS_TFR   ((uint32_t)0x00000001U) /* OR of the contents of DMA_TCINTSTS register */

/** Bit definition for DMA_SRCSWTREQ register **/
#define DMA_SRCSWTREQ_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Source Software Transaction Request write enable */
#define DMA_SRCSWTREQ_CH7    ((uint32_t)0x00000080U) /* Channel 7 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH6    ((uint32_t)0x00000040U) /* Channel 6 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH5    ((uint32_t)0x00000020U) /* Channel 5 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH4    ((uint32_t)0x00000010U) /* Channel 4 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH3    ((uint32_t)0x00000008U) /* Channel 3 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH2    ((uint32_t)0x00000004U) /* Channel 2 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH1    ((uint32_t)0x00000002U) /* Channel 1 Source Software Transaction Request */
#define DMA_SRCSWTREQ_CH0    ((uint32_t)0x00000001U) /* Channel 0 Source Software Transaction Request */

/** Bit definition for DMA_DSTSWTREQ register **/
#define DMA_DSTSWTREQ_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Destination Software Transaction Request write enable */
#define DMA_DSTSWTREQ_CH7    ((uint32_t)0x00000080U) /* Channel 7 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH6    ((uint32_t)0x00000040U) /* Channel 6 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH5    ((uint32_t)0x00000020U) /* Channel 5 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH4    ((uint32_t)0x00000010U) /* Channel 4 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH3    ((uint32_t)0x00000008U) /* Channel 3 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH2    ((uint32_t)0x00000004U) /* Channel 2 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH1    ((uint32_t)0x00000002U) /* Channel 1 Destination Software Transaction Request */
#define DMA_DSTSWTREQ_CH0    ((uint32_t)0x00000001U) /* Channel 0 Destination Software Transaction Request */

/** Bit definition for DMA_SRCSGTREQ register **/
#define DMA_SRCSGTREQ_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Source Single Transaction Request write enable */
#define DMA_SRCSGTREQ_CH7    ((uint32_t)0x00000080U) /* Channel 7 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH6    ((uint32_t)0x00000040U) /* Channel 6 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH5    ((uint32_t)0x00000020U) /* Channel 5 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH4    ((uint32_t)0x00000010U) /* Channel 4 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH3    ((uint32_t)0x00000008U) /* Channel 3 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH2    ((uint32_t)0x00000004U) /* Channel 2 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH1    ((uint32_t)0x00000002U) /* Channel 1 Source Single Transaction Request */
#define DMA_SRCSGTREQ_CH0    ((uint32_t)0x00000001U) /* Channel 0 Source Single Transaction Request */

/** Bit definition for DMA_DSTSGTREQ register **/
#define DMA_DSTSGTREQ_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Destination Single Transaction Request write enable */
#define DMA_DSTSGTREQ_CH7    ((uint32_t)0x00000080U) /* Channel 7 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH6    ((uint32_t)0x00000040U) /* Channel 6 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH5    ((uint32_t)0x00000020U) /* Channel 5 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH4    ((uint32_t)0x00000010U) /* Channel 4 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH3    ((uint32_t)0x00000008U) /* Channel 3 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH2    ((uint32_t)0x00000004U) /* Channel 2 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH1    ((uint32_t)0x00000002U) /* Channel 1 Destination Single Transaction Request */
#define DMA_DSTSGTREQ_CH0    ((uint32_t)0x00000001U) /* Channel 0 Destination Single Transaction Request */

/** Bit definition for DMA_SRCLTREQ register **/
#define DMA_SRCLTREQ_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Source Last Transaction Request write enable */
#define DMA_SRCLTREQ_CH7    ((uint32_t)0x00000080U) /* Channel 7 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH6    ((uint32_t)0x00000040U) /* Channel 6 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH5    ((uint32_t)0x00000020U) /* Channel 5 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH4    ((uint32_t)0x00000010U) /* Channel 4 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH3    ((uint32_t)0x00000008U) /* Channel 3 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH2    ((uint32_t)0x00000004U) /* Channel 2 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH1    ((uint32_t)0x00000002U) /* Channel 1 Source Last Transaction Request */
#define DMA_SRCLTREQ_CH0    ((uint32_t)0x00000001U) /* Channel 0 Source Last Transaction Request */

/** Bit definition for DMA_DSTLTREQ register **/
#define DMA_DSTLTREQ_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Destination Last Transaction Request write enable */
#define DMA_DSTLTREQ_CH7    ((uint32_t)0x00000080U) /* Channel 7 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH6    ((uint32_t)0x00000040U) /* Channel 6 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH5    ((uint32_t)0x00000020U) /* Channel 5 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH4    ((uint32_t)0x00000010U) /* Channel 4 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH3    ((uint32_t)0x00000008U) /* Channel 3 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH2    ((uint32_t)0x00000004U) /* Channel 2 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH1    ((uint32_t)0x00000002U) /* Channel 1 Destination Last Transaction Request */
#define DMA_DSTLTREQ_CH0    ((uint32_t)0x00000001U) /* Channel 0 Destination Last Transaction Request */

/** Bit definition for DMA_CFG ENister **/
#define DMA_CFG_EN ((uint32_t)0x00000001U) /* DMA Enable bit */

/** Bit definition for DMA_CHEN register **/
#define DMA_CHEN_CH7WEN ((uint32_t)0x00008000U) /* Channel 7 Enable bit write enable */
#define DMA_CHEN_CH6WEN ((uint32_t)0x00004000U) /* Channel 6 Enable bit write enable */
#define DMA_CHEN_CH5WEN ((uint32_t)0x00002000U) /* Channel 5 Enable bit write enable */
#define DMA_CHEN_CH4WEN ((uint32_t)0x00001000U) /* Channel 4 Enable bit write enable */
#define DMA_CHEN_CH3WEN ((uint32_t)0x00000800U) /* Channel 3 Enable bit write enable */
#define DMA_CHEN_CH2WEN ((uint32_t)0x00000400U) /* Channel 2 Enable bit write enable */
#define DMA_CHEN_CH1WEN ((uint32_t)0x00000200U) /* Channel 1 Enable bit write enable */
#define DMA_CHEN_CH0WEN ((uint32_t)0x00000100U) /* Channel 0 Enable bit write enable */
#define DMA_CHEN_CH7    ((uint32_t)0x00000080U) /* Channel 7 Enable bit */
#define DMA_CHEN_CH6    ((uint32_t)0x00000040U) /* Channel 6 Enable bit */
#define DMA_CHEN_CH5    ((uint32_t)0x00000020U) /* Channel 5 Enable bit */
#define DMA_CHEN_CH4    ((uint32_t)0x00000010U) /* Channel 4 Enable bit */
#define DMA_CHEN_CH3    ((uint32_t)0x00000008U) /* Channel 3 Enable bit */
#define DMA_CHEN_CH2    ((uint32_t)0x00000004U) /* Channel 2 Enable bit */
#define DMA_CHEN_CH1    ((uint32_t)0x00000002U) /* Channel 1 Enable bit */
#define DMA_CHEN_CH0    ((uint32_t)0x00000001U) /* Channel 0 Enable bit */

/** Bit definition for DMA_ID ENister **/
#define DMA_ID_VALUE ((uint32_t)0xFFFFFFFFU) /* Hardcoded DMA peripheral ID */

/** Bit definition for DMA_LPTIMEOUT ENister **/
#define DMA_LPTIMEOUT_VALUE ((uint32_t)0xFFFFFFFFU) /* Timeout value of low power counter register */



/*** DMA AXI Bus Controller (MDMA) ***/

/** Bit definition for MDMA_ID register **/
#define MDMA_ID_NBR ((uint32_t)0xFFFFFFFFU) /* MDMA Component ID Number */

/** Bit definition for MDMA_VERSION register **/
#define MDMA_VERSION_NBR ((uint32_t)0xFFFFFFFFU) /* MDMA Component Version Number */

/** Bit definition for MDMA_CFG register **/
#define MDMA_CFG_GLBINTEN ((uint32_t)0x00000002U) /* Global interrupt generation enable bit */
#define MDMA_CFG_EN       ((uint32_t)0x00000001U) /* MDMA enable bit */

/** Bit definition for MDMA_CHEN register **/
#define MDMA_CHEN_CH15WEN ((uint32_t)0x80000000U) /* Channel 15 Enable bit write enable   */
#define MDMA_CHEN_CH14WEN ((uint32_t)0x40000000U) /* Channel 14 Enable bit write enable */
#define MDMA_CHEN_CH13WEN ((uint32_t)0x20000000U) /* Channel 13 Enable bit write enable */
#define MDMA_CHEN_CH12WEN ((uint32_t)0x10000000U) /* Channel 12 Enable bit write enable */
#define MDMA_CHEN_CH11WEN ((uint32_t)0x08000000U) /* Channel 11 Enable bit write enable */
#define MDMA_CHEN_CH10WEN ((uint32_t)0x04000000U) /* Channel 10 Enable bit write enable */
#define MDMA_CHEN_CH9WEN  ((uint32_t)0x02000000U) /* Channel 9 Enable bit write enable */
#define MDMA_CHEN_CH8WEN  ((uint32_t)0x01000000U) /* Channel 8 Enable bit write enable */
#define MDMA_CHEN_CH7WEN  ((uint32_t)0x00800000U) /* Channel 7 Enable bit write enable */
#define MDMA_CHEN_CH6WEN  ((uint32_t)0x00400000U) /* Channel 6 Enable bit write enable */
#define MDMA_CHEN_CH5WEN  ((uint32_t)0x00200000U) /* Channel 5 Enable bit write enable */
#define MDMA_CHEN_CH4WEN  ((uint32_t)0x00100000U) /* Channel 4 Enable bit write enable */
#define MDMA_CHEN_CH3WEN  ((uint32_t)0x00080000U) /* Channel 3 Enable bit write enable */
#define MDMA_CHEN_CH2WEN  ((uint32_t)0x00040000U) /* Channel 2 Enable bit write enable */
#define MDMA_CHEN_CH1WEN  ((uint32_t)0x00020000U) /* Channel 1 Enable bit write enable */
#define MDMA_CHEN_CH0WEN  ((uint32_t)0x00010000U) /* Channel 0 Enable bit write enable */
#define MDMA_CHEN_CH15    ((uint32_t)0x00008000U) /* Channel 15 Enable bit */
#define MDMA_CHEN_CH14    ((uint32_t)0x00004000U) /* Channel 14 Enable bit */
#define MDMA_CHEN_CH13    ((uint32_t)0x00002000U) /* Channel 13 Enable bit */
#define MDMA_CHEN_CH12    ((uint32_t)0x00001000U) /* Channel 12 Enable bit */
#define MDMA_CHEN_CH11    ((uint32_t)0x00000800U) /* Channel 11 Enable bit */
#define MDMA_CHEN_CH10    ((uint32_t)0x00000400U) /* Channel 10 Enable bit */
#define MDMA_CHEN_CH9     ((uint32_t)0x00000200U) /* Channel 9 Enable bit */
#define MDMA_CHEN_CH8     ((uint32_t)0x00000100U) /* Channel 8 Enable bit */
#define MDMA_CHEN_CH7     ((uint32_t)0x00000080U) /* Channel 7 Enable bit */
#define MDMA_CHEN_CH6     ((uint32_t)0x00000040U) /* Channel 6 Enable bit */
#define MDMA_CHEN_CH5     ((uint32_t)0x00000020U) /* Channel 5 Enable bit */
#define MDMA_CHEN_CH4     ((uint32_t)0x00000010U) /* Channel 4 Enable bit */
#define MDMA_CHEN_CH3     ((uint32_t)0x00000008U) /* Channel 3 Enable bit */
#define MDMA_CHEN_CH2     ((uint32_t)0x00000004U) /* Channel 2 Enable bit */
#define MDMA_CHEN_CH1     ((uint32_t)0x00000002U) /* Channel 1 Enable bit */
#define MDMA_CHEN_CH0     ((uint32_t)0x00000001U) /* Channel 0 Enable bit */

/** Bit definition for MDMA_CHSUSP register **/
#define MDMA_CHSUSP_CH15WEN ((uint32_t)0x80000000U) /* Channel 15 Suspend Request bit write enable   */
#define MDMA_CHSUSP_CH14WEN ((uint32_t)0x40000000U) /* Channel 14 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH13WEN ((uint32_t)0x20000000U) /* Channel 13 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH12WEN ((uint32_t)0x10000000U) /* Channel 12 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH11WEN ((uint32_t)0x08000000U) /* Channel 11 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH10WEN ((uint32_t)0x04000000U) /* Channel 10 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH9WEN  ((uint32_t)0x02000000U) /* Channel 9 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH8WEN  ((uint32_t)0x01000000U) /* Channel 8 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH7WEN  ((uint32_t)0x00800000U) /* Channel 7 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH6WEN  ((uint32_t)0x00400000U) /* Channel 6 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH5WEN  ((uint32_t)0x00200000U) /* Channel 5 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH4WEN  ((uint32_t)0x00100000U) /* Channel 4 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH3WEN  ((uint32_t)0x00080000U) /* Channel 3 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH2WEN  ((uint32_t)0x00040000U) /* Channel 2 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH1WEN  ((uint32_t)0x00020000U) /* Channel 1 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH0WEN  ((uint32_t)0x00010000U) /* Channel 0 Suspend Request bit write enable */
#define MDMA_CHSUSP_CH15    ((uint32_t)0x00008000U) /* Channel 15 Suspend Request bit */
#define MDMA_CHSUSP_CH14    ((uint32_t)0x00004000U) /* Channel 14 Suspend Request bit */
#define MDMA_CHSUSP_CH13    ((uint32_t)0x00002000U) /* Channel 13 Suspend Request bit */
#define MDMA_CHSUSP_CH12    ((uint32_t)0x00001000U) /* Channel 12 Suspend Request bit */
#define MDMA_CHSUSP_CH11    ((uint32_t)0x00000800U) /* Channel 11 Suspend Request bit */
#define MDMA_CHSUSP_CH10    ((uint32_t)0x00000400U) /* Channel 10 Suspend Request bit */
#define MDMA_CHSUSP_CH9     ((uint32_t)0x00000200U) /* Channel 9 Suspend Request bit */
#define MDMA_CHSUSP_CH8     ((uint32_t)0x00000100U) /* Channel 8 Suspend Request bit */
#define MDMA_CHSUSP_CH7     ((uint32_t)0x00000080U) /* Channel 7 Suspend Request bit */
#define MDMA_CHSUSP_CH6     ((uint32_t)0x00000040U) /* Channel 6 Suspend Request bit */
#define MDMA_CHSUSP_CH5     ((uint32_t)0x00000020U) /* Channel 5 Suspend Request bit */
#define MDMA_CHSUSP_CH4     ((uint32_t)0x00000010U) /* Channel 4 Suspend Request bit */
#define MDMA_CHSUSP_CH3     ((uint32_t)0x00000008U) /* Channel 3 Suspend Request bit */
#define MDMA_CHSUSP_CH2     ((uint32_t)0x00000004U) /* Channel 2 Suspend Request bit */
#define MDMA_CHSUSP_CH1     ((uint32_t)0x00000002U) /* Channel 1 Suspend Request bit */
#define MDMA_CHSUSP_CH0     ((uint32_t)0x00000001U) /* Channel 0 Suspend Request bit */

/** Bit definition for MDMA_INTSTS register **/
#define MDMA_INTSTS_COMREG ((uint64_t)0x100000000UL) /* Common register interrupt status bit */
#define MDMA_INTSTS_CH15   ((uint64_t)0x000008000UL) /* Channel 15 interrupt status bit */
#define MDMA_INTSTS_CH14   ((uint64_t)0x000004000UL) /* Channel 14 interrupt status bit */
#define MDMA_INTSTS_CH13   ((uint64_t)0x000002000UL) /* Channel 13 interrupt status bit */
#define MDMA_INTSTS_CH12   ((uint64_t)0x000001000UL) /* Channel 12 interrupt status bit */
#define MDMA_INTSTS_CH11   ((uint64_t)0x000000800UL) /* Channel 11 interrupt status bit */
#define MDMA_INTSTS_CH10   ((uint64_t)0x000000400UL) /* Channel 10 interrupt status bit */
#define MDMA_INTSTS_CH9    ((uint64_t)0x000000200UL) /* Channel 9 interrupt status bit */
#define MDMA_INTSTS_CH8    ((uint64_t)0x000000100UL) /* Channel 8 interrupt status bit */
#define MDMA_INTSTS_CH7    ((uint64_t)0x000000080UL) /* Channel 7 interrupt status bit */
#define MDMA_INTSTS_CH6    ((uint64_t)0x000000040UL) /* Channel 6 interrupt status bit */
#define MDMA_INTSTS_CH5    ((uint64_t)0x000000020UL) /* Channel 5 interrupt status bit */
#define MDMA_INTSTS_CH4    ((uint64_t)0x000000010UL) /* Channel 4 interrupt status bit */
#define MDMA_INTSTS_CH3    ((uint64_t)0x000000008UL) /* Channel 3 interrupt status bit */
#define MDMA_INTSTS_CH2    ((uint64_t)0x000000004UL) /* Channel 2 interrupt status bit */
#define MDMA_INTSTS_CH1    ((uint64_t)0x000000002UL) /* Channel 1 interrupt status bit */
#define MDMA_INTSTS_CH0    ((uint64_t)0x000000001UL) /* Channel 0 interrupt status bit */

/** Bit definition for MDMA_CRINTCLR register **/
#define MDMA_CRINTCLR_SIURDEIC    ((uint32_t)0x00000100U) /* Slave Interface Undefined Register Decode Error Interrupt Clear bit */
#define MDMA_CRINTCLR_SICRWOHEIC  ((uint32_t)0x00000008U) /* Slave Interface Common Register Write On Hold Error Interrupt Clear bit */
#define MDMA_CRINTCLR_SICRR2WOEIC ((uint32_t)0x00000004U) /* Slave Interface Common Register Read to Write Only Error Interrupt Clear bit */
#define MDMA_CRINTCLR_SICRW2ROEIC ((uint32_t)0x00000002U) /* Slave Interface Common Register Write to Read Only Error Interrupt Clear bit */
#define MDMA_CRINTCLR_SICRDEIC    ((uint32_t)0x00000001U) /* Slave Interface Common Register Decode Error Interrupt Clear bit */

/** Bit definition for MDMA_CRINTSTSEN register **/
#define MDMA_CRINTSTSEN_SIURDEIS    ((uint32_t)0x00000100U) /* Slave Interface Undefined Register Decode Error Interrupt Status bit */
#define MDMA_CRINTSTSEN_SICRWOHEIS  ((uint32_t)0x00000008U) /* Slave Interface Common Register Write On Hold Error Interrupt Status bit */
#define MDMA_CRINTSTSEN_SICRR2WOEIS ((uint32_t)0x00000004U) /* Slave Interface Common Register Read to Write Only Error Interrupt Status bit */
#define MDMA_CRINTSTSEN_SICRW2ROEIS ((uint32_t)0x00000002U) /* Slave Interface Common Register Write to Read Only Error Interrupt Status bit */
#define MDMA_CRINTSTSEN_SICRDEIS    ((uint32_t)0x00000001U) /* Slave Interface Common Register Decode Error Interrupt Status bit */

/** Bit definition for MDMA_CRINTSGLEN register **/
#define MDMA_CRINTSGLEN_SIURDEIS    ((uint32_t)0x00000100U) /* Slave Interface Undefined Register Decode Error Interrupt Status bit */
#define MDMA_CRINTSGLEN_SICRWOHEIS  ((uint32_t)0x00000008U) /* Slave Interface Common Register Write On Hold Error Interrupt Status bit */
#define MDMA_CRINTSGLEN_SICRR2WOEIS ((uint32_t)0x00000004U) /* Slave Interface Common Register Read to Write Only Error Interrupt Status bit */
#define MDMA_CRINTSGLEN_SICRW2ROEIS ((uint32_t)0x00000002U) /* Slave Interface Common Register Write to Read Only Error Interrupt Status bit */
#define MDMA_CRINTSGLEN_SICRDEIS    ((uint32_t)0x00000001U) /* Slave Interface Common Register Decode Error Interrupt Status bit */

/** Bit definition for MDMA_CRINTSTS register **/
#define MDMA_CRINTSTS_SIURDEIS    ((uint32_t)0x00000100U) /* Slave Interface Undefined Register Decode Error Interrupt Status bit */
#define MDMA_CRINTSTS_SICRWOHEIS  ((uint32_t)0x00000008U) /* Slave Interface Common Register Write On Hold Error Interrupt Status bit */
#define MDMA_CRINTSTS_SICRR2WOEIS ((uint32_t)0x00000004U) /* Slave Interface Common Register Read to Write Only Error Interrupt Status bit */
#define MDMA_CRINTSTS_SICRW2ROEIS ((uint32_t)0x00000002U) /* Slave Interface Common Register Write to Read Only Error Interrupt Status bit */
#define MDMA_CRINTSTS_SICRDEIS    ((uint32_t)0x00000001U) /* Slave Interface Common Register Decode Error Interrupt Status bit */

/** Bit definition for MDMA_SWRST register **/
#define MDMA_SWRST_RSTREQ ((uint32_t)0x00000001U) /* MDMA Reset Request bit */

/** Bit definition for MDMA_LPCFG register **/
#define MDMA_LPCFG_MXIFLPDLY  ((uint64_t)0xFF000000000000UL) /* Bit55:48 */
#define MDMA_LPCFG_SBIULPDLY  ((uint64_t)0x00FF0000000000UL) /* Bit47:40 */
#define MDMA_LPCFG_GLCHLPDLY  ((uint64_t)0x0000FF00000000UL) /* Bit39:32 */
#define MDMA_LPCFG_MXIFCSLPEN ((uint64_t)0x00000000000008UL) /* AXI Master Interface Context Sensitive Low Power feature enable */
#define MDMA_LPCFG_SBIUCSLPEN ((uint64_t)0x00000000000004UL) /* SBIU Context Sensitive Low Power feature enable */
#define MDMA_LPCFG_CHCSLPEN   ((uint64_t)0x00000000000002UL) /* MDMA Channel Context Sensitive Low Power feature enable */
#define MDMA_LPCFG_GBLCSLPEN  ((uint64_t)0x00000000000001UL) /* Global Context Sensitive Low Power feature enable */

/** Bit definition for MDMA_CHNSA register **/
#define MDMA_CHNSA_ADDR ((uint64_t)0xFFFFFFFFFFFFFFFFUL) /* Current Source Address of MDMA transfer */

/** Bit definition for MDMA_CHNDA register **/
#define MDMA_CHNDA_ADDR ((uint64_t)0xFFFFFFFFFFFFFFFFUL) /* Current Destination Address of MDMA transfer */

/** Bit definition for MDMA_CHNBTS register **/
#define MDMA_CHNBTS_NUM ((uint32_t)0x003FFFFFU) /* Block Transfer Size */

/** Bit definition for MDMA_CHNCTRL register **/
#define MDMA_CHNCTRL_SRLLI      ((uint64_t)0x8000000000000000UL) /* Linked List Item (LLI) valid */
#define MDMA_CHNCTRL_LSRLLI     ((uint64_t)0x4000000000000000UL) /* Linked List Item (LLI) */
#define MDMA_CHNCTRL_BTIOC      ((uint64_t)0x0400000000000000UL) /* Interrupt On Completion of Block Transfer */
#define MDMA_CHNCTRL_DBL        ((uint64_t)0x00FF000000000000UL) /* Destination Burst Length */
#define MDMA_CHNCTRL_DBLEN      ((uint64_t)0x0000800000000000UL) /* Destination Burst Length Enable */
#define MDMA_CHNCTRL_SBL        ((uint64_t)0x00007F8000000000UL) /* Source Burst Length */
#define MDMA_CHNCTRL_SBLEN      ((uint64_t)0x0000004000000000UL) /* Source Burst Length Enable */
#define MDMA_CHNCTRL_NPLWEN     ((uint64_t)0x0000000040000000UL) /* Non Posted Last Write Enable */
#define MDMA_CHNCTRL_DSTMSIZE   ((uint64_t)0x00000000003C0000UL) /* Destination Burst Transaction Length */
#define MDMA_CHNCTRL_DSTMSIZE_0 ((uint64_t)0x0000000000040000UL) /* Bit18 */
#define MDMA_CHNCTRL_DSTMSIZE_1 ((uint64_t)0x0000000000080000UL) /* Bit19 */
#define MDMA_CHNCTRL_DSTMSIZE_2 ((uint64_t)0x0000000000100000UL) /* Bit20 */
#define MDMA_CHNCTRL_DSTMSIZE_3 ((uint64_t)0x0000000000200000UL) /* Bit21 */
#define MDMA_CHNCTRL_SRCMSIZE   ((uint64_t)0x000000000003C000UL) /* Source Burst Transaction Length */
#define MDMA_CHNCTRL_SRCMSIZE_0 ((uint64_t)0x0000000000004000UL) /* Bit14 */
#define MDMA_CHNCTRL_SRCMSIZE_1 ((uint64_t)0x0000000000008000UL) /* Bit15 */
#define MDMA_CHNCTRL_SRCMSIZE_2 ((uint64_t)0x0000000000010000UL) /* Bit16 */
#define MDMA_CHNCTRL_SRCMSIZE_3 ((uint64_t)0x0000000000020000UL) /* Bit17 */
#define MDMA_CHNCTRL_DTW        ((uint64_t)0x0000000000003800UL) /* Destination Transfer Width */
#define MDMA_CHNCTRL_DTW_0      ((uint64_t)0x0000000000000800UL) /* Bit11 */
#define MDMA_CHNCTRL_DTW_1      ((uint64_t)0x0000000000001000UL) /* Bit12 */
#define MDMA_CHNCTRL_DTW_2      ((uint64_t)0x0000000000002000UL) /* Bit13 */
#define MDMA_CHNCTRL_STW        ((uint64_t)0x0000000000000700UL) /* Source Transfer Width */
#define MDMA_CHNCTRL_STW_0      ((uint64_t)0x0000000000000100UL) /* Bit8 */
#define MDMA_CHNCTRL_STW_1      ((uint64_t)0x0000000000000200UL) /* Bit9 */
#define MDMA_CHNCTRL_STW_2      ((uint64_t)0x0000000000000400UL) /* Bit10 */
#define MDMA_CHNCTRL_DINC       ((uint64_t)0x0000000000000040UL) /* Destination Address Increment */
#define MDMA_CHNCTRL_SINC       ((uint64_t)0x0000000000000010UL) /* Source Address Increment */
#define MDMA_CHNCTRL_DMS        ((uint64_t)0x0000000000000004UL) /* Destination Master Select */
#define MDMA_CHNCTRL_SMS        ((uint64_t)0x0000000000000001UL) /* Source Master Select */

/** Bit definition for MDMA_CHNCFG register **/
#define MDMA_CHNCFG_DSTOSRLMT   ((uint64_t)0x7800000000000000UL) /* Destination Outstanding Request Limit */
#define MDMA_CHNCFG_DSTOSRLMT_0 ((uint64_t)0x0000000000000000UL) /* Bit59*/
#define MDMA_CHNCFG_DSTOSRLMT_1 ((uint64_t)0x0000000000000000UL) /* Bit60*/
#define MDMA_CHNCFG_DSTOSRLMT_2 ((uint64_t)0x0000000000000000UL) /* Bit61*/
#define MDMA_CHNCFG_DSTOSRLMT_3 ((uint64_t)0x0000000000000000UL) /* Bit62*/
#define MDMA_CHNCFG_SRCOSRLMT   ((uint64_t)0x0780000000000000UL) /* Source Outstanding Request Limit */
#define MDMA_CHNCFG_SRCOSRLMT_0 ((uint64_t)0x0000000000000000UL) /* Bit55*/
#define MDMA_CHNCFG_SRCOSRLMT_1 ((uint64_t)0x0000000000000000UL) /* Bit56*/
#define MDMA_CHNCFG_SRCOSRLMT_2 ((uint64_t)0x0000000000000000UL) /* Bit57*/
#define MDMA_CHNCFG_SRCOSRLMT_3 ((uint64_t)0x0000000000000000UL) /* Bit58*/
#define MDMA_CHNCFG_CHPRIOR     ((uint64_t)0x000F800000000000UL) /* Channel Priority */
#define MDMA_CHNCFG_DSTHHIPOL   ((uint64_t)0x0000004000000000UL) /* Destination Hardware Handshaking Interface Polarity */
#define MDMA_CHNCFG_SRCHHIPOL   ((uint64_t)0x0000002000000000UL) /* Source Hardware Handshaking Interface Polarity */
#define MDMA_CHNCFG_HSSELDST    ((uint64_t)0x0000001000000000UL) /* Destination Software or Hardware Handshaking Select */
#define MDMA_CHNCFG_HSSELSRC    ((uint64_t)0x0000000800000000UL) /* Source Software or Hardware Handshaking Select */
#define MDMA_CHNCFG_TTFC        ((uint64_t)0x0000000700000000UL) /* Transfer Type and Flow Control */
#define MDMA_CHNCFG_TTFC_0      ((uint64_t)0x0000000100000000UL) /* Bit32*/
#define MDMA_CHNCFG_TTFC_1      ((uint64_t)0x0000000200000000UL) /* Bit33*/
#define MDMA_CHNCFG_TTFC_2      ((uint64_t)0x0000000400000000UL) /* Bit34*/
#define MDMA_CHNCFG_WRUID       ((uint64_t)0x000000001E000000UL) /* Defines the number of AXI Unique ID's supported for the AXI Write Channel */
#define MDMA_CHNCFG_RDUID       ((uint64_t)0x00000000003C0000UL) /* Defines the number of AXI Unique ID's supported for the AXI Read Channel */
#define MDMA_CHNCFG_DSTPER      ((uint64_t)0x0000000000007800UL) /* Bit14:11 */
#define MDMA_CHNCFG_SRCPER      ((uint64_t)0x00000000000000F0UL) /* Bit7:4 */
#define MDMA_CHNCFG_DMBTT       ((uint64_t)0x000000000000000CUL) /* Destination Multi Block Transfer Type */
#define MDMA_CHNCFG_DMBTT_0     ((uint64_t)0x0000000000000004UL) /* Bit2*/
#define MDMA_CHNCFG_DMBTT_1     ((uint64_t)0x0000000000000008UL) /* Bit3*/
#define MDMA_CHNCFG_SMBTT       ((uint64_t)0x0000000000000003UL) /* Source Multi Block Transfer Type */
#define MDMA_CHNCFG_SMBTT_0     ((uint64_t)0x0000000000000001UL) /* Bit0*/
#define MDMA_CHNCFG_SMBTT_1     ((uint64_t)0x0000000000000002UL) /* Bit1*/

/** Bit definition for MDMA_CHNLLP register **/
#define MDMA_CHNLLP_ADDR ((uint64_t)0xFFFFFFFFFFFFFFC0UL) /* Starting Address Memory of LLI block */
#define MDMA_CHNLLP_LMS  ((uint64_t)0x0000000000000001UL) /* LLI master Select */

/** Bit definition for MDMA_CHNSTS register **/
#define MDMA_CHNSTS_LEFTDATA ((uint64_t)0x7FFF00000000UL) /* Data Left in FIFO */
#define MDMA_CHNSTS_CBTSIZE  ((uint64_t)0x0000003FFFFFUL) /* Completed Block Transfer Size */

/** Bit definition for MDMA_CHNSHSRC register **/
#define MDMA_CHNSHSRC_SHLRWE ((uint32_t)0x00000020U) /* Write Enable bit for Software Handshake Last Request for Channel Source */
#define MDMA_CHNSHSRC_SHLR   ((uint32_t)0x00000010U) /* Software Handshake Last Request for Channel Source */
#define MDMA_CHNSHSRC_SHSRWE ((uint32_t)0x00000008U) /* Write Enable bit for Software Handshake Single Request for Channel Source */
#define MDMA_CHNSHSRC_SHSR   ((uint32_t)0x00000004U) /* Software Handshake Single Request for Channel Source */
#define MDMA_CHNSHSRC_SHRWE  ((uint32_t)0x00000002U) /* Write Enable bit for Software Handshake Request for Channel Source */
#define MDMA_CHNSHSRC_SHR    ((uint32_t)0x00000001U) /* Software Handshake Request for Channel Source */

/** Bit definition for MDMA_CHNSHDST register **/
#define MDMA_CHNSHDST_SHLRWE ((uint32_t)0x00000020U) /* Write Enable bit for Software Handshake Last Request for Channel Destination */
#define MDMA_CHNSHDST_SHLR   ((uint32_t)0x00000010U) /* Software Handshake Last Request for Channel Destination */
#define MDMA_CHNSHDST_SHSRWE ((uint32_t)0x00000008U) /* Write Enable bit for Software Handshake Single Request for Channel Destination */
#define MDMA_CHNSHDST_SHSR   ((uint32_t)0x00000004U) /* Software Handshake Single Request for Channel Destination */
#define MDMA_CHNSHDST_SHRWE  ((uint32_t)0x00000002U) /* Write Enable bit for Software Handshake Request for Channel Destination */
#define MDMA_CHNSHDST_SHR    ((uint32_t)0x00000001U) /* Software Handshake Request for Channel Destination */

/** Bit definition for MDMA_CHNBTRR register **/
#define MDMA_CHNBTRR_RESREQ ((uint32_t)0x00000001U) /* Block Transfer Resume Request during Linked-List-based multi-block transfer */

/** Bit definition for MDMA_CHNAXIQOS register **/
#define MDMA_CHNAXIQOS_ARQOS ((uint32_t)0x000000F0U) /* AXI ARQOS */
#define MDMA_CHNAXIQOS_AWQOS ((uint32_t)0x0000000FU) /* AXI AWQOS */

/** Bit definition for MDMA_CHNINTSTSEN register **/
#define MDMA_CHNINTSTSEN_CHA     ((uint32_t)0x80000000U) /* Channel Aborted */
#define MDMA_CHNINTSTSEN_CHD     ((uint32_t)0x40000000U) /* Channel Disabled */
#define MDMA_CHNINTSTSEN_CHS     ((uint32_t)0x20000000U) /* Channel Suspended */
#define MDMA_CHNINTSTSEN_CHSS    ((uint32_t)0x10000000U) /* Channel Source Suspended */
#define MDMA_CHNINTSTSEN_CHLC    ((uint32_t)0x08000000U) /* Channel Lock Cleared */
#define MDMA_CHNINTSTSEN_SIWOHE  ((uint32_t)0x00200000U) /* Slave Interface Write On Hold Error */
#define MDMA_CHNINTSTSEN_SIWOCEE ((uint32_t)0x00080000U) /* Slave Interface Write On Channel Enabled Error */
#define MDMA_CHNINTSTSEN_SIRTWOE ((uint32_t)0x00040000U) /* Slave Interface Read to Write Only Error */
#define MDMA_CHNINTSTSEN_SIWTROE ((uint32_t)0x00020000U) /* Slave Interface Write to Read Only Error */
#define MDMA_CHNINTSTSEN_SIDE    ((uint32_t)0x00010000U) /* Slave Interface Decode Error */
#define MDMA_CHNINTSTSEN_SIMBTE  ((uint32_t)0x00004000U) /* Slave Interface Multi Block Type Error */
#define MDMA_CHNINTSTSEN_SLIE    ((uint32_t)0x00002000U) /* LLI Invalid Error */
#define MDMA_CHNINTSTSEN_LWSE    ((uint32_t)0x00001000U) /* LLI Write Slave Error */
#define MDMA_CHNINTSTSEN_LRSE    ((uint32_t)0x00000800U) /* LLI Read Slave Error */
#define MDMA_CHNINTSTSEN_LWDE    ((uint32_t)0x00000400U) /* LLI Write Decode Error */
#define MDMA_CHNINTSTSEN_LRDE    ((uint32_t)0x00000200U) /* LLI Read Decode Error */
#define MDMA_CHNINTSTSEN_DSTSE   ((uint32_t)0x00000100U) /* Destination Slave Error */
#define MDMA_CHNINTSTSEN_SRCSE   ((uint32_t)0x00000080U) /* Source Slave Error */
#define MDMA_CHNINTSTSEN_DSTDE   ((uint32_t)0x00000040U) /* Destination Decode Error */
#define MDMA_CHNINTSTSEN_SRCDE   ((uint32_t)0x00000020U) /* Source Decode Error */
#define MDMA_CHNINTSTSEN_DSTTC   ((uint32_t)0x00000010U) /* Destination Transaction Completed */
#define MDMA_CHNINTSTSEN_SRCTC   ((uint32_t)0x00000008U) /* Source Transaction Completed */
#define MDMA_CHNINTSTSEN_DMATD   ((uint32_t)0x00000002U) /* DMA Transfer Done */
#define MDMA_CHNINTSTSEN_BLKTD   ((uint32_t)0x00000001U) /* Block Transfer Done */

/** Bit definition for MDMA_CHNINTSTS register **/
#define MDMA_CHNINTSTS_CHA     ((uint32_t)0x80000000U) /* Channel Aborted */
#define MDMA_CHNINTSTS_CHD     ((uint32_t)0x40000000U) /* Channel Disabled */
#define MDMA_CHNINTSTS_CHS     ((uint32_t)0x20000000U) /* Channel Suspended */
#define MDMA_CHNINTSTS_CHSS    ((uint32_t)0x10000000U) /* Channel Source Suspended */
#define MDMA_CHNINTSTS_CHLC    ((uint32_t)0x08000000U) /* Channel Lock Cleared */
#define MDMA_CHNINTSTS_SIWOHE  ((uint32_t)0x00200000U) /* Slave Interface Write On Hold Error */
#define MDMA_CHNINTSTS_SIWOCEE ((uint32_t)0x00080000U) /* Slave Interface Write On Channel Enabled Error */
#define MDMA_CHNINTSTS_SIRTWOE ((uint32_t)0x00040000U) /* Slave Interface Read to Write Only Error */
#define MDMA_CHNINTSTS_SIWTROE ((uint32_t)0x00020000U) /* Slave Interface Write to Read Only Error */
#define MDMA_CHNINTSTS_SIDE    ((uint32_t)0x00010000U) /* Slave Interface Decode Error */
#define MDMA_CHNINTSTS_SIMBTE  ((uint32_t)0x00004000U) /* Slave Interface Multi Block Type Error */
#define MDMA_CHNINTSTS_SLIE    ((uint32_t)0x00002000U) /* LLI Invalid Error */
#define MDMA_CHNINTSTS_LWSE    ((uint32_t)0x00001000U) /* LLI Write Slave Error */
#define MDMA_CHNINTSTS_LRSE    ((uint32_t)0x00000800U) /* LLI Read Slave Error */
#define MDMA_CHNINTSTS_LWDE    ((uint32_t)0x00000400U) /* LLI Write Decode Error */
#define MDMA_CHNINTSTS_LRDE    ((uint32_t)0x00000200U) /* LLI Read Decode Error */
#define MDMA_CHNINTSTS_DSTSE   ((uint32_t)0x00000100U) /* Destination Slave Error */
#define MDMA_CHNINTSTS_SRCSE   ((uint32_t)0x00000080U) /* Source Slave Error */
#define MDMA_CHNINTSTS_DSTDE   ((uint32_t)0x00000040U) /* Destination Decode Error */
#define MDMA_CHNINTSTS_SRCDE   ((uint32_t)0x00000020U) /* Source Decode Error */
#define MDMA_CHNINTSTS_DSTTC   ((uint32_t)0x00000010U) /* Destination Transaction Completed */
#define MDMA_CHNINTSTS_SRCTC   ((uint32_t)0x00000008U) /* Source Transaction Completed */
#define MDMA_CHNINTSTS_DMATD   ((uint32_t)0x00000002U) /* DMA Transfer Done */
#define MDMA_CHNINTSTS_BLKTD   ((uint32_t)0x00000001U) /* Block Transfer Done */

/** Bit definition for MDMA_CHNINTSGLEN register **/
#define MDMA_CHNINTSGLEN_CHA     ((uint32_t)0x80000000U) /* Channel Aborted */
#define MDMA_CHNINTSGLEN_CHD     ((uint32_t)0x40000000U) /* Channel Disabled */
#define MDMA_CHNINTSGLEN_CHS     ((uint32_t)0x20000000U) /* Channel Suspended */
#define MDMA_CHNINTSGLEN_CHSS    ((uint32_t)0x10000000U) /* Channel Source Suspended */
#define MDMA_CHNINTSGLEN_CHLC    ((uint32_t)0x08000000U) /* Channel Lock Cleared */
#define MDMA_CHNINTSGLEN_SIWOHE  ((uint32_t)0x00200000U) /* Slave Interface Write On Hold Error */
#define MDMA_CHNINTSGLEN_SIWOCEE ((uint32_t)0x00080000U) /* Slave Interface Write On Channel Enabled Error */
#define MDMA_CHNINTSGLEN_SIRTWOE ((uint32_t)0x00040000U) /* Slave Interface Read to Write Only Error */
#define MDMA_CHNINTSGLEN_SIWTROE ((uint32_t)0x00020000U) /* Slave Interface Write to Read Only Error */
#define MDMA_CHNINTSGLEN_SIDE    ((uint32_t)0x00010000U) /* Slave Interface Decode Error */
#define MDMA_CHNINTSGLEN_SIMBTE  ((uint32_t)0x00004000U) /* Slave Interface Multi Block Type Error */
#define MDMA_CHNINTSGLEN_SLIE    ((uint32_t)0x00002000U) /* LLI Invalid Error */
#define MDMA_CHNINTSGLEN_LWSE    ((uint32_t)0x00001000U) /* LLI Write Slave Error */
#define MDMA_CHNINTSGLEN_LRSE    ((uint32_t)0x00000800U) /* LLI Read Slave Error */
#define MDMA_CHNINTSGLEN_LWDE    ((uint32_t)0x00000400U) /* LLI Write Decode Error */
#define MDMA_CHNINTSGLEN_LRDE    ((uint32_t)0x00000200U) /* LLI Read Decode Error */
#define MDMA_CHNINTSGLEN_DSTSE   ((uint32_t)0x00000100U) /* Destination Slave Error */
#define MDMA_CHNINTSGLEN_SRCSE   ((uint32_t)0x00000080U) /* Source Slave Error */
#define MDMA_CHNINTSGLEN_DSTDE   ((uint32_t)0x00000040U) /* Destination Decode Error */
#define MDMA_CHNINTSGLEN_SRCDE   ((uint32_t)0x00000020U) /* Source Decode Error */
#define MDMA_CHNINTSGLEN_DSTTC   ((uint32_t)0x00000010U) /* Destination Transaction Completed */
#define MDMA_CHNINTSGLEN_SRCTC   ((uint32_t)0x00000008U) /* Source Transaction Completed */
#define MDMA_CHNINTSGLEN_DMATD   ((uint32_t)0x00000002U) /* DMA Transfer Done */
#define MDMA_CHNINTSGLEN_BLKTD   ((uint32_t)0x00000001U) /* Block Transfer Done */

/** Bit definition for MDMA_CHNINTCLR register **/
#define MDMA_CHNINTCLR_CHA     ((uint32_t)0x80000000U) /* Channel Aborted */
#define MDMA_CHNINTCLR_CHD     ((uint32_t)0x40000000U) /* Channel Disabled */
#define MDMA_CHNINTCLR_CHS     ((uint32_t)0x20000000U) /* Channel Suspended */
#define MDMA_CHNINTCLR_CHSS    ((uint32_t)0x10000000U) /* Channel Source Suspended */
#define MDMA_CHNINTCLR_CHLC    ((uint32_t)0x08000000U) /* Channel Lock Cleared */
#define MDMA_CHNINTCLR_SIWOHE  ((uint32_t)0x00200000U) /* Slave Interface Write On Hold Error */
#define MDMA_CHNINTCLR_SIWOCEE ((uint32_t)0x00080000U) /* Slave Interface Write On Channel Enabled Error */
#define MDMA_CHNINTCLR_SIRTWOE ((uint32_t)0x00040000U) /* Slave Interface Read to Write Only Error */
#define MDMA_CHNINTCLR_SIWTROE ((uint32_t)0x00020000U) /* Slave Interface Write to Read Only Error */
#define MDMA_CHNINTCLR_SIDE    ((uint32_t)0x00010000U) /* Slave Interface Decode Error */
#define MDMA_CHNINTCLR_SIMBTE  ((uint32_t)0x00004000U) /* Slave Interface Multi Block Type Error */
#define MDMA_CHNINTCLR_SLIE    ((uint32_t)0x00002000U) /* LLI Invalid Error */
#define MDMA_CHNINTCLR_LWSE    ((uint32_t)0x00001000U) /* LLI Write Slave Error */
#define MDMA_CHNINTCLR_LRSE    ((uint32_t)0x00000800U) /* LLI Read Slave Error */
#define MDMA_CHNINTCLR_LWDE    ((uint32_t)0x00000400U) /* LLI Write Decode Error */
#define MDMA_CHNINTCLR_LRDE    ((uint32_t)0x00000200U) /* LLI Read Decode Error */
#define MDMA_CHNINTCLR_DSTSE   ((uint32_t)0x00000100U) /* Destination Slave Error */
#define MDMA_CHNINTCLR_SRCSE   ((uint32_t)0x00000080U) /* Source Slave Error */
#define MDMA_CHNINTCLR_DSTDE   ((uint32_t)0x00000040U) /* Destination Decode Error */
#define MDMA_CHNINTCLR_SRCDE   ((uint32_t)0x00000020U) /* Source Decode Error */
#define MDMA_CHNINTCLR_DSTTC   ((uint32_t)0x00000010U) /* Destination Transaction Completed */
#define MDMA_CHNINTCLR_SRCTC   ((uint32_t)0x00000008U) /* Source Transaction Completed */
#define MDMA_CHNINTCLR_DMATD   ((uint32_t)0x00000002U) /* DMA Transfer Done */
#define MDMA_CHNINTCLR_BLKTD   ((uint32_t)0x00000001U) /* Block Transfer Done */





/******************************************************************************/
/*                                                                            */
/*                             DMAMUX                                         */
/*                                                                            */
/******************************************************************************/


/******** Bit definition for DMAMUX_CHxCTRL register  ********/
#define DMAMUX_CHxCTRL_SYID_MASK                               ((uint32_t)0x0F000000U)         /* Bit[27:24] */
#define DMAMUX_CHxCTRL_SYID_0                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define DMAMUX_CHxCTRL_SYID_1                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define DMAMUX_CHxCTRL_SYID_2                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define DMAMUX_CHxCTRL_SYID_3                                  ((uint32_t)0x08000000U)         /* Bit27*/

#define DMAMUX_CHxCTRL_NUMREQ_MASK                             ((uint32_t)0x00F80000U)         /* Bit[23:19] */
#define DMAMUX_CHxCTRL_NUMREQ_0                                ((uint32_t)0x00080000U)         /* Bit19*/
#define DMAMUX_CHxCTRL_NUMREQ_1                                ((uint32_t)0x00100000U)         /* Bit20*/
#define DMAMUX_CHxCTRL_NUMREQ_2                                ((uint32_t)0x00200000U)         /* Bit21*/
#define DMAMUX_CHxCTRL_NUMREQ_3                                ((uint32_t)0x00400000U)         /* Bit22*/
#define DMAMUX_CHxCTRL_NUMREQ_4                                ((uint32_t)0x00800000U)         /* Bit23*/

#define DMAMUX_CHxCTRL_SYPOL_MASK                              ((uint32_t)0x00060000U)         /* Bit[18:17] */
#define DMAMUX_CHxCTRL_SYPOL_0                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define DMAMUX_CHxCTRL_SYPOL_1                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define DMAMUX_CHxCTRL_SYEN                                    ((uint32_t)0x00010000U)         /* Bit[16] */
#define DMAMUX_CHxCTRL_EVEGEN                                  ((uint32_t)0x00000200U)         /* Bit[9] */
#define DMAMUX_CHxCTRL_SOIEN                                   ((uint32_t)0x00000100U)         /* Bit[8] */

#define DMAMUX_CHxCTRL_REQID_MASK                              ((uint32_t)0x000000FFU)         /* Bit[7:0] */
#define DMAMUX_CHxCTRL_REQID_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define DMAMUX_CHxCTRL_REQID_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define DMAMUX_CHxCTRL_REQID_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define DMAMUX_CHxCTRL_REQID_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define DMAMUX_CHxCTRL_REQID_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define DMAMUX_CHxCTRL_REQID_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define DMAMUX_CHxCTRL_REQID_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define DMAMUX_CHxCTRL_REQID_7                                 ((uint32_t)0x00000080U)         /* Bit7*/

/******** Bit definition for DMAMUX_STS register  ********/
#define DMAMUX_STS_SOFx                                        ((uint32_t)0x00FFFFFFU)         /* Bit[23:0] */

/******** Bit definition for DMAMUX_CLR register  ********/
#define DMAMUX_CLR_CSOFx                                       ((uint32_t)0x00FFFFFFU)         /* Bit[23:0] */

/******** Bit definition for DMAMUX_CHxCFG register  ********/
#define DMAMUX_CHxCFG_GNUMREQ_MASK                            ((uint32_t)0x00F80000U)         /* Bit[23:19] */
#define DMAMUX_CHxCFG_GNUMREQ_0                               ((uint32_t)0x00080000U)         /* Bit19*/
#define DMAMUX_CHxCFG_GNUMREQ_1                               ((uint32_t)0x00100000U)         /* Bit20*/
#define DMAMUX_CHxCFG_GNUMREQ_2                               ((uint32_t)0x00200000U)         /* Bit21*/
#define DMAMUX_CHxCFG_GNUMREQ_3                               ((uint32_t)0x00400000U)         /* Bit22*/
#define DMAMUX_CHxCFG_GNUMREQ_4                               ((uint32_t)0x00800000U)         /* Bit23*/

#define DMAMUX_CHxCFG_GPOL_MASK                               ((uint32_t)0x00060000U)         /* Bit[18:17] */
#define DMAMUX_CHxCFG_GPOL_0                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define DMAMUX_CHxCFG_GPOL_1                                  ((uint32_t)0x00040000U)         /* Bit18*/

#define DMAMUX_CHxCFG_GEN                                     ((uint32_t)0x00010000U)         /* Bit[16] */
#define DMAMUX_CHxCFG_TOVIEN                                  ((uint32_t)0x00000100U)         /* Bit[8] */

#define DMAMUX_CHxCFG_SYID_MASK                               ((uint32_t)0x0000003FU)         /* Bit[5:0] */
#define DMAMUX_CHxCFG_SYID_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define DMAMUX_CHxCFG_SYID_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define DMAMUX_CHxCFG_SYID_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define DMAMUX_CHxCFG_SYID_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define DMAMUX_CHxCFG_SYID_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define DMAMUX_CHxCFG_SYID_5                                  ((uint32_t)0x00000020U)         /* Bit5*/

/******** Bit definition for DMAMUX_RGSTS register  ********/
#define DMAMUX_RGSTS_OFx                                      ((uint32_t)0x0000FFFF)         /* Bit[15:0] */

/******** Bit definition for DMAMUX_RGCLR register  ********/
#define DMAMUX_RGCLR_COFx                                     ((uint32_t)0x0000FFFF)         /* Bit[15:0] */



/******************************************************************************/
/*                                                                            */
/*                        DCMU Dualcore Messaging Unit                        */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for DCMU_STS register  ********************/
#define DCMU_STS_RCVFN0_Pos       (0U)
#define DCMU_STS_RCVFN0           ((uint32_t)0x00000001U)                     /* dualcore messaging status register flag 0 bit */
#define DCMU_STS_RCVFN1           ((uint32_t)0x00000002U)                     /* dualcore messaging status register flag 1 bit */
#define DCMU_STS_RCVFN2           ((uint32_t)0x00000004U)                     /* dualcore messaging status register flag 2 bit */
#define DCMU_STS_EPF              ((uint32_t)0x00000010U)                     /* dualcore messaging status register event pending flag bit */
#define DCMU_STS_RSTF             ((uint32_t)0x00000080U)                     /* dualcore messaging status register other core reset status bit */
#define DCMU_STS_FUPF             ((uint32_t)0x00000100U)                     /* dualcore messaging status register flag update pending flag bit */
#define DCMU_STS_TEF3_Pos         (20U)
#define DCMU_STS_TEF3             ((uint32_t)0x00100000U)                     /* dualcore messaging status register  transmit 3 empty bit */
#define DCMU_STS_TEF2             ((uint32_t)0x00200000U)                     /* dualcore messaging status register  transmit 2 empty bit */
#define DCMU_STS_TEF1             ((uint32_t)0x00400000U)                     /* dualcore messaging status register  transmit 1 empty bit */
#define DCMU_STS_TEF0             ((uint32_t)0x00800000U)                     /* dualcore messaging status register  transmit 0 empty bit */
#define DCMU_STS_RFF3_Pos         (24U)
#define DCMU_STS_RFF3             ((uint32_t)0x01000000U)                     /* dualcore messaging status register receive 3 full bit */
#define DCMU_STS_RFF2             ((uint32_t)0x02000000U)                     /* dualcore messaging status register receive 2 full bit */
#define DCMU_STS_RFF1             ((uint32_t)0x04000000U)                     /* dualcore messaging status register receive 1 full bit */
#define DCMU_STS_RFF0             ((uint32_t)0x08000000U)                     /* dualcore messaging status register receive 0 full bit */
#define DCMU_STS_GPIF3_Pos        (28U)
#define DCMU_STS_GPIF3            ((uint32_t)0x10000000U)                     /* dualcore messaging status register general interrupt from other core request 3 pending bit */
#define DCMU_STS_GPIF2            ((uint32_t)0x20000000U)                     /* dualcore messaging status register general interrupt from other core request 2 pending bit */
#define DCMU_STS_GPIF1            ((uint32_t)0x40000000U)                     /* dualcore messaging status register general interrupt from other core request 1 pending bit */
#define DCMU_STS_GPIF0            ((uint32_t)0x80000000U)                     /* dualcore messaging status register general interrupt from other core request 0 pending bit */

/*******************  Bit definition for DCMU_CTRL register  ********************/
#define DCMU_CTRL_TXFN0_Pos       (0U)
#define DCMU_CTRL_TXFN0           ((uint32_t)0x00000001U)                     /* dualcore messaging control register flag 0 bit */
#define DCMU_CTRL_TXFN1           ((uint32_t)0x00000002U)                     /* dualcore messaging control register flag 1 bit */
#define DCMU_CTRL_TXFN2           ((uint32_t)0x00000004U)                     /* dualcore messaging control register flag 2 bit */
#if defined(CORE_CM7)
#define DCMU_CTRL_RST             ((uint32_t)0x00000020U)                     /* dualcore messaging control register reset both cores bit */
#endif
#define DCMU_CTRL_GPIR3_Pos       (16U)
#define DCMU_CTRL_GPIR3           ((uint32_t)0x00010000U)                     /* dualcore messaging control register general interrupt to other core request 3 pending bit */
#define DCMU_CTRL_GPIR2           ((uint32_t)0x00020000U)                     /* dualcore messaging control register general interrupt to other core request 2 pending bit */
#define DCMU_CTRL_GPIR1           ((uint32_t)0x00040000U)                     /* dualcore messaging control register general interrupt to other core request 1 pending bit */
#define DCMU_CTRL_GPIR0           ((uint32_t)0x00080000U)                     /* dualcore messaging control register general interrupt to other core request 0 pending bit */
#define DCMU_CTRL_TEIE3_Pos       (20U)
#define DCMU_CTRL_TEIE3           ((uint32_t)0x00100000U)                     /* dualcore messaging control register transmit 3 interrupt enable bit */
#define DCMU_CTRL_TEIE2           ((uint32_t)0x00200000U)                     /* dualcore messaging control register transmit 2 interrupt enable bit */
#define DCMU_CTRL_TEIE1           ((uint32_t)0x00400000U)                     /* dualcore messaging control register transmit 1 interrupt enable bit */
#define DCMU_CTRL_TEIE0           ((uint32_t)0x00800000U)                     /* dualcore messaging control register transmit 0 interrupt enable bit */
#define DCMU_CTRL_RFIE3_Pos       (24U)
#define DCMU_CTRL_RFIE3           ((uint32_t)0x01000000U)                     /* dualcore messaging control register receive 3 interrupt enable bit */
#define DCMU_CTRL_RFIE2           ((uint32_t)0x02000000U)                     /* dualcore messaging control register receive 2 interrupt enable bit */
#define DCMU_CTRL_RFIE1           ((uint32_t)0x04000000U)                     /* dualcore messaging control register receive 1 interrupt enable bit */
#define DCMU_CTRL_RFIE0           ((uint32_t)0x08000000U)                     /* dualcore messaging control register receive 0 interrupt enable bit */
#define DCMU_CTRL_GPIE3_Pos       (28U)
#define DCMU_CTRL_GPIE3           ((uint32_t)0x10000000U)                     /* dualcore messaging control register general purpose 3 interrupt enable bit */
#define DCMU_CTRL_GPIE2           ((uint32_t)0x20000000U)                     /* dualcore messaging control register general purpose 2 interrupt enable bit */
#define DCMU_CTRL_GPIE1           ((uint32_t)0x40000000U)                     /* dualcore messaging control register general purpose 1 interrupt enable bit */
#define DCMU_CTRL_GPIE0           ((uint32_t)0x80000000U)                     /* dualcore messaging control register general purpose 0 interrupt enable bit */

/******************************************************************************/
/*                                                                            */
/*                        SEMA4 HW Semaphore                                  */
/*                                                                            */
/******************************************************************************/

/********************  Bit definition for SEMA4_R register  ********************/
#define SEMA4_R_PROCID_Pos         (0U)
#define SEMA4_R_PROCID             ((uint32_t)0x000000FFU)  /* Semaphore ProcessID */
#define SEMA4_R_COREID_Pos         (8U)
#define SEMA4_R_COREID             ((uint32_t)0x0000FF00U)  /* Semaphore CoreID.   */
#define SEMA4_R_LOCK               ((uint32_t)0x80000000U)  /* Lock indication.    */

/********************  Bit definition for SEMA4_RL register  ******************/
#define SEMA4_RL_PROCID_Pos       (0U)
#define SEMA4_RL_PROCID           ((uint32_t)0x000000FFU)  /* Semaphore ProcessID */
#define SEMA4_RL_COREID_Pos       (8U)
#define SEMA4_RL_COREID           ((uint32_t)0x0000FF00U)  /* Semaphore CoreID.   */
#define SEMA4_RL_LOCK_Pos         (31U)
#define SEMA4_RL_LOCK             ((uint32_t)0x80000000U)  /* Lock indication.    */

/********************  Bit definition for SEMA4_CLR register    *****************/
#define SEMA4_CLR_COREID_OFFSET   (8U)
#define SEMA4_CLR_COREID          ((uint32_t)0x0000FF00U)  /* CoreID of semaphores to be cleared. */
#define SEMA4_CLR_KEY_OFFSET      (16U)
#define SEMA4_CLR_KEY             ((uint32_t)0xFFFF0000U)  /* semaphores clear key. */

/********************  Bit definition for SEMA4_KEYCLR register  *****************/
#define SEMA4_KEYR_KEY_OFFSET      (16U)
#define SEMA4_KEYCLR_KEY           ((uint32_t)0xFFFF0000U)   /*  semaphores clear key. */

/***   CORDIC Processors   ***/

/** Bit definition for CORDIC_CTRLSTS register **/
#define CORDIC_CTRLSTS_FUNC             ((uint32_t)0x0000000FU) /* bit[3:0] Function bits[3:0] */
#define CORDIC_CTRLSTS_FUNC_0           ((uint32_t)0x00000001U) /* bit[0] Function bit 0 */
#define CORDIC_CTRLSTS_FUNC_1           ((uint32_t)0x00000002U) /* bit[1] Function bit 1 */
#define CORDIC_CTRLSTS_FUNC_2           ((uint32_t)0x00000004U) /* bit[2] Function bit 2 */
#define CORDIC_CTRLSTS_FUNC_3           ((uint32_t)0x00000008U) /* bit[3] Function bit 3 */

#define CORDIC_CTRLSTS_PRECISION        ((uint32_t)0x000000F0U) /* bit[7:4] Precision required (number of iterations) bits[3:0] */
#define CORDIC_CTRLSTS_PRECISION_0      ((uint32_t)0x00000010U) /* bit[4] Precision bit 0 */
#define CORDIC_CTRLSTS_PRECISION_1      ((uint32_t)0x00000020U) /* bit[5] Precision bit 1 */
#define CORDIC_CTRLSTS_PRECISION_2      ((uint32_t)0x00000040U) /* bit[6] Precision bit 2 */
#define CORDIC_CTRLSTS_PRECISION_3      ((uint32_t)0x00000080U) /* bit[7] Precision bit 3 */

#define CORDIC_CTRLSTS_SCALE            ((uint32_t)0x00000700U) /* bit[10:8] Scaling factor bits[2:0] */
#define CORDIC_CTRLSTS_SCALE_0          ((uint32_t)0x00000100U) /* bit[4] Scaling bit 0 */
#define CORDIC_CTRLSTS_SCALE_1          ((uint32_t)0x00000200U) /* bit[5] Scaling bit 1 */
#define CORDIC_CTRLSTS_SCALE_2          ((uint32_t)0x00000400U) /* bit[6] Scaling bit 2 */

#define CORDIC_CTRLSTS_INTEN            ((uint32_t)0x00010000U) /* bit[16] Interrupt Enable */
#define CORDIC_CTRLSTS_DMAREN           ((uint32_t)0x00020000U) /* bit[17] DMA read Enable */
#define CORDIC_CTRLSTS_DMAWEN           ((uint32_t)0x00040000U) /* bit[18] DMA write Enable */
#define CORDIC_CTRLSTS_NUMREAD          ((uint32_t)0x00080000U) /* bit[19] Number of results in the CORDIC_RDATA register */
#define CORDIC_CTRLSTS_NUMWRITE         ((uint32_t)0x00100000U) /* bit[20] Number of arguments expected by the CORDIC_WDATA register */
#define CORDIC_CTRLSTS_OUTSIZE          ((uint32_t)0x00200000U) /* bit[21] Size of output data */
#define CORDIC_CTRLSTS_INSIZE           ((uint32_t)0x00400000U) /* bit[22] Size of input data */
#define CORDIC_CTRLSTS_FLOATIN          ((uint32_t)0x00800000U) /* bit[23] Floating-point fixed-point input control */
#define CORDIC_CTRLSTS_FLOATOUT         ((uint32_t)0x01000000U) /* bit[24] Floating-point fixed-point output control */
#define CORDIC_CTRLSTS_PHASELIMIT       ((uint32_t)0x02000000U) /* bit[25] Phase Output Limit Control */
#define CORDIC_CTRLSTS_CODINLIMIT       ((uint32_t)0x04000000U) /* bit[26] Coordinate output limit control */
#define CORDIC_CTRLSTS_INOVINTEN        ((uint32_t)0x08000000U) /* bit[27] Input parameter overflow interrupt control bit */
#define CORDIC_CTRLSTS_INOVF            ((uint32_t)0x40000000U) /* bit[30] Input parameter overflow flag */
#define CORDIC_CTRLSTS_RRF              ((uint32_t)0x80000000U) /* bit[31] Result ready flag */

/** Bit definition for CORDIC_WDAT register **/
#define CORDIC_WDAT_WDAT                ((uint32_t)0xFFFFFFFFU) /* bit[31:0] Write data */

/** Bit definition for CORDIC_RDAT register **/
#define CORDIC_RDAT_RDAT                ((uint32_t)0xFFFFFFFFU) /* bit[31:0] Read data */

/***   Digital filter for Sigma delta modulators(DSMU)   ***/
/** Bit definition for DSMU_CHYCFG1 register  **/
#define DSMU_CHYCFG1_DSMUEN                             ((uint32_t)0x80000000U) /* Bit[31] DSMU interface global enable */
#define DSMU_CHYCFG1_CLKOUTSRC                          ((uint32_t)0x40000000U) /* Bit[30] Output serial clock source selection */

#define DSMU_CHYCFG1_CLKOUTDIV                          ((uint32_t)0x00FF0000U) /* Bit[23:16] Output serial clock divider */
#define DSMU_CHYCFG1_CLKOUTDIV_0                        ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_CHYCFG1_CLKOUTDIV_1                        ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_CHYCFG1_CLKOUTDIV_2                        ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_CHYCFG1_CLKOUTDIV_3                        ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_CHYCFG1_CLKOUTDIV_4                        ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_CHYCFG1_CLKOUTDIV_5                        ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_CHYCFG1_CLKOUTDIV_6                        ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_CHYCFG1_CLKOUTDIV_7                        ((uint32_t)0x00800000U) /* Bit23 */

#define DSMU_CHYCFG1_DATPACK                            ((uint32_t)0x0000C000U) /* Bit[15:14] Data packing config in DSMU_CHYDATIN register */
#define DSMU_CHYCFG1_DATPACK_0                          ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_CHYCFG1_DATPACK_1                          ((uint32_t)0x00008000U) /* Bit15 */

#define DSMU_CHYCFG1_DATMUX                             ((uint32_t)0x00003000U) /* Bit[13:12] Data input multiplexer for channel y */
#define DSMU_CHYCFG1_DATMUX_0                           ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_CHYCFG1_DATMUX_1                           ((uint32_t)0x00002000U) /* Bit13 */

#define DSMU_CHYCFG1_CHINSEL                            ((uint32_t)0x00000100U) /* Bit[8] Channel inputs selection */
#define DSMU_CHYCFG1_CHEN                               ((uint32_t)0x00000080U) /* Bit[7] channel y enable */
#define DSMU_CHYCFG1_CLKABEN                            ((uint32_t)0x00000040U) /* Bit[6] Clock absence detector enable on channel y */
#define DSMU_CHYCFG1_SCDETEN                            ((uint32_t)0x00000020U) /* Bit[5] Short-circuit detector enable on channel y */

#define DSMU_CHYCFG1_SPICLKSEL                          ((uint32_t)0x0000000CU) /* Bit[3:2] SPI clock source config for channel y */
#define DSMU_CHYCFG1_SPICLKSEL_0                        ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_CHYCFG1_SPICLKSEL_1                        ((uint32_t)0x00000008U) /* Bit3 */

#define DSMU_CHYCFG1_SITP                               ((uint32_t)0x00000003U) /* Bit[1:0] Serial interface type for channel y */
#define DSMU_CHYCFG1_SITP_0                             ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_CHYCFG1_SITP_1                             ((uint32_t)0x00000002U) /* Bit1 */

/** Bit definition for DSMU_CHYCFG2 register  **/
#define DSMU_CHYCFG2_CALOFFSET                          ((uint32_t)0xFFFFFF00U) /* Bit[31:8] channel y 24-bit calibration CALOFFSET value. */
#define DSMU_CHYCFG2_CALOFFSET_0                        ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_CHYCFG2_CALOFFSET_1                        ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_CHYCFG2_CALOFFSET_2                        ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_CHYCFG2_CALOFFSET_3                        ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_CHYCFG2_CALOFFSET_4                        ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_CHYCFG2_CALOFFSET_5                        ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_CHYCFG2_CALOFFSET_6                        ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_CHYCFG2_CALOFFSET_7                        ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_CHYCFG2_CALOFFSET_8                        ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_CHYCFG2_CALOFFSET_9                        ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_CHYCFG2_CALOFFSET_10                       ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_CHYCFG2_CALOFFSET_11                       ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_CHYCFG2_CALOFFSET_12                       ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_CHYCFG2_CALOFFSET_13                       ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_CHYCFG2_CALOFFSET_14                       ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_CHYCFG2_CALOFFSET_15                       ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_CHYCFG2_CALOFFSET_16                       ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_CHYCFG2_CALOFFSET_17                       ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_CHYCFG2_CALOFFSET_18                       ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_CHYCFG2_CALOFFSET_19                       ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_CHYCFG2_CALOFFSET_20                       ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_CHYCFG2_CALOFFSET_21                       ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_CHYCFG2_CALOFFSET_22                       ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_CHYCFG2_CALOFFSET_23                       ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_CHYCFG2_DATRBS                             ((uint32_t)0x000000F8U) /* Bit[7:3] channel y data right bit-shift value */
#define DSMU_CHYCFG2_DATRBS_0                           ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_CHYCFG2_DATRBS_1                           ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_CHYCFG2_DATRBS_2                           ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_CHYCFG2_DATRBS_3                           ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_CHYCFG2_DATRBS_4                           ((uint32_t)0x00000080U) /* Bit7 */

/** Bit definition for DSMU_CHYAWDSCDET register  **/
#define DSMU_CHYAWDSCDET_AWDFORD                        ((uint32_t)0x00C00000U) /* Bit[23:22] Analog watchdog Sinc filter order on channel y */
#define DSMU_CHYAWDSCDET_AWDFORD_0                      ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_CHYAWDSCDET_AWDFORD_1                      ((uint32_t)0x00800000U) /* Bit23 */

#define DSMU_CHYAWDSCDET_AWDFOSR                        ((uint32_t)0x001F0000U) /* Bit[20:16] Analog watchdog filter oversampling ratio (decimation rate) on channel y */
#define DSMU_CHYAWDSCDET_AWDFOSR_0                      ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_CHYAWDSCDET_AWDFOSR_1                      ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_CHYAWDSCDET_AWDFOSR_2                      ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_CHYAWDSCDET_AWDFOSR_3                      ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_CHYAWDSCDET_AWDFOSR_4                      ((uint32_t)0x00100000U) /* Bit20 */

#define DSMU_CHYAWDSCDET_BKSCDET                        ((uint32_t)0x0000F000U) /* Bit[15:12] Break signal assignment for short-circuit detector on channel y */
#define DSMU_CHYAWDSCDET_BKSCDET_0                      ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_CHYAWDSCDET_BKSCDET_1                      ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_CHYAWDSCDET_BKSCDET_2                      ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_CHYAWDSCDET_BKSCDET_3                      ((uint32_t)0x00008000U) /* Bit15 */

#define DSMU_CHYAWDSCDET_SCDETTH                        ((uint32_t)0x000000FFU) /* Bit[7:0] short-circuit detector threshold value for channel y */
#define DSMU_CHYAWDSCDET_SCDETTH_0                      ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_CHYAWDSCDET_SCDETTH_1                      ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_CHYAWDSCDET_SCDETTH_2                      ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_CHYAWDSCDET_SCDETTH_3                      ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_CHYAWDSCDET_SCDETTH_4                      ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_CHYAWDSCDET_SCDETTH_5                      ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_CHYAWDSCDET_SCDETTH_6                      ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_CHYAWDSCDET_SCDETTH_7                      ((uint32_t)0x00000080U) /* Bit7 */

/** Bit definition for DSMU_CHYAWDDAT register  **/
#define DSMU_CHYAWDDAT_AWDDAT                           ((uint32_t)0x0000FFFFU) /* Bit[15:0] Input channel y watchdog data */
#define DSMU_CHYAWDDAT_AWDDAT_0                         ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_CHYAWDDAT_AWDDAT_1                         ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_CHYAWDDAT_AWDDAT_2                         ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_CHYAWDDAT_AWDDAT_3                         ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_CHYAWDDAT_AWDDAT_4                         ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_CHYAWDDAT_AWDDAT_5                         ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_CHYAWDDAT_AWDDAT_6                         ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_CHYAWDDAT_AWDDAT_7                         ((uint32_t)0x00000080U) /* Bit7 */
#define DSMU_CHYAWDDAT_AWDDAT_8                         ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_CHYAWDDAT_AWDDAT_9                         ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_CHYAWDDAT_AWDDAT_10                        ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_CHYAWDDAT_AWDDAT_11                        ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_CHYAWDDAT_AWDDAT_12                        ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_CHYAWDDAT_AWDDAT_13                        ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_CHYAWDDAT_AWDDAT_14                        ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_CHYAWDDAT_AWDDAT_15                        ((uint32_t)0x00008000U) /* Bit15 */

/** Bit definition for DSMU_CHYDATIN register  **/
#define DSMU_CHYDATIN_INDATAT1                          ((uint32_t)0xFFFF0000U) /* Bit[31:16] Input data for channel y or channel y+1 */
#define DSMU_CHYDATIN_INDATAT1_0                        ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_CHYDATIN_INDATAT1_1                        ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_CHYDATIN_INDATAT1_2                        ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_CHYDATIN_INDATAT1_3                        ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_CHYDATIN_INDATAT1_4                        ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_CHYDATIN_INDATAT1_5                        ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_CHYDATIN_INDATAT1_6                        ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_CHYDATIN_INDATAT1_7                        ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_CHYDATIN_INDATAT1_8                        ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_CHYDATIN_INDATAT1_9                        ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_CHYDATIN_INDATAT1_10                       ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_CHYDATIN_INDATAT1_11                       ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_CHYDATIN_INDATAT1_12                       ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_CHYDATIN_INDATAT1_13                       ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_CHYDATIN_INDATAT1_14                       ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_CHYDATIN_INDATAT1_15                       ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_CHYDATIN_INDATAT0                          ((uint32_t)0x0000FFFFU) /* Bit[15:0] Input data for channel y */
#define DSMU_CHYDATIN_INDATAT0_0                        ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_CHYDATIN_INDATAT0_1                        ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_CHYDATIN_INDATAT0_2                        ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_CHYDATIN_INDATAT0_3                        ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_CHYDATIN_INDATAT0_4                        ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_CHYDATIN_INDATAT0_5                        ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_CHYDATIN_INDATAT0_6                        ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_CHYDATIN_INDATAT0_7                        ((uint32_t)0x00000080U) /* Bit7 */
#define DSMU_CHYDATIN_INDATAT0_8                        ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_CHYDATIN_INDATAT0_9                        ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_CHYDATIN_INDATAT0_10                       ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_CHYDATIN_INDATAT0_11                       ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_CHYDATIN_INDATAT0_12                       ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_CHYDATIN_INDATAT0_13                       ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_CHYDATIN_INDATAT0_14                       ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_CHYDATIN_INDATAT0_15                       ((uint32_t)0x00008000U) /* Bit15 */

/** Bit definition for DSMU_FLTXCTRL1 register  **/
#define DSMU_FLTXCTRL1_AWDFSEL                          ((uint32_t)0x40000000U) /* Bit[30] Analog watchdog input data selection */
#define DSMU_FLTXCTRL1_FAST                             ((uint32_t)0x20000000U) /* Bit[29] Fast conversion mode selection for regular conversions */

#define DSMU_FLTXCTRL1_RCH                              ((uint32_t)0x07000000U) /* Bit[26:24] Regular conversion channel */
#define DSMU_FLTXCTRL1_RCH_0                            ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXCTRL1_RCH_1                            ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXCTRL1_RCH_2                            ((uint32_t)0x04000000U) /* Bit26 */

#define DSMU_FLTXCTRL1_RDMAEN                           ((uint32_t)0x00200000U) /* Bit[21] DMA channel enabled to read regular conversion data */
#define DSMU_FLTXCTRL1_RSYNC                            ((uint32_t)0x00080000U) /* Bit[19] Launch regular conversion synchronously with DSMU_FLTX */
#define DSMU_FLTXCTRL1_RCONT                            ((uint32_t)0x00040000U) /* Bit[18] Continuous mode config for regular conversions */
#define DSMU_FLTXCTRL1_RSWSTART                         ((uint32_t)0x00020000U) /* Bit[17] Software trigger of a conversion on the regular channel */

#define DSMU_FLTXCTRL1_JEXTEN                           ((uint32_t)0x00006000U) /* Bit[14:13] External trigger enable and trigger active edge selection for injected conversions */
#define DSMU_FLTXCTRL1_JEXTEN_0                         ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXCTRL1_JEXTEN_1                         ((uint32_t)0x00004000U) /* Bit14 */

#define DSMU_FLTXCTRL1_JEXTSEL                          ((uint32_t)0x00001F00U) /* Bit[12:8] External trigger signal selection for launching injected conversions */
#define DSMU_FLTXCTRL1_JEXTSEL_0                        ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXCTRL1_JEXTSEL_1                        ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXCTRL1_JEXTSEL_2                        ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXCTRL1_JEXTSEL_3                        ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXCTRL1_JEXTSEL_4                        ((uint32_t)0x00001000U) /* Bit12 */

#define DSMU_FLTXCTRL1_JDMAEN                           ((uint32_t)0x00000020U) /* Bit[5] DMA channel enabled to read data for the injected conversion */
#define DSMU_FLTXCTRL1_JSCAN                            ((uint32_t)0x00000010U) /* Bit[4] Injected scanning conversion mode */
#define DSMU_FLTXCTRL1_JSYNC                            ((uint32_t)0x00000008U) /* Bit[3] Launch an injected conversion synchronously with the DSMU_FLTX JSWSTART event */
#define DSMU_FLTXCTRL1_JSWSTART                         ((uint32_t)0x00000002U) /* Bit[1] Start a conversion of the injected group of channels */
#define DSMU_FLTXCTRL1_DFLTEN                           ((uint32_t)0x00000001U) /* Bit[0] DSMU_FLTX enable */

/** Bit definition for DSMU_FLTXCTRL2 register  **/
#define DSMU_FLTXCTRL2_AWDCH                            ((uint32_t)0x00FF0000U) /* Bit[23:16] Analog watchdog channel selection */
#define DSMU_FLTXCTRL2_AWDCH_0                          ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXCTRL2_AWDCH_1                          ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXCTRL2_AWDCH_2                          ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXCTRL2_AWDCH_3                          ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXCTRL2_AWDCH_4                          ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXCTRL2_AWDCH_5                          ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXCTRL2_AWDCH_6                          ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXCTRL2_AWDCH_7                          ((uint32_t)0x00800000U) /* Bit23 */

#define DSMU_FLTXCTRL2_EXDETCH                          ((uint32_t)0x0000FF00U) /* Bit[15:8] Extremes detector channel selection */
#define DSMU_FLTXCTRL2_EXDETCH_0                        ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXCTRL2_EXDETCH_1                        ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXCTRL2_EXDETCH_2                        ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXCTRL2_EXDETCH_3                        ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXCTRL2_EXDETCH_4                        ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXCTRL2_EXDETCH_5                        ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXCTRL2_EXDETCH_6                        ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXCTRL2_EXDETCH_7                        ((uint32_t)0x00008000U) /* Bit15 */

#define DSMU_FLTXCTRL2_CLKABIEN                         ((uint32_t)0x00000040U) /* Bit[6] Clock absence interrupt enable */
#define DSMU_FLTXCTRL2_SCDETIEN                         ((uint32_t)0x00000020U) /* Bit[5] Short-circuit detector interrupt enable */
#define DSMU_FLTXCTRL2_AWDIEN                           ((uint32_t)0x00000010U) /* Bit[4] Analog watchdog interrupt enable */
#define DSMU_FLTXCTRL2_ROVRIEN                          ((uint32_t)0x00000008U) /* Bit[3] Regular data overrun interrupt enable */
#define DSMU_FLTXCTRL2_JOVRIEN                          ((uint32_t)0x00000004U) /* Bit[2] Injected data overrun interrupt enable */
#define DSMU_FLTXCTRL2_REOCIEN                          ((uint32_t)0x00000002U) /* Bit[1] Regular conversion end interrupt enable */
#define DSMU_FLTXCTRL2_JEOCIEN                          ((uint32_t)0x00000001U) /* Bit[0] Injected conversion end interrupt enable */

/** Bit definition for DSMU_FLTXSTS register  **/
#define DSMU_FLTXSTS_SCDETF                             ((uint32_t)0xFF000000U) /* Bit[31:24] short-circuit event flag */
#define DSMU_FLTXSTS_SCDETF_0                           ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXSTS_SCDETF_1                           ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXSTS_SCDETF_2                           ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXSTS_SCDETF_3                           ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXSTS_SCDETF_4                           ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXSTS_SCDETF_5                           ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXSTS_SCDETF_6                           ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXSTS_SCDETF_7                           ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXSTS_CLKABF                             ((uint32_t)0x00FF0000U) /* Bit[23:16] Clock absence event flag */
#define DSMU_FLTXSTS_CLKABF_0                           ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXSTS_CLKABF_1                           ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXSTS_CLKABF_2                           ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXSTS_CLKABF_3                           ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXSTS_CLKABF_4                           ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXSTS_CLKABF_5                           ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXSTS_CLKABF_6                           ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXSTS_CLKABF_7                           ((uint32_t)0x00800000U) /* Bit23 */

#define DSMU_FLTXSTS_RCIP                               ((uint32_t)0x00004000U) /* Bit[14] Regular conversion active status */
#define DSMU_FLTXSTS_JCIP                               ((uint32_t)0x00002000U) /* Bit[13] Injected conversion active status */
#define DSMU_FLTXSTS_AWDF                               ((uint32_t)0x00000010U) /* Bit[4] Analog watchdog event flag */
#define DSMU_FLTXSTS_ROVRF                              ((uint32_t)0x00000008U) /* Bit[3] Regular conversion overrun flag */
#define DSMU_FLTXSTS_JOVRF                              ((uint32_t)0x00000004U) /* Bit[2] Injected conversion overrun flag */
#define DSMU_FLTXSTS_REOCF                              ((uint32_t)0x00000002U) /* Bit[1] Regular conversion end event flag */
#define DSMU_FLTXSTS_JEOCF                              ((uint32_t)0x00000001U) /* Bit[0] Injected conversion end event flag */

/** Bit definition for DSMU_FLTXINTCLR register  **/
#define DSMU_FLTXINTCLR_CLRSCDETF                       ((uint32_t)0xFF000000U) /* Bit[31:24] Clear the short-circuit event flag */
#define DSMU_FLTXINTCLR_CLRSCDETF_0                     ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXINTCLR_CLRSCDETF_1                     ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXINTCLR_CLRSCDETF_2                     ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXINTCLR_CLRSCDETF_3                     ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXINTCLR_CLRSCDETF_4                     ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXINTCLR_CLRSCDETF_5                     ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXINTCLR_CLRSCDETF_6                     ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXINTCLR_CLRSCDETF_7                     ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXINTCLR_CLRCLKABF                       ((uint32_t)0x00FF0000U) /* Bit[23:16] Clear the clock absence flag */
#define DSMU_FLTXINTCLR_CLRCLKABF_0                     ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXINTCLR_CLRCLKABF_1                     ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXINTCLR_CLRCLKABF_2                     ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXINTCLR_CLRCLKABF_3                     ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXINTCLR_CLRCLKABF_4                     ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXINTCLR_CLRCLKABF_5                     ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXINTCLR_CLRCLKABF_6                     ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXINTCLR_CLRCLKABF_7                     ((uint32_t)0x00800000U) /* Bit23 */

#define DSMU_FLTXINTCLR_CLRROVRF                        ((uint32_t)0x00000008U) /* Bit[3] Clear the regular conversion overrun flag */
#define DSMU_FLTXINTCLR_CLRJOVRF                        ((uint32_t)0x00000004U) /* Bit[2] Clear the injected conversion overrun flag */

/** Bit definition for DSMU_FLTXJCHG register  **/
#define DSMU_FLTXJCHG_JCHG                              ((uint32_t)0x000000FFU) /* Bit[7:0] Injected channel group selection */
#define DSMU_FLTXJCHG_JCHG_0                            ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXJCHG_JCHG_1                            ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXJCHG_JCHG_2                            ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_FLTXJCHG_JCHG_3                            ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_FLTXJCHG_JCHG_4                            ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_FLTXJCHG_JCHG_5                            ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_FLTXJCHG_JCHG_6                            ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_FLTXJCHG_JCHG_7                            ((uint32_t)0x00000080U) /* Bit7 */

/** Bit definition for DSMU_FLTXFCTRL register  **/
#define DSMU_FLTXFCTRL_FORD                             ((uint32_t)0xE0000000U) /* Bit[31:29] Sinc filter order */
#define DSMU_FLTXFCTRL_FORD_0                           ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXFCTRL_FORD_1                           ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXFCTRL_FORD_2                           ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXFCTRL_FOSR                             ((uint32_t)0x03FF0000U) /* Bit[25:16] Sinc filter oversampling ratio (decimation rate) */
#define DSMU_FLTXFCTRL_FOSR_0                           ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXFCTRL_FOSR_1                           ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXFCTRL_FOSR_2                           ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXFCTRL_FOSR_3                           ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXFCTRL_FOSR_4                           ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXFCTRL_FOSR_5                           ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXFCTRL_FOSR_6                           ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXFCTRL_FOSR_7                           ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXFCTRL_FOSR_8                           ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXFCTRL_FOSR_9                           ((uint32_t)0x02000000U) /* Bit25 */

#define DSMU_FLTXFCTRL_IOSR                             ((uint32_t)0x000000FFU) /* Bit[7:0] Integrator oversampling ratio (averaging length) */
#define DSMU_FLTXFCTRL_IOSR_0                           ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXFCTRL_IOSR_1                           ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXFCTRL_IOSR_2                           ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_FLTXFCTRL_IOSR_3                           ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_FLTXFCTRL_IOSR_4                           ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_FLTXFCTRL_IOSR_5                           ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_FLTXFCTRL_IOSR_6                           ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_FLTXFCTRL_IOSR_7                           ((uint32_t)0x00000080U) /* Bit7 */

/** Bit definition for DSMU_FLTXJDAT register  **/
#define DSMU_FLTXJDAT_JDAT                              ((uint32_t)0xFFFFFF00U) /* Bit[31:8] Injected group conversion data */
#define DSMU_FLTXJDAT_JDAT_0                            ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXJDAT_JDAT_1                            ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXJDAT_JDAT_2                            ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXJDAT_JDAT_3                            ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXJDAT_JDAT_4                            ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXJDAT_JDAT_5                            ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXJDAT_JDAT_6                            ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXJDAT_JDAT_7                            ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXJDAT_JDAT_8                            ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXJDAT_JDAT_9                            ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXJDAT_JDAT_10                           ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXJDAT_JDAT_11                           ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXJDAT_JDAT_12                           ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXJDAT_JDAT_13                           ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXJDAT_JDAT_14                           ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXJDAT_JDAT_15                           ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXJDAT_JDAT_16                           ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXJDAT_JDAT_17                           ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXJDAT_JDAT_18                           ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXJDAT_JDAT_19                           ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXJDAT_JDAT_20                           ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXJDAT_JDAT_21                           ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXJDAT_JDAT_22                           ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXJDAT_JDAT_23                           ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXJDAT_JDATCH                            ((uint32_t)0x00000007U) /* Bit[2:0] Injected channel most recently converted */
#define DSMU_FLTXJDAT_JDATCH_0                          ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXJDAT_JDATCH_1                          ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXJDAT_JDATCH_2                          ((uint32_t)0x00000004U) /* Bit2 */

/** Bit definition for DSMU_FLTXRDAT register  **/
#define DSMU_FLTXRDAT_RDAT                              ((uint32_t)0xFFFFFF00U) /* Bit[31:8] Regular channel conversion data */
#define DSMU_FLTXRDAT_RDAT_0                            ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXRDAT_RDAT_1                            ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXRDAT_RDAT_2                            ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXRDAT_RDAT_3                            ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXRDAT_RDAT_4                            ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXRDAT_RDAT_5                            ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXRDAT_RDAT_6                            ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXRDAT_RDAT_7                            ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXRDAT_RDAT_8                            ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXRDAT_RDAT_9                            ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXRDAT_RDAT_10                           ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXRDAT_RDAT_11                           ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXRDAT_RDAT_12                           ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXRDAT_RDAT_13                           ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXRDAT_RDAT_14                           ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXRDAT_RDAT_15                           ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXRDAT_RDAT_16                           ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXRDAT_RDAT_17                           ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXRDAT_RDAT_18                           ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXRDAT_RDAT_19                           ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXRDAT_RDAT_20                           ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXRDAT_RDAT_21                           ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXRDAT_RDAT_22                           ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXRDAT_RDAT_23                           ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXRDAT_RPEND                             ((uint32_t)0x00000010U) /* Bit[4] Regular channel pending data */

#define DSMU_FLTXRDAT_RDATCH                            ((uint32_t)0x00000007U) /* Bit[2:0] Regular channel most recently converted */
#define DSMU_FLTXRDAT_RDATCH_0                          ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXRDAT_RDATCH_1                          ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXRDAT_RDATCH_2                          ((uint32_t)0x00000004U) /* Bit2 */

/** Bit definition for DSMU_FLTXAWDHT register  **/
#define DSMU_FLTXAWDHT_AWDHT                            ((uint32_t)0xFFFFFF00U) /* Bit[31:8] Analog watchdog threshold high */
#define DSMU_FLTXAWDHT_AWDHT_0                          ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXAWDHT_AWDHT_1                          ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXAWDHT_AWDHT_2                          ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXAWDHT_AWDHT_3                          ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXAWDHT_AWDHT_4                          ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXAWDHT_AWDHT_5                          ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXAWDHT_AWDHT_6                          ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXAWDHT_AWDHT_7                          ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXAWDHT_AWDHT_8                          ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXAWDHT_AWDHT_9                          ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXAWDHT_AWDHT_10                         ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXAWDHT_AWDHT_11                         ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXAWDHT_AWDHT_12                         ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXAWDHT_AWDHT_13                         ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXAWDHT_AWDHT_14                         ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXAWDHT_AWDHT_15                         ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXAWDHT_AWDHT_16                         ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXAWDHT_AWDHT_17                         ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXAWDHT_AWDHT_18                         ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXAWDHT_AWDHT_19                         ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXAWDHT_AWDHT_20                         ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXAWDHT_AWDHT_21                         ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXAWDHT_AWDHT_22                         ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXAWDHT_AWDHT_23                         ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXAWDHT_BKAWDHT                          ((uint32_t)0x0000000FU) /* Bit[3:0] Break signal assignment to analog watchdog threshold high event */
#define DSMU_FLTXAWDHT_BKAWDHT_0                        ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXAWDHT_BKAWDHT_1                        ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXAWDHT_BKAWDHT_2                        ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_FLTXAWDHT_BKAWDHT_3                        ((uint32_t)0x00000008U) /* Bit3 */

/** Bit definition for DSMU_FLTXAWDLT register  **/
#define DSMU_FLTXAWDLT_AWDLT                            ((uint32_t)0xFFFFFF00U) /* Bit[31:8] Analog watchdog threshold low */
#define DSMU_FLTXAWDLT_AWDLT_0                          ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXAWDLT_AWDLT_1                          ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXAWDLT_AWDLT_2                          ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXAWDLT_AWDLT_3                          ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXAWDLT_AWDLT_4                          ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXAWDLT_AWDLT_5                          ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXAWDLT_AWDLT_6                          ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXAWDLT_AWDLT_7                          ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXAWDLT_AWDLT_8                          ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXAWDLT_AWDLT_9                          ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXAWDLT_AWDLT_10                         ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXAWDLT_AWDLT_11                         ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXAWDLT_AWDLT_12                         ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXAWDLT_AWDLT_13                         ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXAWDLT_AWDLT_14                         ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXAWDLT_AWDLT_15                         ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXAWDLT_AWDLT_16                         ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXAWDLT_AWDLT_17                         ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXAWDLT_AWDLT_18                         ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXAWDLT_AWDLT_19                         ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXAWDLT_AWDLT_20                         ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXAWDLT_AWDLT_21                         ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXAWDLT_AWDLT_22                         ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXAWDLT_AWDLT_23                         ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXAWDLT_BKAWDLT                          ((uint32_t)0x0000000FU) /* Bit[3:0] Break signal assignment to analog watchdog threshold low event */
#define DSMU_FLTXAWDLT_BKAWDLT_0                        ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXAWDLT_BKAWDLT_1                        ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXAWDLT_BKAWDLT_2                        ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_FLTXAWDLT_BKAWDLT_3                        ((uint32_t)0x00000008U) /* Bit3 */

/** Bit definition for DSMU_FLTXAWDSTS register  **/
#define DSMU_FLTXAWDSTS_AWDHTF                          ((uint32_t)0x0000FF00U) /* Bit[15:8] Analog watchdog threshold high flag */
#define DSMU_FLTXAWDSTS_AWDHTF_0                        ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXAWDSTS_AWDHTF_1                        ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXAWDSTS_AWDHTF_2                        ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXAWDSTS_AWDHTF_3                        ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXAWDSTS_AWDHTF_4                        ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXAWDSTS_AWDHTF_5                        ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXAWDSTS_AWDHTF_6                        ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXAWDSTS_AWDHTF_7                        ((uint32_t)0x00008000U) /* Bit15 */

#define DSMU_FLTXAWDSTS_AWDLTF                          ((uint32_t)0x000000FFU) /* Bit[7:0]  Analog watchdog threshold low flag */
#define DSMU_FLTXAWDSTS_AWDLTF_0                        ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXAWDSTS_AWDLTF_1                        ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXAWDSTS_AWDLTF_2                        ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_FLTXAWDSTS_AWDLTF_3                        ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_FLTXAWDSTS_AWDLTF_4                        ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_FLTXAWDSTS_AWDLTF_5                        ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_FLTXAWDSTS_AWDLTF_6                        ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_FLTXAWDSTS_AWDLTF_7                        ((uint32_t)0x00000080U) /* Bit7 */

/** Bit definition for DSMU_FLTXAWDCLR register  **/
#define DSMU_FLTXAWDCLR_CLRAWDHTF                       ((uint32_t)0x0000FF00U) /* Bit[15:8] Clear the analog watchdog threshold high flag */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_0                     ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_1                     ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_2                     ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_3                     ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_4                     ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_5                     ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_6                     ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXAWDCLR_CLRAWDHTF_7                     ((uint32_t)0x00008000U) /* Bit15 */

#define DSMU_FLTXAWDCLR_CLRAWDLTF                       ((uint32_t)0x000000FFU) /* Bit[7:0] Clear the analog watchdog threshold low flag */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_0                     ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_1                     ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_2                     ((uint32_t)0x00000004U) /* Bit2 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_3                     ((uint32_t)0x00000008U) /* Bit3 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_4                     ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_5                     ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_6                     ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_FLTXAWDCLR_CLRAWDLTF_7                     ((uint32_t)0x00000080U) /* Bit7 */

/** Bit definition for DSMU_FLTXEXDETMAX register  **/
#define DSMU_FLTXEXDETMAX_EXDETMAX                      ((uint32_t)0xFFFFFF00U) /* Bit[31:8] Extremes detector maximum value */
#define DSMU_FLTXEXDETMAX_EXDETMAX_0                    ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_1                    ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_2                    ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_3                    ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_4                    ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_5                    ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_6                    ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_7                    ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_8                    ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_9                    ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_10                   ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_11                   ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_12                   ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_13                   ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_14                   ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_15                   ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_16                   ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_17                   ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_18                   ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_19                   ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_20                   ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_21                   ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_22                   ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXEXDETMAX_EXDETMAX_23                   ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXEXDETMAX_EXDETMAXCH                    ((uint32_t)0x00000007U) /* Bit[2:0] Extremes detector maximum data channel. */
#define DSMU_FLTXEXDETMAX_EXDETMAXCH_0                  ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXEXDETMAX_EXDETMAXCH_1                  ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXEXDETMAX_EXDETMAXCH_2                  ((uint32_t)0x00000004U) /* Bit2 */

/** Bit definition for DSMU_FLTXEXDETMIN register  **/
#define DSMU_FLTXEXDETMIN_EXDETMIN                      ((uint32_t)0xFFFFFF00U) /* Bit[31:8] Extremes detector minimum value */
#define DSMU_FLTXEXDETMIN_EXDETMIN_0                    ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_1                    ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_2                    ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_3                    ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_4                    ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_5                    ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_6                    ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_7                    ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_8                    ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_9                    ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_10                   ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_11                   ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_12                   ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_13                   ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_14                   ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_15                   ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_16                   ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_17                   ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_18                   ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_19                   ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_20                   ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_21                   ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_22                   ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXEXDETMIN_EXDETMIN_23                   ((uint32_t)0x80000000U) /* Bit31 */

#define DSMU_FLTXEXDETMIN_EXDETMINCH                    ((uint32_t)0x00000007U) /* Bit[2:0] Extremes detector minimum data channel */
#define DSMU_FLTXEXDETMIN_EXDETMINCH_0                  ((uint32_t)0x00000001U) /* Bit0 */
#define DSMU_FLTXEXDETMIN_EXDETMINCH_1                  ((uint32_t)0x00000002U) /* Bit1 */
#define DSMU_FLTXEXDETMIN_EXDETMINCH_2                  ((uint32_t)0x00000004U) /* Bit2 */

/** Bit definition for DSMU_FLTXCOVTIM register  **/
#define DSMU_FLTXCOVTIM_COVCNT                          ((uint32_t)0xFFFFFFF0U) /* Bit[31:4] 28-bit timer counting conversion time t = CNVCNT[27:0] / fDSMUCLK */
#define DSMU_FLTXCOVTIM_COVCNT_0                        ((uint32_t)0x00000010U) /* Bit4 */
#define DSMU_FLTXCOVTIM_COVCNT_1                        ((uint32_t)0x00000020U) /* Bit5 */
#define DSMU_FLTXCOVTIM_COVCNT_2                        ((uint32_t)0x00000040U) /* Bit6 */
#define DSMU_FLTXCOVTIM_COVCNT_3                        ((uint32_t)0x00000080U) /* Bit7 */
#define DSMU_FLTXCOVTIM_COVCNT_4                        ((uint32_t)0x00000100U) /* Bit8 */
#define DSMU_FLTXCOVTIM_COVCNT_5                        ((uint32_t)0x00000200U) /* Bit9 */
#define DSMU_FLTXCOVTIM_COVCNT_6                        ((uint32_t)0x00000400U) /* Bit10 */
#define DSMU_FLTXCOVTIM_COVCNT_7                        ((uint32_t)0x00000800U) /* Bit11 */
#define DSMU_FLTXCOVTIM_COVCNT_8                        ((uint32_t)0x00001000U) /* Bit12 */
#define DSMU_FLTXCOVTIM_COVCNT_9                        ((uint32_t)0x00002000U) /* Bit13 */
#define DSMU_FLTXCOVTIM_COVCNT_10                       ((uint32_t)0x00004000U) /* Bit14 */
#define DSMU_FLTXCOVTIM_COVCNT_11                       ((uint32_t)0x00008000U) /* Bit15 */
#define DSMU_FLTXCOVTIM_COVCNT_12                       ((uint32_t)0x00010000U) /* Bit16 */
#define DSMU_FLTXCOVTIM_COVCNT_13                       ((uint32_t)0x00020000U) /* Bit17 */
#define DSMU_FLTXCOVTIM_COVCNT_14                       ((uint32_t)0x00040000U) /* Bit18 */
#define DSMU_FLTXCOVTIM_COVCNT_15                       ((uint32_t)0x00080000U) /* Bit19 */
#define DSMU_FLTXCOVTIM_COVCNT_16                       ((uint32_t)0x00100000U) /* Bit20 */
#define DSMU_FLTXCOVTIM_COVCNT_17                       ((uint32_t)0x00200000U) /* Bit21 */
#define DSMU_FLTXCOVTIM_COVCNT_18                       ((uint32_t)0x00400000U) /* Bit22 */
#define DSMU_FLTXCOVTIM_COVCNT_19                       ((uint32_t)0x00800000U) /* Bit23 */
#define DSMU_FLTXCOVTIM_COVCNT_20                       ((uint32_t)0x01000000U) /* Bit24 */
#define DSMU_FLTXCOVTIM_COVCNT_21                       ((uint32_t)0x02000000U) /* Bit25 */
#define DSMU_FLTXCOVTIM_COVCNT_22                       ((uint32_t)0x04000000U) /* Bit26 */
#define DSMU_FLTXCOVTIM_COVCNT_23                       ((uint32_t)0x08000000U) /* Bit27 */
#define DSMU_FLTXCOVTIM_COVCNT_24                       ((uint32_t)0x10000000U) /* Bit28 */
#define DSMU_FLTXCOVTIM_COVCNT_25                       ((uint32_t)0x20000000U) /* Bit29 */
#define DSMU_FLTXCOVTIM_COVCNT_26                       ((uint32_t)0x40000000U) /* Bit30 */
#define DSMU_FLTXCOVTIM_COVCNT_27                       ((uint32_t)0x80000000U) /* Bit31 */

/*** Flexible Extended Memory Controller  ***/

/** Bit definition for FEMC_STS register **/
#define FEMC_STS_RECCINTF           ((uint32_t)0x00001000U)
#define FEMC_STS_ECCINTF            ((uint32_t)0x00000400U)
#define FEMC_STS_ECCINTENF          ((uint32_t)0x00000100U)
#define FEMC_STS_RINT1F             ((uint32_t)0x00000040U)
#define FEMC_STS_RINT0F             ((uint32_t)0x00000020U)
#define FEMC_STS_INT1F              ((uint32_t)0x00000010U)
#define FEMC_STS_INT0F              ((uint32_t)0x00000008U)
#define FEMC_STS_INT1ENF            ((uint32_t)0x00000004U)
#define FEMC_STS_INT0ENF            ((uint32_t)0x00000002U)
#define FEMC_STS_LPSTS              ((uint32_t)0x00000001U)

/** Bit definition for FEMC_STS1 register **/
#define FEMC_STS1_M0TYPE            ((uint32_t)0x00000003U)
#define FEMC_STS1_M0TYPE_0          ((uint32_t)0x00000001U)
#define FEMC_STS1_M0TYPE_1          ((uint32_t)0x00000002U)

/** Bit definition for FEMC_CFG register **/
#define FEMC_CFG_ASYNCADV           ((uint32_t)0x00000100U)
#define FEMC_CFG_ECCINTEN           ((uint32_t)0x00000040U)
#define FEMC_CFG_INT1EN             ((uint32_t)0x00000002U)
#define FEMC_CFG_INT0EN             ((uint32_t)0x00000001U)

/** Bit definition for FEMC_CCFG register **/
#define FEMC_CCFG_ASYNCADVDIS       ((uint32_t)0x00000100U)
#define FEMC_CCFG_ECCINTDIS         ((uint32_t)0x00000040U)
#define FEMC_CCFG_INT1CLR           ((uint32_t)0x00000010U)
#define FEMC_CCFG_INT0CLR           ((uint32_t)0x00000008U)
#define FEMC_CCFG_INT1DIS           ((uint32_t)0x00000002U)
#define FEMC_CCFG_INT0DIS           ((uint32_t)0x00000001U)

/** Bit definition for FEMC_CTRL register **/
#define FEMC_CTRL_CHIPNUM           ((uint32_t)0x03800000U)
#define FEMC_CTRL_CHIPNUM_0         ((uint32_t)0x00800000U)
#define FEMC_CTRL_CHIPNUM_1         ((uint32_t)0x01000000U)
#define FEMC_CTRL_CHIPNUM_2         ((uint32_t)0x02000000U)
#define FEMC_CTRL_CMDTYPE           ((uint32_t)0x00600000U)
#define FEMC_CTRL_CMDTYPE_0         ((uint32_t)0x00200000U)
#define FEMC_CTRL_CMDTYPE_1         ((uint32_t)0x00400000U)
#define FEMC_CTRL_CREPOL            ((uint32_t)0x00100000U)
#define FEMC_CTRL_ADDR              ((uint32_t)0x000FFFFFU)

/** Bit definition for FEMC_TCFG register **/
#define FEMC_TCFG_WERR              ((uint32_t)0x00700000U)
#define FEMC_TCFG_TRAR              ((uint32_t)0x000E0000U)
#define FEMC_TCFG_PCCLR             ((uint32_t)0x0001C000U)
#define FEMC_TCFG_WP                ((uint32_t)0x00003800U)
#define FEMC_TCFG_CERE              ((uint32_t)0x00000700U)
#define FEMC_TCFG_WC                ((uint32_t)0x000000F0U)
#define FEMC_TCFG_RC                ((uint32_t)0x0000000FU)

/** Bit definition for FEMC_OMCFG register **/
#define FEMC_OMCFG_BSTAGN           ((uint32_t)0x0000E000U)
#define FEMC_OMCFG_BSTAGN_0         ((uint32_t)0x00002000U)
#define FEMC_OMCFG_BSTAGN_1         ((uint32_t)0x00004000U)
#define FEMC_OMCFG_BSTAGN_2         ((uint32_t)0x00008000U)
#define FEMC_OMCFG_BLSS             ((uint32_t)0x00001000U)
#define FEMC_OMCFG_ADV              ((uint32_t)0x00000800U)
#define FEMC_OMCFG_BAA              ((uint32_t)0x00000400U)
#define FEMC_OMCFG_WRBL             ((uint32_t)0x00000380U)
#define FEMC_OMCFG_WRBL_0           ((uint32_t)0x00000080U)
#define FEMC_OMCFG_WRBL_1           ((uint32_t)0x00000100U)
#define FEMC_OMCFG_WRBL_2           ((uint32_t)0x00002000U)
#define FEMC_OMCFG_WRSYN            ((uint32_t)0x00000040U)
#define FEMC_OMCFG_RDBL             ((uint32_t)0x00000038U)
#define FEMC_OMCFG_RDBL_0           ((uint32_t)0x00000008U)
#define FEMC_OMCFG_RDBL_1           ((uint32_t)0x00000010U)
#define FEMC_OMCFG_RDBL_2           ((uint32_t)0x00000020U)
#define FEMC_OMCFG_RDSYN            ((uint32_t)0x00000004U)
#define FEMC_OMCFG_MDBW             ((uint32_t)0x00000003U)
#define FEMC_OMCFG_MDBW_0           ((uint32_t)0x00000001U)
#define FEMC_OMCFG_MDBW_1           ((uint32_t)0x00000002U)

/** Bit definition for FEMC_RPE register **/
#define FEMC_RPE_REFPRD             ((uint32_t)0x0000000FU)

/** Bit definition for FEMC_SNTSTS1/2/3/4 register **/
#define FEMC_SNTSTS_WECS            ((uint32_t)0x00100000U)
#define FEMC_SNTSTS_TR              ((uint32_t)0x000E0000U)
#define FEMC_SNTSTS_PC              ((uint32_t)0x0001C000U)
#define FEMC_SNTSTS_WP              ((uint32_t)0x00003800U)
#define FEMC_SNTSTS_CEOE            ((uint32_t)0x00000700U)
#define FEMC_SNTSTS_WC              ((uint32_t)0x000000F0U)
#define FEMC_SNTSTS_RC              ((uint32_t)0x0000000FU)

/** Bit definition for FEMC_SNOMSTS1/2/3/4 register **/
#define FEMC_SNOMSTS_ADDRMCH        ((uint32_t)0xFF000000U)
#define FEMC_SNOMSTS_ADDRMSK        ((uint32_t)0x00FF0000U)
#define FEMC_SNOMSTS_BSTAGN         ((uint32_t)0x0000E000U)
#define FEMC_SNOMSTS_BSTAGN_0       ((uint32_t)0x00002000U)
#define FEMC_SNOMSTS_BSTAGN_1       ((uint32_t)0x00004000U)
#define FEMC_SNOMSTS_BSTAGN_2       ((uint32_t)0x00008000U)
#define FEMC_SNOMSTS_BLSS           ((uint32_t)0x00001000U)
#define FEMC_SNOMSTS_ADV            ((uint32_t)0x00000800U)
#define FEMC_SNOMSTS_BAA            ((uint32_t)0x00000400U)
#define FEMC_SNOMSTS_WRBL           ((uint32_t)0x00000380U)
#define FEMC_SNOMSTS_WRBL_0         ((uint32_t)0x00000080U)
#define FEMC_SNOMSTS_WRBL_1         ((uint32_t)0x00000100U)
#define FEMC_SNOMSTS_WRBL_2         ((uint32_t)0x00002000U)
#define FEMC_SNOMSTS_WRSYN          ((uint32_t)0x00000040U)
#define FEMC_SNOMSTS_RDBL           ((uint32_t)0x00000038U)
#define FEMC_SNOMSTS_RDBL_0         ((uint32_t)0x00000008U)
#define FEMC_SNOMSTS_RDBL_1         ((uint32_t)0x00000010U)
#define FEMC_SNOMSTS_RDBL_2         ((uint32_t)0x00000020U)
#define FEMC_SNOMCFG_RDSYN          ((uint32_t)0x00000004U)
#define FEMC_SNOMSTS_MDBW           ((uint32_t)0x00000003U)
#define FEMC_SNOMSTS_MDBW_0         ((uint32_t)0x00000001U)
#define FEMC_SNOMSTS_MDBW_1         ((uint32_t)0x00000002U)

/** Bit definition for FEMC_NTSTS1/2 register **/
#define FEMC_NTSTS_RR              ((uint32_t)0x00700000U)
#define FEMC_NTSTS_AR              ((uint32_t)0x000E0000U)
#define FEMC_NTSTS_CLR             ((uint32_t)0x0001C000U)
#define FEMC_NTSTS_WP              ((uint32_t)0x00003800U)
#define FEMC_NTSTS_REA             ((uint32_t)0x00000700U)
#define FEMC_NTSTS_WC              ((uint32_t)0x000000F0U)
#define FEMC_NTSTS_RC              ((uint32_t)0x0000000FU)

/** Bit definition for FEMC_NOMSTS1/2 register **/
#define FEMC_SNOMSTS_ADDRMCH        ((uint32_t)0xFF000000U)
#define FEMC_SNOMSTS_ADDRMSK        ((uint32_t)0x00FF0000U)
#define FEMC_SNOMSTS_MDBW           ((uint32_t)0x00000003U)
#define FEMC_SNOMSTS_MDBW_0         ((uint32_t)0x00000001U)
#define FEMC_SNOMSTS_MDBW_1         ((uint32_t)0x00000002U)

/** Bit definition for FEMC_USTS register **/
#define FEMC_USTS_USER              ((uint32_t)0x000000FFU)

/** Bit definition for FEMC_CFG register **/
#define FEMC_CFG_USER               ((uint32_t)0x000000FFU)

/** Bit definition for FEMC_ECCSTS register **/
#define FEMC_ECCSTS_RDF             ((uint32_t)0x3E000000U)
#define FEMC_ECCSTS_RDF_0           ((uint32_t)0x02000000U)
#define FEMC_ECCSTS_RDF_1           ((uint32_t)0x04000000U)
#define FEMC_ECCSTS_RDF_2           ((uint32_t)0x08000000U)
#define FEMC_ECCSTS_RDF_3           ((uint32_t)0x10000000U)
#define FEMC_ECCSTS_RDF_4           ((uint32_t)0x20000000U)
#define FEMC_ECCSTS_CORCTF          ((uint32_t)0x01F00000U)
#define FEMC_ECCSTS_CORCTF_0        ((uint32_t)0x00100000U)
#define FEMC_ECCSTS_CORCTF_1        ((uint32_t)0x00200000U)
#define FEMC_ECCSTS_CORCTF_2        ((uint32_t)0x00400000U)
#define FEMC_ECCSTS_CORCTF_3        ((uint32_t)0x00800000U)
#define FEMC_ECCSTS_CORCTF_4        ((uint32_t)0x01000000U)
#define FEMC_ECCSTS_FAILF           ((uint32_t)0x000F8000U)
#define FEMC_ECCSTS_FAILF_0         ((uint32_t)0x00008000U)
#define FEMC_ECCSTS_FAILF_1         ((uint32_t)0x00010000U)
#define FEMC_ECCSTS_FAILF_2         ((uint32_t)0x00020000U)
#define FEMC_ECCSTS_FAILF_3         ((uint32_t)0x00040000U)
#define FEMC_ECCSTS_FAILF_4         ((uint32_t)0x00080000U)
#define FEMC_ECCSTS_VLDF            ((uint32_t)0x00007C00U)
#define FEMC_ECCSTS_VLDF_0          ((uint32_t)0x00000400U)
#define FEMC_ECCSTS_VLDF_1          ((uint32_t)0x00000800U)
#define FEMC_ECCSTS_VLDF_2          ((uint32_t)0x00001000U)
#define FEMC_ECCSTS_VLDF_3          ((uint32_t)0x00002000U)
#define FEMC_ECCSTS_VLDF_4          ((uint32_t)0x00004000U)
#define FEMC_ECCSTS_WRF             ((uint32_t)0x00000200U)
#define FEMC_ECCSTS_LASTS           ((uint32_t)0x00000180U)
#define FEMC_ECCSTS_LASTS_0         ((uint32_t)0x00000080U)
#define FEMC_ECCSTS_LASTS_1         ((uint32_t)0x00000100U)
#define FEMC_ECCSTS_BUSY            ((uint32_t)0x00000040U)
#define FEMC_ECCSTS_INTF            ((uint32_t)0x0000003FU)
#define FEMC_ECCSTS_INTF_0          ((uint32_t)0x00000001U)
#define FEMC_ECCSTS_INTF_1          ((uint32_t)0x00000002U)
#define FEMC_ECCSTS_INTF_2          ((uint32_t)0x00000004U)
#define FEMC_ECCSTS_INTF_3          ((uint32_t)0x00000008U)
#define FEMC_ECCSTS_INTF_4          ((uint32_t)0x00000010U)
#define FEMC_ECCSTS_INTF_5          ((uint32_t)0x00000020U)

/** Bit definition for FEMC_ECCCFG register **/
#define FEMC_ECCCFG_EBLKSIZ        ((uint32_t)0x00001800U)
#define FEMC_ECCCFG_EBLKSIZ_0      ((uint32_t)0x00000800U)
#define FEMC_ECCCFG_EBLKSIZ_1      ((uint32_t)0x00001000U)
#define FEMC_ECCCFG_EBLKEN         ((uint32_t)0x00000400U)
#define FEMC_ECCCFG_ABTINT         ((uint32_t)0x00000200U)
#define FEMC_ECCCFG_RDCINT         ((uint32_t)0x00000100U)
#define FEMC_ECCCFG_A8OUTMSK       ((uint32_t)0x00000080U)
#define FEMC_ECCCFG_JUMP           ((uint32_t)0x00000060U)
#define FEMC_ECCCFG_JUMP_0         ((uint32_t)0x00000020U)
#define FEMC_ECCCFG_JUMP_1         ((uint32_t)0x00000040U)
#define FEMC_ECCCFG_RMOD           ((uint32_t)0x00000010U)
#define FEMC_ECCCFG_MOD            ((uint32_t)0x0000000CU)
#define FEMC_ECCCFG_MOD_0          ((uint32_t)0x00000004U)
#define FEMC_ECCCFG_MOD_1          ((uint32_t)0x00000008U)
#define FEMC_ECCCFG_BLKNUM         ((uint32_t)0x00000003U)
#define FEMC_ECCCFG_BLKNUM_0       ((uint32_t)0x00000001U)
#define FEMC_ECCCFG_BLKNUM_1       ((uint32_t)0x00000002U)

/** Bit definition for FEMC_ECCMD0 register **/
#define FEMC_ECCMD0_UEND           ((uint32_t)0x01000000U)
#define FEMC_ECCMD0_RDEND          ((uint32_t)0x00FF0000U)
#define FEMC_ECCMD0_RD             ((uint32_t)0x0000FF00U)
#define FEMC_ECCMD0_WR             ((uint32_t)0x000000FFU)

/** Bit definition for FEMC_ECCMD1 register **/
#define FEMC_ECCMD1_UEND           ((uint32_t)0x01000000U)
#define FEMC_ECCMD1_RDCOLEND       ((uint32_t)0x00FF0000U)
#define FEMC_ECCMD1_RDCOL          ((uint32_t)0x0000FF00U)
#define FEMC_ECCMD1_WRCOL          ((uint32_t)0x000000FFU)

/** Bit definition for FEMC_ECCADDR0 register **/
#define FEMC_ECCADDR0_ADDR         ((uint32_t)0xFFFFFFFFU)

/** Bit definition for FEMC_ECCADDR1 register **/
#define FEMC_ECCADDR1_ADDR         ((uint32_t)0x00FFFFFFU)

/** Bit definition for FEMC_ECCBLK0/1/2/3 and FEMC_ECCEBLK register **/
#define FEMC_ECCBLK_INTF           ((uint32_t)0x80000000U)
#define FEMC_ECCBLK_VALDF          ((uint32_t)0x40000000U)
#define FEMC_ECCBLK_RDF            ((uint32_t)0x20000000U)
#define FEMC_ECCBLK_ERRF           ((uint32_t)0x10000000U)
#define FEMC_ECCBLK_CRTF           ((uint32_t)0x08000000U)
#define FEMC_ECCBLK_VAL            ((uint32_t)0x00FFFFFFU)

/** Bit definition for FEMC_SNADDR1/2/3/4 register **/
#define FEMC_SNADDR_ADDRMCH        ((uint32_t)0xFF000000U)
#define FEMC_SNADDR_ADDRMSK        ((uint32_t)0x00FF0000U)

/** Bit definition for FEMC_NADDR1/2 register **/
#define FEMC_NADDR_ADDRMCH         ((uint32_t)0xFF000000U)
#define FEMC_NADDR_ADDRMSK         ((uint32_t)0x00FF0000U)

/** Bit definition for FEMC_SNMOD register **/
#define FEMC_SNMOD_MUXEN           ((uint32_t)0x00000020U)
#define FEMC_SNMOD_AGTM            ((uint32_t)0x00000010U)
#define FEMC_SNMOD_SYNC            ((uint32_t)0x00000008U)

/** Bit definition for FEMC_NMOD register **/
#define FEMC_NMOD_CSL              ((uint32_t)0x00000040U)
#define FEMC_NMOD_AGTM             ((uint32_t)0x00000010U)
#define FEMC_NMOD_SYNC             ((uint32_t)0x00000008U)

/** Bit definition for FEMC_REMAP register **/
#define FEMC_REMAP_REMAP           ((uint32_t)0x00000001U)

/*** Real-Time Clock (RTC) ***/
/** Bits definition for RTC_TSH register **/
#define RTC_TSH_APM   ((uint32_t)0x00400000)
#define RTC_TSH_HOT   ((uint32_t)0x00300000)
#define RTC_TSH_HOT_0 ((uint32_t)0x00100000)
#define RTC_TSH_HOT_1 ((uint32_t)0x00200000)
#define RTC_TSH_HOU   ((uint32_t)0x000F0000)
#define RTC_TSH_HOU_0 ((uint32_t)0x00010000)
#define RTC_TSH_HOU_1 ((uint32_t)0x00020000)
#define RTC_TSH_HOU_2 ((uint32_t)0x00040000)
#define RTC_TSH_HOU_3 ((uint32_t)0x00080000)
#define RTC_TSH_MIT   ((uint32_t)0x00007000)
#define RTC_TSH_MIT_0 ((uint32_t)0x00001000)
#define RTC_TSH_MIT_1 ((uint32_t)0x00002000)
#define RTC_TSH_MIT_2 ((uint32_t)0x00004000)
#define RTC_TSH_MIU   ((uint32_t)0x00000F00)
#define RTC_TSH_MIU_0 ((uint32_t)0x00000100)
#define RTC_TSH_MIU_1 ((uint32_t)0x00000200)
#define RTC_TSH_MIU_2 ((uint32_t)0x00000400)
#define RTC_TSH_MIU_3 ((uint32_t)0x00000800)
#define RTC_TSH_SCT   ((uint32_t)0x00000070)
#define RTC_TSH_SCT_0 ((uint32_t)0x00000010)
#define RTC_TSH_SCT_1 ((uint32_t)0x00000020)
#define RTC_TSH_SCT_2 ((uint32_t)0x00000040)
#define RTC_TSH_SCU   ((uint32_t)0x0000000F)
#define RTC_TSH_SCU_0 ((uint32_t)0x00000001)
#define RTC_TSH_SCU_1 ((uint32_t)0x00000002)
#define RTC_TSH_SCU_2 ((uint32_t)0x00000004)
#define RTC_TSH_SCU_3 ((uint32_t)0x00000008)

/**  Bits definition for RTC_DATE register  **/
#define RTC_DATE_YRT   ((uint32_t)0x00F00000)
#define RTC_DATE_YRT_0 ((uint32_t)0x00100000)
#define RTC_DATE_YRT_1 ((uint32_t)0x00200000)
#define RTC_DATE_YRT_2 ((uint32_t)0x00400000)
#define RTC_DATE_YRT_3 ((uint32_t)0x00800000)
#define RTC_DATE_YRU   ((uint32_t)0x000F0000)
#define RTC_DATE_YRU_0 ((uint32_t)0x00010000)
#define RTC_DATE_YRU_1 ((uint32_t)0x00020000)
#define RTC_DATE_YRU_2 ((uint32_t)0x00040000)
#define RTC_DATE_YRU_3 ((uint32_t)0x00080000)
#define RTC_DATE_WDU   ((uint32_t)0x0000E000)
#define RTC_DATE_WDU_0 ((uint32_t)0x00002000)
#define RTC_DATE_WDU_1 ((uint32_t)0x00004000)
#define RTC_DATE_WDU_2 ((uint32_t)0x00008000)
#define RTC_DATE_MOT   ((uint32_t)0x00001000)
#define RTC_DATE_MOU   ((uint32_t)0x00000F00)
#define RTC_DATE_MOU_0 ((uint32_t)0x00000100)
#define RTC_DATE_MOU_1 ((uint32_t)0x00000200)
#define RTC_DATE_MOU_2 ((uint32_t)0x00000400)
#define RTC_DATE_MOU_3 ((uint32_t)0x00000800)
#define RTC_DATE_DAT   ((uint32_t)0x00000030)
#define RTC_DATE_DAT_0 ((uint32_t)0x00000010)
#define RTC_DATE_DAT_1 ((uint32_t)0x00000020)
#define RTC_DATE_DAU   ((uint32_t)0x0000000F)
#define RTC_DATE_DAU_0 ((uint32_t)0x00000001)
#define RTC_DATE_DAU_1 ((uint32_t)0x00000002)
#define RTC_DATE_DAU_2 ((uint32_t)0x00000004)
#define RTC_DATE_DAU_3 ((uint32_t)0x00000008)

/**  Bits definition for RTC_CTRL register  **/
#define RTC_CTRL_CAOVIEN  ((uint32_t)0x08000000)
#define RTC_CTRL_TAMPOE   ((uint32_t)0x04000000)
#define RTC_CTRL_IETSEN   ((uint32_t)0x01000000)
#define RTC_CTRL_COEN     ((uint32_t)0x00800000)
#define RTC_CTRL_OUTSEL   ((uint32_t)0x00600000)
#define RTC_CTRL_OUTSEL_0 ((uint32_t)0x00200000)
#define RTC_CTRL_OUTSEL_1 ((uint32_t)0x00400000)
#define RTC_CTRL_OPOL     ((uint32_t)0x00100000)
#define RTC_CTRL_CALOSEL  ((uint32_t)0x00080000)
#define RTC_CTRL_BAKP     ((uint32_t)0x00040000)
#define RTC_CTRL_SU1H     ((uint32_t)0x00020000)
#define RTC_CTRL_AD1H     ((uint32_t)0x00010000)
#define RTC_CTRL_TSIEN    ((uint32_t)0x00008000)
#define RTC_CTRL_WTIEN    ((uint32_t)0x00004000)
#define RTC_CTRL_ALBIEN   ((uint32_t)0x00002000)
#define RTC_CTRL_ALAIEN   ((uint32_t)0x00001000)
#define RTC_CTRL_TSEN     ((uint32_t)0x00000800)
#define RTC_CTRL_WTEN     ((uint32_t)0x00000400)
#define RTC_CTRL_ALBEN    ((uint32_t)0x00000200)
#define RTC_CTRL_ALAEN    ((uint32_t)0x00000100)
#define RTC_CTRL_CAOVEN   ((uint32_t)0x00000080)

#define RTC_CTRL_HFMT      ((uint32_t)0x00000040)
#define RTC_CTRL_BYPS      ((uint32_t)0x00000020)
#define RTC_CTRL_REFCLKEN  ((uint32_t)0x00000010)
#define RTC_CTRL_TEDGE     ((uint32_t)0x00000008)
#define RTC_CTRL_WKUPSEL   ((uint32_t)0x00000007)
#define RTC_CTRL_WKUPSEL_0 ((uint32_t)0x00000001)
#define RTC_CTRL_WKUPSEL_1 ((uint32_t)0x00000002)
#define RTC_CTRL_WKUPSEL_2 ((uint32_t)0x00000004)

/**  Bits definition for RTC_INITSTS register  **/
#define RTC_INITSTS_BKSRAMREF   ((uint32_t)0x01000000)
#define RTC_INITSTS_IETSF       ((uint32_t)0x00800000)
#define RTC_INITSTS_CAOVF       ((uint32_t)0x00400000)
#define RTC_INITSTS_TAM8F       ((uint32_t)0x00200000)
#define RTC_INITSTS_TAM7F       ((uint32_t)0x00100000)
#define RTC_INITSTS_TAM6F       ((uint32_t)0x00080000)
#define RTC_INITSTS_TAM5F       ((uint32_t)0x00040000)
#define RTC_INITSTS_TAM4F       ((uint32_t)0x00020000)
#define RTC_INITSTS_RECPF       ((uint32_t)0x00010000)
#define RTC_INITSTS_TAM3F       ((uint32_t)0x00008000)
#define RTC_INITSTS_TAM2F       ((uint32_t)0x00004000)
#define RTC_INITSTS_TAM1F       ((uint32_t)0x00002000)
#define RTC_INITSTS_TISOVF      ((uint32_t)0x00001000)
#define RTC_INITSTS_TISF        ((uint32_t)0x00000800)
#define RTC_INITSTS_WTF         ((uint32_t)0x00000400)
#define RTC_INITSTS_ALBF        ((uint32_t)0x00000200)
#define RTC_INITSTS_ALAF        ((uint32_t)0x00000100)
#define RTC_INITSTS_INITM       ((uint32_t)0x00000080)
#define RTC_INITSTS_INITF       ((uint32_t)0x00000040)
#define RTC_INITSTS_RSYF        ((uint32_t)0x00000020)
#define RTC_INITSTS_INITSF      ((uint32_t)0x00000010)
#define RTC_INITSTS_SHOPF       ((uint32_t)0x00000008)
#define RTC_INITSTS_WTWF        ((uint32_t)0x00000004)
#define RTC_INITSTS_ALBWF       ((uint32_t)0x00000002)
#define RTC_INITSTS_ALAWF       ((uint32_t)0x00000001)

/**  Bits definition for RTC_PRE register  **/
#define RTC_PRE_DIVA ((uint32_t)0x007F0000)
#define RTC_PRE_DIVS ((uint32_t)0x00007FFF)

/**  Bits definition for RTC_WKUPT register  **/
#define RTC_WKUPT_WKUPT ((uint32_t)0x0000FFFF)


/**  Bits definition for RTC_ALARMA register  **/
#define RTC_ALARMA_MASK4  ((uint32_t)0x80000000)
#define RTC_ALARMA_WKDSEL ((uint32_t)0x40000000)
#define RTC_ALARMA_DTT    ((uint32_t)0x30000000)
#define RTC_ALARMA_DTT_0  ((uint32_t)0x10000000)
#define RTC_ALARMA_DTT_1  ((uint32_t)0x20000000)
#define RTC_ALARMA_DTU    ((uint32_t)0x0F000000)
#define RTC_ALARMA_DTU_0  ((uint32_t)0x01000000)
#define RTC_ALARMA_DTU_1  ((uint32_t)0x02000000)
#define RTC_ALARMA_DTU_2  ((uint32_t)0x04000000)
#define RTC_ALARMA_DTU_3  ((uint32_t)0x08000000)
#define RTC_ALARMA_MASK3  ((uint32_t)0x00800000)
#define RTC_ALARMA_APM    ((uint32_t)0x00400000)
#define RTC_ALARMA_HOT    ((uint32_t)0x00300000)
#define RTC_ALARMA_HOT_0  ((uint32_t)0x00100000)
#define RTC_ALARMA_HOT_1  ((uint32_t)0x00200000)
#define RTC_ALARMA_HOU    ((uint32_t)0x000F0000)
#define RTC_ALARMA_HOU_0  ((uint32_t)0x00010000)
#define RTC_ALARMA_HOU_1  ((uint32_t)0x00020000)
#define RTC_ALARMA_HOU_2  ((uint32_t)0x00040000)
#define RTC_ALARMA_HOU_3  ((uint32_t)0x00080000)
#define RTC_ALARMA_MASK2  ((uint32_t)0x00008000)
#define RTC_ALARMA_MIT    ((uint32_t)0x00007000)
#define RTC_ALARMA_MIT_0  ((uint32_t)0x00001000)
#define RTC_ALARMA_MIT_1  ((uint32_t)0x00002000)
#define RTC_ALARMA_MIT_2  ((uint32_t)0x00004000)
#define RTC_ALARMA_MIU    ((uint32_t)0x00000F00)
#define RTC_ALARMA_MIU_0  ((uint32_t)0x00000100)
#define RTC_ALARMA_MIU_1  ((uint32_t)0x00000200)
#define RTC_ALARMA_MIU_2  ((uint32_t)0x00000400)
#define RTC_ALARMA_MIU_3  ((uint32_t)0x00000800)
#define RTC_ALARMA_MASK1  ((uint32_t)0x00000080)
#define RTC_ALARMA_SET    ((uint32_t)0x00000070)
#define RTC_ALARMA_SET_0  ((uint32_t)0x00000010)
#define RTC_ALARMA_SET_1  ((uint32_t)0x00000020)
#define RTC_ALARMA_SET_2  ((uint32_t)0x00000040)
#define RTC_ALARMA_SEU    ((uint32_t)0x0000000F)
#define RTC_ALARMA_SEU_0  ((uint32_t)0x00000001)
#define RTC_ALARMA_SEU_1  ((uint32_t)0x00000002)
#define RTC_ALARMA_SEU_2  ((uint32_t)0x00000004)
#define RTC_ALARMA_SEU_3  ((uint32_t)0x00000008)

/**  Bits definition for RTC_ALARMB register  **/
#define RTC_ALARMB_MASK4  ((uint32_t)0x80000000)
#define RTC_ALARMB_WKDSEL ((uint32_t)0x40000000)
#define RTC_ALARMB_DTT    ((uint32_t)0x30000000)
#define RTC_ALARMB_DTT_0  ((uint32_t)0x10000000)
#define RTC_ALARMB_DTT_1  ((uint32_t)0x20000000)
#define RTC_ALARMB_DTU    ((uint32_t)0x0F000000)
#define RTC_ALARMB_DTU_0  ((uint32_t)0x01000000)
#define RTC_ALARMB_DTU_1  ((uint32_t)0x02000000)
#define RTC_ALARMB_DTU_2  ((uint32_t)0x04000000)
#define RTC_ALARMB_DTU_3  ((uint32_t)0x08000000)
#define RTC_ALARMB_MASK3  ((uint32_t)0x00800000)
#define RTC_ALARMB_APM    ((uint32_t)0x00400000)
#define RTC_ALARMB_HOT    ((uint32_t)0x00300000)
#define RTC_ALARMB_HOT_0  ((uint32_t)0x00100000)
#define RTC_ALARMB_HOT_1  ((uint32_t)0x00200000)
#define RTC_ALARMB_HOU    ((uint32_t)0x000F0000)
#define RTC_ALARMB_HOU_0  ((uint32_t)0x00010000)
#define RTC_ALARMB_HOU_1  ((uint32_t)0x00020000)
#define RTC_ALARMB_HOU_2  ((uint32_t)0x00040000)
#define RTC_ALARMB_HOU_3  ((uint32_t)0x00080000)
#define RTC_ALARMB_MASK2  ((uint32_t)0x00008000)
#define RTC_ALARMB_MIT    ((uint32_t)0x00007000)
#define RTC_ALARMB_MIT_0  ((uint32_t)0x00001000)
#define RTC_ALARMB_MIT_1  ((uint32_t)0x00002000)
#define RTC_ALARMB_MIT_2  ((uint32_t)0x00004000)
#define RTC_ALARMB_MIU    ((uint32_t)0x00000F00)
#define RTC_ALARMB_MIU_0  ((uint32_t)0x00000100)
#define RTC_ALARMB_MIU_1  ((uint32_t)0x00000200)
#define RTC_ALARMB_MIU_2  ((uint32_t)0x00000400)
#define RTC_ALARMB_MIU_3  ((uint32_t)0x00000800)
#define RTC_ALARMB_MASK1  ((uint32_t)0x00000080)
#define RTC_ALARMB_SET    ((uint32_t)0x00000070)
#define RTC_ALARMB_SET_0  ((uint32_t)0x00000010)
#define RTC_ALARMB_SET_1  ((uint32_t)0x00000020)
#define RTC_ALARMB_SET_2  ((uint32_t)0x00000040)
#define RTC_ALARMB_SEU    ((uint32_t)0x0000000F)
#define RTC_ALARMB_SEU_0  ((uint32_t)0x00000001)
#define RTC_ALARMB_SEU_1  ((uint32_t)0x00000002)
#define RTC_ALARMB_SEU_2  ((uint32_t)0x00000004)
#define RTC_ALARMB_SEU_3  ((uint32_t)0x00000008)

/**  Bits definition for RTC_WRP register  **/
#define RTC_WRP_PKEY ((uint32_t)0x000000FF)

/**  Bits definition for RTC_SUBS register  **/
#define RTC_SUBS_SS ((uint32_t)0x0000FFFF)

/**  Bits definition for RTC_SCTRL register  **/
#define RTC_SCTRL_AD1S  ((uint32_t)0x80000000)
#define RTC_SCTRL_SUBF ((uint32_t)0x00007FFF)



/**  Bits definition for RTC_TST register  **/
#define RTC_TST_APM   ((uint32_t)0x00400000)
#define RTC_TST_HOT   ((uint32_t)0x00300000)
#define RTC_TST_HOT_0 ((uint32_t)0x00100000)
#define RTC_TST_HOT_1 ((uint32_t)0x00200000)
#define RTC_TST_HOU   ((uint32_t)0x000F0000)
#define RTC_TST_HOU_0 ((uint32_t)0x00010000)
#define RTC_TST_HOU_1 ((uint32_t)0x00020000)
#define RTC_TST_HOU_2 ((uint32_t)0x00040000)
#define RTC_TST_HOU_3 ((uint32_t)0x00080000)
#define RTC_TST_MIT   ((uint32_t)0x00007000)
#define RTC_TST_MIT_0 ((uint32_t)0x00001000)
#define RTC_TST_MIT_1 ((uint32_t)0x00002000)
#define RTC_TST_MIT_2 ((uint32_t)0x00004000)
#define RTC_TST_MIU   ((uint32_t)0x00000F00)
#define RTC_TST_MIU_0 ((uint32_t)0x00000100)
#define RTC_TST_MIU_1 ((uint32_t)0x00000200)
#define RTC_TST_MIU_2 ((uint32_t)0x00000400)
#define RTC_TST_MIU_3 ((uint32_t)0x00000800)
#define RTC_TST_SET   ((uint32_t)0x00000070)
#define RTC_TST_SET_0 ((uint32_t)0x00000010)
#define RTC_TST_SET_1 ((uint32_t)0x00000020)
#define RTC_TST_SET_2 ((uint32_t)0x00000040)
#define RTC_TST_SEU   ((uint32_t)0x0000000F)
#define RTC_TST_SEU_0 ((uint32_t)0x00000001)
#define RTC_TST_SEU_1 ((uint32_t)0x00000002)
#define RTC_TST_SEU_2 ((uint32_t)0x00000004)
#define RTC_TST_SEU_3 ((uint32_t)0x00000008)

/**  Bits definition for RTC_TSD register  **/
#define RTC_TSD_YRT   ((uint32_t)0x00F00000)
#define RTC_TSD_YRT_0 ((uint32_t)0x00100000)
#define RTC_TSD_YRT_1 ((uint32_t)0x00200000)
#define RTC_TSD_YRT_2 ((uint32_t)0x00400000)
#define RTC_TSD_YRT_3 ((uint32_t)0x00800000)
#define RTC_TSD_YRU   ((uint32_t)0x000F0000)
#define RTC_TSD_YRU_0 ((uint32_t)0x00010000)
#define RTC_TSD_YRU_1 ((uint32_t)0x00020000)
#define RTC_TSD_YRU_2 ((uint32_t)0x00040000)
#define RTC_TSD_YRU_3 ((uint32_t)0x00080000)

#define RTC_TSD_WDU   ((uint32_t)0x0000E000)
#define RTC_TSD_WDU_0 ((uint32_t)0x00002000)
#define RTC_TSD_WDU_1 ((uint32_t)0x00004000)
#define RTC_TSD_WDU_2 ((uint32_t)0x00008000)
#define RTC_TSD_MOT   ((uint32_t)0x00001000)
#define RTC_TSD_MOU   ((uint32_t)0x00000F00)
#define RTC_TSD_MOU_0 ((uint32_t)0x00000100)
#define RTC_TSD_MOU_1 ((uint32_t)0x00000200)
#define RTC_TSD_MOU_2 ((uint32_t)0x00000400)
#define RTC_TSD_MOU_3 ((uint32_t)0x00000800)
#define RTC_TSD_DAT   ((uint32_t)0x00000030)
#define RTC_TSD_DAT_0 ((uint32_t)0x00000010)
#define RTC_TSD_DAT_1 ((uint32_t)0x00000020)
#define RTC_TSD_DAU   ((uint32_t)0x0000000F)
#define RTC_TSD_DAU_0 ((uint32_t)0x00000001)
#define RTC_TSD_DAU_1 ((uint32_t)0x00000002)
#define RTC_TSD_DAU_2 ((uint32_t)0x00000004)
#define RTC_TSD_DAU_3 ((uint32_t)0x00000008)

/**  Bits definition for RTC_TSSS register  **/
#define RTC_TSSS_SSE ((uint32_t)0x0000FFFF)

/**  Bits definition for RTC_CALIB register  **/
#define RTC_CALIB_CP   ((uint32_t)0x00008000)
#define RTC_CALIB_CW8  ((uint32_t)0x00004000)
#define RTC_CALIB_CW16 ((uint32_t)0x00002000)
#define RTC_CALIB_CM   ((uint32_t)0x000001FF)
#define RTC_CALIB_CM_0 ((uint32_t)0x00000001)
#define RTC_CALIB_CM_1 ((uint32_t)0x00000002)
#define RTC_CALIB_CM_2 ((uint32_t)0x00000004)
#define RTC_CALIB_CM_3 ((uint32_t)0x00000008)
#define RTC_CALIB_CM_4 ((uint32_t)0x00000010)
#define RTC_CALIB_CM_5 ((uint32_t)0x00000020)
#define RTC_CALIB_CM_6 ((uint32_t)0x00000040)
#define RTC_CALIB_CM_7 ((uint32_t)0x00000080)
#define RTC_CALIB_CM_8 ((uint32_t)0x00000100)

/**  Bits definition for RTC_ALRMASS register  **/
#define RTC_ALRMASS_MASKSSB   ((uint32_t)0x0F000000)
#define RTC_ALRMASS_MASKSSB_0 ((uint32_t)0x01000000)
#define RTC_ALRMASS_MASKSSB_1 ((uint32_t)0x02000000)
#define RTC_ALRMASS_MASKSSB_2 ((uint32_t)0x04000000)
#define RTC_ALRMASS_MASKSSB_3 ((uint32_t)0x08000000)
#define RTC_ALRMASS_SSV       ((uint32_t)0x00007FFF)

/**  Bits definition for RTC_ALRMBSS register  **/
#define RTC_ALRMBSS_MASKSSB   ((uint32_t)0x0F000000)
#define RTC_ALRMBSS_MASKSSB_0 ((uint32_t)0x01000000)
#define RTC_ALRMBSS_MASKSSB_1 ((uint32_t)0x02000000)
#define RTC_ALRMBSS_MASKSSB_2 ((uint32_t)0x04000000)
#define RTC_ALRMBSS_MASKSSB_3 ((uint32_t)0x08000000)
#define RTC_ALRMBSS_SSV       ((uint32_t)0x00007FFF)

/**  Bits definition for RTC_OPT register  **/
#define RTC_OPT_OPDC    ((uint32_t)0x00000080)
#define RTC_OPT_OUTMAP  ((uint32_t)0x00000008)
#define RTC_OPT_OUTPU   ((uint32_t)0x00000004)
#define RTC_OPT_PWREST  ((uint32_t)0x00000002)
#define RTC_OPT_TYPE    ((uint32_t)0x00000001)

/**  Bits definition for RTC_BKP1 register  **/
#define RTC_BKP1                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP2 register  **/
#define RTC_BKP2                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP3 register  **/
#define RTC_BKP3                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP4 register  **/
#define RTC_BKP4                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP5 register  **/
#define RTC_BKP5                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP6 register  **/
#define RTC_BKP6                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP7 register  **/
#define RTC_BKP7                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP8 register  **/
#define RTC_BKP8                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP9 register  **/
#define RTC_BKP9                            ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP10 register  **/
#define RTC_BKP10                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP11 register  **/
#define RTC_BKP11                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP12register  **/
#define RTC_BKP12                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP13 register  **/
#define RTC_BKP13                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP14 register  **/
#define RTC_BKP14                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP15 register  **/
#define RTC_BKP15                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP16 register  **/
#define RTC_BKP16                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP17register  **/
#define RTC_BKP17                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP18 register  **/
#define RTC_BKP18                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP19 register  **/
#define RTC_BKP19                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP20 register  **/
#define RTC_BKP20                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP21 register  **/
#define RTC_BKP21                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP22 register  **/
#define RTC_BKP22                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP23 register  **/
#define RTC_BKP23                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP24 register  **/
#define RTC_BKP24                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP25 register  **/
#define RTC_BKP25                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP26 register  **/
#define RTC_BKP26                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP27 register  **/
#define RTC_BKP27                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP28 register  **/
#define RTC_BKP28                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP29 register  **/
#define RTC_BKP29                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP30 register  **/
#define RTC_BKP30                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP31 register  **/
#define RTC_BKP31                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_BKP32 register  **/
#define RTC_BKP32                           ((uint32_t)0xFFFFFFFF)

/**  Bits definition for RTC_TMPCFG register  **/
#define RTC_TMPCFG_TPPUDIS                  ((uint32_t)0x00008000)
#define RTC_TMPCFG_TPPRCH                   ((uint32_t)0x00006000)
#define RTC_TMPCFG_TPPRCH_0                 ((uint32_t)0x00002000)
#define RTC_TMPCFG_TPPRCH_1                 ((uint32_t)0x00004000)
#define RTC_TMPCFG_TPFLT                    ((uint32_t)0x00001800)
#define RTC_TMPCFG_TPFLT_0                  ((uint32_t)0x00000800)
#define RTC_TMPCFG_TPFLT_1                  ((uint32_t)0x00001000)
#define RTC_TMPCFG_TPFREQ                   ((uint32_t)0x00000700)
#define RTC_TMPCFG_TPFREQ_0                 ((uint32_t)0x00000100)
#define RTC_TMPCFG_TPFREQ_1                 ((uint32_t)0x00000200)
#define RTC_TMPCFG_TPFREQ_2                 ((uint32_t)0x00000400)
#define RTC_TMPCFG_TPTS                     ((uint32_t)0x00000080)
#define RTC_TMPCFG_TPINIEN                  ((uint32_t)0x00000004)

/**  Bits definition for RTC_TMPCTRL1/2/3/4/5/6/7/8 register  **/
#define RTC_TMPCTRL_TPMF                    ((uint32_t)0x00000010)
#define RTC_TMPCTRL_TPNOE                   ((uint32_t)0x00000008)
#define RTC_TMPCTRL_TPINTEN                 ((uint32_t)0x00000004)
#define RTC_TMPCTRL_TPTRG                   ((uint32_t)0x00000002)
#define RTC_TMPCTRL_TPEN                    ((uint32_t)0x00000001)


/*** FMAC ***/
/*** Filter Math Accelerator (FMAC) ***/
/*****************  Bit definition for FMAC_X1BUFCFG register  ****************/
#define FMAC_X1BUFCFG_X1BASE          ((uint32_t)0x000000FFU)   /* bit[7:0]   X1 buffer Base address bits[7:0] */
#define FMAC_X1BUFCFG_X1BUFSIZE       ((uint32_t)0x0000FF00U)   /* bit[15:8]  X1 buffer size(16-bit words) bits[7:0] */
#define FMAC_X1BUFCFG_X1BUFWM         ((uint32_t)0x03000000U)   /* bit[25:24] X1 buffer full watermark size bits[1:0] */
#define FMAC_X1BUFCFG_X1BUFWM_0       ((uint32_t)0x01000000U)   /* bit[24] Watermark bit 0 */
#define FMAC_X1BUFCFG_X1BUFWM_1       ((uint32_t)0x02000000U)   /* bit[25] Watermark bit 1 */

/*****************  Bit definition for FMAC_X2BUFCFG register  ************/
#define FMAC_X2BUFCFG_X2BASE          ((uint32_t)0x000000FFU)   /* bit[7:0]   X2 buffer Base address bits[7:0] */
#define FMAC_X2BUFCFG_X2BUFSIZE       ((uint32_t)0x0000FF00U)   /* bit[15:8]  X2 buffer size(16-bit words) bits[7:0] */

/*****************  Bit definition for FMAC_YBUFCFG register  *************/
#define FMAC_YBUFCFG_YBASE            ((uint32_t)0x000000FFU)   /* bit[7:0]   Y buffer Base address bits[7:0] */
#define FMAC_YBUFCFG_YBUFSIZE         ((uint32_t)0x0000FF00U)   /* bit[15:8]  Y buffer size(16-bit words) bits[7:0] */
#define FMAC_YBUFCFG_YBUFWM           ((uint32_t)0x03000000U)   /* bit[25:24] Y buffer full watermark size bits[1:0] */
#define FMAC_YBUFCFG_YBUFWM_0         ((uint32_t)0x01000000U)   /* bit[24] Watermark bit 0 */
#define FMAC_YBUFCFG_YBUFWM_1         ((uint32_t)0x02000000U)   /* bit[25] Watermark bit 1 */

/******************  Bit definition for FMAC_PARAMCFG register  **************/
#define FMAC_PARAMCFG_P               ((uint32_t)0x000000FFU)   /* bit[ 7: 0] Input parameter P bits[7:0] */
#define FMAC_PARAMCFG_Q               ((uint32_t)0x0000FF00U)   /* bit[15: 8] Input parameter Q bits[7:0] */
#define FMAC_PARAMCFG_R               ((uint32_t)0x00FF0000U)   /* bit[23:16] Input parameter R bits[7:0] */
#define FMAC_PARAMCFG_FUNC            ((uint32_t)0x7F000000U)   /* bit[30:24] Function bits[6:0] */
#define FMAC_PARAMCFG_START           ((uint32_t)0x80000000U)   /* bit[31] Enable execution bit */

/******************** Bit definition for FMAC_CTRL register  ***************/
#define FMAC_CTRL_RINTEN              ((uint32_t)0x00000001U)   /* bit[0]  Enable read interrupt */
#define FMAC_CTRL_WIINEN              ((uint32_t)0x00000002U)   /* bit[1]  Enable write interrupt */
#define FMAC_CTRL_OVINTEN             ((uint32_t)0x00000004U)   /* bit[2]  Enable overflow error interrupts */
#define FMAC_CTRL_UNINTEN             ((uint32_t)0x00000008U)   /* bit[3]  Enable underflow error interrupts */
#define FMAC_CTRL_SATINTEN            ((uint32_t)0x00000010U)   /* bit[4]  Enable saturation error interrupts */
#define FMAC_CTRL_DMAREN              ((uint32_t)0x00000100U)   /* bit[8]  Enable DMA read channel requests */
#define FMAC_CTRL_DMAWEN              ((uint32_t)0x00000200U)   /* bit[9]  Enable DMA write channel requests */
#define FMAC_CTRL_LIMITEN             ((uint32_t)0x00008000U)   /* bit[15] Enable limit */
#define FMAC_CTRL_RESET               ((uint32_t)0x00010000U)   /* bit[16] Reset filter mathematical accelerator unit */

/******************* Bit definition for FMAC_STS register  ****************/
#define FMAC_STS_YBUFEF               ((uint32_t)0x00000001U)   /* bit[0]  Y buffer empty flag */
#define FMAC_STS_X1BUFFF              ((uint32_t)0x00000002U)   /* bit[1]  X1 buffer full flag */
#define FMAC_STS_OVF                  ((uint32_t)0x00000100U)   /* bit[8]  Overflow error flag */
#define FMAC_STS_UNF                  ((uint32_t)0x00000200U)   /* bit[9]  Underflow error flag */
#define FMAC_STS_SATF                 ((uint32_t)0x00000400U)   /* bit[10] Saturation error flag */

/******************  Bit definition for FMAC_WDAT register  **************/
#define FMAC_WDAT_WDAT                ((uint32_t)0x0000FFFFU)   /* bit[15:0] Write data */

/******************  Bit definition for FMACX_RDAT register  *************/
#define FMAC_RDAT_RDAT                ((uint32_t)0x0000FFFFU)   /* bit[15:0] Read data */


/** Bit definition for SHRTIM_MCTRL register  **/
#define SHRTIM_MCTRL_BRSTDMA                                 ((uint32_t)0xC0000000U)            /* Bit[31:30] Burst DMA update */
#define SHRTIM_MCTRL_BRSTDMA_0                               ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_MCTRL_BRSTDMA_1                               ((uint32_t)0x80000000U)            /* Bit31 */
#define SHRTIM_MCTRL_MREPTUEN                                  ((uint32_t)0x20000000U)            /* Bit[29] Master timer repetitiion update */
#define SHRTIM_MCTRL_PLEN                                    ((uint32_t)0x08000000U)            /* Bit[27] Preload enable */
#define SHRTIM_MCTRL_DACTRIG                                 ((uint32_t)0x06000000U)            /* Bit[26:25] DAC synchronization trigger */
#define SHRTIM_MCTRL_DACTRIG_0                               ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_MCTRL_DACTRIG_1                               ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_MCTRL_TFCNTEN                                 ((uint32_t)0x00400000U)            /* Bit[22] Timer F counter enable */
#define SHRTIM_MCTRL_TECNTEN                                 ((uint32_t)0x00200000U)            /* Bit[21] Timer E counter enable */
#define SHRTIM_MCTRL_TDCNTEN                                 ((uint32_t)0x00100000U)            /* Bit[20] Timer D counter enable */
#define SHRTIM_MCTRL_TCCNTEN                                 ((uint32_t)0x00080000U)            /* Bit[19] Timer C counter enable */
#define SHRTIM_MCTRL_TBCNTEN                                 ((uint32_t)0x00040000U)            /* Bit[18] Timer B counter enable */
#define SHRTIM_MCTRL_TACNTEN                                 ((uint32_t)0x00020000U)            /* Bit[17] Timer A counter enable */
#define SHRTIM_MCTRL_MCNTEN                                  ((uint32_t)0x00010000U)            /* Bit[16] Master timer counter enable */
#define SHRTIM_MCTRL_SYNCOSRC                                ((uint32_t)0x0000C000U)            /* Bit[15:14] Synchronization source */
#define SHRTIM_MCTRL_SYNCOSRC_0                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MCTRL_SYNCOSRC_1                              ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_MCTRL_SYNCSTRT                                ((uint32_t)0x00002000U)            /* Bit[13] Synchronization to allow master start */
#define SHRTIM_MCTRL_SYNCRST                                 ((uint32_t)0x00001000U)            /* Bit[12] Synchronization to allow master reset */
#define SHRTIM_MCTRL_SYNCIN                                  ((uint32_t)0x00000700U)            /* Bit[10:8] Synchronization input */
#define SHRTIM_MCTRL_SYNCIN_0                                ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MCTRL_SYNCIN_1                                ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MCTRL_SYNCIN_2                                ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MCTRL_ILV                                     ((uint32_t)0x000000C0U)            /* Bit[7:6] Master interleaved mode */
#define SHRTIM_MCTRL_ILV_0                                   ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MCTRL_ILV_1                                   ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MCTRL_HLF                                     ((uint32_t)0x00000020U)            /* Bit[5] Half mode. */
#define SHRTIM_MCTRL_RTG                                     ((uint32_t)0x00000010U)            /* Bit[4] Master retrigger mode */
#define SHRTIM_MCTRL_CONT                                    ((uint32_t)0x00000008U)            /* Bit[3] Master continues mode */
#define SHRTIM_MCTRL_CKPSC                                   ((uint32_t)0x00000007U)            /* Bit[2:0] Master clock prescaler */
#define SHRTIM_MCTRL_CKPSC_0                                 ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MCTRL_CKPSC_1                                 ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MCTRL_CKPSC_2                                 ((uint32_t)0x00000004U)            /* Bit2 */

/** Bit definition for SHRTIM_MINTSTS register  **/
#define SHRTIM_MINTSTS_MUPDITF                                 ((uint32_t)0x00000040U)            /* Bit[6] Master registers update interrupt flag */
#define SHRTIM_MINTSTS_SYNCINITF                                ((uint32_t)0x00000020U)            /* Bit[5] Synchronization input interrupt flag */
#define SHRTIM_MINTSTS_MREPTITF                                ((uint32_t)0x00000010U)            /* Bit[4] Master repetition interrupt flag */
#define SHRTIM_MINTSTS_MCMP4ITF                                ((uint32_t)0x00000008U)            /* Bit[3] Master timer compare 4 interrupt flag */
#define SHRTIM_MINTSTS_MCMP3ITF                                ((uint32_t)0x00000004U)            /* Bit[2] Master timer compare 3 interrupt flag */
#define SHRTIM_MINTSTS_MCMP2ITF                                ((uint32_t)0x00000002U)            /* Bit[1] Master timer compare 2 interrupt flag */
#define SHRTIM_MINTSTS_MCMP1ITF                                ((uint32_t)0x00000001U)            /* Bit[0] Master timer compare 1 interrupt flag */

/** Bit definition for SHRTIM_MINTCLR register  **/
#define SHRTIM_MINTCLR_MUPDIC                                  ((uint32_t)0x00000040U)            /* Bit[6] Master update interrupt flag clear */
#define SHRTIM_MINTCLR_SYNCINIC                                ((uint32_t)0x00000020U)            /* Bit[5] Master sync interrupt flag clear */
#define SHRTIM_MINTCLR_MREPTIC                                 ((uint32_t)0x00000010U)            /* Bit[4] Master repetition interrupt flag clear */
#define SHRTIM_MINTCLR_MCMP4IC                                 ((uint32_t)0x00000008U)            /* Bit[3] Master compare4 interrupt flag clear */
#define SHRTIM_MINTCLR_MCMP3IC                                 ((uint32_t)0x00000004U)            /* Bit[2] Master compare3 interrupt flag clear */
#define SHRTIM_MINTCLR_MCMP2IC                                 ((uint32_t)0x00000002U)            /* Bit[1] Master compare2 interrupt flag clear */
#define SHRTIM_MINTCLR_MCMP1IC                                 ((uint32_t)0x00000001U)            /* Bit[0] Master compare1 interrupt flag clear */

/** Bit definition for SHRTIM_MIDEN register  **/
#define SHRTIM_MIDEN_MUPDDEN                                 ((uint32_t)0x00400000U)            /* Bit[22] Master registers update DMA request enable */
#define SHRTIM_MIDEN_SYNCINDEN                                ((uint32_t)0x00200000U)            /* Bit[21] Synchronization input DMA request enable */
#define SHRTIM_MIDEN_MREPTDEN                                ((uint32_t)0x00100000U)            /* Bit[20] Master repetition counter DMA request enable */
#define SHRTIM_MIDEN_MCMP4DEN                                ((uint32_t)0x00080000U)            /* Bit[19] Master timer compare 4 DMA request enable */
#define SHRTIM_MIDEN_MCMP3DEN                                ((uint32_t)0x00040000U)            /* Bit[18] Master timer compare 3 DMA request enable */
#define SHRTIM_MIDEN_MCMP2DEN                                ((uint32_t)0x00020000U)            /* Bit[17] Master timer compare 2 DMA request enable */
#define SHRTIM_MIDEN_MCMP1DEN                                ((uint32_t)0x00010000U)            /* Bit[16] Master timer compare 1 DMA request enable */
#define SHRTIM_MIDEN_MUPDIEN                                 ((uint32_t)0x00000040U)            /* Bit[6] Master registers update interrupt request enable */
#define SHRTIM_MIDEN_SYNCINIEN                               ((uint32_t)0x00000020U)            /* Bit[5] Synchronization input interrupt request enable */
#define SHRTIM_MIDEN_MREPTIEN                                ((uint32_t)0x00000010U)            /* Bit[4] Master repetition counter interrupt request enable */
#define SHRTIM_MIDEN_MCMP4IEN                                ((uint32_t)0x00000008U)            /* Bit[3] Master timer compare 4 interrupt request enable */
#define SHRTIM_MIDEN_MCMP3IEN                                ((uint32_t)0x00000004U)            /* Bit[2] Master timer compare 3 interrupt request enable */
#define SHRTIM_MIDEN_MCMP2IEN                                ((uint32_t)0x00000002U)            /* Bit[1] Master timer compare 2 interrupt request enable */
#define SHRTIM_MIDEN_MCMP1IEN                                ((uint32_t)0x00000001U)            /* Bit[0] Master timer compare 1 interrupt request enable */

/** Bit definition for SHRTIM_MCNT register  **/
#define SHRTIM_MCNT_MCOUNT                                  ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Master timer counter */
#define SHRTIM_MCNT_MCOUNT_0                                ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MCNT_MCOUNT_1                                ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MCNT_MCOUNT_2                                ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MCNT_MCOUNT_3                                ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MCNT_MCOUNT_4                                ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MCNT_MCOUNT_5                                ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MCNT_MCOUNT_6                                ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MCNT_MCOUNT_7                                ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MCNT_MCOUNT_8                                ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MCNT_MCOUNT_9                                ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MCNT_MCOUNT_10                               ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MCNT_MCOUNT_11                               ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_MCNT_MCOUNT_12                               ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_MCNT_MCOUNT_13                               ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_MCNT_MCOUNT_14                               ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MCNT_MCOUNT_15                               ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_MPRD register  **/
#define SHRTIM_MPRD_MPRD                                    ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Master timer period */
#define SHRTIM_MPRD_MPRD_0                                  ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MPRD_MPRD_1                                  ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MPRD_MPRD_2                                  ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MPRD_MPRD_3                                  ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MPRD_MPRD_4                                  ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MPRD_MPRD_5                                  ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MPRD_MPRD_6                                  ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MPRD_MPRD_7                                  ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MPRD_MPRD_8                                  ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MPRD_MPRD_9                                  ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MPRD_MPRD_10                                 ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MPRD_MPRD_11                                 ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_MPRD_MPRD_12                                 ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_MPRD_MPRD_13                                 ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_MPRD_MPRD_14                                 ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MPRD_MPRD_15                                 ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_MREPT register  **/
#define SHRTIM_MREPT_MREPT                                   ((uint32_t)0x000000FFU)            /* Bit[7:0] Master timer repetition period */
#define SHRTIM_MREPT_MREPT_0                                 ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MREPT_MREPT_1                                 ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MREPT_MREPT_2                                 ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MREPT_MREPT_3                                 ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MREPT_MREPT_4                                 ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MREPT_MREPT_5                                 ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MREPT_MREPT_6                                 ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MREPT_MREPT_7                                 ((uint32_t)0x00000080U)            /* Bit7 */

/** Bit definition for SHRTIM_MCMP1DAT register  **/
#define SHRTIM_MCMP1DAT_MCMP1DAT                                ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Master timer compare 1 data */
#define SHRTIM_MCMP1DAT_MCMP1DAT_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MCMP1DAT_MCMP1DAT_15                             ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_MCMP2DAT register  **/
#define SHRTIM_MCMP2DAT_MCMP2DAT                                ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Master timer compare 2 data */
#define SHRTIM_MCMP2DAT_MCMP2DAT_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MCMP2DAT_MCMP2DAT_15                             ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_MCMP3DAT register  **/
#define SHRTIM_MCMP3DAT_MCMP3DAT                                ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Master timer compare 3 data */
#define SHRTIM_MCMP3DAT_MCMP3DAT_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MCMP3DAT_MCMP3DAT_15                             ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_MCMP4DAT register  **/
#define SHRTIM_MCMP4DAT_MCMP4DAT                                ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Master timer compare 4 data */
#define SHRTIM_MCMP4DAT_MCMP4DAT_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_MCMP4DAT_MCMP4DAT_15                             ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_SYNCOUT register  **/
#define SHRTIM_SYNCOUT_SYNCOUTPUS                             ((uint32_t)0x00000003U)            /* Bit[1:0] These bitfield define the polarity of synchronization output. */
#define SHRTIM_SYNCOUT_SYNCOUTPUS_0                           ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_SYNCOUT_SYNCOUTPUS_1                           ((uint32_t)0x00000002U)            /* Bit1 */

/** Bit definition for SHRTIM_FRZDIS register  **/
#define SHRTIM_FRZDIS_ALLTIMDBGEN                             ((uint32_t)0x00000080U)            /* Bit[7] Debug freeze bit used to hault all timers (master + slave) while in debug mode */
#define SHRTIM_FRZDIS_TFDBGEN                                 ((uint32_t)0x00000040U)            /* Bit[6] Debug freeze bit used to skip haulting the timer F while in debug mode */
#define SHRTIM_FRZDIS_TEDBGEN                                 ((uint32_t)0x00000020U)            /* Bit[5] Debug freeze bit used to skip haulting the timer E while in debug mode */
#define SHRTIM_FRZDIS_TDDBGEN                                 ((uint32_t)0x00000010U)            /* Bit[4] Debug freeze bit used to skip haulting the timer D while in debug mode */
#define SHRTIM_FRZDIS_TCDBGEN                                 ((uint32_t)0x00000008U)            /* Bit[3] Debug freeze bit used to skip haulting the timer C while in debug mode */
#define SHRTIM_FRZDIS_TBDBGEN                                 ((uint32_t)0x00000004U)            /* Bit[2] Debug freeze bit used to skip haulting the timer B while in debug mode */
#define SHRTIM_FRZDIS_TADBGEN                                 ((uint32_t)0x00000002U)            /* Bit[1] Debug freeze bit used to skip haulting the timer A while in debug mode */
#define SHRTIM_FRZDIS_MDBGEN                                  ((uint32_t)0x00000001U)            /* Bit[0] Debug freeze bit used to skip haulting the master timer while in debug mode */

/** Bit definition for SHRTIM_TXCTRL register  **/
#define SHRTIM_TXCTRL_UPDGAT                                  ((uint32_t)0xF0000000U)            /* Bit[31:28] Register update events for timer x */
#define SHRTIM_TXCTRL_UPDGAT_0                                ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_TXCTRL_UPDGAT_1                                ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_TXCTRL_UPDGAT_2                                ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_TXCTRL_UPDGAT_3                                ((uint32_t)0x80000000U)            /* Bit31 */
#define SHRTIM_TXCTRL_PLEN                                    ((uint32_t)0x08000000U)            /* Bit[27] timer x preload enable */
#define SHRTIM_TXCTRL_DACTRIG                                 ((uint32_t)0x06000000U)            /* Bit[26:25] The update event can be used to generate a DAC synchronization. The active output is chosen based on this register configuration. */
#define SHRTIM_TXCTRL_DACTRIG_0                               ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_TXCTRL_DACTRIG_1                               ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_TXCTRL_MUEN                                    ((uint32_t)0x01000000U)            /* Bit[24] Master timer update */
#define SHRTIM_TXCTRL_TEUEN                                   ((uint32_t)0x00800000U)            /* Bit[23] Timer E update */
#define SHRTIM_TXCTRL_TDUEN                                   ((uint32_t)0x00400000U)            /* Bit[22] Timer D update */
#define SHRTIM_TXCTRL_TCUEN                                   ((uint32_t)0x00200000U)            /* Bit[21] Timer C update */
#define SHRTIM_TXCTRL_TBUEN                                   ((uint32_t)0x00100000U)            /* Bit[20] Timer B update */
#define SHRTIM_TXCTRL_TAUEN                                   ((uint32_t)0x00080000U)            /* Bit[19] Timer A update */
#define SHRTIM_TXCTRL_RSTROUEN                                ((uint32_t)0x00040000U)            /* Bit[18] Timer A reset update */
#define SHRTIM_TXCTRL_REPTUEN                                 ((uint32_t)0x00020000U)            /* Bit[17] Timer A repetitiion update */
#define SHRTIM_TXCTRL_TFUEN                                   ((uint32_t)0x00010000U)            /* Bit[16] Timer F update */
#define SHRTIM_TXCTRL_DELCMP4M                                ((uint32_t)0x0000C000U)            /* Bit[15:14] CMP4 delayed mode */
#define SHRTIM_TXCTRL_DELCMP4M_0                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCTRL_DELCMP4M_1                              ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_TXCTRL_DELCMP2M                                ((uint32_t)0x00003000U)            /* Bit[13:12] CMP2 delayed mode */
#define SHRTIM_TXCTRL_DELCMP2M_0                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCTRL_DELCMP2M_1                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCTRL_SYNCSTRT                                ((uint32_t)0x00000800U)            /* Bit[11] Synchronizationto allow timer x start */
#define SHRTIM_TXCTRL_SYNCRST                                 ((uint32_t)0x00000400U)            /* Bit[10] Synchronizationto allow timer x reset */
#define SHRTIM_TXCTRL_RSYNCUPD                                 ((uint32_t)0x00000200U)            /* Bit[9] Update on resynchronization */
#define SHRTIM_TXCTRL_ILV                                     ((uint32_t)0x00000180U)            /* Bit[8:7] Timer A interleaved mode */
#define SHRTIM_TXCTRL_ILV_0                                   ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCTRL_ILV_1                                   ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCTRL_PP                                      ((uint32_t)0x00000040U)            /* Bit[6] Push pull mode enable */
#define SHRTIM_TXCTRL_HLF                                     ((uint32_t)0x00000020U)            /* Bit[5] Half mode. */
#define SHRTIM_TXCTRL_RTG                                     ((uint32_t)0x00000010U)            /* Bit[4] Retrigger mode */
#define SHRTIM_TXCTRL_CONT                                    ((uint32_t)0x00000008U)            /* Bit[3] Continuous mode */
#define SHRTIM_TXCTRL_CKPSC                                   ((uint32_t)0x00000007U)            /* Bit[2:0] Clock prescaler */
#define SHRTIM_TXCTRL_CKPSC_0                                 ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCTRL_CKPSC_1                                 ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCTRL_CKPSC_2                                 ((uint32_t)0x00000004U)            /* Bit2 */

/** Bit definition for SHRTIM_TXINTSTS register  **/
#define SHRTIM_TXINTSTS_O2BCKUP                                ((uint32_t)0x00200000U)            /* Bit[21] Timer x channel 2 output backup. */
#define SHRTIM_TXINTSTS_O1BCKUP                                ((uint32_t)0x00100000U)            /* Bit[20] Timer x channel 2 output backup. */
#define SHRTIM_TXINTSTS_O2DIPSTS                               ((uint32_t)0x00080000U)            /* Bit[19] Timer x channnel 2 delayed idle protection status. */
#define SHRTIM_TXINTSTS_O1DIPSTS                               ((uint32_t)0x00040000U)            /* Bit[18] Timer x channnel 1 delayed idle protection status. */
#define SHRTIM_TXINTSTS_IPPSTS                                  ((uint32_t)0x00020000U)            /* Bit[17] Idle push pull status. */
#define SHRTIM_TXINTSTS_CPPSTS                                  ((uint32_t)0x00010000U)            /* Bit[16] Push pull status */
#define SHRTIM_TXINTSTS_DPITF                                   ((uint32_t)0x00004000U)            /* Bit[14] Delayed protection interrupt flag */
#define SHRTIM_TXINTSTS_RSTROITF                                ((uint32_t)0x00002000U)            /* Bit[13] Counter reset or roll-over status */
#define SHRTIM_TXINTSTS_RST2ITF                                 ((uint32_t)0x00001000U)            /* Bit[12] Output 2 reset interrupt flag */
#define SHRTIM_TXINTSTS_SET2ITF                                 ((uint32_t)0x00000800U)            /* Bit[11] Output 2 set interrupt flag */
#define SHRTIM_TXINTSTS_RST1ITF                                 ((uint32_t)0x00000400U)            /* Bit[10] Output 1  reset interrupt flag */
#define SHRTIM_TXINTSTS_SET1ITF                                 ((uint32_t)0x00000200U)            /* Bit[9] Output 1  set interrupt flag */
#define SHRTIM_TXINTSTS_CPT2ITF                                 ((uint32_t)0x00000100U)            /* Bit[8] Capture 2 interrupt flag */
#define SHRTIM_TXINTSTS_CPT1ITF                                 ((uint32_t)0x00000080U)            /* Bit[7] Capture 1 interrupt flag */
#define SHRTIM_TXINTSTS_UPDITF                                  ((uint32_t)0x00000040U)            /* Bit[6] Update interrupt flag */
#define SHRTIM_TXINTSTS_REPTITF                                 ((uint32_t)0x00000020U)            /* Bit[5] Repetition interrupt flag */
#define SHRTIM_TXINTSTS_CMP5ITF                                 ((uint32_t)0x00000010U)            /* Bit[4] Compare 5 flag */
#define SHRTIM_TXINTSTS_CMP4ITF                                 ((uint32_t)0x00000008U)            /* Bit[3] Compare 4 interrupt flag */
#define SHRTIM_TXINTSTS_CMP3ITF                                 ((uint32_t)0x00000004U)            /* Bit[2] Compare 3 interrupt flag */
#define SHRTIM_TXINTSTS_CMP2ITF                                 ((uint32_t)0x00000002U)            /* Bit[1] Compare 2 interrupt flag */
#define SHRTIM_TXINTSTS_CMP1ITF                                 ((uint32_t)0x00000001U)            /* Bit[0] Compare 1 interrupt flag */

/** Bit definition for SHRTIM_TXINTCLR register  **/
#define SHRTIM_TXINTCLR_DPIC                                    ((uint32_t)0x00004000U)            /* Bit[14] Delayed protection interrupt flag clear */
#define SHRTIM_TXINTCLR_RSTROIC                                 ((uint32_t)0x00002000U)            /* Bit[13] Reset and/or roll-over interrupt flag clear */
#define SHRTIM_TXINTCLR_RST2IC                                  ((uint32_t)0x00001000U)            /* Bit[12] Output channel 2 reset interrupt flag clear */
#define SHRTIM_TXINTCLR_SET2IC                                  ((uint32_t)0x00000800U)            /* Bit[11] Output channel 2 set interrupt flag clear */
#define SHRTIM_TXINTCLR_RST1IC                                  ((uint32_t)0x00000400U)            /* Bit[10] Output channel 2 reset interrupt flag clear */
#define SHRTIM_TXINTCLR_SET1IC                                  ((uint32_t)0x00000200U)            /* Bit[9] Output channel 2 set interrupt flag clear */
#define SHRTIM_TXINTCLR_CPT2IC                                  ((uint32_t)0x00000100U)            /* Bit[8] Capture 2 interrupt flag clear */
#define SHRTIM_TXINTCLR_CPT1IC                                  ((uint32_t)0x00000080U)            /* Bit[7] Capture 1 interrupt flag clear */
#define SHRTIM_TXINTCLR_UPDIC                                   ((uint32_t)0x00000040U)            /* Bit[6] Update interrupt flag clear */
#define SHRTIM_TXINTCLR_REPTIC                                  ((uint32_t)0x00000020U)            /* Bit[5] Repetition interrupt flag clear */
#define SHRTIM_TXINTCLR_CMP5IC                                  ((uint32_t)0x00000010U)            /* Bit[4] Compare 5 flag clear */
#define SHRTIM_TXINTCLR_CMP4IC                                  ((uint32_t)0x00000008U)            /* Bit[3] Compare 4 interrupt flag clear */
#define SHRTIM_TXINTCLR_CMP3IC                                  ((uint32_t)0x00000004U)            /* Bit[2] Compare 3 interrupt flag clear */
#define SHRTIM_TXINTCLR_CMP2IC                                  ((uint32_t)0x00000002U)            /* Bit[1] Compare 2 interrupt flag clear */
#define SHRTIM_TXINTCLR_CMP1IC                                  ((uint32_t)0x00000001U)            /* Bit[0] Compare 1 interrupt flag clear */

/** Bit definition for SHRTIM_TXIDEN register  **/
#define SHRTIM_TXIDEN_DPDEN                                   ((uint32_t)0x40000000U)            /* Bit[30] Reserved, must be kept at reset value */
#define SHRTIM_TXIDEN_RSTRODEN                                ((uint32_t)0x20000000U)            /* Bit[29] Reset/roll-over DMA request enable */
#define SHRTIM_TXIDEN_RST2DEN                                 ((uint32_t)0x10000000U)            /* Bit[28] Output 2 reset DMA request enable */
#define SHRTIM_TXIDEN_SET2DEN                                 ((uint32_t)0x08000000U)            /* Bit[27] Output 2 set DMA request enable */
#define SHRTIM_TXIDEN_RST1DEN                                 ((uint32_t)0x04000000U)            /* Bit[26] Output 1  reset DMA request enable */
#define SHRTIM_TXIDEN_SET1DEN                                 ((uint32_t)0x02000000U)            /* Bit[25] Output 1  set DMA request enable */
#define SHRTIM_TXIDEN_CPT2DEN                                 ((uint32_t)0x01000000U)            /* Bit[24] Capture 2 DMA request enable */
#define SHRTIM_TXIDEN_CPT1DEN                                 ((uint32_t)0x00800000U)            /* Bit[23] Capture 1 DMA request enable */
#define SHRTIM_TXIDEN_UPDDEN                                  ((uint32_t)0x00400000U)            /* Bit[22] Update DMA request enable */
#define SHRTIM_TXIDEN_REPTDEN                                 ((uint32_t)0x00100000U)            /* Bit[20] Repetition DMA request enable */
#define SHRTIM_TXIDEN_CMP4DEN                                 ((uint32_t)0x00080000U)            /* Bit[19] Compare 4 DMA request enable */
#define SHRTIM_TXIDEN_CMP3DEN                                 ((uint32_t)0x00040000U)            /* Bit[18] Compare 3 DMA request enable */
#define SHRTIM_TXIDEN_CMP2DEN                                 ((uint32_t)0x00020000U)            /* Bit[17] Compare 2 DMA request enable */
#define SHRTIM_TXIDEN_CMP1DEN                                 ((uint32_t)0x00010000U)            /* Bit[16] Compare 1 DMA request enable */
#define SHRTIM_TXIDEN_DPIEN                                   ((uint32_t)0x00004000U)            /* Bit[14] Delayed protection interrupt enable */
#define SHRTIM_TXIDEN_RSTROIEN                                ((uint32_t)0x00002000U)            /* Bit[13] Reset/roll-over interrupt enable */
#define SHRTIM_TXIDEN_RST2IEN                                 ((uint32_t)0x00001000U)            /* Bit[12] Output 2 reset interrupt enable */
#define SHRTIM_TXIDEN_SET2IEN                                 ((uint32_t)0x00000800U)            /* Bit[11] Output 2 set interrupt enable */
#define SHRTIM_TXIDEN_RST1IEN                                 ((uint32_t)0x00000400U)            /* Bit[10] Output 1  reset interrupt enable */
#define SHRTIM_TXIDEN_SET1IEN                                 ((uint32_t)0x00000200U)            /* Bit[9] Output 1  set interrupt enable */
#define SHRTIM_TXIDEN_CPT2IEN                                 ((uint32_t)0x00000100U)            /* Bit[8] Capture interrupt enable */
#define SHRTIM_TXIDEN_CPT1IEN                                 ((uint32_t)0x00000080U)            /* Bit[7] Capture interrupt enable */
#define SHRTIM_TXIDEN_UPDIEN                                  ((uint32_t)0x00000040U)            /* Bit[6] Update interrupt enable */
#define SHRTIM_TXIDEN_REPTIEN                                 ((uint32_t)0x00000020U)            /* Bit[5] Repetition interrupt enable */
#define SHRTIM_TXIDEN_CMP4IEN                                 ((uint32_t)0x00000008U)            /* Bit[3] Compare 4 interrupt enable */
#define SHRTIM_TXIDEN_CMP3IEN                                 ((uint32_t)0x00000004U)            /* Bit[2] Compare 3 interrupt enable */
#define SHRTIM_TXIDEN_CMP2IEN                                 ((uint32_t)0x00000002U)            /* Bit[1] Compare 2 interrupt enable */
#define SHRTIM_TXIDEN_CMP1IEN                                 ((uint32_t)0x00000001U)            /* Bit[0] Compare 1 interrupt enable */

/** Bit definition for SHRTIM_TXCNT register  **/
#define SHRTIM_TXCNT_COUNT                                   ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x counter value */
#define SHRTIM_TXCNT_COUNT_0                                 ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCNT_COUNT_1                                 ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCNT_COUNT_2                                 ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCNT_COUNT_3                                 ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCNT_COUNT_4                                 ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCNT_COUNT_5                                 ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCNT_COUNT_6                                 ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCNT_COUNT_7                                 ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCNT_COUNT_8                                 ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCNT_COUNT_9                                 ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCNT_COUNT_10                                ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCNT_COUNT_11                                ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCNT_COUNT_12                                ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCNT_COUNT_13                                ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCNT_COUNT_14                                ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCNT_COUNT_15                                ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXPRD register  **/
#define SHRTIM_TXPRD_PRD                                     ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x period value */
#define SHRTIM_TXPRD_PRD_0                                   ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXPRD_PRD_1                                   ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXPRD_PRD_2                                   ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXPRD_PRD_3                                   ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXPRD_PRD_4                                   ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXPRD_PRD_5                                   ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXPRD_PRD_6                                   ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXPRD_PRD_7                                   ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXPRD_PRD_8                                   ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXPRD_PRD_9                                   ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXPRD_PRD_10                                  ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXPRD_PRD_11                                  ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXPRD_PRD_12                                  ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXPRD_PRD_13                                  ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXPRD_PRD_14                                  ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXPRD_PRD_15                                  ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXREPT register  **/
#define SHRTIM_TXREPT_REPT                                    ((uint32_t)0x000000FFU)            /* Bit[7:0] Timer x repetition period value */
#define SHRTIM_TXREPT_REPT_0                                  ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXREPT_REPT_1                                  ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXREPT_REPT_2                                  ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXREPT_REPT_3                                  ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXREPT_REPT_4                                  ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXREPT_REPT_5                                  ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXREPT_REPT_6                                  ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXREPT_REPT_7                                  ((uint32_t)0x00000080U)            /* Bit7 */

/** Bit definition for SHRTIM_TXCMP1DAT register  **/
#define SHRTIM_TXCMP1DAT_CMP1DAT                                 ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x compare 1 value */
#define SHRTIM_TXCMP1DAT_CMP1DAT_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_4                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_5                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_6                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_7                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_8                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_9                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_10                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_11                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_12                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_13                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_14                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCMP1DAT_CMP1DAT_15                              ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXRCMP1DAT register  **/
#define SHRTIM_TXRCMP1DAT_REPT                                    ((uint32_t)0x00FF0000U)            /* Bit[23:16] Timer x repetititon counter alias */
#define SHRTIM_TXRCMP1DAT_REPT_0                                  ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_TXRCMP1DAT_REPT_1                                  ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_TXRCMP1DAT_REPT_2                                  ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_TXRCMP1DAT_REPT_3                                  ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_TXRCMP1DAT_REPT_4                                  ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_TXRCMP1DAT_REPT_5                                  ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_TXRCMP1DAT_REPT_6                                  ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_TXRCMP1DAT_REPT_7                                  ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT                                 ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x compare 1 data */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_4                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_5                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_6                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_7                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_8                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_9                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_10                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_11                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_12                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_13                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_14                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXRCMP1DAT_CMP1DAT_15                              ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TxCMP2DAT register  **/
#define SHRTIM_TXCMP2DAT_CMP2DAT                                 ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x compare 2 data */
#define SHRTIM_TXCMP2DAT_CMP2DAT_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_4                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_5                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_6                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_7                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_8                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_9                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_10                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_11                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_12                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_13                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_14                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCMP2DAT_CMP2DAT_15                              ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXCMP3DAT register  **/
#define SHRTIM_TXCMP3DAT_CMP3DAT                                 ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x compare 3 data */
#define SHRTIM_TXCMP3DAT_CMP3DAT_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_4                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_5                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_6                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_7                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_8                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_9                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_10                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_11                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_12                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_13                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_14                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCMP3DAT_CMP3DAT_15                              ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXCMP4DAT register  **/
#define SHRTIM_TXCMP4DAT_CMP4DAT                                 ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x compare 4 data */
#define SHRTIM_TXCMP4DAT_CMP4DAT_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_4                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_5                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_6                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_7                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_8                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_9                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_10                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_11                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_12                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_13                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_14                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCMP4DAT_CMP4DAT_15                              ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXCPT1 register  **/
#define SHRTIM_TXCPT1_UDSTS1                                  ((uint32_t)0x00010000U)            /* Bit[16] Status for timer x counting direction while capture 1 happened */
#define SHRTIM_TXCPT1_CPT1                                    ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x capture 1 data */
#define SHRTIM_TXCPT1_CPT1_0                                  ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCPT1_CPT1_1                                  ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCPT1_CPT1_2                                  ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCPT1_CPT1_3                                  ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCPT1_CPT1_4                                  ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCPT1_CPT1_5                                  ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCPT1_CPT1_6                                  ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCPT1_CPT1_7                                  ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCPT1_CPT1_8                                  ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCPT1_CPT1_9                                  ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCPT1_CPT1_10                                 ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCPT1_CPT1_11                                 ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCPT1_CPT1_12                                 ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCPT1_CPT1_13                                 ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCPT1_CPT1_14                                 ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCPT1_CPT1_15                                 ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXCPT2 register  **/
#define SHRTIM_TXCPT2_UDSTS2                                  ((uint32_t)0x00010000U)            /* Bit[16] Status for timer x counting direction while capture 2 happened */
#define SHRTIM_TXCPT2_CPT2                                    ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer x capture 2 data */
#define SHRTIM_TXCPT2_CPT2_0                                  ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCPT2_CPT2_1                                  ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCPT2_CPT2_2                                  ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCPT2_CPT2_3                                  ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCPT2_CPT2_4                                  ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCPT2_CPT2_5                                  ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCPT2_CPT2_6                                  ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCPT2_CPT2_7                                  ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCPT2_CPT2_8                                  ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCPT2_CPT2_9                                  ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCPT2_CPT2_10                                 ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCPT2_CPT2_11                                 ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCPT2_CPT2_12                                 ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCPT2_CPT2_13                                 ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCPT2_CPT2_14                                 ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCPT2_CPT2_15                                 ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_TXDT register  **/
#define SHRTIM_TXDT_DTFLCK                                 ((uint32_t)0x80000000U)            /* Bit[31] Deadtime falling lock */
#define SHRTIM_TXDT_DTFSLCK                                 ((uint32_t)0x40000000U)            /* Bit[30] Deadtime falling sign lock */
#define SHRTIM_TXDT_SDTF                                    ((uint32_t)0x02000000U)            /* Bit[25] Sign deadtime falling value */
#define SHRTIM_TXDT_DTF                                    ((uint32_t)0x01FF0000U)            /* Bit[24:16] Deadtime falling value */
#define SHRTIM_TXDT_DTF_0                                  ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_TXDT_DTF_1                                  ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_TXDT_DTF_2                                  ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_TXDT_DTF_3                                  ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_TXDT_DTF_4                                  ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_TXDT_DTF_5                                  ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_TXDT_DTF_6                                  ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_TXDT_DTF_7                                  ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_TXDT_DTF_8                                  ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_TXDT_DTRLCK                                 ((uint32_t)0x00008000U)            /* Bit[15] Deadtime rising lock */
#define SHRTIM_TXDT_DTRSLCK                                 ((uint32_t)0x00004000U)            /* Bit[14] Deadtime rising sign lock */
#define SHRTIM_TXDT_DTPSC                                   ((uint32_t)0x00001C00U)            /* Bit[12:10] Deadtime prescaler */
#define SHRTIM_TXDT_DTPSC_0                                 ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXDT_DTPSC_1                                 ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXDT_DTPSC_2                                 ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXDT_SDTR                                    ((uint32_t)0x00000200U)            /* Bit[9] Sign deadtime rising value */
#define SHRTIM_TXDT_DTR                                    ((uint32_t)0x000001FFU)            /* Bit[8:0] Deadtime rising value */
#define SHRTIM_TXDT_DTR_0                                  ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXDT_DTR_1                                  ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXDT_DTR_2                                  ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXDT_DTR_3                                  ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXDT_DTR_4                                  ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXDT_DTR_5                                  ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXDT_DTR_6                                  ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXDT_DTR_7                                  ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXDT_DTR_8                                  ((uint32_t)0x00000100U)            /* Bit8 */

/** Bit definition for SHRTIM_TXSET1 register  **/
#define SHRTIM_TXSET1_UPD                                     ((uint32_t)0x80000000U)            /* Bit[31] Registers update (transfer preload to active) */
#define SHRTIM_TXSET1_EXEV10                                  ((uint32_t)0x40000000U)            /* Bit[30] External event 10 */
#define SHRTIM_TXSET1_EXEV9                                   ((uint32_t)0x20000000U)            /* Bit[29] External event 9 */
#define SHRTIM_TXSET1_EXEV8                                   ((uint32_t)0x10000000U)            /* Bit[28] External event 8 */
#define SHRTIM_TXSET1_EXEV7                                   ((uint32_t)0x08000000U)            /* Bit[27] External event 7 */
#define SHRTIM_TXSET1_EXEV6                                   ((uint32_t)0x04000000U)            /* Bit[26] External event 6 */
#define SHRTIM_TXSET1_EXEV5                                   ((uint32_t)0x02000000U)            /* Bit[25] External event 5 */
#define SHRTIM_TXSET1_EXEV4                                   ((uint32_t)0x01000000U)            /* Bit[24] External event 4 */
#define SHRTIM_TXSET1_EXEV3                                   ((uint32_t)0x00800000U)            /* Bit[23] External event 3 */
#define SHRTIM_TXSET1_EXEV2                                   ((uint32_t)0x00400000U)            /* Bit[22] External event 2 */
#define SHRTIM_TXSET1_EXEV1                                   ((uint32_t)0x00200000U)            /* Bit[21] External event 1 */
#define SHRTIM_TXSET1_TIMEV9                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer event 9 */
#define SHRTIM_TXSET1_TIMEV8                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer event 8 */
#define SHRTIM_TXSET1_TIMEV7                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer event 7 */
#define SHRTIM_TXSET1_TIMEV6                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer event 6 */
#define SHRTIM_TXSET1_TIMEV5                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer event 5 */
#define SHRTIM_TXSET1_TIMEV4                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer event 4 */
#define SHRTIM_TXSET1_TIMEV3                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer event 3 */
#define SHRTIM_TXSET1_TIMEV2                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer event 2 */
#define SHRTIM_TXSET1_TIMEV1                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer event 1 */
#define SHRTIM_TXSET1_MCMP4                                   ((uint32_t)0x00000800U)            /* Bit[11] Master compare 4 */
#define SHRTIM_TXSET1_MCMP3                                   ((uint32_t)0x00000400U)            /* Bit[10] Master compare 3 */
#define SHRTIM_TXSET1_MCMP2                                   ((uint32_t)0x00000200U)            /* Bit[9] Master compare 2 */
#define SHRTIM_TXSET1_MCMP1                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 1 */
#define SHRTIM_TXSET1_MPRD                                    ((uint32_t)0x00000080U)            /* Bit[7] Master period */
#define SHRTIM_TXSET1_CMP4                                    ((uint32_t)0x00000040U)            /* Bit[6] Timer x compare 4 */
#define SHRTIM_TXSET1_CMP3                                    ((uint32_t)0x00000020U)            /* Bit[5] Timer x compare 3 */
#define SHRTIM_TXSET1_CMP2                                    ((uint32_t)0x00000010U)            /* Bit[4] Timer x compare 2 */
#define SHRTIM_TXSET1_CMP1                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer x compare 1 */
#define SHRTIM_TXSET1_PRD                                     ((uint32_t)0x00000004U)            /* Bit[2] Timer x period */
#define SHRTIM_TXSET1_RSYNC                                    ((uint32_t)0x00000002U)            /* Bit[1] Timer x resynchronization */
#define SHRTIM_TXSET1_SWT                                     ((uint32_t)0x00000001U)            /* Bit[0] Software set trigger */

/** Bit definition for SHRTIM_TXRST1 register  **/
#define SHRTIM_TXRST1_UPD                                     ((uint32_t)0x80000000U)            /* Bit[31] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV10                                  ((uint32_t)0x40000000U)            /* Bit[30] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV9                                   ((uint32_t)0x20000000U)            /* Bit[29] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV8                                   ((uint32_t)0x10000000U)            /* Bit[28] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV7                                   ((uint32_t)0x08000000U)            /* Bit[27] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV6                                   ((uint32_t)0x04000000U)            /* Bit[26] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV5                                   ((uint32_t)0x02000000U)            /* Bit[25] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV4                                   ((uint32_t)0x01000000U)            /* Bit[24] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV3                                   ((uint32_t)0x00800000U)            /* Bit[23] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV2                                   ((uint32_t)0x00400000U)            /* Bit[22] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_EXEV1                                   ((uint32_t)0x00200000U)            /* Bit[21] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV9                                  ((uint32_t)0x00100000U)            /* Bit[20] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV8                                  ((uint32_t)0x00080000U)            /* Bit[19] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV7                                  ((uint32_t)0x00040000U)            /* Bit[18] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV6                                  ((uint32_t)0x00020000U)            /* Bit[17] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV5                                  ((uint32_t)0x00010000U)            /* Bit[16] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV4                                  ((uint32_t)0x00008000U)            /* Bit[15] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV3                                  ((uint32_t)0x00004000U)            /* Bit[14] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV2                                  ((uint32_t)0x00002000U)            /* Bit[13] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_TIMEV1                                  ((uint32_t)0x00001000U)            /* Bit[12] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_MCMP4                                   ((uint32_t)0x00000800U)            /* Bit[11] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_MCMP3                                   ((uint32_t)0x00000400U)            /* Bit[10] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_MCMP2                                   ((uint32_t)0x00000200U)            /* Bit[9] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_MCMP1                                   ((uint32_t)0x00000100U)            /* Bit[8] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_MPRD                                    ((uint32_t)0x00000080U)            /* Bit[7] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_CMP4                                    ((uint32_t)0x00000040U)            /* Bit[6] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_CMP3                                    ((uint32_t)0x00000020U)            /* Bit[5] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_CMP2                                    ((uint32_t)0x00000010U)            /* Bit[4] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_CMP1                                    ((uint32_t)0x00000008U)            /* Bit[3] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_PRD                                     ((uint32_t)0x00000004U)            /* Bit[2] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_RSYNC                                    ((uint32_t)0x00000002U)            /* Bit[1] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXRST1_SWT                                     ((uint32_t)0x00000001U)            /* Bit[0] Refer to SHRTIM_TASET1 bits description. */

/** Bit definition for SHRTIM_TXSET2 register  **/
#define SHRTIM_TXSET2_UPD                                     ((uint32_t)0x80000000U)            /* Bit[31] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXSET2_EXEV10                                  ((uint32_t)0x40000000U)            /* Bit[30] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXSET2_EXEV9                                   ((uint32_t)0x20000000U)            /* Bit[29] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXSET2_EXEV8                                   ((uint32_t)0x10000000U)            /* Bit[28] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXSET2_EXEV7                                   ((uint32_t)0x08000000U)            /* Bit[27] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXSET2_EXEV6                                   ((uint32_t)0x04000000U)            /* Bit[26] Refer to SHRTIM_TASET1 bits description. */
#define SHRTIM_TXSET2_EXEV5                                   ((uint32_t)0x02000000U)            /* Bit[25] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_EXEV4                                   ((uint32_t)0x01000000U)            /* Bit[24] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_EXEV3                                   ((uint32_t)0x00800000U)            /* Bit[23] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_EXEV2                                   ((uint32_t)0x00400000U)            /* Bit[22] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_EXEV1                                   ((uint32_t)0x00200000U)            /* Bit[21] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV9                                  ((uint32_t)0x00100000U)            /* Bit[20] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV8                                  ((uint32_t)0x00080000U)            /* Bit[19] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV7                                  ((uint32_t)0x00040000U)            /* Bit[18] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV6                                  ((uint32_t)0x00020000U)            /* Bit[17] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV5                                  ((uint32_t)0x00010000U)            /* Bit[16] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV4                                  ((uint32_t)0x00008000U)            /* Bit[15] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV3                                  ((uint32_t)0x00004000U)            /* Bit[14] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV2                                  ((uint32_t)0x00002000U)            /* Bit[13] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_TIMEV1                                  ((uint32_t)0x00001000U)            /* Bit[12] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_MCMP4                                   ((uint32_t)0x00000800U)            /* Bit[11] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_MCMP3                                   ((uint32_t)0x00000400U)            /* Bit[10] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_MCMP2                                   ((uint32_t)0x00000200U)            /* Bit[9] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_MCMP1                                   ((uint32_t)0x00000100U)            /* Bit[8] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_MPRD                                    ((uint32_t)0x00000080U)            /* Bit[7] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_CMP4                                    ((uint32_t)0x00000040U)            /* Bit[6] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_CMP3                                    ((uint32_t)0x00000020U)            /* Bit[5] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_CMP2                                    ((uint32_t)0x00000010U)            /* Bit[4] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_CMP1                                    ((uint32_t)0x00000008U)            /* Bit[3] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_PRD                                     ((uint32_t)0x00000004U)            /* Bit[2] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_RSYNC                                    ((uint32_t)0x00000002U)            /* Bit[1] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXSET2_SWT                                     ((uint32_t)0x00000001U)            /* Bit[0] Refer to SHRTIM_TASET bits description. */

/** Bit definition for SHRTIM_TXRST2 register  **/
#define SHRTIM_TXRST2_UPD                                     ((uint32_t)0x80000000U)            /* Bit[31] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV10                                  ((uint32_t)0x40000000U)            /* Bit[30] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV9                                   ((uint32_t)0x20000000U)            /* Bit[29] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV8                                   ((uint32_t)0x10000000U)            /* Bit[28] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV7                                   ((uint32_t)0x08000000U)            /* Bit[27] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV6                                   ((uint32_t)0x04000000U)            /* Bit[26] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV5                                   ((uint32_t)0x02000000U)            /* Bit[25] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV4                                   ((uint32_t)0x01000000U)            /* Bit[24] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV3                                   ((uint32_t)0x00800000U)            /* Bit[23] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV2                                   ((uint32_t)0x00400000U)            /* Bit[22] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_EXEV1                                   ((uint32_t)0x00200000U)            /* Bit[21] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV9                                  ((uint32_t)0x00100000U)            /* Bit[20] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV8                                  ((uint32_t)0x00080000U)            /* Bit[19] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV7                                  ((uint32_t)0x00040000U)            /* Bit[18] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV6                                  ((uint32_t)0x00020000U)            /* Bit[17] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV5                                  ((uint32_t)0x00010000U)            /* Bit[16] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV4                                  ((uint32_t)0x00008000U)            /* Bit[15] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV3                                  ((uint32_t)0x00004000U)            /* Bit[14] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV2                                  ((uint32_t)0x00002000U)            /* Bit[13] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_TIMEV1                                  ((uint32_t)0x00001000U)            /* Bit[12] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_MCMP4                                   ((uint32_t)0x00000800U)            /* Bit[11] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_MCMP3                                   ((uint32_t)0x00000400U)            /* Bit[10] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_MCMP2                                   ((uint32_t)0x00000200U)            /* Bit[9] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_MCMP1                                   ((uint32_t)0x00000100U)            /* Bit[8] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_MPRD                                    ((uint32_t)0x00000080U)            /* Bit[7] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_CMP4                                    ((uint32_t)0x00000040U)            /* Bit[6] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_CMP3                                    ((uint32_t)0x00000020U)            /* Bit[5] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_CMP2                                    ((uint32_t)0x00000010U)            /* Bit[4] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_CMP1                                    ((uint32_t)0x00000008U)            /* Bit[3] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_PRD                                     ((uint32_t)0x00000004U)            /* Bit[2] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_RSYNC                                    ((uint32_t)0x00000002U)            /* Bit[1] Refer to SHRTIM_TASET bits description. */
#define SHRTIM_TXRST2_SWT                                     ((uint32_t)0x00000001U)            /* Bit[0] Refer to SHRTIM_TASET bits description. */

/** Bit definition for SHRTIM_TXEXEVFLT1 register  **/
#define SHRTIM_TXEXEVFLT1_EXEVWINSEL                              ((uint32_t)0x80000000U)            /* Bit 31 External event window selection */        
#define SHRTIM_TXEXEVFLT1_EXEV5FLT                                ((uint32_t)0x1E000000U)            /* Bit[28:25] External event 5 filter */
#define SHRTIM_TXEXEVFLT1_EXEV5FLT_0                              ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_TXEXEVFLT1_EXEV5FLT_1                              ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_TXEXEVFLT1_EXEV5FLT_2                              ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_TXEXEVFLT1_EXEV5FLT_3                              ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_TXEXEVFLT1_EXEV5LATCH                              ((uint32_t)0x01000000U)            /* Bit[24] External event 5 latch */
#define SHRTIM_TXEXEVFLT1_EXEV4FLT                                ((uint32_t)0x00780000U)            /* Bit[22:19] External event 4 filter */
#define SHRTIM_TXEXEVFLT1_EXEV4FLT_0                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_TXEXEVFLT1_EXEV4FLT_1                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_TXEXEVFLT1_EXEV4FLT_2                              ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_TXEXEVFLT1_EXEV4FLT_3                              ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_TXEXEVFLT1_EXEV4LATCH                              ((uint32_t)0x00040000U)            /* Bit[18] External event 4 latch */
#define SHRTIM_TXEXEVFLT1_EXEV3FLT                                ((uint32_t)0x0001E000U)            /* Bit[16:13] External event 3 filter */
#define SHRTIM_TXEXEVFLT1_EXEV3FLT_0                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXEXEVFLT1_EXEV3FLT_1                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXEXEVFLT1_EXEV3FLT_2                              ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_TXEXEVFLT1_EXEV3FLT_3                              ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_TXEXEVFLT1_EXEV3LATCH                              ((uint32_t)0x00001000U)            /* Bit[12] External event 3 latch */
#define SHRTIM_TXEXEVFLT1_EXEV2FLT                                ((uint32_t)0x00000780U)            /* Bit[10:7] External event 2 filter */
#define SHRTIM_TXEXEVFLT1_EXEV2FLT_0                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXEXEVFLT1_EXEV2FLT_1                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXEXEVFLT1_EXEV2FLT_2                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXEXEVFLT1_EXEV2FLT_3                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXEXEVFLT1_EXEV2LATCH                              ((uint32_t)0x00000040U)            /* Bit[6] External event 2 latch */
#define SHRTIM_TXEXEVFLT1_EXEV1FLT                                ((uint32_t)0x0000001EU)            /* Bit[4:1] External event 1 filter */
#define SHRTIM_TXEXEVFLT1_EXEV1FLT_0                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXEXEVFLT1_EXEV1FLT_1                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXEXEVFLT1_EXEV1FLT_2                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXEXEVFLT1_EXEV1FLT_3                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXEXEVFLT1_EXEV1LATCH                              ((uint32_t)0x00000001U)            /* Bit[0] External event 1 LATCH */

/** Bit definition for SHRTIM_TXEXEVFLT2 register  **/
#define SHRTIM_TXEXEVFLT2_EXEV10FLT                               ((uint32_t)0x1E000000U)            /* Bit[28:25] External event 10 filter */
#define SHRTIM_TXEXEVFLT2_EXEV10FLT_0                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_TXEXEVFLT2_EXEV10FLT_1                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_TXEXEVFLT2_EXEV10FLT_2                             ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_TXEXEVFLT2_EXEV10FLT_3                             ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_TXEXEVFLT2_EXEV10LATCH                             ((uint32_t)0x01000000U)            /* Bit[24] External event 10 latch */
#define SHRTIM_TXEXEVFLT2_EXE9VFLT                                ((uint32_t)0x00780000U)            /* Bit[22:19] External event 9 filter */
#define SHRTIM_TXEXEVFLT2_EXE9VFLT_0                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_TXEXEVFLT2_EXE9VFLT_1                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_TXEXEVFLT2_EXE9VFLT_2                              ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_TXEXEVFLT2_EXE9VFLT_3                              ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_TXEXEVFLT2_EXEV9LATCH                              ((uint32_t)0x00040000U)            /* Bit[18] External event 9 latch */
#define SHRTIM_TXEXEVFLT2_EXE8VFLT                                ((uint32_t)0x0001E000U)            /* Bit[16:13] External event 8 filter */
#define SHRTIM_TXEXEVFLT2_EXE8VFLT_0                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXEXEVFLT2_EXE8VFLT_1                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXEXEVFLT2_EXE8VFLT_2                              ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_TXEXEVFLT2_EXE8VFLT_3                              ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_TXEXEVFLT2_EXEV8LATCH                              ((uint32_t)0x00001000U)            /* Bit[12] External event 8 latch */
#define SHRTIM_TXEXEVFLT2_EXE7VFLT                                ((uint32_t)0x00000780U)            /* Bit[10:7] External event 7 filter */
#define SHRTIM_TXEXEVFLT2_EXE7VFLT_0                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXEXEVFLT2_EXE7VFLT_1                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXEXEVFLT2_EXE7VFLT_2                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXEXEVFLT2_EXE7VFLT_3                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXEXEVFLT2_EXEV7LATCH                              ((uint32_t)0x00000040U)            /* Bit[6] External event 7 latch */
#define SHRTIM_TXEXEVFLT2_EXE6VFLT                                ((uint32_t)0x0000001EU)            /* Bit[4:1] External event 6 filter */
#define SHRTIM_TXEXEVFLT2_EXE6VFLT_0                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXEXEVFLT2_EXE6VFLT_1                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXEXEVFLT2_EXE6VFLT_2                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXEXEVFLT2_EXE6VFLT_3                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXEXEVFLT2_EXEV6LATCH                              ((uint32_t)0x00000001U)            /* Bit[0] External event 6 latch */

/** Bit definition for SHRTIM_TACNTRST register  **/
#define SHRTIM_TACNTRST_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TACNTRST_TECMP4                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 4 */
#define SHRTIM_TACNTRST_TECMP2                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E compare 2 */
#define SHRTIM_TACNTRST_TECMP1                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E compare 1 */
#define SHRTIM_TACNTRST_TDCMP4                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 4 */
#define SHRTIM_TACNTRST_TDCMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 2 */
#define SHRTIM_TACNTRST_TDCMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D compare 1 */
#define SHRTIM_TACNTRST_TCCMP4                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer C compare 4 */
#define SHRTIM_TACNTRST_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TACNTRST_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TACNTRST_TBCMP4                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer B compare 4 */
#define SHRTIM_TACNTRST_TBCMP2                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer B compare 2 */
#define SHRTIM_TACNTRST_TBCMP1                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 1 */
#define SHRTIM_TACNTRST_EXEV10                                  ((uint32_t)0x00040000U)            /* Bit[18] External event 10 */
#define SHRTIM_TACNTRST_EXEV9                                   ((uint32_t)0x00020000U)            /* Bit[17] External event 9 */
#define SHRTIM_TACNTRST_EXEV8                                   ((uint32_t)0x00010000U)            /* Bit[16] External event 8 */
#define SHRTIM_TACNTRST_EXEV7                                   ((uint32_t)0x00008000U)            /* Bit[15] External event 7 */
#define SHRTIM_TACNTRST_EXEV6                                   ((uint32_t)0x00004000U)            /* Bit[14] External event 6 */
#define SHRTIM_TACNTRST_EXEV5                                   ((uint32_t)0x00002000U)            /* Bit[13] External event 5 */
#define SHRTIM_TACNTRST_EXEV4                                   ((uint32_t)0x00001000U)            /* Bit[12] External event 4 */
#define SHRTIM_TACNTRST_EXEV3                                   ((uint32_t)0x00000800U)            /* Bit[11] External event 3 */
#define SHRTIM_TACNTRST_EXEV2                                   ((uint32_t)0x00000400U)            /* Bit[10] External event 2 */
#define SHRTIM_TACNTRST_EXEV1                                   ((uint32_t)0x00000200U)            /* Bit[9] External event 1 */
#define SHRTIM_TACNTRST_MCMP4                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 4 */
#define SHRTIM_TACNTRST_MCMP3                                   ((uint32_t)0x00000080U)            /* Bit[7] Master compare 3 */
#define SHRTIM_TACNTRST_MCMP2                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 2 */
#define SHRTIM_TACNTRST_MCMP1                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 1 */
#define SHRTIM_TACNTRST_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] Master timer period */
#define SHRTIM_TACNTRST_CMP4                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer A compare 4 reset */
#define SHRTIM_TACNTRST_CMP2                                    ((uint32_t)0x00000004U)            /* Bit[2] Timer A compare 2 reset */
#define SHRTIM_TACNTRST_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Timer A update reset */
#define SHRTIM_TACNTRST_TFCMP1                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer F compare 1 */

/** Bit definition for SHRTIM_TBCNTRST register  **/
#define SHRTIM_TBCNTRST_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TBCNTRST_TECMP4                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 4 */
#define SHRTIM_TBCNTRST_TECMP2                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E compare 2 */
#define SHRTIM_TBCNTRST_TECMP1                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E compare 1 */
#define SHRTIM_TBCNTRST_TDCMP4                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 4 */
#define SHRTIM_TBCNTRST_TDCMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 2 */
#define SHRTIM_TBCNTRST_TDCMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D compare 1 */
#define SHRTIM_TBCNTRST_TCCMP4                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer C compare 4 */
#define SHRTIM_TBCNTRST_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TBCNTRST_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TBCNTRST_TACMP4                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer B compare 4 */
#define SHRTIM_TBCNTRST_TACMP2                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer B compare 2 */
#define SHRTIM_TBCNTRST_TACMP1                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 1 */
#define SHRTIM_TBCNTRST_EXEV10                                  ((uint32_t)0x00040000U)            /* Bit[18] External event 10 */
#define SHRTIM_TBCNTRST_EXEV9                                   ((uint32_t)0x00020000U)            /* Bit[17] External event 9 */
#define SHRTIM_TBCNTRST_EXEV8                                   ((uint32_t)0x00010000U)            /* Bit[16] External event 8 */
#define SHRTIM_TBCNTRST_EXEV7                                   ((uint32_t)0x00008000U)            /* Bit[15] External event 7 */
#define SHRTIM_TBCNTRST_EXEV6                                   ((uint32_t)0x00004000U)            /* Bit[14] External event 6 */
#define SHRTIM_TBCNTRST_EXEV5                                   ((uint32_t)0x00002000U)            /* Bit[13] External event 5 */
#define SHRTIM_TBCNTRST_EXEV4                                   ((uint32_t)0x00001000U)            /* Bit[12] External event 4 */
#define SHRTIM_TBCNTRST_EXEV3                                   ((uint32_t)0x00000800U)            /* Bit[11] External event 3 */
#define SHRTIM_TBCNTRST_EXEV2                                   ((uint32_t)0x00000400U)            /* Bit[10] External event 2 */
#define SHRTIM_TBCNTRST_EXEV1                                   ((uint32_t)0x00000200U)            /* Bit[9] External event 1 */
#define SHRTIM_TBCNTRST_MCMP4                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 4 */
#define SHRTIM_TBCNTRST_MCMP3                                   ((uint32_t)0x00000080U)            /* Bit[7] Master compare 3 */
#define SHRTIM_TBCNTRST_MCMP2                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 2 */
#define SHRTIM_TBCNTRST_MCMP1                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 1 */
#define SHRTIM_TBCNTRST_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] Master timer period */
#define SHRTIM_TBCNTRST_CMP4                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer B compare 4 reset */
#define SHRTIM_TBCNTRST_CMP2                                    ((uint32_t)0x00000004U)            /* Bit[2] Timer B compare 2 reset */
#define SHRTIM_TBCNTRST_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Timer B update reset */
#define SHRTIM_TBCNTRST_TFCMP1                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer F compare 1 */

/** Bit definition for SHRTIM_TCCNTRST register  **/
#define SHRTIM_TCCNTRST_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TCCNTRST_TECMP4                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 4 */
#define SHRTIM_TCCNTRST_TECMP2                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E compare 2 */
#define SHRTIM_TCCNTRST_TECMP1                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E compare 1 */
#define SHRTIM_TCCNTRST_TDCMP4                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 4 */
#define SHRTIM_TCCNTRST_TDCMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 2 */
#define SHRTIM_TCCNTRST_TDCMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D compare 1 */
#define SHRTIM_TCCNTRST_TBCMP4                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer C compare 4 */
#define SHRTIM_TCCNTRST_TBCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TCCNTRST_TBCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TCCNTRST_TACMP4                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer B compare 4 */
#define SHRTIM_TCCNTRST_TACMP2                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer B compare 2 */
#define SHRTIM_TCCNTRST_TACMP1                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 1 */
#define SHRTIM_TCCNTRST_EXEV10                                  ((uint32_t)0x00040000U)            /* Bit[18] External event */
#define SHRTIM_TCCNTRST_EXEV9                                   ((uint32_t)0x00020000U)            /* Bit[17] External event */
#define SHRTIM_TCCNTRST_EXEV8                                   ((uint32_t)0x00010000U)            /* Bit[16] External event */
#define SHRTIM_TCCNTRST_EXEV7                                   ((uint32_t)0x00008000U)            /* Bit[15] External event */
#define SHRTIM_TCCNTRST_EXEV6                                   ((uint32_t)0x00004000U)            /* Bit[14] External event */
#define SHRTIM_TCCNTRST_EXEV5                                   ((uint32_t)0x00002000U)            /* Bit[13] External event */
#define SHRTIM_TCCNTRST_EXEV4                                   ((uint32_t)0x00001000U)            /* Bit[12] External event */
#define SHRTIM_TCCNTRST_EXEV3                                   ((uint32_t)0x00000800U)            /* Bit[11] External event */
#define SHRTIM_TCCNTRST_EXEV2                                   ((uint32_t)0x00000400U)            /* Bit[10] External event */
#define SHRTIM_TCCNTRST_EXEV1                                   ((uint32_t)0x00000200U)            /* Bit[9] External event */
#define SHRTIM_TCCNTRST_MCMP4                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 4 */
#define SHRTIM_TCCNTRST_MCMP3                                   ((uint32_t)0x00000080U)            /* Bit[7] Master compare 3 */
#define SHRTIM_TCCNTRST_MCMP2                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 2 */
#define SHRTIM_TCCNTRST_MCMP1                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 1 */
#define SHRTIM_TCCNTRST_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] Master timer period */
#define SHRTIM_TCCNTRST_CMP4                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer C compare 4 reset */
#define SHRTIM_TCCNTRST_CMP2                                    ((uint32_t)0x00000004U)            /* Bit[2] Timer C compare 2 reset */
#define SHRTIM_TCCNTRST_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Timer C update reset */
#define SHRTIM_TCCNTRST_TFCMP1                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer F compare 1 */

/** Bit definition for SHRTIM_TDCNTRST register  **/
#define SHRTIM_TDCNTRST_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TDCNTRST_TECMP4                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 4 */
#define SHRTIM_TDCNTRST_TECMP2                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E compare 2 */
#define SHRTIM_TDCNTRST_TECMP1                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E compare 1 */
#define SHRTIM_TDCNTRST_TCCMP4                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer C compare 4 */
#define SHRTIM_TDCNTRST_TCCMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer C compare 2 */
#define SHRTIM_TDCNTRST_TCCMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer C compare 1 */
#define SHRTIM_TDCNTRST_TBCMP4                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D compare 4 */
#define SHRTIM_TDCNTRST_TBCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer D compare 2 */
#define SHRTIM_TDCNTRST_TBCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer D compare 1 */
#define SHRTIM_TDCNTRST_TACMP4                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer B compare 4 */
#define SHRTIM_TDCNTRST_TACMP2                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer B compare 2 */
#define SHRTIM_TDCNTRST_TACMP1                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 1 */
#define SHRTIM_TDCNTRST_EXEV10                                  ((uint32_t)0x00040000U)            /* Bit[18] External event */
#define SHRTIM_TDCNTRST_EXEV9                                   ((uint32_t)0x00020000U)            /* Bit[17] External event */
#define SHRTIM_TDCNTRST_EXEV8                                   ((uint32_t)0x00010000U)            /* Bit[16] External event */
#define SHRTIM_TDCNTRST_EXEV7                                   ((uint32_t)0x00008000U)            /* Bit[15] External event */
#define SHRTIM_TDCNTRST_EXEV6                                   ((uint32_t)0x00004000U)            /* Bit[14] External event */
#define SHRTIM_TDCNTRST_EXEV5                                   ((uint32_t)0x00002000U)            /* Bit[13] External event */
#define SHRTIM_TDCNTRST_EXEV4                                   ((uint32_t)0x00001000U)            /* Bit[12] External event */
#define SHRTIM_TDCNTRST_EXEV3                                   ((uint32_t)0x00000800U)            /* Bit[11] External event */
#define SHRTIM_TDCNTRST_EXEV2                                   ((uint32_t)0x00000400U)            /* Bit[10] External event */
#define SHRTIM_TDCNTRST_EXEV1                                   ((uint32_t)0x00000200U)            /* Bit[9] External event */
#define SHRTIM_TDCNTRST_MCMP4                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 4 */
#define SHRTIM_TDCNTRST_MCMP3                                   ((uint32_t)0x00000080U)            /* Bit[7] Master compare 3 */
#define SHRTIM_TDCNTRST_MCMP2                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 2 */
#define SHRTIM_TDCNTRST_MCMP1                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 1 */
#define SHRTIM_TDCNTRST_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] Master timer period */
#define SHRTIM_TDCNTRST_CMP4                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer D compare 4 reset */
#define SHRTIM_TDCNTRST_CMP2                                    ((uint32_t)0x00000004U)            /* Bit[2] Timer D compare 2 reset */
#define SHRTIM_TDCNTRST_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Timer D update reset */
#define SHRTIM_TDCNTRST_TFCMP1                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer F compare 1 */

/** Bit definition for SHRTIM_TECNTRST register  **/
#define SHRTIM_TECNTRST_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TECNTRST_TDCMP4                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer D compare 4 */
#define SHRTIM_TECNTRST_TDCMP2                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer D compare 2 */
#define SHRTIM_TECNTRST_TDCMP1                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer D compare 1 */
#define SHRTIM_TECNTRST_TCCMP4                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer C compare 4 */
#define SHRTIM_TECNTRST_TCCMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer C compare 2 */
#define SHRTIM_TECNTRST_TCCMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer C compare 1 */
#define SHRTIM_TECNTRST_TBCMP4                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer E compare 4 */
#define SHRTIM_TECNTRST_TBCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer E compare 2 */
#define SHRTIM_TECNTRST_TBCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer E compare 1 */
#define SHRTIM_TECNTRST_TACMP4                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer B compare 4 */
#define SHRTIM_TECNTRST_TACMP2                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer B compare 2 */
#define SHRTIM_TECNTRST_TACMP1                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 1 */
#define SHRTIM_TECNTRST_EXEV10                                  ((uint32_t)0x00040000U)            /* Bit[18] External event */
#define SHRTIM_TECNTRST_EXEV9                                   ((uint32_t)0x00020000U)            /* Bit[17] External event */
#define SHRTIM_TECNTRST_EXEV8                                   ((uint32_t)0x00010000U)            /* Bit[16] External event */
#define SHRTIM_TECNTRST_EXEV7                                   ((uint32_t)0x00008000U)            /* Bit[15] External event */
#define SHRTIM_TECNTRST_EXEV6                                   ((uint32_t)0x00004000U)            /* Bit[14] External event */
#define SHRTIM_TECNTRST_EXEV5                                   ((uint32_t)0x00002000U)            /* Bit[13] External event */
#define SHRTIM_TECNTRST_EXEV4                                   ((uint32_t)0x00001000U)            /* Bit[12] External event */
#define SHRTIM_TECNTRST_EXEV3                                   ((uint32_t)0x00000800U)            /* Bit[11] External event */
#define SHRTIM_TECNTRST_EXEV2                                   ((uint32_t)0x00000400U)            /* Bit[10] External event */
#define SHRTIM_TECNTRST_EXEV1                                   ((uint32_t)0x00000200U)            /* Bit[9] External event */
#define SHRTIM_TECNTRST_MCMP4                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 4 */
#define SHRTIM_TECNTRST_MCMP3                                   ((uint32_t)0x00000080U)            /* Bit[7] Master compare 3 */
#define SHRTIM_TECNTRST_MCMP2                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 2 */
#define SHRTIM_TECNTRST_MCMP1                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 1 */
#define SHRTIM_TECNTRST_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] Master timer period */
#define SHRTIM_TECNTRST_CMP4                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer E compare 4 reset */
#define SHRTIM_TECNTRST_CMP2                                    ((uint32_t)0x00000004U)            /* Bit[2] Timer E compare 2 reset */
#define SHRTIM_TECNTRST_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Timer E update reset */
#define SHRTIM_TECNTRST_TFCMP1                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer F compare 1 */

/** Bit definition for SHRTIM_TFCNTRST register  **/
#define SHRTIM_TFCNTRST_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TFCNTRST_TDCMP4                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer D compare 4 */
#define SHRTIM_TFCNTRST_TDCMP2                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer D compare 2 */
#define SHRTIM_TFCNTRST_TDCMP1                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer D compare 1 */
#define SHRTIM_TFCNTRST_TCCMP4                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer C compare 4 */
#define SHRTIM_TFCNTRST_TCCMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer C compare 2 */
#define SHRTIM_TFCNTRST_TCCMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer C compare 1 */
#define SHRTIM_TFCNTRST_TBCMP4                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer F compare 4 */
#define SHRTIM_TFCNTRST_TBCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer F compare 2 */
#define SHRTIM_TFCNTRST_TBCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer F compare 1 */
#define SHRTIM_TFCNTRST_TACMP4                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer B compare 4 */
#define SHRTIM_TFCNTRST_TACMP2                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer B compare 2 */
#define SHRTIM_TFCNTRST_TACMP1                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 1 */
#define SHRTIM_TFCNTRST_EXEV10                                  ((uint32_t)0x00040000U)            /* Bit[18] External event */
#define SHRTIM_TFCNTRST_EXEV9                                   ((uint32_t)0x00020000U)            /* Bit[17] External event */
#define SHRTIM_TFCNTRST_EXEV8                                   ((uint32_t)0x00010000U)            /* Bit[16] External event */
#define SHRTIM_TFCNTRST_EXEV7                                   ((uint32_t)0x00008000U)            /* Bit[15] External event */
#define SHRTIM_TFCNTRST_EXEV6                                   ((uint32_t)0x00004000U)            /* Bit[14] External event */
#define SHRTIM_TFCNTRST_EXEV5                                   ((uint32_t)0x00002000U)            /* Bit[13] External event */
#define SHRTIM_TFCNTRST_EXEV4                                   ((uint32_t)0x00001000U)            /* Bit[12] External event */
#define SHRTIM_TFCNTRST_EXEV3                                   ((uint32_t)0x00000800U)            /* Bit[11] External event */
#define SHRTIM_TFCNTRST_EXEV2                                   ((uint32_t)0x00000400U)            /* Bit[10] External event */
#define SHRTIM_TFCNTRST_EXEV1                                   ((uint32_t)0x00000200U)            /* Bit[9] External event */
#define SHRTIM_TFCNTRST_MCMP4                                   ((uint32_t)0x00000100U)            /* Bit[8] Master compare 4 */
#define SHRTIM_TFCNTRST_MCMP3                                   ((uint32_t)0x00000080U)            /* Bit[7] Master compare 3 */
#define SHRTIM_TFCNTRST_MCMP2                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 2 */
#define SHRTIM_TFCNTRST_MCMP1                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 1 */
#define SHRTIM_TFCNTRST_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] Master timer period */
#define SHRTIM_TFCNTRST_CMP4                                    ((uint32_t)0x00000008U)            /* Bit[3] Timer F compare 4 reset */
#define SHRTIM_TFCNTRST_CMP2                                    ((uint32_t)0x00000004U)            /* Bit[2] Timer F compare 2 reset */
#define SHRTIM_TFCNTRST_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Timer F update reset */
#define SHRTIM_TFCNTRST_TECMP1                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer E compare 1 */

/** Bit definition for SHRTIM_TXCHOP register  **/
#define SHRTIM_TXCHOP_STARTPW                                 ((uint32_t)0x00000780U)            /* Bit[10:7] Timer x start pulse width */
#define SHRTIM_TXCHOP_STARTPW_0                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCHOP_STARTPW_1                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCHOP_STARTPW_2                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCHOP_STARTPW_3                               ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCHOP_CARDCY                                  ((uint32_t)0x00000070U)            /* Bit[6:4] Timer x chopper duty cycle value */
#define SHRTIM_TXCHOP_CARDCY_0                                ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCHOP_CARDCY_1                                ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCHOP_CARDCY_2                                ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCHOP_CARFRQ                                  ((uint32_t)0x0000000FU)            /* Bit[3:0] Timer x carrier frequency value */
#define SHRTIM_TXCHOP_CARFRQ_0                                ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCHOP_CARFRQ_1                                ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCHOP_CARFRQ_2                                ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCHOP_CARFRQ_3                                ((uint32_t)0x00000008U)            /* Bit3 */

/** Bit definition for SHRTIM_TACPT1CTRL register  **/
#define SHRTIM_TACPT1CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TACPT1CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TACPT1CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TACPT1CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TACPT1CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TACPT1CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TACPT1CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TACPT1CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TACPT1CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TACPT1CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TACPT1CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TACPT1CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TACPT1CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TACPT1CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TACPT1CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TACPT1CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TACPT1CTRL_TFCMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer F compare 2 */
#define SHRTIM_TACPT1CTRL_TFCMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer F compare 1 */
#define SHRTIM_TACPT1CTRL_TF1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer F output 1  reset */
#define SHRTIM_TACPT1CTRL_TF1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer F output 1  reset */
#define SHRTIM_TACPT1CTRL_EXEV10                                  ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TACPT1CTRL_EXEV9                                   ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TACPT1CTRL_EXEV8                                   ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TACPT1CTRL_EXEV7                                   ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TACPT1CTRL_EXEV6                                   ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TACPT1CTRL_EXEV5                                   ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TACPT1CTRL_EXEV4                                   ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TACPT1CTRL_EXEV3                                   ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TACPT1CTRL_EXEV2                                   ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TACPT1CTRL_EXEV1                                   ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TACPT1CTRL_UPD                                     ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TACPT1CTRL_SW                                      ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TACPT2CTRL register  **/
#define SHRTIM_TACPT2CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TACPT2CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TACPT2CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TACPT2CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TACPT2CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TACPT2CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TACPT2CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TACPT2CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TACPT2CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TACPT2CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TACPT2CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TACPT2CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TACPT2CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TACPT2CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TACPT2CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TACPT2CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TACPT2CTRL_TFCMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer F compare 2 */
#define SHRTIM_TACPT2CTRL_TFCMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer F compare 1 */
#define SHRTIM_TACPT2CTRL_TF1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer F output 1  reset */
#define SHRTIM_TACPT2CTRL_TF1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer F output 1  reset */
#define SHRTIM_TACPT2CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TACPT2CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TACPT2CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TACPT2CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TACPT2CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TACPT2CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TACPT2CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TACPT2CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TACPT2CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TACPT2CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TACPT2CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TACPT2CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TBCPT1CTRL register  **/
#define SHRTIM_TBCPT1CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TBCPT1CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TBCPT1CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TBCPT1CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TBCPT1CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TBCPT1CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TBCPT1CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TBCPT1CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TBCPT1CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TBCPT1CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TBCPT1CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TBCPT1CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TBCPT1CTRL_TFCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer F compare 2 */
#define SHRTIM_TBCPT1CTRL_TFCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer F compare 1 */
#define SHRTIM_TBCPT1CTRL_TF1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer F output 1  reset */
#define SHRTIM_TBCPT1CTRL_TF1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer F output 1  reset */
#define SHRTIM_TBCPT1CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TBCPT1CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TBCPT1CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TBCPT1CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TBCPT1CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TBCPT1CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TBCPT1CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TBCPT1CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TBCPT1CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TBCPT1CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TBCPT1CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TBCPT1CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TBCPT1CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TBCPT1CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TBCPT1CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TBCPT1CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TBCPT2CTRL register  **/
#define SHRTIM_TBCPT2CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TBCPT2CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TBCPT2CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TBCPT2CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TBCPT2CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TBCPT2CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TBCPT2CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TBCPT2CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TBCPT2CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TBCPT2CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TBCPT2CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TBCPT2CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TBCPT2CTRL_TFCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer F compare 2 */
#define SHRTIM_TBCPT2CTRL_TFCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer F compare 1 */
#define SHRTIM_TBCPT2CTRL_TF1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer F output 1  reset */
#define SHRTIM_TBCPT2CTRL_TF1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer F output 1  reset */
#define SHRTIM_TBCPT2CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TBCPT2CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TBCPT2CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TBCPT2CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TBCPT2CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TBCPT2CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TBCPT2CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TBCPT2CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TBCPT2CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TBCPT2CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TBCPT2CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TBCPT2CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TBCPT2CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TBCPT2CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TBCPT2CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TBCPT2CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TCCPT1CTRL register  **/
#define SHRTIM_TCCPT1CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TCCPT1CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TCCPT1CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TCCPT1CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TCCPT1CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TCCPT1CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TCCPT1CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TCCPT1CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TCCPT1CTRL_TFCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer F compare 2 */
#define SHRTIM_TCCPT1CTRL_TFCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer F compare 1 */
#define SHRTIM_TCCPT1CTRL_TF1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer F output 1  reset */
#define SHRTIM_TCCPT1CTRL_TF1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer F output 1  reset */
#define SHRTIM_TCCPT1CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TCCPT1CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TCCPT1CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TCCPT1CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TCCPT1CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TCCPT1CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TCCPT1CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TCCPT1CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TCCPT1CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TCCPT1CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TCCPT1CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TCCPT1CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TCCPT1CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TCCPT1CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TCCPT1CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TCCPT1CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TCCPT1CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TCCPT1CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TCCPT1CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TCCPT1CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TCCPT2CTRL register  **/
#define SHRTIM_TCCPT2CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TCCPT2CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TCCPT2CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TCCPT2CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TCCPT2CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TCCPT2CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TCCPT2CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TCCPT2CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TCCPT2CTRL_TFCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer F compare 2 */
#define SHRTIM_TCCPT2CTRL_TFCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer F compare 1 */
#define SHRTIM_TCCPT2CTRL_TF1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer F output 1  reset */
#define SHRTIM_TCCPT2CTRL_TF1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer F output 1  reset */
#define SHRTIM_TCCPT2CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TCCPT2CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TCCPT2CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TCCPT2CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TCCPT2CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TCCPT2CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TCCPT2CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TCCPT2CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TCCPT2CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TCCPT2CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TCCPT2CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TCCPT2CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TCCPT2CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TCCPT2CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TCCPT2CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TCCPT2CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TCCPT2CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TCCPT2CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TCCPT2CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TCCPT2CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TDCPT1CTRL register  **/
#define SHRTIM_TDCPT1CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TDCPT1CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TDCPT1CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TDCPT1CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TDCPT1CTRL_TFCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer F compare 2 */
#define SHRTIM_TDCPT1CTRL_TFCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer F compare 1 */
#define SHRTIM_TDCPT1CTRL_TF1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer F output 1  reset */
#define SHRTIM_TDCPT1CTRL_TF1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer F output 1  reset */
#define SHRTIM_TDCPT1CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TDCPT1CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TDCPT1CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TDCPT1CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TDCPT1CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TDCPT1CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TDCPT1CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TDCPT1CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TDCPT1CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TDCPT1CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TDCPT1CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TDCPT1CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TDCPT1CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TDCPT1CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TDCPT1CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TDCPT1CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TDCPT1CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TDCPT1CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TDCPT1CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TDCPT1CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TDCPT1CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TDCPT1CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TDCPT1CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TDCPT1CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TDCPT2CTRL register  **/
#define SHRTIM_TDCPT2CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TDCPT2CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TDCPT2CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TDCPT2CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TDCPT2CTRL_TFCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer F compare 2 */
#define SHRTIM_TDCPT2CTRL_TFCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer F compare 1 */
#define SHRTIM_TDCPT2CTRL_TF1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer F output 1  reset */
#define SHRTIM_TDCPT2CTRL_TF1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer F output 1  reset */
#define SHRTIM_TDCPT2CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TDCPT2CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TDCPT2CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TDCPT2CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TDCPT2CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TDCPT2CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TDCPT2CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TDCPT2CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TDCPT2CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TDCPT2CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TDCPT2CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TDCPT2CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TDCPT2CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TDCPT2CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TDCPT2CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TDCPT2CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TDCPT2CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TDCPT2CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TDCPT2CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TDCPT2CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TDCPT2CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TDCPT2CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TDCPT2CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TDCPT2CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TECPT1CTRL register  **/
#define SHRTIM_TECPT1CTRL_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TECPT1CTRL_TFCMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer F compare 1 */
#define SHRTIM_TECPT1CTRL_TF1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer F output 1  reset */
#define SHRTIM_TECPT1CTRL_TF1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer F output 1  reset */
#define SHRTIM_TECPT1CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TECPT1CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TECPT1CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TECPT1CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TECPT1CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TECPT1CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TECPT1CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TECPT1CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TECPT1CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TECPT1CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TECPT1CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TECPT1CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TECPT1CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TECPT1CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TECPT1CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TECPT1CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TECPT1CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TECPT1CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TECPT1CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TECPT1CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TECPT1CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TECPT1CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TECPT1CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TECPT1CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TECPT1CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TECPT1CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TECPT1CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TECPT1CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TECPT2CTRL register  **/
#define SHRTIM_TECPT2CTRL_TFCMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer F compare 2 */
#define SHRTIM_TECPT2CTRL_TFCMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer F compare 1 */
#define SHRTIM_TECPT2CTRL_TF1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer F output 1  reset */
#define SHRTIM_TECPT2CTRL_TF1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer F output 1  reset */
#define SHRTIM_TECPT2CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TECPT2CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TECPT2CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TECPT2CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TECPT2CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TECPT2CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TECPT2CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TECPT2CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TECPT2CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TECPT2CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TECPT2CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TECPT2CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TECPT2CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TECPT2CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TECPT2CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TECPT2CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TECPT2CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TECPT2CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TECPT2CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TECPT2CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TECPT2CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TECPT2CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TECPT2CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TECPT2CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TECPT2CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TECPT2CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TECPT2CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TECPT2CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TFCPT1CTRL register  **/
#define SHRTIM_TFCPT1CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TFCPT1CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TFCPT1CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TFCPT1CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TFCPT1CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TFCPT1CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TFCPT1CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TFCPT1CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TFCPT1CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TFCPT1CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TFCPT1CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TFCPT1CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TFCPT1CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TFCPT1CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TFCPT1CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TFCPT1CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TFCPT1CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TFCPT1CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TFCPT1CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TFCPT1CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TFCPT1CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TFCPT1CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TFCPT1CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TFCPT1CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TFCPT1CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TFCPT1CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TFCPT1CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TFCPT1CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TFCPT1CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TFCPT1CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TFCPT1CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TFCPT1CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TFCPT2CTRL register  **/
#define SHRTIM_TFCPT2CTRL_TECMP2                                  ((uint32_t)0x80000000U)            /* Bit[31] Timer E compare 2 */
#define SHRTIM_TFCPT2CTRL_TECMP1                                  ((uint32_t)0x40000000U)            /* Bit[30] Timer E compare 1 */
#define SHRTIM_TFCPT2CTRL_TE1RST                                  ((uint32_t)0x20000000U)            /* Bit[29] Timer E output 1  reset */
#define SHRTIM_TFCPT2CTRL_TE1SET                                  ((uint32_t)0x10000000U)            /* Bit[28] Timer E output 1  reset */
#define SHRTIM_TFCPT2CTRL_TDCMP2                                  ((uint32_t)0x08000000U)            /* Bit[27] Timer D compare 2 */
#define SHRTIM_TFCPT2CTRL_TDCMP1                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer D compare 1 */
#define SHRTIM_TFCPT2CTRL_TD1RST                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer D output 1  reset */
#define SHRTIM_TFCPT2CTRL_TD1SET                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer D output 1  reset */
#define SHRTIM_TFCPT2CTRL_TCCMP2                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer C compare 2 */
#define SHRTIM_TFCPT2CTRL_TCCMP1                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer C compare 1 */
#define SHRTIM_TFCPT2CTRL_TC1RST                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer C output 1  reset */
#define SHRTIM_TFCPT2CTRL_TC1SET                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer C output 1  reset */
#define SHRTIM_TFCPT2CTRL_TBCMP2                                  ((uint32_t)0x00080000U)            /* Bit[19] Timer B compare 2 */
#define SHRTIM_TFCPT2CTRL_TBCMP1                                  ((uint32_t)0x00040000U)            /* Bit[18] Timer B compare 1 */
#define SHRTIM_TFCPT2CTRL_TB1RST                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer B output 1  reset */
#define SHRTIM_TFCPT2CTRL_TB1SET                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer B output 1  reset */
#define SHRTIM_TFCPT2CTRL_TACMP2                                  ((uint32_t)0x00008000U)            /* Bit[15] Timer A compare 2 */
#define SHRTIM_TFCPT2CTRL_TACMP1                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer A compare 1 */
#define SHRTIM_TFCPT2CTRL_TA1RST                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer A output 1  reset */
#define SHRTIM_TFCPT2CTRL_TA1SET                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer A output 1  reset */
#define SHRTIM_TFCPT2CTRL_EXEV10CPT                               ((uint32_t)0x00000800U)            /* Bit[11] External event 10 capture */
#define SHRTIM_TFCPT2CTRL_EXEV9CPT                                ((uint32_t)0x00000400U)            /* Bit[10] External event 9 capture */
#define SHRTIM_TFCPT2CTRL_EXEV8CPT                                ((uint32_t)0x00000200U)            /* Bit[9] External event 8 capture */
#define SHRTIM_TFCPT2CTRL_EXEV7CPT                                ((uint32_t)0x00000100U)            /* Bit[8] External event 7 capture */
#define SHRTIM_TFCPT2CTRL_EXEV6CPT                                ((uint32_t)0x00000080U)            /* Bit[7] External event 6 capture */
#define SHRTIM_TFCPT2CTRL_EXEV5CPT                                ((uint32_t)0x00000040U)            /* Bit[6] External event 5 capture */
#define SHRTIM_TFCPT2CTRL_EXEV4CPT                                ((uint32_t)0x00000020U)            /* Bit[5] External event 4 capture */
#define SHRTIM_TFCPT2CTRL_EXEV3CPT                                ((uint32_t)0x00000010U)            /* Bit[4] External event 3 capture */
#define SHRTIM_TFCPT2CTRL_EXEV2CPT                                ((uint32_t)0x00000008U)            /* Bit[3] External event 2 capture */
#define SHRTIM_TFCPT2CTRL_EXEV1CPT                                ((uint32_t)0x00000004U)            /* Bit[2] External event 1 capture */
#define SHRTIM_TFCPT2CTRL_UPDCPT                                  ((uint32_t)0x00000002U)            /* Bit[1] Update capture */
#define SHRTIM_TFCPT2CTRL_SWCPT                                   ((uint32_t)0x00000001U)            /* Bit[0] Software capture */

/** Bit definition for SHRTIM_TXOUT register  **/
#define SHRTIM_TXOUT_DIDL2                                 ((uint32_t)0x00800000U)            /* Bit[23] Output2 deadtime upon burst mode idle entry */
#define SHRTIM_TXOUT_CHP2                                  ((uint32_t)0x00400000U)            /* Bit[22] Output2 chopper enable */
#define SHRTIM_TXOUT_FALT2                                 ((uint32_t)0x00300000U)            /* Bit[21:20] Output timer x channel 2 fault state */
#define SHRTIM_TXOUT_FALT2_0                               ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_TXOUT_FALT2_1                               ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_TXOUT_IDLES2                                ((uint32_t)0x00080000U)            /* Bit[19] Output 2 idle state */
#define SHRTIM_TXOUT_IDLEM2                                ((uint32_t)0x00040000U)            /* Bit[18] Output channel 2 idle mode */       
#define SHRTIM_TXOUT_POL2                                  ((uint32_t)0x00020000U)            /* Bit[17] Output1 polarity */
#define SHRTIM_TXOUT_BIAR                                  ((uint32_t)0x00004000U)            /* Bit[14] Balanced idle automatic resume */
#define SHRTIM_TXOUT_DP                                    ((uint32_t)0x00001C00U)            /* Bit[12:10] Delay protection source and output */
#define SHRTIM_TXOUT_DP_0                                  ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXOUT_DP_1                                  ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXOUT_DP_2                                  ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXOUT_DPEN                                  ((uint32_t)0x00000200U)            /* Bit[9] Delayed protection enable */
#define SHRTIM_TXOUT_DTEN                                  ((uint32_t)0x00000100U)            /* Bit[8] Deadtime enable */
#define SHRTIM_TXOUT_DIDL1                                 ((uint32_t)0x00000080U)            /* Bit[7] Output 1  deadtime upon burst mode idle entry */
#define SHRTIM_TXOUT_CHP1                                  ((uint32_t)0x00000040U)            /* Bit[6] Output 1  chopper enable */
#define SHRTIM_TXOUT_FALT1                                 ((uint32_t)0x00000030U)            /* Bit[5:4] Output channel 1 fault state */
#define SHRTIM_TXOUT_FALT1_0                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXOUT_FALT1_1                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXOUT_IDLES1                                ((uint32_t)0x00000008U)            /* Bit[3] Output channel 1 idle state */
#define SHRTIM_TXOUT_IDLEM1                                ((uint32_t)0x00000004U)            /* Bit[2] Output channel 1 idle mode */
#define SHRTIM_TXOUT_POL1                                  ((uint32_t)0x00000002U)            /* Bit[1] Output 1  polarity */

/** Bit definition for SHRTIM_TXFALT register  **/
#define SHRTIM_TXFALT_FALTLCK                                 ((uint32_t)0x80000000U)            /* Bit[31] Fault sources lock */
#define SHRTIM_TXFALT_FALT6EN                                 ((uint32_t)0x00000020U)            /* Bit[5] Fault 6 enable */
#define SHRTIM_TXFALT_FALT5EN                                 ((uint32_t)0x00000010U)            /* Bit[4] Fault 5 enable */
#define SHRTIM_TXFALT_FALT4EN                                 ((uint32_t)0x00000008U)            /* Bit[3] Fault 4 enable */
#define SHRTIM_TXFALT_FALT3EN                                 ((uint32_t)0x00000004U)            /* Bit[2] Fault 3 enable */
#define SHRTIM_TXFALT_FALT2EN                                 ((uint32_t)0x00000002U)            /* Bit[1] Fault 2 enable */
#define SHRTIM_TXFALT_FALT1EN                                 ((uint32_t)0x00000001U)            /* Bit[0] Fault 1 enable */

/** Bit definition for SHRTIM_TXCTRL2 register  **/
#define SHRTIM_TXCTRL2_TRGHLF                                  ((uint32_t)0x00100000U)            /* Bit[20] Triggered-half mode */
#define SHRTIM_TXCTRL2_GTCMP3                                  ((uint32_t)0x00020000U)            /* Bit[17] Greater than compare 3 PWM mode */
#define SHRTIM_TXCTRL2_GTCMP1                                  ((uint32_t)0x00010000U)            /* Bit[16] Greater than compare 1 PWM mode */
#define SHRTIM_TXCTRL2_FEROM                               ((uint32_t)0x0000C000U)            /* Bit[15:14] Fault and event roll-over mode */
#define SHRTIM_TXCTRL2_FEROM_0                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCTRL2_FEROM_1                             ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_TXCTRL2_BMROM                               ((uint32_t)0x00003000U)            /* Bit[13:12] Burst mode roll-over mode */
#define SHRTIM_TXCTRL2_BMROM_0                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCTRL2_BMROM_1                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCTRL2_ADCROM                                  ((uint32_t)0x00000C00U)            /* Bit[11:10] ADC roll-over mode */
#define SHRTIM_TXCTRL2_ADCROM_0                                ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCTRL2_ADCROM_1                                ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCTRL2_OUTROM                               ((uint32_t)0x00000300U)            /* Bit[9:8] Output roll-over mode */
#define SHRTIM_TXCTRL2_OUTROM_0                             ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCTRL2_OUTROM_1                             ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCTRL2_ROM                                     ((uint32_t)0x000000C0U)            /* Bit[7:6] Roll-over mode */
#define SHRTIM_TXCTRL2_ROM_0                                   ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCTRL2_ROM_1                                   ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCTRL2_UPDOWNM                                 ((uint32_t)0x00000010U)            /* Bit[4] Up-down mode */
#define SHRTIM_TXCTRL2_DUDACRST                                ((uint32_t)0x00000004U)            /* Bit[2] Dual DAC reset trigger */
#define SHRTIM_TXCTRL2_DUDACSTEP                               ((uint32_t)0x00000002U)            /* Bit[1] The trigger is generated on compare 2 event */
#define SHRTIM_TXCTRL2_DUDACEN                                 ((uint32_t)0x00000001U)            /* Bit[0] Dual DAC trigger enable */

/** Bit definition for SHRTIM_TXEXEVFLT3 register  **/
#define SHRTIM_TXEXEVFLT3_EXEVCNT                               ((uint32_t)0x00003F00U)            /* Bit[13:8] External event A counter */
#define SHRTIM_TXEXEVFLT3_EXEVCNT_0                             ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXEXEVFLT3_EXEVCNT_1                             ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXEXEVFLT3_EXEVCNT_2                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXEXEVFLT3_EXEVCNT_3                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXEXEVFLT3_EXEVCNT_4                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXEXEVFLT3_EXEVCNT_5                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXEXEVFLT3_EXEVSEL                               ((uint32_t)0x000000F0U)            /* Bit[7:4] External event A selection */
#define SHRTIM_TXEXEVFLT3_EXEVSEL_0                             ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXEXEVFLT3_EXEVSEL_1                             ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXEXEVFLT3_EXEVSEL_2                             ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXEXEVFLT3_EXEVSEL_3                             ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXEXEVFLT3_EXEVRSTM                              ((uint32_t)0x00000004U)            /* Bit[2] External event A reset mode */
#define SHRTIM_TXEXEVFLT3_EXEVCNTRST                            ((uint32_t)0x00000002U)            /* Bit[1] External event A counter reset */
#define SHRTIM_TXEXEVFLT3_EXEVCNTEN                             ((uint32_t)0x00000001U)            /* Bit[0] External event A counter enable */

/** Bit definition for SHRTIM_TXCMP5DAT register  **/
#define SHRTIM_TXCMP5DAT_CMP5DAT                                 ((uint32_t)0x0000FFFFU)            /* Bit[15:0] Timer A compare 5 value */
#define SHRTIM_TXCMP5DAT_CMP5DAT_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_4                               ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_5                               ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_6                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_7                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_8                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_9                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_10                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_11                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_12                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_13                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_14                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_TXCMP5DAT_CMP5DAT_15                              ((uint32_t)0x00008000U)            /* Bit15 */

/** Bit definition for SHRTIM_CTRL1 register  **/
#define SHRTIM_CTRL1_ADTG4UPDSRC                            ((uint32_t)0x0E000000U)            /* Bit[27:25] ADC trigger update source 4 */
#define SHRTIM_CTRL1_ADTG4UPDSRC_0                          ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_CTRL1_ADTG4UPDSRC_1                          ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_CTRL1_ADTG4UPDSRC_2                          ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_CTRL1_ADTG3UPDSRC                            ((uint32_t)0x01C00000U)            /* Bit[24:22] ADC trigger update source 3 */
#define SHRTIM_CTRL1_ADTG3UPDSRC_0                          ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_CTRL1_ADTG3UPDSRC_1                          ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_CTRL1_ADTG3UPDSRC_2                          ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_CTRL1_ADTG2UPDSRC                            ((uint32_t)0x00380000U)            /* Bit[21:19] ADC trigger update source 2 */
#define SHRTIM_CTRL1_ADTG2UPDSRC_0                          ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_CTRL1_ADTG2UPDSRC_1                          ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_CTRL1_ADTG2UPDSRC_2                          ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_CTRL1_ADTG1UPDSRC                            ((uint32_t)0x00070000U)            /* Bit[18:16] ADC trigger update source 1 */
#define SHRTIM_CTRL1_ADTG1UPDSRC_0                          ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_CTRL1_ADTG1UPDSRC_1                          ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_CTRL1_ADTG1UPDSRC_2                          ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_CTRL1_TFUPDDIS                                ((uint32_t)0x00000040U)            /* Bit[6] Timer F update disable */
#define SHRTIM_CTRL1_TEUPDDIS                                ((uint32_t)0x00000020U)            /* Bit[5] Timer E update disable */
#define SHRTIM_CTRL1_TDUPDDIS                                ((uint32_t)0x00000010U)            /* Bit[4] Timer D update disable */
#define SHRTIM_CTRL1_TCUPDDIS                                ((uint32_t)0x00000008U)            /* Bit[3] Timer C update disable */
#define SHRTIM_CTRL1_TBUPDDIS                                ((uint32_t)0x00000004U)            /* Bit[2] Timer B update disable */
#define SHRTIM_CTRL1_TAUPDDIS                                ((uint32_t)0x00000002U)            /* Bit[1] Timer A update disable */
#define SHRTIM_CTRL1_MUPDDIS                                 ((uint32_t)0x00000001U)            /* Bit[0] Master update disable */

/** Bit definition for SHRTIM_CTRL2 register  **/
#define SHRTIM_CTRL2_SWAPF                                   ((uint32_t)0x00200000U)            /* Bit[21] Timer F output swap */
#define SHRTIM_CTRL2_SWAPE                                   ((uint32_t)0x00100000U)            /* Bit[20] Timer E output swap */
#define SHRTIM_CTRL2_SWAPD                                   ((uint32_t)0x00080000U)            /* Bit[19] Timer D output swap */
#define SHRTIM_CTRL2_SWAPC                                   ((uint32_t)0x00040000U)            /* Bit[18] Timer C output swap */
#define SHRTIM_CTRL2_SWAPB                                   ((uint32_t)0x00020000U)            /* Bit[17] Timer B output swap */
#define SHRTIM_CTRL2_SWAPA                                   ((uint32_t)0x00010000U)            /* Bit[16] Timer A output swap */
#define SHRTIM_CTRL2_TFSWCNTRST                              ((uint32_t)0x00004000U)            /* Bit[14] Software counter reset for timer F */
#define SHRTIM_CTRL2_TESWCNTRST                              ((uint32_t)0x00002000U)            /* Bit[13] Software counter reset for timer E */
#define SHRTIM_CTRL2_TDSWCNTRST                              ((uint32_t)0x00001000U)            /* Bit[12] Software counter reset for timer D */
#define SHRTIM_CTRL2_TCSWCNTRST                              ((uint32_t)0x00000800U)            /* Bit[11] Software counter reset for timer C */
#define SHRTIM_CTRL2_TBSWCNTRST                              ((uint32_t)0x00000400U)            /* Bit[10] Software counter reset for timer B */
#define SHRTIM_CTRL2_TASWCNTRST                              ((uint32_t)0x00000200U)            /* Bit[9] Software counter reset for timer A */
#define SHRTIM_CTRL2_MSWCNTRST                               ((uint32_t)0x00000100U)            /* Bit[8] Software counter reset for master timer */
#define SHRTIM_CTRL2_TFSWUPD                                 ((uint32_t)0x00000040U)            /* Bit[6] Software update timer F */
#define SHRTIM_CTRL2_TESWUPD                                 ((uint32_t)0x00000020U)            /* Bit[5] Software update timer E */
#define SHRTIM_CTRL2_TDSWUPD                                 ((uint32_t)0x00000010U)            /* Bit[4] Software update timer D */
#define SHRTIM_CTRL2_TCSWUPD                                 ((uint32_t)0x00000008U)            /* Bit[3] Software update timer C */
#define SHRTIM_CTRL2_TBSWUPD                                 ((uint32_t)0x00000004U)            /* Bit[2] Software update timer B */
#define SHRTIM_CTRL2_TASWUPD                                 ((uint32_t)0x00000002U)            /* Bit[1] Software update timer A */
#define SHRTIM_CTRL2_MSWUPD                                  ((uint32_t)0x00000001U)            /* Bit[0] Software update master timer */

/** Bit definition for SHRTIM_INTSTS register  **/
#define SHRTIM_INTSTS_BMPRDITF                                ((uint32_t)0x00020000U)            /* Bit[17] Burst mode period interrupt flag */
#define SHRTIM_INTSTS_FALT6ITF                                ((uint32_t)0x00000040U)            /* Bit[6] Fault 6 interrupt flag */
#define SHRTIM_INTSTS_SYSFALTITF                              ((uint32_t)0x00000020U)            /* Bit[5] System fault interrupt flag */
#define SHRTIM_INTSTS_FALT5ITF                                ((uint32_t)0x00000010U)            /* Bit[4] Fault 5 interrupt flag */
#define SHRTIM_INTSTS_FALT4ITF                                ((uint32_t)0x00000008U)            /* Bit[3] Fault 4 interrupt flag */
#define SHRTIM_INTSTS_FALT3ITF                                ((uint32_t)0x00000004U)            /* Bit[2] Fault 3 interrupt flag */
#define SHRTIM_INTSTS_FALT2ITF                                ((uint32_t)0x00000002U)            /* Bit[1] Fault 2 interrupt flag */
#define SHRTIM_INTSTS_FALT1ITF                                ((uint32_t)0x00000001U)            /* Bit[0] Fault 1 interrupt flag */

/** Bit definition for SHRTIM_INTCLR register  **/
#define SHRTIM_INTCLR_BMPRDIC                                 ((uint32_t)0x00020000U)            /* Bit[17] Burst mode period flag clear */
#define SHRTIM_INTCLR_FALT6IC                                 ((uint32_t)0x00000040U)            /* Bit[6] Fault 6 interrupt flag clear */
#define SHRTIM_INTCLR_SYSFALTIC                               ((uint32_t)0x00000020U)            /* Bit[5] System fault interrupt flag clear */
#define SHRTIM_INTCLR_FALT5IC                                 ((uint32_t)0x00000010U)            /* Bit[4] Fault 5 interrupt flag clear */
#define SHRTIM_INTCLR_FALT4IC                                 ((uint32_t)0x00000008U)            /* Bit[3] Fault 4 interrupt flag clear */
#define SHRTIM_INTCLR_FALT3IC                                 ((uint32_t)0x00000004U)            /* Bit[2] Fault 3 interrupt flag clear */
#define SHRTIM_INTCLR_FALT2IC                                 ((uint32_t)0x00000002U)            /* Bit[1] Fault 2 interrupt flag clear */
#define SHRTIM_INTCLR_FALT1IC                                 ((uint32_t)0x00000001U)            /* Bit[0] Fault 1 interrupt flag clear */

/** Bit definition for SHRTIM_INTEN register  **/
#define SHRTIM_INTEN_BMPRDIEN                                  ((uint32_t)0x00020000U)            /* Bit[17] Burst mode period interrupt enable */
#define SHRTIM_INTEN_FALT6IEN                                ((uint32_t)0x00000040U)            /* Bit[6] Fault 6 interrupt enable */
#define SHRTIM_INTEN_SYSFALTIEN                              ((uint32_t)0x00000020U)            /* Bit[5] System fault interrupt enable */
#define SHRTIM_INTEN_FALT5IEN                                ((uint32_t)0x00000010U)            /* Bit[4] Fault 5 interrupt enable */
#define SHRTIM_INTEN_FALT4IEN                                ((uint32_t)0x00000008U)            /* Bit[3] Fault 4 interrupt enable */
#define SHRTIM_INTEN_FALT3IEN                                ((uint32_t)0x00000004U)            /* Bit[2] Fault 3 interrupt enable */
#define SHRTIM_INTEN_FALT2IEN                                ((uint32_t)0x00000002U)            /* Bit[1] Fault 2 interrupt enable */
#define SHRTIM_INTEN_FALT1IEN                                ((uint32_t)0x00000001U)            /* Bit[0] Fault 1 interrupt enable */

/** Bit definition for SHRTIM_OEN register  **/
#define SHRTIM_OEN_TF2OEN                                  ((uint32_t)0x00000800U)            /* Bit[11] Timer F output 2 enable */
#define SHRTIM_OEN_TF1OEN                                  ((uint32_t)0x00000400U)            /* Bit[10] Timer F output 1 enable */
#define SHRTIM_OEN_TE2OEN                                  ((uint32_t)0x00000200U)            /* Bit[9] Timer E output 2 enable */
#define SHRTIM_OEN_TE1OEN                                  ((uint32_t)0x00000100U)            /* Bit[8] Timer E output 1 enable */
#define SHRTIM_OEN_TD2OEN                                  ((uint32_t)0x00000080U)            /* Bit[7] Timer D output 2 enable */
#define SHRTIM_OEN_TD1OEN                                  ((uint32_t)0x00000040U)            /* Bit[6] Timer D output 1 enable */
#define SHRTIM_OEN_TC2OEN                                  ((uint32_t)0x00000020U)            /* Bit[5] Timer C output 2 enable */
#define SHRTIM_OEN_TC1OEN                                  ((uint32_t)0x00000010U)            /* Bit[4] Timer C output 1 enable */
#define SHRTIM_OEN_TB2OEN                                  ((uint32_t)0x00000008U)            /* Bit[3] Timer B output 2 enable */
#define SHRTIM_OEN_TB1OEN                                  ((uint32_t)0x00000004U)            /* Bit[2] Timer B output 1 enable */
#define SHRTIM_OEN_TA2OEN                                  ((uint32_t)0x00000002U)            /* Bit[1] Timer A output 2 enable */
#define SHRTIM_OEN_TA1OEN                                  ((uint32_t)0x00000001U)            /* Bit[0] Timer A output 1 enable */

/** Bit definition for SHRTIM_ODIS register  **/
#define SHRTIM_ODIS_TF2ODIS                                 ((uint32_t)0x00000800U)            /* Bit[11] Timer F output 2 disable */
#define SHRTIM_ODIS_TF1ODIS                                 ((uint32_t)0x00000400U)            /* Bit[10] Timer F output 1 disable */
#define SHRTIM_ODIS_TE2ODIS                                 ((uint32_t)0x00000200U)            /* Bit[9] Timer E output 2 disable */
#define SHRTIM_ODIS_TE1ODIS                                 ((uint32_t)0x00000100U)            /* Bit[8] Timer E output 1 disable */
#define SHRTIM_ODIS_TD2ODIS                                 ((uint32_t)0x00000080U)            /* Bit[7] Timer D output 2 disable */
#define SHRTIM_ODIS_TD1ODIS                                 ((uint32_t)0x00000040U)            /* Bit[6] Timer D output 1 disable */
#define SHRTIM_ODIS_TC2ODIS                                 ((uint32_t)0x00000020U)            /* Bit[5] Timer C output 2 disable */
#define SHRTIM_ODIS_TC1ODIS                                 ((uint32_t)0x00000010U)            /* Bit[4] Timer C output 1 disable */
#define SHRTIM_ODIS_TB2ODIS                                 ((uint32_t)0x00000008U)            /* Bit[3] Timer B output 2 disable */
#define SHRTIM_ODIS_TB1ODIS                                 ((uint32_t)0x00000004U)            /* Bit[2] Timer B output 1 disable */
#define SHRTIM_ODIS_TA2ODIS                                 ((uint32_t)0x00000002U)            /* Bit[1] Timer A output 2 disable */
#define SHRTIM_ODIS_TA1ODIS                                 ((uint32_t)0x00000001U)            /* Bit[0] Timer A output 1 disable */

/** Bit definition for SHRTIM_ODISSTS register  **/
#define SHRTIM_ODISSTS_TF2ODISSTS                              ((uint32_t)0x00000800U)            /* Bit[11] Timer F output 2 disable status */
#define SHRTIM_ODISSTS_TF1ODISSTS                              ((uint32_t)0x00000400U)            /* Bit[10] Timer F output 1 disable status */
#define SHRTIM_ODISSTS_TE2ODISSTS                              ((uint32_t)0x00000200U)            /* Bit[9] Timer E output 2 disable status */
#define SHRTIM_ODISSTS_TE1ODISSTS                              ((uint32_t)0x00000100U)            /* Bit[8] Timer E output 1 disable status */
#define SHRTIM_ODISSTS_TD2ODISSTS                              ((uint32_t)0x00000080U)            /* Bit[7] Timer D output 2 disable status */
#define SHRTIM_ODISSTS_TD1ODISSTS                              ((uint32_t)0x00000040U)            /* Bit[6] Timer D output 1 disable status */
#define SHRTIM_ODISSTS_TC2ODISSTS                              ((uint32_t)0x00000020U)            /* Bit[5] Timer C output 2 disable status */
#define SHRTIM_ODISSTS_TC1ODISSTS                              ((uint32_t)0x00000010U)            /* Bit[4] Timer C output 1 disable status */
#define SHRTIM_ODISSTS_TB2ODISSTS                              ((uint32_t)0x00000008U)            /* Bit[3] Timer B output 2 disable status */
#define SHRTIM_ODISSTS_TB1ODISSTS                              ((uint32_t)0x00000004U)            /* Bit[2] Timer B output 1 disable status */
#define SHRTIM_ODISSTS_TA2ODISSTS                              ((uint32_t)0x00000002U)            /* Bit[1] Timer A output 2 disable status */
#define SHRTIM_ODISSTS_TA1ODISSTS                              ((uint32_t)0x00000001U)            /* Bit[0] Timer A output 1 disable status */

/** Bit definition for SHRTIM_BMCTRL register  **/
#define SHRTIM_BMCTRL_BMSTS                                   ((uint32_t)0x80000000U)            /* Bit[31] Burst mode operation status */
#define SHRTIM_BMCTRL_TFBM                                    ((uint32_t)0x00400000U)            /* Bit[22] Timer F burst mode */
#define SHRTIM_BMCTRL_TEBM                                    ((uint32_t)0x00200000U)            /* Bit[21] Timer E burst mode */
#define SHRTIM_BMCTRL_TDBM                                    ((uint32_t)0x00100000U)            /* Bit[20] Timer D burst mode */
#define SHRTIM_BMCTRL_TCBM                                    ((uint32_t)0x00080000U)            /* Bit[19] Timer C burst mode */
#define SHRTIM_BMCTRL_TBBM                                    ((uint32_t)0x00040000U)            /* Bit[18] Timer B burst mode */
#define SHRTIM_BMCTRL_TABM                                    ((uint32_t)0x00020000U)            /* Bit[17] Timer A burst mode */
#define SHRTIM_BMCTRL_MBM                                     ((uint32_t)0x00010000U)            /* Bit[16] Master timer burst mode */
#define SHRTIM_BMCTRL_BMPLEN                                  ((uint32_t)0x00000400U)            /* Bit[10] Burst mode preload enable */
#define SHRTIM_BMCTRL_BMPSC                                   ((uint32_t)0x000003C0U)            /* Bit[9:6] Burst mode prescaler */
#define SHRTIM_BMCTRL_BMPSC_0                                 ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_BMCTRL_BMPSC_1                                 ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_BMCTRL_BMPSC_2                                 ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_BMCTRL_BMPSC_3                                 ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_BMCTRL_BMCK                                    ((uint32_t)0x0000003CU)            /* Bit[5:2] Burst mode clock source */
#define SHRTIM_BMCTRL_BMCK_0                                  ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_BMCTRL_BMCK_1                                  ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_BMCTRL_BMCK_2                                  ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_BMCTRL_BMCK_3                                  ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_BMCTRL_BMOM                                    ((uint32_t)0x00000002U)            /* Bit[1] Burst mode operating mode */
#define SHRTIM_BMCTRL_BMEN                                    ((uint32_t)0x00000001U)            /* Bit[0] Burst mode enable */

/** Bit definition for SHRTIM_BMTG register  **/
#define SHRTIM_BMTG_OCEV                                    ((uint32_t)0x80000000U)            /* Bit[31] On-chip event */
#define SHRTIM_BMTG_EXEV8                                   ((uint32_t)0x40000000U)            /* Bit[30] External event 8 (TIMD filters applied) */
#define SHRTIM_BMTG_EXEV7                                   ((uint32_t)0x20000000U)            /* Bit[29] External event 7 (TIMA filters applied) */
#define SHRTIM_BMTG_TDPRDEXEV8                              ((uint32_t)0x10000000U)            /* Bit[28] Timer D period following external event 8 */
#define SHRTIM_BMTG_TAPRDEXEV7                              ((uint32_t)0x08000000U)            /* Bit[27] Timer A period following external event 7 */
#define SHRTIM_BMTG_TECMP2                                  ((uint32_t)0x04000000U)            /* Bit[26] Timer E compare 2 event */
#define SHRTIM_BMTG_TECMP1                                  ((uint32_t)0x02000000U)            /* Bit[25] Timer E compare 1 event */
#define SHRTIM_BMTG_TEREPT                                  ((uint32_t)0x01000000U)            /* Bit[24] Timer E repetition */
#define SHRTIM_BMTG_TFCMP1                                  ((uint32_t)0x00800000U)            /* Bit[23] Timer F compare 1 event */
#define SHRTIM_BMTG_TDCMP2                                  ((uint32_t)0x00400000U)            /* Bit[22] Timer D compare 2 event */
#define SHRTIM_BMTG_TFREPT                                  ((uint32_t)0x00200000U)            /* Bit[21] Timer F repetition */
#define SHRTIM_BMTG_TDREPT                                  ((uint32_t)0x00100000U)            /* Bit[20] Timer D repetition */
#define SHRTIM_BMTG_TDRSTRO                                 ((uint32_t)0x00080000U)            /* Bit[19] Timer D reset or roll-over */
#define SHRTIM_BMTG_TFRSTRO                                 ((uint32_t)0x00040000U)            /* Bit[18] Timer F reset or roll-over */
#define SHRTIM_BMTG_TCCMP1                                  ((uint32_t)0x00020000U)            /* Bit[17] Timer C compare 1 event */
#define SHRTIM_BMTG_TCREPT                                  ((uint32_t)0x00010000U)            /* Bit[16] Timer C repetition */
#define SHRTIM_BMTG_TCRSTRO                                 ((uint32_t)0x00008000U)            /* Bit[15] Timer C reset or roll-over */
#define SHRTIM_BMTG_TBCMP2                                  ((uint32_t)0x00004000U)            /* Bit[14] Timer B compare 2 event */
#define SHRTIM_BMTG_TBCMP1                                  ((uint32_t)0x00002000U)            /* Bit[13] Timer B compare 1 event */
#define SHRTIM_BMTG_TBREPT                                  ((uint32_t)0x00001000U)            /* Bit[12] Timer B repetition */
#define SHRTIM_BMTG_TBRSTRO                                 ((uint32_t)0x00000800U)            /* Bit[11] Timer B reset or roll-over */
#define SHRTIM_BMTG_TACMP2                                  ((uint32_t)0x00000400U)            /* Bit[10] Timer A compare 2 event */
#define SHRTIM_BMTG_TACMP1                                  ((uint32_t)0x00000200U)            /* Bit[9] Timer A compare 1 event */
#define SHRTIM_BMTG_TAREPT                                  ((uint32_t)0x00000100U)            /* Bit[8] Timer A repetition */
#define SHRTIM_BMTG_TARSTRO                                 ((uint32_t)0x00000080U)            /* Bit[7] Timer A reset or roll-over */
#define SHRTIM_BMTG_MCMP4                                   ((uint32_t)0x00000040U)            /* Bit[6] Master compare 4 */
#define SHRTIM_BMTG_MCMP3                                   ((uint32_t)0x00000020U)            /* Bit[5] Master compare 3 */
#define SHRTIM_BMTG_MCMP2                                   ((uint32_t)0x00000010U)            /* Bit[4] Master compare 2 */
#define SHRTIM_BMTG_MCMP1                                   ((uint32_t)0x00000008U)            /* Bit[3] Master compare 1 */
#define SHRTIM_BMTG_MREPT                                   ((uint32_t)0x00000004U)            /* Bit[2] Master repetition */
#define SHRTIM_BMTG_MRSTRO                                  ((uint32_t)0x00000002U)            /* Bit[1] Master reset or roll-over */
#define SHRTIM_BMTG_SWSTRT                                  ((uint32_t)0x00000001U)            /* Bit[0] Software start */

/** Bit definition for SHRTIM_BMCMP register  **/
#define SHRTIM_BMCMP_BMCMP                                ((uint32_t)0xFFFFFFFFU)            /* Bit[31:0] Compare value while in burst mode */
#define SHRTIM_BMCMP_BMCMP_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_BMCMP_BMCMP_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_BMCMP_BMCMP_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_BMCMP_BMCMP_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_BMCMP_BMCMP_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_BMCMP_BMCMP_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_BMCMP_BMCMP_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_BMCMP_BMCMP_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_BMCMP_BMCMP_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_BMCMP_BMCMP_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_BMCMP_BMCMP_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_BMCMP_BMCMP_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_BMCMP_BMCMP_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_BMCMP_BMCMP_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_BMCMP_BMCMP_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_BMCMP_BMCMP_15                             ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_BMCMP_BMCMP_16                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_BMCMP_BMCMP_17                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_BMCMP_BMCMP_18                             ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_BMCMP_BMCMP_19                             ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_BMCMP_BMCMP_20                             ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_BMCMP_BMCMP_21                             ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_BMCMP_BMCMP_22                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_BMCMP_BMCMP_23                             ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_BMCMP_BMCMP_24                             ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_BMCMP_BMCMP_25                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_BMCMP_BMCMP_26                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_BMCMP_BMCMP_27                             ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_BMCMP_BMCMP_28                             ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_BMCMP_BMCMP_29                             ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_BMCMP_BMCMP_30                             ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_BMCMP_BMCMP_31                             ((uint32_t)0x80000000U)            /* Bit31 */

/** Bit definition for SHRTIM_BMPRD register  **/
#define SHRTIM_BMPRD_BMPRD                                ((uint32_t)0xFFFFFFFFU)            /* Bit[31:0] Period value while in burst mode */
#define SHRTIM_BMPRD_BMPRD_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_BMPRD_BMPRD_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_BMPRD_BMPRD_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_BMPRD_BMPRD_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_BMPRD_BMPRD_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_BMPRD_BMPRD_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_BMPRD_BMPRD_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_BMPRD_BMPRD_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_BMPRD_BMPRD_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_BMPRD_BMPRD_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_BMPRD_BMPRD_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_BMPRD_BMPRD_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_BMPRD_BMPRD_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_BMPRD_BMPRD_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_BMPRD_BMPRD_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_BMPRD_BMPRD_15                             ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_BMPRD_BMPRD_16                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_BMPRD_BMPRD_17                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_BMPRD_BMPRD_18                             ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_BMPRD_BMPRD_19                             ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_BMPRD_BMPRD_20                             ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_BMPRD_BMPRD_21                             ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_BMPRD_BMPRD_22                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_BMPRD_BMPRD_23                             ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_BMPRD_BMPRD_24                             ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_BMPRD_BMPRD_25                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_BMPRD_BMPRD_26                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_BMPRD_BMPRD_27                             ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_BMPRD_BMPRD_28                             ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_BMPRD_BMPRD_29                             ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_BMPRD_BMPRD_30                             ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_BMPRD_BMPRD_31                             ((uint32_t)0x80000000U)            /* Bit31 */

/** Bit definition for SHRTIM_EXEVCTRL1 register  **/
#define SHRTIM_EXEVCTRL1_EXEV5SENS                               ((uint32_t)0x30000000U)            /* Bit[29:28] External event 5 sensitivity */
#define SHRTIM_EXEVCTRL1_EXEV5SENS_0                             ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_EXEVCTRL1_EXEV5SENS_1                             ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_EXEVCTRL1_EXEV5POL                                ((uint32_t)0x08000000U)            /* Bit[27] External event 5 polarity */
#define SHRTIM_EXEVCTRL1_EXEV5SRC                                ((uint32_t)0x07000000U)            /* Bit[26:24] External event 5 source */
#define SHRTIM_EXEVCTRL1_EXEV5SRC_0                              ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_EXEVCTRL1_EXEV5SRC_1                              ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_EXEVCTRL1_EXEV5SRC_2                              ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_EXEVCTRL1_EXEV4SENS                               ((uint32_t)0x00C00000U)            /* Bit[23:22] External event 4 sensitivity */
#define SHRTIM_EXEVCTRL1_EXEV4SENS_0                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_EXEVCTRL1_EXEV4SENS_1                             ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_EXEVCTRL1_EXEV4POL                                ((uint32_t)0x00200000U)            /* Bit[21] External event 4 polarity */
#define SHRTIM_EXEVCTRL1_EXEV4SRC                                ((uint32_t)0x001C0000U)            /* Bit[20:18] External event 4 source */
#define SHRTIM_EXEVCTRL1_EXEV4SRC_0                              ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_EXEVCTRL1_EXEV4SRC_1                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_EXEVCTRL1_EXEV4SRC_2                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_EXEVCTRL1_EXEV3SENS                               ((uint32_t)0x00030000U)            /* Bit[17:16] External event 3 sensitivity */
#define SHRTIM_EXEVCTRL1_EXEV3SENS_0                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_EXEVCTRL1_EXEV3SENS_1                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_EXEVCTRL1_EXEV3POL                                ((uint32_t)0x00008000U)            /* Bit[15] External event 3 polarity */
#define SHRTIM_EXEVCTRL1_EXEV3SRC                                ((uint32_t)0x00007000U)            /* Bit[14:12] External event 3 source */
#define SHRTIM_EXEVCTRL1_EXEV3SRC_0                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_EXEVCTRL1_EXEV3SRC_1                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_EXEVCTRL1_EXEV3SRC_2                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_EXEVCTRL1_EXEV2SENS                               ((uint32_t)0x00000C00U)            /* Bit[11:10] External event 2 sensitivity */
#define SHRTIM_EXEVCTRL1_EXEV2SENS_0                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_EXEVCTRL1_EXEV2SENS_1                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_EXEVCTRL1_EXEV2POL                                ((uint32_t)0x00000200U)            /* Bit[9] External event 2 polarity */
#define SHRTIM_EXEVCTRL1_EXEV2SRC                                ((uint32_t)0x000001C0U)            /* Bit[8:6] External event 2 source */
#define SHRTIM_EXEVCTRL1_EXEV2SRC_0                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_EXEVCTRL1_EXEV2SRC_1                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_EXEVCTRL1_EXEV2SRC_2                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_EXEVCTRL1_EXEV1SENS                               ((uint32_t)0x00000030U)            /* Bit[5:4] External event 1 sensitivity */
#define SHRTIM_EXEVCTRL1_EXEV1SENS_0                             ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_EXEVCTRL1_EXEV1SENS_1                             ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_EXEVCTRL1_EXEV1POL                                ((uint32_t)0x00000008U)            /* Bit[3] External event 1 polarity */
#define SHRTIM_EXEVCTRL1_EXEV1SRC                                ((uint32_t)0x00000007U)            /* Bit[2:0] External event 1 source */
#define SHRTIM_EXEVCTRL1_EXEV1SRC_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_EXEVCTRL1_EXEV1SRC_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_EXEVCTRL1_EXEV1SRC_2                              ((uint32_t)0x00000004U)            /* Bit2 */

/** Bit definition for SHRTIM_EXEVCTRL2 register  **/
#define SHRTIM_EXEVCTRL2_EXEV10SENS                              ((uint32_t)0x30000000U)            /* Bit[29:28] External event 10 sensitivity */
#define SHRTIM_EXEVCTRL2_EXEV10SENS_0                            ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_EXEVCTRL2_EXEV10SENS_1                            ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_EXEVCTRL2_EXEV10POL                               ((uint32_t)0x08000000U)            /* Bit[27] External event 10 polarity */
#define SHRTIM_EXEVCTRL2_EXEV10SRC                               ((uint32_t)0x07000000U)            /* Bit[26:24] External event 10 source */
#define SHRTIM_EXEVCTRL2_EXEV10SRC_0                             ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_EXEVCTRL2_EXEV10SRC_1                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_EXEVCTRL2_EXEV10SRC_2                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_EXEVCTRL2_EXEV9SENS                               ((uint32_t)0x00C00000U)            /* Bit[23:22] External event 9 sensitivity */
#define SHRTIM_EXEVCTRL2_EXEV9SENS_0                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_EXEVCTRL2_EXEV9SENS_1                             ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_EXEVCTRL2_EXEV9POL                                ((uint32_t)0x00200000U)            /* Bit[21] External event 9 polarity */
#define SHRTIM_EXEVCTRL2_EXEV9SRC                                ((uint32_t)0x001C0000U)            /* Bit[20:18] External event 9 source */
#define SHRTIM_EXEVCTRL2_EXEV9SRC_0                              ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_EXEVCTRL2_EXEV9SRC_1                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_EXEVCTRL2_EXEV9SRC_2                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_EXEVCTRL2_EXEV8SENS                               ((uint32_t)0x00030000U)            /* Bit[17:16] External event 8 sensitivity */
#define SHRTIM_EXEVCTRL2_EXEV8SENS_0                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_EXEVCTRL2_EXEV8SENS_1                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_EXEVCTRL2_EXEV8POL                                ((uint32_t)0x00008000U)            /* Bit[15] External event 8 polarity */
#define SHRTIM_EXEVCTRL2_EXEV8SRC                                ((uint32_t)0x00007000U)            /* Bit[14:12] External event 8 source */
#define SHRTIM_EXEVCTRL2_EXEV8SRC_0                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_EXEVCTRL2_EXEV8SRC_1                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_EXEVCTRL2_EXEV8SRC_2                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_EXEVCTRL2_EXEV7SENS                               ((uint32_t)0x00000C00U)            /* Bit[11:10] External event 7 sensitivity */
#define SHRTIM_EXEVCTRL2_EXEV7SENS_0                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_EXEVCTRL2_EXEV7SENS_1                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_EXEVCTRL2_EXEV7POL                                ((uint32_t)0x00000200U)            /* Bit[9] External event 7 polarity */
#define SHRTIM_EXEVCTRL2_EXEV7SRC                                ((uint32_t)0x000001C0U)            /* Bit[8:6] External event 7 source */
#define SHRTIM_EXEVCTRL2_EXEV7SRC_0                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_EXEVCTRL2_EXEV7SRC_1                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_EXEVCTRL2_EXEV7SRC_2                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_EXEVCTRL2_EXEV6SENS                               ((uint32_t)0x00000030U)            /* Bit[5:4] External event 6 sensitivity */
#define SHRTIM_EXEVCTRL2_EXEV6SENS_0                             ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_EXEVCTRL2_EXEV6SENS_1                             ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_EXEVCTRL2_EXEV6POL                                ((uint32_t)0x00000008U)            /* Bit[3] External event 6 polarity */
#define SHRTIM_EXEVCTRL2_EXEV6SRC                                ((uint32_t)0x00000007U)            /* Bit[2:0] External event 6 source */
#define SHRTIM_EXEVCTRL2_EXEV6SRC_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_EXEVCTRL2_EXEV6SRC_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_EXEVCTRL2_EXEV6SRC_2                              ((uint32_t)0x00000004U)            /* Bit2 */

/** Bit definition for SHRTIM_EXEVCTRL3 register  **/
#define SHRTIM_EXEVCTRL3_EXEV5FM                                 ((uint32_t)0x10000000U)            /* Bit[28] External event 5 fast mode */
#define SHRTIM_EXEVCTRL3_EXEV5F                                ((uint32_t)0x0F000000U)            /* Bit[27:24] External event 5 filter */
#define SHRTIM_EXEVCTRL3_EXEV5F_0                              ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_EXEVCTRL3_EXEV5F_1                              ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_EXEVCTRL3_EXEV5F_2                              ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_EXEVCTRL3_EXEV5F_3                              ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_EXEVCTRL3_EXEV4FM                                 ((uint32_t)0x00400000U)            /* Bit[22] External event 4 fast mode */
#define SHRTIM_EXEVCTRL3_EXEV4F                                ((uint32_t)0x003C0000U)            /* Bit[21:18] External event 4 filter */
#define SHRTIM_EXEVCTRL3_EXEV4F_0                              ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_EXEVCTRL3_EXEV4F_1                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_EXEVCTRL3_EXEV4F_2                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_EXEVCTRL3_EXEV4F_3                              ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_EXEVCTRL3_EXEV3FM                                 ((uint32_t)0x00010000U)            /* Bit[16] External event 3 fast mode */
#define SHRTIM_EXEVCTRL3_EXEV3F                                ((uint32_t)0x0000F000U)            /* Bit[15:12] External event 3 filter */
#define SHRTIM_EXEVCTRL3_EXEV3F_0                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_EXEVCTRL3_EXEV3F_1                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_EXEVCTRL3_EXEV3F_2                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_EXEVCTRL3_EXEV3F_3                              ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_EXEVCTRL3_EXEV2FM                                 ((uint32_t)0x00000400U)            /* Bit[10] External event 2 fast mode */
#define SHRTIM_EXEVCTRL3_EXEV2F                                ((uint32_t)0x000003C0U)            /* Bit[9:6] External event 2 filter */
#define SHRTIM_EXEVCTRL3_EXEV2F_0                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_EXEVCTRL3_EXEV2F_1                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_EXEVCTRL3_EXEV2F_2                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_EXEVCTRL3_EXEV2F_3                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_EXEVCTRL3_EXEV1FM                                 ((uint32_t)0x00000010U)            /* Bit[4] External event 1 fast mode */
#define SHRTIM_EXEVCTRL3_EXEV1F                                ((uint32_t)0x0000000FU)            /* Bit[3:0] External event 1 filter */
#define SHRTIM_EXEVCTRL3_EXEV1F_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_EXEVCTRL3_EXEV1F_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_EXEVCTRL3_EXEV1F_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_EXEVCTRL3_EXEV1F_3                              ((uint32_t)0x00000008U)            /* Bit3 */

/** Bit definition for SHRTIM_EXEVCTRL4 register  **/
#define SHRTIM_EXEVCTRL4_EXEVSCD                                 ((uint32_t)0xC0000000U)            /* Bit[31:30] External event sampling clock division */
#define SHRTIM_EXEVCTRL4_EXEVSCD_0                               ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_EXEVCTRL4_EXEVSCD_1                               ((uint32_t)0x80000000U)            /* Bit31 */
#define SHRTIM_EXEVCTRL4_EXEV10FM                                ((uint32_t)0x10000000U)            /* Bit[28] External event10 fast mode */
#define SHRTIM_EXEVCTRL4_EXEV10F                               ((uint32_t)0x0F000000U)            /* Bit[27:24] External event 10 filter */
#define SHRTIM_EXEVCTRL4_EXEV10F_0                             ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_EXEVCTRL4_EXEV10F_1                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_EXEVCTRL4_EXEV10F_2                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_EXEVCTRL4_EXEV10F_3                             ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_EXEVCTRL4_EXEV9FM                                 ((uint32_t)0x00400000U)            /* Bit[22] External event9 fast mode */
#define SHRTIM_EXEVCTRL4_EXEV9F                                ((uint32_t)0x003C0000U)            /* Bit[21:18] External event 9 filter */
#define SHRTIM_EXEVCTRL4_EXEV9F_0                              ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_EXEVCTRL4_EXEV9F_1                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_EXEVCTRL4_EXEV9F_2                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_EXEVCTRL4_EXEV9F_3                              ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_EXEVCTRL4_EXEV8FM                                 ((uint32_t)0x00010000U)            /* Bit[16] External event 8 fast mode */
#define SHRTIM_EXEVCTRL4_EXEV8F                                ((uint32_t)0x0000F000U)            /* Bit[15:12] External event 8 filter */
#define SHRTIM_EXEVCTRL4_EXEV8F_0                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_EXEVCTRL4_EXEV8F_1                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_EXEVCTRL4_EXEV8F_2                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_EXEVCTRL4_EXEV8F_3                              ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_EXEVCTRL4_EXEV7FM                                 ((uint32_t)0x00000400U)            /* Bit[10] External event7 fast mode */
#define SHRTIM_EXEVCTRL4_EXEV7F                                ((uint32_t)0x000003C0U)            /* Bit[9:6] External event 7 filter */
#define SHRTIM_EXEVCTRL4_EXEV7F_0                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_EXEVCTRL4_EXEV7F_1                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_EXEVCTRL4_EXEV7F_2                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_EXEVCTRL4_EXEV7F_3                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_EXEVCTRL4_EXEV6FM                                 ((uint32_t)0x00000010U)            /* Bit[4] External event6 fast mode */
#define SHRTIM_EXEVCTRL4_EXEV6F                                ((uint32_t)0x0000000FU)            /* Bit[3:0] External event 6 filter */
#define SHRTIM_EXEVCTRL4_EXEV6F_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_EXEVCTRL4_EXEV6F_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_EXEVCTRL4_EXEV6F_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_EXEVCTRL4_EXEV6F_3                              ((uint32_t)0x00000008U)            /* Bit3 */

/** Bit definition for SHRTIM_ADTG1SRC1 register  **/
#define SHRTIM_ADTG1SRC1_ADTG1TCPRD                             ((uint32_t)0x04000000U)            /* Bit[26] ADC trigger 1 driven by timer C period event */
#define SHRTIM_ADTG1SRC1_ADTG1TCCMP5                            ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 1 driven by timer C compare 5 event */
#define SHRTIM_ADTG1SRC1_ADTG1TCCMP4                            ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 1 driven by timer C compare 4 event */
#define SHRTIM_ADTG1SRC1_ADTG1TCCMP3                            ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 1 driven by timer C compare 3 event */
#define SHRTIM_ADTG1SRC1_ADTG1TCCMP2                            ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 1 driven by timer C compare 2 event */
#define SHRTIM_ADTG1SRC1_ADTG1TCCMP1                            ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 1 driven by timer C compare 1 event */
#define SHRTIM_ADTG1SRC1_ADTG1TBRSTRO                           ((uint32_t)0x00100000U)            /* Bit[20] ADC trigger 1 driven by timer B reset and roll-over events */
#define SHRTIM_ADTG1SRC1_ADTG1TBPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 1 driven by timer B period event */
#define SHRTIM_ADTG1SRC1_ADTG1TBCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 1 driven by timer B compare 5 event */
#define SHRTIM_ADTG1SRC1_ADTG1TBCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 1 driven by timer B compare 4 event */
#define SHRTIM_ADTG1SRC1_ADTG1TBCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 1 driven by timer B compare 3 event */
#define SHRTIM_ADTG1SRC1_ADTG1TBCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 1 driven by timer B compare 2 event */
#define SHRTIM_ADTG1SRC1_ADTG1TBCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 1 driven by timer B compare 1 event */
#define SHRTIM_ADTG1SRC1_ADTG1TARSTRO                           ((uint32_t)0x00002000U)            /* Bit[13] ADC trigger 1 driven by timer A reset and roll-over events */
#define SHRTIM_ADTG1SRC1_ADTG1TAPRD                             ((uint32_t)0x00001000U)            /* Bit[12] ADC trigger 1 driven by timer A period event */
#define SHRTIM_ADTG1SRC1_ADTG1TACMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 1 driven by timer A compare 5 event */
#define SHRTIM_ADTG1SRC1_ADTG1TACMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 1 driven by timer A compare 4 event */
#define SHRTIM_ADTG1SRC1_ADTG1TACMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 1 driven by timer A compare 3 event */
#define SHRTIM_ADTG1SRC1_ADTG1TACMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 1 driven by timer A compare 2 event */
#define SHRTIM_ADTG1SRC1_ADTG1TACMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 1 driven by timer A compare 1 event */
#define SHRTIM_ADTG1SRC1_ADTG1MPRD                              ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 1 driven by master period event */
#define SHRTIM_ADTG1SRC1_ADTG1MCMP4                             ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 1 driven by master compare 4 event */
#define SHRTIM_ADTG1SRC1_ADTG1MCMP3                             ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 1 driven by master compare 3 event */
#define SHRTIM_ADTG1SRC1_ADTG1MCMP2                             ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 1 driven by master compare 2 event */
#define SHRTIM_ADTG1SRC1_ADTG1MCMP1                             ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 1 driven by master compare 1 event */

/** Bit definition for SHRTIM_ADTG1SRC2 register  **/
#define SHRTIM_ADTG1SRC2_ADTG1EXEV5                             ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 1 driven by external event 5 */
#define SHRTIM_ADTG1SRC2_ADTG1EXEV4                             ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 1 driven by external event 4 */
#define SHRTIM_ADTG1SRC2_ADTG1EXEV3                             ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 1 driven by external event 3 */
#define SHRTIM_ADTG1SRC2_ADTG1EXEV2                             ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 1 driven by external event 2 */
#define SHRTIM_ADTG1SRC2_ADTG1EXEV1                             ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 1 driven by external event 1 */
#define SHRTIM_ADTG1SRC2_ADTG1TFRSTRO                           ((uint32_t)0x00100000U)            /* Bit[20] ADC trigger 1 driven by timer F reset and roll-over events */
#define SHRTIM_ADTG1SRC2_ADTG1TFPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 1 driven by timer F period event */
#define SHRTIM_ADTG1SRC2_ADTG1TFCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 1 driven by timer F compare 5 event */
#define SHRTIM_ADTG1SRC2_ADTG1TFCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 1 driven by timer F compare 4 event */
#define SHRTIM_ADTG1SRC2_ADTG1TFCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 1 driven by timer F compare 3 event */
#define SHRTIM_ADTG1SRC2_ADTG1TFCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 1 driven by timer F compare 2 event */
#define SHRTIM_ADTG1SRC2_ADTG1TFCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 1 driven by timer F compare 1 event */
#define SHRTIM_ADTG1SRC2_ADTG1TEPRD                             ((uint32_t)0x00001000U)            /* Bit[12] ADC trigger 1 driven by timer E period event */
#define SHRTIM_ADTG1SRC2_ADTG1TECMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 1 driven by timer E compare 5 event */
#define SHRTIM_ADTG1SRC2_ADTG1TECMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 1 driven by timer E compare 4 event */
#define SHRTIM_ADTG1SRC2_ADTG1TECMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 1 driven by timer E compare 3 event */
#define SHRTIM_ADTG1SRC2_ADTG1TECMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 1 driven by timer E compare 2 event */
#define SHRTIM_ADTG1SRC2_ADTG1TECMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 1 driven by timer E compare 1 event */
#define SHRTIM_ADTG1SRC2_ADTG1TDPRD                             ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 1 driven by timer D period event */
#define SHRTIM_ADTG1SRC2_ADTG1TDCMP5                            ((uint32_t)0x00000010U)            /* Bit[4] ADC trigger 1 driven by timer D compare 5 event */
#define SHRTIM_ADTG1SRC2_ADTG1TDCMP4                            ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 1 driven by timer D compare 4 event */
#define SHRTIM_ADTG1SRC2_ADTG1TDCMP3                            ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 1 driven by timer D compare 3 event */
#define SHRTIM_ADTG1SRC2_ADTG1TDCMP2                            ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 1 driven by timer D compare 2 event */
#define SHRTIM_ADTG1SRC2_ADTG1TDCMP1                            ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 1 driven by timer D compare 1 event */

/** Bit definition for SHRTIM_ADTG2SRC1 register  **/
#define SHRTIM_ADTG2SRC1_ADTG2TCRSTRO                           ((uint32_t)0x08000000U)            /* Bit[27] ADC trigger 2 driven by timer C reset and roll-over events */
#define SHRTIM_ADTG2SRC1_ADTG2TCPRD                             ((uint32_t)0x04000000U)            /* Bit[26] ADC trigger 2 driven by timer C period event */
#define SHRTIM_ADTG2SRC1_ADTG2TCCMP5                            ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 2 driven by timer C compare 5 event */
#define SHRTIM_ADTG2SRC1_ADTG2TCCMP4                            ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 2 driven by timer C compare 4 event */
#define SHRTIM_ADTG2SRC1_ADTG2TCCMP3                            ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 2 driven by timer C compare 3 event */
#define SHRTIM_ADTG2SRC1_ADTG2TCCMP2                            ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 2 driven by timer C compare 2 event */
#define SHRTIM_ADTG2SRC1_ADTG2TCCMP1                            ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 2 driven by timer C compare 1 event */
#define SHRTIM_ADTG2SRC1_ADTG2TBPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 2 driven by timer B period event */
#define SHRTIM_ADTG2SRC1_ADTG2TBCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 2 driven by timer B compare 5 event */
#define SHRTIM_ADTG2SRC1_ADTG2TBCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 2 driven by timer B compare 4 event */
#define SHRTIM_ADTG2SRC1_ADTG2TBCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 2 driven by timer B compare 3 event */
#define SHRTIM_ADTG2SRC1_ADTG2TBCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 2 driven by timer B compare 2 event */
#define SHRTIM_ADTG2SRC1_ADTG2TBCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 2 driven by timer B compare 1 event */
#define SHRTIM_ADTG2SRC1_ADTG2TAPRD                             ((uint32_t)0x00001000U)            /* Bit[12] ADC trigger 2 driven by timer A period event */
#define SHRTIM_ADTG2SRC1_ADTG2TACMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 2 driven by timer A compare 5 event */
#define SHRTIM_ADTG2SRC1_ADTG2TACMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 2 driven by timer A compare 4 event */
#define SHRTIM_ADTG2SRC1_ADTG2TACMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 2 driven by timer A compare 3 event */
#define SHRTIM_ADTG2SRC1_ADTG2TACMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 2 driven by timer A compare 2 event */
#define SHRTIM_ADTG2SRC1_ADTG2TACMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 2 driven by timer A compare 1 event */
#define SHRTIM_ADTG2SRC1_ADTG2MPRD                              ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 2 driven by master period event */
#define SHRTIM_ADTG2SRC1_ADTG2MCMP4                             ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 2 driven by master compare 4 event */
#define SHRTIM_ADTG2SRC1_ADTG2MCMP3                             ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 2 driven by master compare 3 event */
#define SHRTIM_ADTG2SRC1_ADTG2MCMP2                             ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 2 driven by master compare 2 event */
#define SHRTIM_ADTG2SRC1_ADTG2MCMP1                             ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 2 driven by master compare 1 event */

/** Bit definition for SHRTIM_ADTG2SRC2 register  **/
#define SHRTIM_ADTG2SRC2_ADTG2EXEV10                            ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 2 driven by external event 10 */
#define SHRTIM_ADTG2SRC2_ADTG2EXEV9                             ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 2 driven by external event 9 */
#define SHRTIM_ADTG2SRC2_ADTG2EXEV8                             ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 2 driven by external event 8 */
#define SHRTIM_ADTG2SRC2_ADTG2EXEV7                             ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 2 driven by external event 7 */
#define SHRTIM_ADTG2SRC2_ADTG2EXEV6                             ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 2 driven by external event 6 */
#define SHRTIM_ADTG2SRC2_ADTG2TFPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 2 driven by timer F period event */
#define SHRTIM_ADTG2SRC2_ADTG2TFCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 2 driven by timer F compare 5 event */
#define SHRTIM_ADTG2SRC2_ADTG2TFCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 2 driven by timer F compare 4 event */
#define SHRTIM_ADTG2SRC2_ADTG2TFCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 2 driven by timer F compare 3 event */
#define SHRTIM_ADTG2SRC2_ADTG2TFCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 2 driven by timer F compare 2 event */
#define SHRTIM_ADTG2SRC2_ADTG2TFCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 2 driven by timer F compare 1 event */
#define SHRTIM_ADTG2SRC2_ADTG2TERSTRO                           ((uint32_t)0x00002000U)            /* Bit[13] ADC trigger 2 driven by timer E reset and roll-over events */
#define SHRTIM_ADTG2SRC2_ADTG2TECMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 2 driven by timer E compare 5 event */
#define SHRTIM_ADTG2SRC2_ADTG2TECMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 2 driven by timer E compare 4 event */
#define SHRTIM_ADTG2SRC2_ADTG2TECMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 2 driven by timer E compare 3 event */
#define SHRTIM_ADTG2SRC2_ADTG2TECMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 2 driven by timer E compare 2 event */
#define SHRTIM_ADTG2SRC2_ADTG2TECMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 2 driven by timer E compare 1 event */
#define SHRTIM_ADTG2SRC2_ADTG2TDRSTRO                           ((uint32_t)0x00000040U)            /* Bit[6] ADC trigger 2 driven by timer D reset and roll-over events */
#define SHRTIM_ADTG2SRC2_ADTG2TDPRD                             ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 2 driven by timer D period event */
#define SHRTIM_ADTG2SRC2_ADTG2TDCMP5                            ((uint32_t)0x00000010U)            /* Bit[4] ADC trigger 2 driven by timer D compare 5 event */
#define SHRTIM_ADTG2SRC2_ADTG2TDCMP4                            ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 2 driven by timer D compare 4 event */
#define SHRTIM_ADTG2SRC2_ADTG2TDCMP3                            ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 2 driven by timer D compare 3 event */
#define SHRTIM_ADTG2SRC2_ADTG2TDCMP2                            ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 2 driven by timer D compare 2 event */
#define SHRTIM_ADTG2SRC2_ADTG2TDCMP1                            ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 2 driven by timer D compare 1 event */

/** Bit definition for SHRTIM_ADTG3SRC1 register  **/
#define SHRTIM_ADTG3SRC1_ADTG3TCPRD                             ((uint32_t)0x04000000U)            /* Bit[26] ADC trigger 3 driven by timer C period event */
#define SHRTIM_ADTG3SRC1_ADTG3TCCMP5                            ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 3 driven by timer C compare 5 event */
#define SHRTIM_ADTG3SRC1_ADTG3TCCMP4                            ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 3 driven by timer C compare 4 event */
#define SHRTIM_ADTG3SRC1_ADTG3TCCMP3                            ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 3 driven by timer C compare 3 event */
#define SHRTIM_ADTG3SRC1_ADTG3TCCMP2                            ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 3 driven by timer C compare 2 event */
#define SHRTIM_ADTG3SRC1_ADTG3TCCMP1                            ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 3 driven by timer C compare 1 event */
#define SHRTIM_ADTG3SRC1_ADTG3TBRSTRO                           ((uint32_t)0x00100000U)            /* Bit[20] ADC trigger 3 driven by timer B reset and roll-over events */
#define SHRTIM_ADTG3SRC1_ADTG3TBPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 3 driven by timer B period event */
#define SHRTIM_ADTG3SRC1_ADTG3TBCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 3 driven by timer B compare 5 event */
#define SHRTIM_ADTG3SRC1_ADTG3TBCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 3 driven by timer B compare 4 event */
#define SHRTIM_ADTG3SRC1_ADTG3TBCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 3 driven by timer B compare 3 event */
#define SHRTIM_ADTG3SRC1_ADTG3TBCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 3 driven by timer B compare 2 event */
#define SHRTIM_ADTG3SRC1_ADTG3TBCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 3 driven by timer B compare 1 event */
#define SHRTIM_ADTG3SRC1_ADTG3TARSTRO                           ((uint32_t)0x00002000U)            /* Bit[13] ADC trigger 3 driven by timer A reset and roll-over events */
#define SHRTIM_ADTG3SRC1_ADTG3TAPRD                             ((uint32_t)0x00001000U)            /* Bit[12] ADC trigger 3 driven by timer A period event */
#define SHRTIM_ADTG3SRC1_ADTG3TACMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 3 driven by timer A compare 5 event */
#define SHRTIM_ADTG3SRC1_ADTG3TACMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 3 driven by timer A compare 4 event */
#define SHRTIM_ADTG3SRC1_ADTG3TACMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 3 driven by timer A compare 3 event */
#define SHRTIM_ADTG3SRC1_ADTG3TACMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 3 driven by timer A compare 2 event */
#define SHRTIM_ADTG3SRC1_ADTG3TACMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 3 driven by timer A compare 1 event */
#define SHRTIM_ADTG3SRC1_ADTG3MPRD                              ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 3 driven by master period event */
#define SHRTIM_ADTG3SRC1_ADTG3MCMP4                             ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 3 driven by master compare 4 event */
#define SHRTIM_ADTG3SRC1_ADTG3MCMP3                             ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 3 driven by master compare 3 event */
#define SHRTIM_ADTG3SRC1_ADTG3MCMP2                             ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 3 driven by master compare 2 event */
#define SHRTIM_ADTG3SRC1_ADTG3MCMP1                             ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 3 driven by master compare 1 event */

/** Bit definition for SHRTIM_ADTG3SRC2 register  **/
#define SHRTIM_ADTG3SRC2_ADTG3EXEV5                             ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 3 driven by external event 5 */
#define SHRTIM_ADTG3SRC2_ADTG3EXEV4                             ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 3 driven by external event 4 */
#define SHRTIM_ADTG3SRC2_ADTG3EXEV3                             ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 3 driven by external event 3 */
#define SHRTIM_ADTG3SRC2_ADTG3EXEV2                             ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 3 driven by external event 2 */
#define SHRTIM_ADTG3SRC2_ADTG3EXEV1                             ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 3 driven by external event 1 */
#define SHRTIM_ADTG3SRC2_ADTG3TFRSTRO                           ((uint32_t)0x00100000U)            /* Bit[20] ADC trigger 3 driven by timer F reset and roll-over events */
#define SHRTIM_ADTG3SRC2_ADTG3TFPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 3 driven by timer F period event */
#define SHRTIM_ADTG3SRC2_ADTG3TFCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 3 driven by timer F compare 5 event */
#define SHRTIM_ADTG3SRC2_ADTG3TFCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 3 driven by timer F compare 4 event */
#define SHRTIM_ADTG3SRC2_ADTG3TFCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 3 driven by timer F compare 3 event */
#define SHRTIM_ADTG3SRC2_ADTG3TFCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 3 driven by timer F compare 2 event */
#define SHRTIM_ADTG3SRC2_ADTG3TFCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 3 driven by timer F compare 1 event */
#define SHRTIM_ADTG3SRC2_ADTG3TEPRD                             ((uint32_t)0x00001000U)            /* Bit[12] ADC trigger 3 driven by timer E period event */
#define SHRTIM_ADTG3SRC2_ADTG3TECMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 3 driven by timer E compare 5 event */
#define SHRTIM_ADTG3SRC2_ADTG3TECMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 3 driven by timer E compare 4 event */
#define SHRTIM_ADTG3SRC2_ADTG3TECMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 3 driven by timer E compare 3 event */
#define SHRTIM_ADTG3SRC2_ADTG3TECMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 3 driven by timer E compare 2 event */
#define SHRTIM_ADTG3SRC2_ADTG3TECMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 3 driven by timer E compare 1 event */
#define SHRTIM_ADTG3SRC2_ADTG3TDPRD                             ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 3 driven by timer D period event */
#define SHRTIM_ADTG3SRC2_ADTG3TDCMP5                            ((uint32_t)0x00000010U)            /* Bit[4] ADC trigger 3 driven by timer D compare 5 event */
#define SHRTIM_ADTG3SRC2_ADTG3TDCMP4                            ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 3 driven by timer D compare 4 event */
#define SHRTIM_ADTG3SRC2_ADTG3TDCMP3                            ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 3 driven by timer D compare 3 event */
#define SHRTIM_ADTG3SRC2_ADTG3TDCMP2                            ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 3 driven by timer D compare 2 event */
#define SHRTIM_ADTG3SRC2_ADTG3TDCMP1                            ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 3 driven by timer D compare 1 event */

/** Bit definition for SHRTIM_ADTG4SRC1 register  **/
#define SHRTIM_ADTG4SRC1_ADTG4TCRSTRO                           ((uint32_t)0x08000000U)            /* Bit[27] ADC trigger 4 driven by timer C reset and roll-over events */
#define SHRTIM_ADTG4SRC1_ADTG4TCPRD                             ((uint32_t)0x04000000U)            /* Bit[26] ADC trigger 4 driven by timer C period event */
#define SHRTIM_ADTG4SRC1_ADTG4TCCMP5                            ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 4 driven by timer C compare 5 event */
#define SHRTIM_ADTG4SRC1_ADTG4TCCMP4                            ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 4 driven by timer C compare 4 event */
#define SHRTIM_ADTG4SRC1_ADTG4TCCMP3                            ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 4 driven by timer C compare 3 event */
#define SHRTIM_ADTG4SRC1_ADTG4TCCMP2                            ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 4 driven by timer C compare 2 event */
#define SHRTIM_ADTG4SRC1_ADTG4TCCMP1                            ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 4 driven by timer C compare 1 event */
#define SHRTIM_ADTG4SRC1_ADTG4TBPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 4 driven by timer B period event */
#define SHRTIM_ADTG4SRC1_ADTG4TBCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 4 driven by timer B compare 5 event */
#define SHRTIM_ADTG4SRC1_ADTG4TBCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 4 driven by timer B compare 4 event */
#define SHRTIM_ADTG4SRC1_ADTG4TBCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 4 driven by timer B compare 3 event */
#define SHRTIM_ADTG4SRC1_ADTG4TBCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 4 driven by timer B compare 2 event */
#define SHRTIM_ADTG4SRC1_ADTG4TBCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 4 driven by timer B compare 1 event */
#define SHRTIM_ADTG4SRC1_ADTG4TAPRD                             ((uint32_t)0x00001000U)            /* Bit[12] ADC trigger 4 driven by timer A period event */
#define SHRTIM_ADTG4SRC1_ADTG4TACMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 4 driven by timer A compare 5 event */
#define SHRTIM_ADTG4SRC1_ADTG4TACMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 4 driven by timer A compare 4 event */
#define SHRTIM_ADTG4SRC1_ADTG4TACMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 4 driven by timer A compare 3 event */
#define SHRTIM_ADTG4SRC1_ADTG4TACMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 4 driven by timer A compare 2 event */
#define SHRTIM_ADTG4SRC1_ADTG4TACMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 4 driven by timer A compare 1 event */
#define SHRTIM_ADTG4SRC1_ADTG4MPRD                              ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 4 driven by master period event */
#define SHRTIM_ADTG4SRC1_ADTG4MCMP4                             ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 4 driven by master compare 4 event */
#define SHRTIM_ADTG4SRC1_ADTG4MCMP3                             ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 4 driven by master compare 3 event */
#define SHRTIM_ADTG4SRC1_ADTG4MCMP2                             ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 4 driven by master compare 2 event */
#define SHRTIM_ADTG4SRC1_ADTG4MCMP1                             ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 4 driven by master compare 1 event */

/** Bit definition for SHRTIM_ADTG4SRC2 register  **/
#define SHRTIM_ADTG4SRC2_ADTG4EXEV10                            ((uint32_t)0x02000000U)            /* Bit[25] ADC trigger 4 driven by external event 10 */
#define SHRTIM_ADTG4SRC2_ADTG4EXEV9                             ((uint32_t)0x01000000U)            /* Bit[24] ADC trigger 4 driven by external event 9 */
#define SHRTIM_ADTG4SRC2_ADTG4EXEV8                             ((uint32_t)0x00800000U)            /* Bit[23] ADC trigger 4 driven by external event 8 */
#define SHRTIM_ADTG4SRC2_ADTG4EXEV7                             ((uint32_t)0x00400000U)            /* Bit[22] ADC trigger 4 driven by external event 7 */
#define SHRTIM_ADTG4SRC2_ADTG4EXEV6                             ((uint32_t)0x00200000U)            /* Bit[21] ADC trigger 4 driven by external event 6 */
#define SHRTIM_ADTG4SRC2_ADTG4TFPRD                             ((uint32_t)0x00080000U)            /* Bit[19] ADC trigger 4 driven by timer F period event */
#define SHRTIM_ADTG4SRC2_ADTG4TFCMP5                            ((uint32_t)0x00040000U)            /* Bit[18] ADC trigger 4 driven by timer F compare 5 event */
#define SHRTIM_ADTG4SRC2_ADTG4TFCMP4                            ((uint32_t)0x00020000U)            /* Bit[17] ADC trigger 4 driven by timer F compare 4 event */
#define SHRTIM_ADTG4SRC2_ADTG4TFCMP3                            ((uint32_t)0x00010000U)            /* Bit[16] ADC trigger 4 driven by timer F compare 3 event */
#define SHRTIM_ADTG4SRC2_ADTG4TFCMP2                            ((uint32_t)0x00008000U)            /* Bit[15] ADC trigger 4 driven by timer F compare 2 event */
#define SHRTIM_ADTG4SRC2_ADTG4TFCMP1                            ((uint32_t)0x00004000U)            /* Bit[14] ADC trigger 4 driven by timer F compare 1 event */
#define SHRTIM_ADTG4SRC2_ADTG4TERSTRO                           ((uint32_t)0x00002000U)            /* Bit[13] ADC trigger 4 driven by timer E reset and roll-over events */
#define SHRTIM_ADTG4SRC2_ADTG4TECMP5                            ((uint32_t)0x00000800U)            /* Bit[11] ADC trigger 4 driven by timer E compare 5 event */
#define SHRTIM_ADTG4SRC2_ADTG4TECMP4                            ((uint32_t)0x00000400U)            /* Bit[10] ADC trigger 4 driven by timer E compare 4 event */
#define SHRTIM_ADTG4SRC2_ADTG4TECMP3                            ((uint32_t)0x00000200U)            /* Bit[9] ADC trigger 4 driven by timer E compare 3 event */
#define SHRTIM_ADTG4SRC2_ADTG4TECMP2                            ((uint32_t)0x00000100U)            /* Bit[8] ADC trigger 4 driven by timer E compare 2 event */
#define SHRTIM_ADTG4SRC2_ADTG4TECMP1                            ((uint32_t)0x00000080U)            /* Bit[7] ADC trigger 4 driven by timer E compare 1 event */
#define SHRTIM_ADTG4SRC2_ADTG4TDRSTRO                           ((uint32_t)0x00000040U)            /* Bit[6] ADC trigger 4 driven by timer D reset and roll-over events */
#define SHRTIM_ADTG4SRC2_ADTG4TDPRD                             ((uint32_t)0x00000020U)            /* Bit[5] ADC trigger 4 driven by timer D period event */
#define SHRTIM_ADTG4SRC2_ADTG4TDCMP5                            ((uint32_t)0x00000010U)            /* Bit[4] ADC trigger 4 driven by timer D compare 5 event */
#define SHRTIM_ADTG4SRC2_ADTG4TDCMP4                            ((uint32_t)0x00000008U)            /* Bit[3] ADC trigger 4 driven by timer D compare 4 event */
#define SHRTIM_ADTG4SRC2_ADTG4TDCMP3                            ((uint32_t)0x00000004U)            /* Bit[2] ADC trigger 4 driven by timer D compare 3 event */
#define SHRTIM_ADTG4SRC2_ADTG4TDCMP2                            ((uint32_t)0x00000002U)            /* Bit[1] ADC trigger 4 driven by timer D compare 2 event */
#define SHRTIM_ADTG4SRC2_ADTG4TDCMP1                            ((uint32_t)0x00000001U)            /* Bit[0] ADC trigger 4 driven by timer D compare 1 event */

/** Bit definition for SHRTIM_FALTIN1 register  **/
#define SHRTIM_FALTIN1_FALT4LCK                                ((uint32_t)0x80000000U)            /* Bit[31] Fault 4 lock */
#define SHRTIM_FALTIN1_FALT4FLT                                ((uint32_t)0x78000000U)            /* Bit[30:27] Fault 4 filter */
#define SHRTIM_FALTIN1_FALT4FLT_0                              ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_FALTIN1_FALT4FLT_1                              ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_FALTIN1_FALT4FLT_2                              ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_FALTIN1_FALT4FLT_3                              ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_FALTIN1_FALT4SRC0                               ((uint32_t)0x04000000U)            /* Bit[26] Fault 4 source bit 0 */
#define SHRTIM_FALTIN1_FALT4POL                                ((uint32_t)0x02000000U)            /* Bit[25] Fault 4 polarity */
#define SHRTIM_FALTIN1_FALT4E                                  ((uint32_t)0x01000000U)            /* Bit[24] Fault 4 enable */
#define SHRTIM_FALTIN1_FALT3LCK                                ((uint32_t)0x00800000U)            /* Bit[23] Fault 3 lock */
#define SHRTIM_FALTIN1_FALT3FLT                                ((uint32_t)0x00780000U)            /* Bit[22:19] Fault 3 filter */
#define SHRTIM_FALTIN1_FALT3FLT_0                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_FALTIN1_FALT3FLT_1                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_FALTIN1_FALT3FLT_2                              ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_FALTIN1_FALT3FLT_3                              ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_FALTIN1_FALT3SRC0                               ((uint32_t)0x00040000U)            /* Bit[18] Fault 3 source bit 0 */
#define SHRTIM_FALTIN1_FALT3POL                                ((uint32_t)0x00020000U)            /* Bit[17] Fault 3 polarity */
#define SHRTIM_FALTIN1_FALT3E                                  ((uint32_t)0x00010000U)            /* Bit[16] Fault 3 enable */
#define SHRTIM_FALTIN1_FALT2LCK                                ((uint32_t)0x00008000U)            /* Bit[15] Fault 2 lock */
#define SHRTIM_FALTIN1_FALT2FLT                                ((uint32_t)0x00007800U)            /* Bit[14:11] Fault 2 filter */
#define SHRTIM_FALTIN1_FALT2FLT_0                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_FALTIN1_FALT2FLT_1                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_FALTIN1_FALT2FLT_2                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_FALTIN1_FALT2FLT_3                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_FALTIN1_FALT2SRC0                               ((uint32_t)0x00000400U)            /* Bit[10] Fault 2 source bit 0 */
#define SHRTIM_FALTIN1_FALT2POL                                ((uint32_t)0x00000200U)            /* Bit[9] Fault 2 polarity */
#define SHRTIM_FALTIN1_FALT2E                                  ((uint32_t)0x00000100U)            /* Bit[8] Fault 2 enable */
#define SHRTIM_FALTIN1_FALT1LCK                                ((uint32_t)0x00000080U)            /* Bit[7] Fault 1 lock */
#define SHRTIM_FALTIN1_FALT1FLT                                ((uint32_t)0x00000078U)            /* Bit[6:3] Fault 1 filter */
#define SHRTIM_FALTIN1_FALT1FLT_0                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_FALTIN1_FALT1FLT_1                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_FALTIN1_FALT1FLT_2                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_FALTIN1_FALT1FLT_3                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_FALTIN1_FALT1SRC0                               ((uint32_t)0x00000004U)            /* Bit[2] Fault 1 source bit 0 */
#define SHRTIM_FALTIN1_FALT1POL                                ((uint32_t)0x00000002U)            /* Bit[1] Fault 1 polarity */
#define SHRTIM_FALTIN1_FALT1E                                  ((uint32_t)0x00000001U)            /* Bit[0] Fault 1 enable */

/** Bit definition for SHRTIM_FALTIN2 register  **/
#define SHRTIM_FALTIN2_SFALTSPLLEN                             ((uint32_t)0x80000000U)            /* Bit[31] The SHRPLL lock fault as SHRTIM system fault input enable */
#define SHRTIM_FALTIN2_SFALTPVDEN                              ((uint32_t)0x40000000U)            /* Bit[30] The PVD error as SHRTIM system fault input enable */
#define SHRTIM_FALTIN2_SFALTLOCKUPEN                           ((uint32_t)0x20000000U)            /* Bit[29] The core lockup as SHRTIM system fault input enable */
#define SHRTIM_FALTIN2_SFALTSMPAREN                            ((uint32_t)0x10000000U)            /* Bit[28] The sram parity error as SHRTIM system fault input enable */
#define SHRTIM_FALTIN2_SFALTSMECCEN                            ((uint32_t)0x08000000U)            /* Bit[27] The sram ECC error as SHRTIM system fault input enable */
#define SHRTIM_FALTIN2_SFALTCKSECEN                            ((uint32_t)0x04000000U)            /* Bit[26] The clock security system error as SHRTIM system fault input enable */
#define SHRTIM_FALTIN2_FALTSCD                                 ((uint32_t)0x03000000U)            /* Bit[25:24] Fault sampling clock division */
#define SHRTIM_FALTIN2_FALTSCD_0                               ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_FALTIN2_FALTSCD_1                               ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_FALTIN2_FALT6SRC1                               ((uint32_t)0x00200000U)            /* Bit[21] Fault 6 source bit 1 */
#define SHRTIM_FALTIN2_FALT5SRC1                               ((uint32_t)0x00100000U)            /* Bit[20] Fault 5 source bit 1 */
#define SHRTIM_FALTIN2_FALT4SRC1                               ((uint32_t)0x00080000U)            /* Bit[19] Fault 4 source bit 1 */
#define SHRTIM_FALTIN2_FALT3SRC1                               ((uint32_t)0x00040000U)            /* Bit[18] Fault 3 source bit 1 */
#define SHRTIM_FALTIN2_FALT2SRC1                               ((uint32_t)0x00020000U)            /* Bit[17] Fault 2 source bit 1 */
#define SHRTIM_FALTIN2_FALT1SRC1                               ((uint32_t)0x00010000U)            /* Bit[16] Fault 1 source bit 1 */
#define SHRTIM_FALTIN2_FALT6LCK                                ((uint32_t)0x00008000U)            /* Bit[15] Fault 6 lock */
#define SHRTIM_FALTIN2_FALT6FLT                                ((uint32_t)0x00007800U)            /* Bit[14:11] Fault 6 filter */
#define SHRTIM_FALTIN2_FALT6FLT_0                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_FALTIN2_FALT6FLT_1                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_FALTIN2_FALT6FLT_2                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_FALTIN2_FALT6FLT_3                              ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_FALTIN2_FALT6SRC0                               ((uint32_t)0x00000400U)            /* Bit[10] Fault 6 source bit 0 */
#define SHRTIM_FALTIN2_FALT6POL                                ((uint32_t)0x00000200U)            /* Bit[9] Fault 6 polarity */
#define SHRTIM_FALTIN2_FALT6E                                  ((uint32_t)0x00000100U)            /* Bit[8] Fault 6 enable */
#define SHRTIM_FALTIN2_FALT5LCK                                ((uint32_t)0x00000080U)            /* Bit[7] Fault 5 lock */
#define SHRTIM_FALTIN2_FALT5FLT                                ((uint32_t)0x00000078U)            /* Bit[6:3] Fault 5 filter */
#define SHRTIM_FALTIN2_FALT5FLT_0                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_FALTIN2_FALT5FLT_1                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_FALTIN2_FALT5FLT_2                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_FALTIN2_FALT5FLT_3                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_FALTIN2_FALT5SRC0                               ((uint32_t)0x00000004U)            /* Bit[2] Fault 5 source bit 0 */
#define SHRTIM_FALTIN2_FALT5POL                                ((uint32_t)0x00000002U)            /* Bit[1] Fault 5 polarity */
#define SHRTIM_FALTIN2_FALT5E                                  ((uint32_t)0x00000001U)            /* Bit[0] Fault 5 enable */

/** Bit definition for SHRTIM_FALTIN3 register  **/
#define SHRTIM_FALTIN3_FALT4RSTM                               ((uint32_t)0x80000000U)            /* Bit[31] Fault 4 reset mode */
#define SHRTIM_FALTIN3_FALT4CRST                               ((uint32_t)0x40000000U)            /* Bit[30] Fault 4 counter reset */
#define SHRTIM_FALTIN3_FALT4CNT                                ((uint32_t)0x3C000000U)            /* Bit[29:26] Fault 4 counter */
#define SHRTIM_FALTIN3_FALT4CNT_0                              ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_FALTIN3_FALT4CNT_1                              ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_FALTIN3_FALT4CNT_2                              ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_FALTIN3_FALT4CNT_3                              ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_FALTIN3_FALT4BLKS                               ((uint32_t)0x02000000U)            /* Bit[25] Fault 4 blanking source */
#define SHRTIM_FALTIN3_FALT4BLKEN                              ((uint32_t)0x01000000U)            /* Bit[24] Fault 4 blanking enable */
#define SHRTIM_FALTIN3_FALT3RSTM                               ((uint32_t)0x00800000U)            /* Bit[23] Fault 3 reset mode */
#define SHRTIM_FALTIN3_FALT3CRST                               ((uint32_t)0x00400000U)            /* Bit[22] Fault 3 counter reset */
#define SHRTIM_FALTIN3_FALT3CNT                                ((uint32_t)0x003C0000U)            /* Bit[21:18] Fault 3 counter */
#define SHRTIM_FALTIN3_FALT3CNT_0                              ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_FALTIN3_FALT3CNT_1                              ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_FALTIN3_FALT3CNT_2                              ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_FALTIN3_FALT3CNT_3                              ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_FALTIN3_FALT3BLKS                               ((uint32_t)0x00020000U)            /* Bit[17] Fault 3 blanking source */
#define SHRTIM_FALTIN3_FALT3BLKEN                              ((uint32_t)0x00010000U)            /* Bit[16] Fault 3 blanking enable */
#define SHRTIM_FALTIN3_FALT2RSTM                               ((uint32_t)0x00008000U)            /* Bit[15] Fault 2 reset mode */
#define SHRTIM_FALTIN3_FALT2CRST                               ((uint32_t)0x00004000U)            /* Bit[14] Fault 2 counter reset */
#define SHRTIM_FALTIN3_FALT2CNT                                ((uint32_t)0x00003C00U)            /* Bit[13:10] Fault 2 counter */
#define SHRTIM_FALTIN3_FALT2CNT_0                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_FALTIN3_FALT2CNT_1                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_FALTIN3_FALT2CNT_2                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_FALTIN3_FALT2CNT_3                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_FALTIN3_FALT2BLKS                               ((uint32_t)0x00000200U)            /* Bit[9] Fault 2 blanking source */
#define SHRTIM_FALTIN3_FALT2BLKEN                              ((uint32_t)0x00000100U)            /* Bit[8] Fault 2 blanking enable */
#define SHRTIM_FALTIN3_FALT1RSTM                               ((uint32_t)0x00000080U)            /* Bit[7] Fault 1 reset mode */
#define SHRTIM_FALTIN3_FALT1CRST                               ((uint32_t)0x00000040U)            /* Bit[6] Fault 1 counter reset */
#define SHRTIM_FALTIN3_FALT1CNT                                ((uint32_t)0x0000003CU)            /* Bit[5:2] Fault 1 counter */
#define SHRTIM_FALTIN3_FALT1CNT_0                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_FALTIN3_FALT1CNT_1                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_FALTIN3_FALT1CNT_2                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_FALTIN3_FALT1CNT_3                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_FALTIN3_FALT1BLKS                               ((uint32_t)0x00000002U)            /* Bit[1] Fault 1 blanking source */
#define SHRTIM_FALTIN3_FALT1BLKEN                              ((uint32_t)0x00000001U)            /* Bit[0] Fault 1 blanking enable */

/** Bit definition for SHRTIM_FALTIN4 register  **/
#define SHRTIM_FALTIN4_FALT6RSTM                               ((uint32_t)0x00008000U)            /* Bit[15] Fault 6 reset mode */
#define SHRTIM_FALTIN4_FALT6CRST                               ((uint32_t)0x00004000U)            /* Bit[14] Fault 6 counter reset */
#define SHRTIM_FALTIN4_FALT6CNT                                ((uint32_t)0x00003C00U)            /* Bit[13:10] Fault 6 counter */
#define SHRTIM_FALTIN4_FALT6CNT_0                              ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_FALTIN4_FALT6CNT_1                              ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_FALTIN4_FALT6CNT_2                              ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_FALTIN4_FALT6CNT_3                              ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_FALTIN4_FALT6BLKS                               ((uint32_t)0x00000200U)            /* Bit[9] Fault 6 blanking source */
#define SHRTIM_FALTIN4_FALT6BLKEN                              ((uint32_t)0x00000100U)            /* Bit[8] Fault 6 blanking enable */
#define SHRTIM_FALTIN4_FALT5RSTM                               ((uint32_t)0x00000080U)            /* Bit[7] Fault 5 reset mode */
#define SHRTIM_FALTIN4_FALT5CRST                               ((uint32_t)0x00000040U)            /* Bit[6] Fault 5 counter reset */
#define SHRTIM_FALTIN4_FALT5CNT                                ((uint32_t)0x0000003CU)            /* Bit[5:2] Fault 5 counter */
#define SHRTIM_FALTIN4_FALT5CNT_0                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_FALTIN4_FALT5CNT_1                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_FALTIN4_FALT5CNT_2                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_FALTIN4_FALT5CNT_3                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_FALTIN4_FALT5BLKS                               ((uint32_t)0x00000002U)            /* Bit[1] Fault 5 blanking source */
#define SHRTIM_FALTIN4_FALT5BLKEN                              ((uint32_t)0x00000001U)            /* Bit[0] Fault 5 blanking enable */

/** Bit definition for SHRTIM_BDMTUPD register  **/
#define SHRTIM_BDMTUPD_MCMPDAT4                                ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_MCMP4DAT register update enable */
#define SHRTIM_BDMTUPD_MCMPDAT3                                ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_MCMP3DAT register update enable */
#define SHRTIM_BDMTUPD_MCMPDAT2                                ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_MCMP2DAT register update enable */
#define SHRTIM_BDMTUPD_MCMPDAT1                                ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_MCMP1DAT regiser update enable */
#define SHRTIM_BDMTUPD_MREPT                                   ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_MREPT register update enable */
#define SHRTIM_BDMTUPD_MPRD                                    ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_MPRD register update enable */
#define SHRTIM_BDMTUPD_MCNT                                    ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_MCNT register update enable */
#define SHRTIM_BDMTUPD_MIDEN                                   ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_MIDEN register update enable */
#define SHRTIM_BDMTUPD_MINTCLR                                 ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_MINTCLR register update enable */
#define SHRTIM_BDMTUPD_MCTRL                                   ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_CTRL register update enable */

/** Bit definition for SHRTIM_BDTAUPD register  **/
#define SHRTIM_BDTAUPD_TAEXEVFLT3                              ((uint32_t)0x00400000U)            /* Bit[22] SHRTIM_TAEXEVFLT3 register update enable. */
#define SHRTIM_BDTAUPD_TACTRL2                                 ((uint32_t)0x00200000U)            /* Bit[21] SHRTIM_TACTRL2 register update enable. */
#define SHRTIM_BDTAUPD_TAFALT                                  ((uint32_t)0x00100000U)            /* Bit[20] SHRTIM_TAFAULT register update enable. */
#define SHRTIM_BDTAUPD_TAOUT                                   ((uint32_t)0x00080000U)            /* Bit[19] SHRTIM_TAOUT register update enable. */
#define SHRTIM_BDTAUPD_TACHOP                                  ((uint32_t)0x00040000U)            /* Bit[18] SHRTIM_TACHOP register update enable. */
#define SHRTIM_BDTAUPD_TACNTRST                                ((uint32_t)0x00020000U)            /* Bit[17] SHRTIM_TACNTRST register update enable */
#define SHRTIM_BDTAUPD_TAEXEVFLT2                              ((uint32_t)0x00010000U)            /* Bit[16] SHRTIM_TAEXEVFLT2 register update enable. */
#define SHRTIM_BDTAUPD_TAEXEVFLT1                              ((uint32_t)0x00008000U)            /* Bit[15] SHRTIM_TAEXEVFLT1 register update enable. */
#define SHRTIM_BDTAUPD_TARST2                                  ((uint32_t)0x00004000U)            /* Bit[14] SHRTIM_TARST2 register update enable. */
#define SHRTIM_BDTAUPD_TASET2                                  ((uint32_t)0x00002000U)            /* Bit[13] SHRTIM_TASET2 register update enable. */
#define SHRTIM_BDTAUPD_TARST1                                  ((uint32_t)0x00001000U)            /* Bit[12] SHRTIM_TARST1 register update enable. */
#define SHRTIM_BDTAUPD_TASET1                                  ((uint32_t)0x00000800U)            /* Bit[11] SHRTIM_TASET1 register update enable. */
#define SHRTIM_BDTAUPD_TADT                                    ((uint32_t)0x00000400U)            /* Bit[10] SHRTIM_TADT register update enable. */
#define SHRTIM_BDTAUPD_TACMP4DAT                               ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_TACMP4DAT register update enable. */
#define SHRTIM_BDTAUPD_TACMP3DAT                               ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_TACMP3DAT register update enable. */
#define SHRTIM_BDTAUPD_TACMP2DAT                               ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_TACMP2DAT register update enable. */
#define SHRTIM_BDTAUPD_TACMP1DAT                               ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_TACMP1DAT register update enable. */
#define SHRTIM_BDTAUPD_TAREPT                                  ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_TAREPT register update enable. */
#define SHRTIM_BDTAUPD_TAPRD                                   ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_TAPRD register update enable. */
#define SHRTIM_BDTAUPD_TACNT                                   ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_TACNT register update enable. */
#define SHRTIM_BDTAUPD_TAIDEN                                  ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_TAIDEN register update enable. */
#define SHRTIM_BDTAUPD_TAINTCLR                                ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_TAINTCLR register update enable. */
#define SHRTIM_BDTAUPD_TACTRL                                  ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_TIMACTRL register update enable. */

/** Bit definition for SHRTIM_BDTBUPD register  **/
#define SHRTIM_BDTBUPD_TBEXEVFLT3                              ((uint32_t)0x00400000U)            /* Bit[22] SHRTIM_TBEXEVFLT3 register update enable. */
#define SHRTIM_BDTBUPD_TBCTRL2                                 ((uint32_t)0x00200000U)            /* Bit[21] SHRTIM_TBCTRL2 register update enable. */
#define SHRTIM_BDTBUPD_TBFALT                                  ((uint32_t)0x00100000U)            /* Bit[20] SHRTIM_TBFAULT register update enable. */
#define SHRTIM_BDTBUPD_TBOUT                                   ((uint32_t)0x00080000U)            /* Bit[19] SHRTIM_TBOUT register update enable. */
#define SHRTIM_BDTBUPD_TBCHOP                                  ((uint32_t)0x00040000U)            /* Bit[18] SHRTIM_TBCHOP register update enable. */
#define SHRTIM_BDTBUPD_TBCNTRST                                ((uint32_t)0x00020000U)            /* Bit[17] SHRTIM_TBCNTRST register update enable */
#define SHRTIM_BDTBUPD_TBEXEVFLT2                              ((uint32_t)0x00010000U)            /* Bit[16] SHRTIM_TBEXEVFLT2 register update enable. */
#define SHRTIM_BDTBUPD_TBEXEVFLT1                              ((uint32_t)0x00008000U)            /* Bit[15] SHRTIM_TBEXEVFLT1 register update enable. */
#define SHRTIM_BDTBUPD_TBRST2                                  ((uint32_t)0x00004000U)            /* Bit[14] SHRTIM_TBRST2 register update enable. */
#define SHRTIM_BDTBUPD_TBSET2                                  ((uint32_t)0x00002000U)            /* Bit[13] SHRTIM_TBSET2 register update enable. */
#define SHRTIM_BDTBUPD_TBRST1                                  ((uint32_t)0x00001000U)            /* Bit[12] SHRTIM_TBRST1 register update enable. */
#define SHRTIM_BDTBUPD_TBSET1                                  ((uint32_t)0x00000800U)            /* Bit[11] SHRTIM_TBSET1 register update enable. */
#define SHRTIM_BDTBUPD_TBDT                                    ((uint32_t)0x00000400U)            /* Bit[10] SHRTIM_TBDT register update enable. */
#define SHRTIM_BDTBUPD_TBCMP4DAT                               ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_TBCMP4DAT register update enable. */
#define SHRTIM_BDTBUPD_TBCMP3DAT                               ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_TBCMP3DAT register update enable. */
#define SHRTIM_BDTBUPD_TBCMP2DAT                               ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_TBCMP2DAT register update enable. */
#define SHRTIM_BDTBUPD_TBCMP1DAT                               ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_TBCMP1DAT register update enable. */
#define SHRTIM_BDTBUPD_TBREPT                                  ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_TBREPT register update enable. */
#define SHRTIM_BDTBUPD_TBPRD                                   ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_TBPRD register update enable. */
#define SHRTIM_BDTBUPD_TBCNT                                   ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_TBCNT register update enable. */
#define SHRTIM_BDTBUPD_TBIDEN                                  ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_TBIDEN register update enable. */
#define SHRTIM_BDTBUPD_TBINTCLR                                ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_TBINTCLR register update enable. */
#define SHRTIM_BDTBUPD_TBCTRL                                  ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_TACTRL register update enable. */

/** Bit definition for SHRTIM_BDTCUPD register  **/
#define SHRTIM_BDTCUPD_TCEXEVFLT3                              ((uint32_t)0x00400000U)            /* Bit[22] SHRTIM_TCEXEVFLT3 register update enable. */
#define SHRTIM_BDTCUPD_TCCTRL2                                 ((uint32_t)0x00200000U)            /* Bit[21] SHRTIM_TCCTRL2 register update enable. */
#define SHRTIM_BDTCUPD_TCFALT                                  ((uint32_t)0x00100000U)            /* Bit[20] SHRTIM_TCFAULT register update enable. */
#define SHRTIM_BDTCUPD_TCOUT                                   ((uint32_t)0x00080000U)            /* Bit[19] SHRTIM_TCOUT register update enable. */
#define SHRTIM_BDTCUPD_TCCHOP                                  ((uint32_t)0x00040000U)            /* Bit[18] SHRTIM_TCCHOP register update enable. */
#define SHRTIM_BDTCUPD_TCCNTRST                                ((uint32_t)0x00020000U)            /* Bit[17] SHRTIM_TCCNTRST register update enable */
#define SHRTIM_BDTCUPD_TCEXEVFLT2                              ((uint32_t)0x00010000U)            /* Bit[16] SHRTIM_TCEXEVFLT2 register update enable. */
#define SHRTIM_BDTCUPD_TCEXEVFLT1                              ((uint32_t)0x00008000U)            /* Bit[15] SHRTIM_TCEXEVFLT1 register update enable. */
#define SHRTIM_BDTCUPD_TCRST2                                  ((uint32_t)0x00004000U)            /* Bit[14] SHRTIM_TCRST2 register update enable. */
#define SHRTIM_BDTCUPD_TCSET2                                  ((uint32_t)0x00002000U)            /* Bit[13] SHRTIM_TCSET2 register update enable. */
#define SHRTIM_BDTCUPD_TCRST1                                  ((uint32_t)0x00001000U)            /* Bit[12] SHRTIM_TCRST1 register update enable. */
#define SHRTIM_BDTCUPD_TCSET1                                  ((uint32_t)0x00000800U)            /* Bit[11] SHRTIM_TCSET1 register update enable. */
#define SHRTIM_BDTCUPD_TCDT                                    ((uint32_t)0x00000400U)            /* Bit[10] SHRTIM_TCDT register update enable. */
#define SHRTIM_BDTCUPD_TCCMP4DAT                               ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_TCCMP4DAT register update enable. */
#define SHRTIM_BDTCUPD_TCCMP3DAT                               ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_TCCMP3DAT register update enable. */
#define SHRTIM_BDTCUPD_TCCMP2DAT                               ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_TCCMP2DAT register update enable. */
#define SHRTIM_BDTCUPD_TCCMP1DAT                               ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_TCCMP1DAT register update enable. */
#define SHRTIM_BDTCUPD_TCREPT                                  ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_TCREPT register update enable. */
#define SHRTIM_BDTCUPD_TCPRD                                   ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_TCPRD register update enable. */
#define SHRTIM_BDTCUPD_TCCNT                                   ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_TCCNT register update enable. */
#define SHRTIM_BDTCUPD_TCIDEN                                  ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_TCIDEN register update enable. */
#define SHRTIM_BDTCUPD_TCINTCLR                                ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_TCINTCLR register update enable. */
#define SHRTIM_BDTCUPD_TCCTRL                                  ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_TCCTRL register update enable. */

/** Bit definition for SHRTIM_BDTDUPD register  **/
#define SHRTIM_BDTDUPD_TDEXEVFLT3                              ((uint32_t)0x00400000U)            /* Bit[22] SHRTIM_TDEXEVFLT3 register update enable. */
#define SHRTIM_BDTDUPD_TDCTRL2                                 ((uint32_t)0x00200000U)            /* Bit[21] SHRTIM_TDCTRL2 register update enable. */
#define SHRTIM_BDTDUPD_TDFALT                                  ((uint32_t)0x00100000U)            /* Bit[20] SHRTIM_TDFAULT register update enable. */
#define SHRTIM_BDTDUPD_TDOUT                                   ((uint32_t)0x00080000U)            /* Bit[19] SHRTIM_TDOUT register update enable. */
#define SHRTIM_BDTDUPD_TDCHOP                                  ((uint32_t)0x00040000U)            /* Bit[18] SHRTIM_TDCHOP register update enable. */
#define SHRTIM_BDTDUPD_TDCNTRST                                ((uint32_t)0x00020000U)            /* Bit[17] SHRTIM_TDCNTRST register update enable */
#define SHRTIM_BDTDUPD_TDEXEVFLT2                              ((uint32_t)0x00010000U)            /* Bit[16] SHRTIM_TDEXEVFLT2 register update enable. */
#define SHRTIM_BDTDUPD_TDEXEVFLT1                              ((uint32_t)0x00008000U)            /* Bit[15] SHRTIM_TDEXEVFLT1 register update enable. */
#define SHRTIM_BDTDUPD_TDRST2                                  ((uint32_t)0x00004000U)            /* Bit[14] SHRTIM_TDRST2 register update enable. */
#define SHRTIM_BDTDUPD_TDSET2                                  ((uint32_t)0x00002000U)            /* Bit[13] SHRTIM_TDSET2 register update enable. */
#define SHRTIM_BDTDUPD_TDRST1                                  ((uint32_t)0x00001000U)            /* Bit[12] SHRTIM_TDRST1 register update enable. */
#define SHRTIM_BDTDUPD_TDSET1                                  ((uint32_t)0x00000800U)            /* Bit[11] SHRTIM_TDSET1 register update enable. */
#define SHRTIM_BDTDUPD_TDDT                                    ((uint32_t)0x00000400U)            /* Bit[10] SHRTIM_TDDT register update enable. */
#define SHRTIM_BDTDUPD_TDCMP4DAT                               ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_TDCMP4DAT register update enable. */
#define SHRTIM_BDTDUPD_TDCMP3DAT                               ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_TDCMP3DAT register update enable. */
#define SHRTIM_BDTDUPD_TDCMP2DAT                               ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_TDCMP2DAT register update enable. */
#define SHRTIM_BDTDUPD_TDCMP1DAT                               ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_TDCMP1DAT register update enable. */
#define SHRTIM_BDTDUPD_TDREPT                                  ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_TDREPT register update enable. */
#define SHRTIM_BDTDUPD_TDPRD                                   ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_TDPRD register update enable. */
#define SHRTIM_BDTDUPD_TDCNT                                   ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_TDCNT register update enable. */
#define SHRTIM_BDTDUPD_TDIDEN                                  ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_TDIDEN register update enable. */
#define SHRTIM_BDTDUPD_TDINTDLR                                ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_TDINTDLR register update enable. */
#define SHRTIM_BDTDUPD_TDCTRL                                  ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_TDCTRL register update enable. */

/** Bit definition for SHRTIM_BDTEUPD register  **/
#define SHRTIM_BDTEUPD_TEEXEVFLT3                              ((uint32_t)0x00400000U)            /* Bit[22] SHRTIM_TEEXEVFLT3 register update enable. */
#define SHRTIM_BDTEUPD_TECTRL2                                 ((uint32_t)0x00200000U)            /* Bit[21] SHRTIM_TECTRL2 register update enable. */
#define SHRTIM_BDTEUPD_TEFALT                                  ((uint32_t)0x00100000U)            /* Bit[20] SHRTIM_TEFAULT register update enable. */
#define SHRTIM_BDTEUPD_TEOUT                                   ((uint32_t)0x00080000U)            /* Bit[19] SHRTIM_TEOUT register update enable. */
#define SHRTIM_BDTEUPD_TECHOP                                  ((uint32_t)0x00040000U)            /* Bit[18] SHRTIM_TECHOP register update enable. */
#define SHRTIM_BDTEUPD_TECNTRST                                ((uint32_t)0x00020000U)            /* Bit[17] SHRTIM_TECNTRST register update enable */
#define SHRTIM_BDTEUPD_TEEXEVFLT2                              ((uint32_t)0x00010000U)            /* Bit[16] SHRTIM_TEEXEVFLT2 register update enable. */
#define SHRTIM_BDTEUPD_TEEXEVFLT1                              ((uint32_t)0x00008000U)            /* Bit[15] SHRTIM_TEEXEVFLT1 register update enable. */
#define SHRTIM_BDTEUPD_TERST2                                  ((uint32_t)0x00004000U)            /* Bit[14] SHRTIM_TERST2 register update enable. */
#define SHRTIM_BDTEUPD_TESET2                                  ((uint32_t)0x00002000U)            /* Bit[13] SHRTIM_TESET2 register update enable. */
#define SHRTIM_BDTEUPD_TERST1                                  ((uint32_t)0x00001000U)            /* Bit[12] SHRTIM_TERST1 register update enable. */
#define SHRTIM_BDTEUPD_TESET1                                  ((uint32_t)0x00000800U)            /* Bit[11] SHRTIM_TESET1 register update enable. */
#define SHRTIM_BDTEUPD_TEDT                                    ((uint32_t)0x00000400U)            /* Bit[10] SHRTIM_TEDT register update enable. */
#define SHRTIM_BDTEUPD_TECMP4DAT                               ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_TECMP4DAT register update enable. */
#define SHRTIM_BDTEUPD_TECMP3DAT                               ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_TECMP3DAT register update enable. */
#define SHRTIM_BDTEUPD_TECMP2DAT                               ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_TECMP2DAT register update enable. */
#define SHRTIM_BDTEUPD_TECMP1DAT                               ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_TECMP1DAT register update enable. */
#define SHRTIM_BDTEUPD_TEREPT                                  ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_TEREPT register update enable. */
#define SHRTIM_BDTEUPD_TEPRD                                   ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_TEPRD register update enable. */
#define SHRTIM_BDTEUPD_TECNT                                   ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_TECNT register update enable. */
#define SHRTIM_BDTEUPD_TEIDEN                                  ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_TEIDEN register update enable. */
#define SHRTIM_BDTEUPD_TEINTELR                                ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_TEINTELR register update enable. */
#define SHRTIM_BDTEUPD_TECTRL                                  ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_TECTRL register update enable. */

/** Bit definition for SHRTIM_BDTFUPD register  **/
#define SHRTIM_BDTFUPD_TFEXEVFLT3                              ((uint32_t)0x00400000U)            /* Bit[22] SHRTIM_TFEXEVFLT3 register update enable. */
#define SHRTIM_BDTFUPD_TFCTRL2                                 ((uint32_t)0x00200000U)            /* Bit[21] SHRTIM_TFCTRL2 register update enable. */
#define SHRTIM_BDTFUPD_TFFALT                                  ((uint32_t)0x00100000U)            /* Bit[20] SHRTIM_TFFAULT register update enable. */
#define SHRTIM_BDTFUPD_TFOUT                                   ((uint32_t)0x00080000U)            /* Bit[19] SHRTIM_TFOUT register update enable. */
#define SHRTIM_BDTFUPD_TFCHOP                                  ((uint32_t)0x00040000U)            /* Bit[18] SHRTIM_TFCHOP register update enable. */
#define SHRTIM_BDTFUPD_TFCNTRST                                ((uint32_t)0x00020000U)            /* Bit[17] SHRTIM_TFCNTRST register update enable */
#define SHRTIM_BDTFUPD_TFEXEVFLT2                              ((uint32_t)0x00010000U)            /* Bit[16] SHRTIM_TFEXEVFLT2 register update enable. */
#define SHRTIM_BDTFUPD_TFEXEVFLT1                              ((uint32_t)0x00008000U)            /* Bit[15] SHRTIM_TFEXEVFLT1 register update enable. */
#define SHRTIM_BDTFUPD_TFRST2                                  ((uint32_t)0x00004000U)            /* Bit[14] SHRTIM_TFRST2 register update enable. */
#define SHRTIM_BDTFUPD_TFSET2                                  ((uint32_t)0x00002000U)            /* Bit[13] SHRTIM_TFSET2 register update enable. */
#define SHRTIM_BDTFUPD_TFRST1                                  ((uint32_t)0x00001000U)            /* Bit[12] SHRTIM_TFRST1 register update enable. */
#define SHRTIM_BDTFUPD_TFSET1                                  ((uint32_t)0x00000800U)            /* Bit[11] SHRTIM_TFSET1 register update enable. */
#define SHRTIM_BDTFUPD_TFDT                                    ((uint32_t)0x00000400U)            /* Bit[10] SHRTIM_TFDT register update enable. */
#define SHRTIM_BDTFUPD_TFCMP4DAT                               ((uint32_t)0x00000200U)            /* Bit[9] SHRTIM_TFCMP4DAT register update enable. */
#define SHRTIM_BDTFUPD_TFCMP3DAT                               ((uint32_t)0x00000100U)            /* Bit[8] SHRTIM_TFCMP3DAT register update enable. */
#define SHRTIM_BDTFUPD_TFCMP2DAT                               ((uint32_t)0x00000080U)            /* Bit[7] SHRTIM_TFCMP2DAT register update enable. */
#define SHRTIM_BDTFUPD_TFCMP1DAT                               ((uint32_t)0x00000040U)            /* Bit[6] SHRTIM_TFCMP1DAT register update enable. */
#define SHRTIM_BDTFUPD_TFREPT                                  ((uint32_t)0x00000020U)            /* Bit[5] SHRTIM_TFREPT register update enable. */
#define SHRTIM_BDTFUPD_TFPRD                                   ((uint32_t)0x00000010U)            /* Bit[4] SHRTIM_TFPRD register update enable. */
#define SHRTIM_BDTFUPD_TFCNT                                   ((uint32_t)0x00000008U)            /* Bit[3] SHRTIM_TFCNT register update enable. */
#define SHRTIM_BDTFUPD_TFIDEN                                  ((uint32_t)0x00000004U)            /* Bit[2] SHRTIM_TFIDEN register update enable. */
#define SHRTIM_BDTFUPD_TFINTFLR                                ((uint32_t)0x00000002U)            /* Bit[1] SHRTIM_TFINTFLR register update enable. */
#define SHRTIM_BDTFUPD_TFCTRL                                  ((uint32_t)0x00000001U)            /* Bit[0] SHRTIM_TFCTRL register update enable. */

/** Bit definition for SHRTIM_BDDAT register  **/
#define SHRTIM_BDDAT_BDMADATA                                ((uint32_t)0xFFFFFFFFU)            /* Bit[31:0] Burst DMA data register */
#define SHRTIM_BDDAT_BDMADATA_0                              ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_BDDAT_BDMADATA_1                              ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_BDDAT_BDMADATA_2                              ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_BDDAT_BDMADATA_3                              ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_BDDAT_BDMADATA_4                              ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_BDDAT_BDMADATA_5                              ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_BDDAT_BDMADATA_6                              ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_BDDAT_BDMADATA_7                              ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_BDDAT_BDMADATA_8                              ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_BDDAT_BDMADATA_9                              ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_BDDAT_BDMADATA_10                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_BDDAT_BDMADATA_11                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_BDDAT_BDMADATA_12                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_BDDAT_BDMADATA_13                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_BDDAT_BDMADATA_14                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_BDDAT_BDMADATA_15                             ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_BDDAT_BDMADATA_16                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_BDDAT_BDMADATA_17                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_BDDAT_BDMADATA_18                             ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_BDDAT_BDMADATA_19                             ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_BDDAT_BDMADATA_20                             ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_BDDAT_BDMADATA_21                             ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_BDDAT_BDMADATA_22                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_BDDAT_BDMADATA_23                             ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_BDDAT_BDMADATA_24                             ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_BDDAT_BDMADATA_25                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_BDDAT_BDMADATA_26                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_BDDAT_BDMADATA_27                             ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_BDDAT_BDMADATA_28                             ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_BDDAT_BDMADATA_29                             ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_BDDAT_BDMADATA_30                             ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_BDDAT_BDMADATA_31                             ((uint32_t)0x80000000U)            /* Bit31 */

/** Bit definition for SHRTIM_ADTGEX1 register  **/
#define SHRTIM_ADTGEX1_ADTG9SRC                              ((uint32_t)0x003F0000U)            /* Bit[21:16] Description */
#define SHRTIM_ADTGEX1_ADTG9SRC_0                            ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_ADTGEX1_ADTG9SRC_1                            ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_ADTGEX1_ADTG9SRC_2                            ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_ADTGEX1_ADTG9SRC_3                            ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_ADTGEX1_ADTG9SRC_4                            ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_ADTGEX1_ADTG9SRC_5                            ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_ADTGEX1_ADTG7SRC                              ((uint32_t)0x00003F00U)            /* Bit[13:8] Description */
#define SHRTIM_ADTGEX1_ADTG7SRC_0                            ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_ADTGEX1_ADTG7SRC_1                            ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_ADTGEX1_ADTG7SRC_2                            ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_ADTGEX1_ADTG7SRC_3                            ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_ADTGEX1_ADTG7SRC_4                            ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_ADTGEX1_ADTG7SRC_5                            ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_ADTGEX1_ADTG5SRC                              ((uint32_t)0x0000003FU)            /* Bit[5:0] Trigger on master compare 1 */
#define SHRTIM_ADTGEX1_ADTG5SRC_0                            ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_ADTGEX1_ADTG5SRC_1                            ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_ADTGEX1_ADTG5SRC_2                            ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_ADTGEX1_ADTG5SRC_3                            ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_ADTGEX1_ADTG5SRC_4                            ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_ADTGEX1_ADTG5SRC_5                            ((uint32_t)0x00000020U)            /* Bit5 */

/** Bit definition for SHRTIM_ADTGEX2 register  **/
#define SHRTIM_ADTGEX2_ADTG10SRC                             ((uint32_t)0x003F0000U)            /* Bit[21:16] Description */
#define SHRTIM_ADTGEX2_ADTG10SRC_0                           ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_ADTGEX2_ADTG10SRC_1                           ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_ADTGEX2_ADTG10SRC_2                           ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_ADTGEX2_ADTG10SRC_3                           ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_ADTGEX2_ADTG10SRC_4                           ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_ADTGEX2_ADTG10SRC_5                           ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_ADTGEX2_ADTG8SRC                              ((uint32_t)0x00003F00U)            /* Bit[13:8] Description */
#define SHRTIM_ADTGEX2_ADTG8SRC_0                            ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_ADTGEX2_ADTG8SRC_1                            ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_ADTGEX2_ADTG8SRC_2                            ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_ADTGEX2_ADTG8SRC_3                            ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_ADTGEX2_ADTG8SRC_4                            ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_ADTGEX2_ADTG8SRC_5                            ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_ADTGEX2_ADTG6SRC                              ((uint32_t)0x0000003FU)            /* Bit[5:0] Trigger on master compare 1 */
#define SHRTIM_ADTGEX2_ADTG6SRC_0                            ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_ADTGEX2_ADTG6SRC_1                            ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_ADTGEX2_ADTG6SRC_2                            ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_ADTGEX2_ADTG6SRC_3                            ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_ADTGEX2_ADTG6SRC_4                            ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_ADTGEX2_ADTG6SRC_5                            ((uint32_t)0x00000020U)            /* Bit5 */

/** Bit definition for SHRTIM_ADTGUPD register  **/
#define SHRTIM_ADTGUPD_ADTG10UPDSRC                           ((uint32_t)0x00700000U)            /* Bit[22:20] ADC trigger 10 update source */
#define SHRTIM_ADTGUPD_ADTG10UPDSRC_0                         ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_ADTGUPD_ADTG10UPDSRC_1                         ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_ADTGUPD_ADTG10UPDSRC_2                         ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_ADTGUPD_ADTG9UPDSRC                            ((uint32_t)0x00070000U)            /* Bit[18:16] ADC trigger 9 update source */
#define SHRTIM_ADTGUPD_ADTG9UPDSRC_0                          ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_ADTGUPD_ADTG9UPDSRC_1                          ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_ADTGUPD_ADTG9UPDSRC_2                          ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_ADTGUPD_ADTG8UPDSRC                            ((uint32_t)0x00007000U)            /* Bit[14:12] ADC trigger 8 update source */
#define SHRTIM_ADTGUPD_ADTG8UPDSRC_0                          ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_ADTGUPD_ADTG8UPDSRC_1                          ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_ADTGUPD_ADTG8UPDSRC_2                          ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_ADTGUPD_ADTG7UPDSRC                            ((uint32_t)0x00000700U)            /* Bit[10:8] ADC trigger 7 update source */
#define SHRTIM_ADTGUPD_ADTG7UPDSRC_0                          ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_ADTGUPD_ADTG7UPDSRC_1                          ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_ADTGUPD_ADTG7UPDSRC_2                          ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_ADTGUPD_ADTG6UPDSRC                            ((uint32_t)0x00000070U)            /* Bit[6:4] ADC trigger 6 update source */
#define SHRTIM_ADTGUPD_ADTG6UPDSRC_0                          ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_ADTGUPD_ADTG6UPDSRC_1                          ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_ADTGUPD_ADTG6UPDSRC_2                          ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_ADTGUPD_ADTG5UPDSRC                            ((uint32_t)0x00000007U)            /* Bit[2:0] ADC trigger 5 update source */
#define SHRTIM_ADTGUPD_ADTG5UPDSRC_0                          ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_ADTGUPD_ADTG5UPDSRC_1                          ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_ADTGUPD_ADTG5UPDSRC_2                          ((uint32_t)0x00000004U)            /* Bit2 */

/** Bit definition for SHRTIM_ADCPSC1 register  **/
#define SHRTIM_ADCPSC1_ADC5PSC                                 ((uint32_t)0x1F000000U)            /* Bit[28:24] ADC trigger 5 post scaler */
#define SHRTIM_ADCPSC1_ADC5PSC_0                               ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_ADCPSC1_ADC5PSC_1                               ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_ADCPSC1_ADC5PSC_2                               ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_ADCPSC1_ADC5PSC_3                               ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_ADCPSC1_ADC5PSC_4                               ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_ADCPSC1_ADC4PSC                                 ((uint32_t)0x007C0000U)            /* Bit[22:18] ADC trigger 4 post scaler */
#define SHRTIM_ADCPSC1_ADC4PSC_0                               ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_ADCPSC1_ADC4PSC_1                               ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_ADCPSC1_ADC4PSC_2                               ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_ADCPSC1_ADC4PSC_3                               ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_ADCPSC1_ADC4PSC_4                               ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_ADCPSC1_ADC3PSC                                 ((uint32_t)0x0001F000U)            /* Bit[16:12] ADC trigger 3 post scaler */
#define SHRTIM_ADCPSC1_ADC3PSC_0                               ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_ADCPSC1_ADC3PSC_1                               ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_ADCPSC1_ADC3PSC_2                               ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_ADCPSC1_ADC3PSC_3                               ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_ADCPSC1_ADC3PSC_4                               ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_ADCPSC1_ADC2PSC                                 ((uint32_t)0x000007C0U)            /* Bit[10:6] ADC trigger 2 post scaler */
#define SHRTIM_ADCPSC1_ADC2PSC_0                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_ADCPSC1_ADC2PSC_1                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_ADCPSC1_ADC2PSC_2                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_ADCPSC1_ADC2PSC_3                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_ADCPSC1_ADC2PSC_4                               ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_ADCPSC1_ADC1PSC                                 ((uint32_t)0x0000001FU)            /* Bit[4:0] ADC trigger 1 post scaler */
#define SHRTIM_ADCPSC1_ADC1PSC_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_ADCPSC1_ADC1PSC_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_ADCPSC1_ADC1PSC_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_ADCPSC1_ADC1PSC_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_ADCPSC1_ADC1PSC_4                               ((uint32_t)0x00000010U)            /* Bit4 */

/** Bit definition for SHRTIM_ADCPSC2 register  **/
#define SHRTIM_ADCPSC2_ADC10PSC                                ((uint32_t)0x1F000000U)            /* Bit[28:24] ADC trigger 10 post scaler */
#define SHRTIM_ADCPSC2_ADC10PSC_0                              ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_ADCPSC2_ADC10PSC_1                              ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_ADCPSC2_ADC10PSC_2                              ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_ADCPSC2_ADC10PSC_3                              ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_ADCPSC2_ADC10PSC_4                              ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_ADCPSC2_ADC9PSC                                 ((uint32_t)0x007C0000U)            /* Bit[22:18] ADC trigger 9 post scaler */
#define SHRTIM_ADCPSC2_ADC9PSC_0                               ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_ADCPSC2_ADC9PSC_1                               ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_ADCPSC2_ADC9PSC_2                               ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_ADCPSC2_ADC9PSC_3                               ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_ADCPSC2_ADC9PSC_4                               ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_ADCPSC2_ADC8PSC                                 ((uint32_t)0x0001F000U)            /* Bit[16:12] ADC trigger 8 post scaler */
#define SHRTIM_ADCPSC2_ADC8PSC_0                               ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_ADCPSC2_ADC8PSC_1                               ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_ADCPSC2_ADC8PSC_2                               ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_ADCPSC2_ADC8PSC_3                               ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_ADCPSC2_ADC8PSC_4                               ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_ADCPSC2_ADC7PSC                                 ((uint32_t)0x000007C0U)            /* Bit[10:6] ADC trigger 7 post scaler */
#define SHRTIM_ADCPSC2_ADC7PSC_0                               ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_ADCPSC2_ADC7PSC_1                               ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_ADCPSC2_ADC7PSC_2                               ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_ADCPSC2_ADC7PSC_3                               ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_ADCPSC2_ADC7PSC_4                               ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_ADCPSC2_ADC6PSC                                 ((uint32_t)0x0000001FU)            /* Bit[4:0] ADC trigger 6 post scaler */
#define SHRTIM_ADCPSC2_ADC6PSC_0                               ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_ADCPSC2_ADC6PSC_1                               ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_ADCPSC2_ADC6PSC_2                               ((uint32_t)0x00000004U)            /* Bit2 */
#define SHRTIM_ADCPSC2_ADC6PSC_3                               ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_ADCPSC2_ADC6PSC_4                               ((uint32_t)0x00000010U)            /* Bit4 */

/** Bit definition for SHRTIM_SFTFALT register  **/
#define SHRTIM_SFTFALT_SFTFALT6                                ((uint32_t)0x00000020U)            /* Bit[5] Software fault 6 */
#define SHRTIM_SFTFALT_SFTFALT5                                ((uint32_t)0x00000010U)            /* Bit[4] Software fault 5 */
#define SHRTIM_SFTFALT_SFTFALT4                                ((uint32_t)0x00000008U)            /* Bit[3] Software fault 4 */
#define SHRTIM_SFTFALT_SFTFALT3                                ((uint32_t)0x00000004U)            /* Bit[2] Software fault 3 */
#define SHRTIM_SFTFALT_SFTFALT2                                ((uint32_t)0x00000002U)            /* Bit[1] Software fault 2 */
#define SHRTIM_SFTFALT_SFTFALT1                                ((uint32_t)0x00000001U)            /* Bit[0] Software fault 1 */

/** Bit definition for SHRTIM_SFTDP register  **/
#define SHRTIM_SFTDP_SFTDPF2                               ((uint32_t)0x00000800U)            /* Bit[11] Software delay protection F for channel 2 */
#define SHRTIM_SFTDP_SFTDPE2                               ((uint32_t)0x00000400U)            /* Bit[10] Software delay protection E for channel 2 */
#define SHRTIM_SFTDP_SFTDPD2                               ((uint32_t)0x00000200U)            /* Bit[9] Software delay protection D for channel 2 */
#define SHRTIM_SFTDP_SFTDPC2                               ((uint32_t)0x00000100U)            /* Bit[8] Software delay protection C for channel 2 */
#define SHRTIM_SFTDP_SFTDPB2                               ((uint32_t)0x00000080U)            /* Bit[7] Software delay protection B for channel 2 */
#define SHRTIM_SFTDP_SFTDPA2                               ((uint32_t)0x00000040U)            /* Bit[6] Software delay protection A for channel 2 */
#define SHRTIM_SFTDP_SFTDPF1                               ((uint32_t)0x00000020U)            /* Bit[5] Software delay protection F for channel 1 */
#define SHRTIM_SFTDP_SFTDPE1                               ((uint32_t)0x00000010U)            /* Bit[4] Software delay protection E for channel 1 */
#define SHRTIM_SFTDP_SFTDPD1                               ((uint32_t)0x00000008U)            /* Bit[3] Software delay protection D for channel 1 */
#define SHRTIM_SFTDP_SFTDPC1                               ((uint32_t)0x00000004U)            /* Bit[2] Software delay protection C for channel 1 */
#define SHRTIM_SFTDP_SFTDPB1                               ((uint32_t)0x00000002U)            /* Bit[1] Software delay protection B for channel 1 */
#define SHRTIM_SFTDP_SFTDPA1                               ((uint32_t)0x00000001U)            /* Bit[0] Software delay protection A for channel 1 */

/** Bit definition for SHRTIM_FALTIN5 register  **/
#define SHRTIM_FALTIN5_FALT6CSEL                               ((uint32_t)0x00700000U)            /* Bit[22:20] Analog comp x sellect for fault 6 */
#define SHRTIM_FALTIN5_FALT6CSEL_0                             ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_FALTIN5_FALT6CSEL_1                             ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_FALTIN5_FALT6CSEL_2                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_FALTIN5_FALT5CSEL                               ((uint32_t)0x00070000U)            /* Bit[18:16] Analog comp x sellect for fault5 */
#define SHRTIM_FALTIN5_FALT5CSEL_0                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_FALTIN5_FALT5CSEL_1                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_FALTIN5_FALT5CSEL_2                             ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_FALTIN5_FALT4CSEL                               ((uint32_t)0x00007000U)            /* Bit[14:12] Analog comp x sellect for fault 4 */
#define SHRTIM_FALTIN5_FALT4CSEL_0                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_FALTIN5_FALT4CSEL_1                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_FALTIN5_FALT4CSEL_2                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_FALTIN5_FALT3CSEL                               ((uint32_t)0x00000700U)            /* Bit[10:8] Analog comp x sellect for fault3 */
#define SHRTIM_FALTIN5_FALT3CSEL_0                             ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_FALTIN5_FALT3CSEL_1                             ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_FALTIN5_FALT3CSEL_2                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_FALTIN5_FALT2CSEL                               ((uint32_t)0x00000070U)            /* Bit[6:4] Analog comp x sellect for fault2 */
#define SHRTIM_FALTIN5_FALT2CSEL_0                             ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_FALTIN5_FALT2CSEL_1                             ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_FALTIN5_FALT2CSEL_2                             ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_FALTIN5_FALT1CSEL                               ((uint32_t)0x00000007U)            /* Bit[2:0] Analog comp x sellect for fault1 */
#define SHRTIM_FALTIN5_FALT1CSEL_0                             ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_FALTIN5_FALT1CSEL_1                             ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_FALTIN5_FALT1CSEL_2                             ((uint32_t)0x00000004U)            /* Bit2 */

/** Bit definition for SHRTIM_EXEVCTRL5 register  **/
#define SHRTIM_EXEVCTRL5_EXEV10CSEL                              ((uint32_t)0x38000000U)            /* Bit[29:27] Analog comp x sellect for external event 10 */
#define SHRTIM_EXEVCTRL5_EXEV10CSEL_0                            ((uint32_t)0x08000000U)            /* Bit27 */
#define SHRTIM_EXEVCTRL5_EXEV10CSEL_1                            ((uint32_t)0x10000000U)            /* Bit28 */
#define SHRTIM_EXEVCTRL5_EXEV10CSEL_2                            ((uint32_t)0x20000000U)            /* Bit29 */
#define SHRTIM_EXEVCTRL5_EXEV9CSEL                               ((uint32_t)0x07000000U)            /* Bit[26:24] Analog comp x sellect  for external event 9 */
#define SHRTIM_EXEVCTRL5_EXEV9CSEL_0                             ((uint32_t)0x01000000U)            /* Bit24 */
#define SHRTIM_EXEVCTRL5_EXEV9CSEL_1                             ((uint32_t)0x02000000U)            /* Bit25 */
#define SHRTIM_EXEVCTRL5_EXEV9CSEL_2                             ((uint32_t)0x04000000U)            /* Bit26 */
#define SHRTIM_EXEVCTRL5_EXEV8CSEL                               ((uint32_t)0x00E00000U)            /* Bit[23:21] Analog comp x sellect  for external event 8 */
#define SHRTIM_EXEVCTRL5_EXEV8CSEL_0                             ((uint32_t)0x00200000U)            /* Bit21 */
#define SHRTIM_EXEVCTRL5_EXEV8CSEL_1                             ((uint32_t)0x00400000U)            /* Bit22 */
#define SHRTIM_EXEVCTRL5_EXEV8CSEL_2                             ((uint32_t)0x00800000U)            /* Bit23 */
#define SHRTIM_EXEVCTRL5_EXEV7CSEL                               ((uint32_t)0x001C0000U)            /* Bit[20:18] Analog comp x sellect  for external event 7 */
#define SHRTIM_EXEVCTRL5_EXEV7CSEL_0                             ((uint32_t)0x00040000U)            /* Bit18 */
#define SHRTIM_EXEVCTRL5_EXEV7CSEL_1                             ((uint32_t)0x00080000U)            /* Bit19 */
#define SHRTIM_EXEVCTRL5_EXEV7CSEL_2                             ((uint32_t)0x00100000U)            /* Bit20 */
#define SHRTIM_EXEVCTRL5_EXEV6CSEL                               ((uint32_t)0x00038000U)            /* Bit[17:15] Analog comp x sellect  for external event 6 */
#define SHRTIM_EXEVCTRL5_EXEV6CSEL_0                             ((uint32_t)0x00008000U)            /* Bit15 */
#define SHRTIM_EXEVCTRL5_EXEV6CSEL_1                             ((uint32_t)0x00010000U)            /* Bit16 */
#define SHRTIM_EXEVCTRL5_EXEV6CSEL_2                             ((uint32_t)0x00020000U)            /* Bit17 */
#define SHRTIM_EXEVCTRL5_EXEV5CSEL                               ((uint32_t)0x00007000U)            /* Bit[14:12] Analog comp x sellect for external event 5 */
#define SHRTIM_EXEVCTRL5_EXEV5CSEL_0                             ((uint32_t)0x00001000U)            /* Bit12 */
#define SHRTIM_EXEVCTRL5_EXEV5CSEL_1                             ((uint32_t)0x00002000U)            /* Bit13 */
#define SHRTIM_EXEVCTRL5_EXEV5CSEL_2                             ((uint32_t)0x00004000U)            /* Bit14 */
#define SHRTIM_EXEVCTRL5_EXEV4CSEL                               ((uint32_t)0x00000E00U)            /* Bit[11:9] Analog comp x sellect for external event 4 */
#define SHRTIM_EXEVCTRL5_EXEV4CSEL_0                             ((uint32_t)0x00000200U)            /* Bit9 */
#define SHRTIM_EXEVCTRL5_EXEV4CSEL_1                             ((uint32_t)0x00000400U)            /* Bit10 */
#define SHRTIM_EXEVCTRL5_EXEV4CSEL_2                             ((uint32_t)0x00000800U)            /* Bit11 */
#define SHRTIM_EXEVCTRL5_EXEV3CSEL                               ((uint32_t)0x000001C0U)            /* Bit[8:6] Analog comp x sellect  for external event 3 */
#define SHRTIM_EXEVCTRL5_EXEV3CSEL_0                             ((uint32_t)0x00000040U)            /* Bit6 */
#define SHRTIM_EXEVCTRL5_EXEV3CSEL_1                             ((uint32_t)0x00000080U)            /* Bit7 */
#define SHRTIM_EXEVCTRL5_EXEV3CSEL_2                             ((uint32_t)0x00000100U)            /* Bit8 */
#define SHRTIM_EXEVCTRL5_EXEV2CSEL                               ((uint32_t)0x00000038U)            /* Bit[5:3] Analog comp x sellect  for external event 2 */
#define SHRTIM_EXEVCTRL5_EXEV2CSEL_0                             ((uint32_t)0x00000008U)            /* Bit3 */
#define SHRTIM_EXEVCTRL5_EXEV2CSEL_1                             ((uint32_t)0x00000010U)            /* Bit4 */
#define SHRTIM_EXEVCTRL5_EXEV2CSEL_2                             ((uint32_t)0x00000020U)            /* Bit5 */
#define SHRTIM_EXEVCTRL5_EXEV1CSEL                               ((uint32_t)0x00000007U)            /* Bit[2:0] Analog comp x sellect for external event 1 */
#define SHRTIM_EXEVCTRL5_EXEV1CSEL_0                             ((uint32_t)0x00000001U)            /* Bit0 */
#define SHRTIM_EXEVCTRL5_EXEV1CSEL_1                             ((uint32_t)0x00000002U)            /* Bit1 */
#define SHRTIM_EXEVCTRL5_EXEV1CSEL_2                             ((uint32_t)0x00000004U)            /* Bit2 */

/* Bit definition for SHRTIM_EXTEND register */
#define SHRTIM_EXTEND_AUXBYPA                                    ((uint32_t)0xC0000000U)            /* Bit[31:30] Auxiliary output bypass */
#define SHRTIM_EXTEND_AUXBYPA_0                                  ((uint32_t)0x40000000U)            /* Bit30 */
#define SHRTIM_EXTEND_AUXBYPA_1                                  ((uint32_t)0x80000000U)            /* Bit31 */

/*** Low-Power Timer ***/

/** Bit definition for LPTIM_INTSTS register **/
#define LPTIM_INTSTS_CMPM       ((uint32_t)0x00000001U) /* Compare match */
#define LPTIM_INTSTS_ARRM       ((uint32_t)0x00000002U) /* Autoreload match */
#define LPTIM_INTSTS_EXTRIG     ((uint32_t)0x00000004U) /* External trigger edge event */
#define LPTIM_INTSTS_CMPUPD     ((uint32_t)0x00000008U) /* Compare register update OK */
#define LPTIM_INTSTS_ARRUPD     ((uint32_t)0x00000010U) /* Autoreload register update OK */
#define LPTIM_INTSTS_UP         ((uint32_t)0x00000020U) /* Counter direction change down to up */
#define LPTIM_INTSTS_DOWN       ((uint32_t)0x00000040U) /* Counter direction change up to down */

/** Bit definition for LPTIM_INTCLR register **/
#define LPTIM_INTCLR_CMPMCF     ((uint32_t)0x00000001U) /* Compare match Clear Flag */
#define LPTIM_INTCLR_ARRMCF     ((uint32_t)0x00000002U) /* Autoreload match Clear Flag */
#define LPTIM_INTCLR_EXTRIGCF   ((uint32_t)0x00000004U) /* External trigger edge event Clear Flag */
#define LPTIM_INTCLR_CMPUPDCF   ((uint32_t)0x00000008U) /* Compare register update OK Clear Flag */
#define LPTIM_INTCLR_ARRUPDCF   ((uint32_t)0x00000010U) /* Autoreload register update OK Clear Flag */
#define LPTIM_INTCLR_UPCF       ((uint32_t)0x00000020U) /* Counter direction change down to up Clear Flag */
#define LPTIM_INTCLR_DOWNCF     ((uint32_t)0x00000040U) /* Counter direction change up to down Clear Flag */

/** Bit definition for LPTIM_INTEN register **/
#define LPTIM_INTEN_CMPMIE      ((uint32_t)0x00000001U) /* Compare match Interrupt Enable */
#define LPTIM_INTEN_ARRMIE      ((uint32_t)0x00000002U) /* Autoreload match Interrupt Enable */
#define LPTIM_INTEN_EXTRIGIE    ((uint32_t)0x00000004U) /* External trigger edge event Interrupt Enable */
#define LPTIM_INTEN_CMPUPDIE    ((uint32_t)0x00000008U) /* Compare register update OK Interrupt Enable */
#define LPTIM_INTEN_ARRUPDIE    ((uint32_t)0x00000010U) /* Autoreload register update OK Interrupt Enable */
#define LPTIM_INTEN_UPIE        ((uint32_t)0x00000020U) /* Counter direction change down to up Interrupt Enable */
#define LPTIM_INTEN_DOWNIE      ((uint32_t)0x00000040U) /* Counter direction change up to down Interrupt Enable */

/** Bit definition for LPTIM_CFG register **/
#define LPTIM_CFG_CLKSEL        ((uint32_t)0x00000001U) /* Clock selector */

#define LPTIM_CFG_CLKPOL        ((uint32_t)0x00000006U) /* CLKPOL[1:0] bits (Clock polarity) */
#define LPTIM_CFG_CLKPOL_0      ((uint32_t)0x00000002U) /* CLKPOL bit 0 */
#define LPTIM_CFG_CLKPOL_1      ((uint32_t)0x00000004U) /* CLKPOL bit 1 */

#define LPTIM_CFG_CLKFLT        ((uint32_t)0x00000018U) /* CLKFLT[1:0] bits (Configurable digital filter for external clock) */
#define LPTIM_CFG_CLKFLT_0      ((uint32_t)0x00000008U) /* CLKFLT bit 0 */
#define LPTIM_CFG_CLKFLT_1      ((uint32_t)0x00000010U) /* CLKFLT bit 1 */

#define LPTIM_CFG_TRIGFLT       ((uint32_t)0x000000C0U) /* TRIGFLT[1:0] bits (Configurable digital filter for trigger) */
#define LPTIM_CFG_TRIGFLT_0     ((uint32_t)0x00000040U) /* TRIGFLT bit 0 */
#define LPTIM_CFG_TRIGFLT_1     ((uint32_t)0x00000080U) /* TRIGFLT bit 1 */

#define LPTIM_CFG_CLKPRE        ((uint32_t)0x00000E00U) /* CLKPRE[2:0] bits (Clock prescaler) */
#define LPTIM_CFG_CLKPRE_0      ((uint32_t)0x00000200U) /* CLKPRE bit 0 */
#define LPTIM_CFG_CLKPRE_1      ((uint32_t)0x00000400U) /* CLKPRE bit 1 */
#define LPTIM_CFG_CLKPRE_2      ((uint32_t)0x00000800U) /* CLKPRE bit 2 */

#define LPTIM_CFG_TRGSEL        ((uint32_t)0x0001E000U) /* TRGSEL[3:0]] bits (Trigger selector) */
#define LPTIM_CFG_TRGSEL_0      ((uint32_t)0x00002000U) /* TRGSEL bit 0 */
#define LPTIM_CFG_TRGSEL_1      ((uint32_t)0x00004000U) /* TRGSEL bit 1 */
#define LPTIM_CFG_TRGSEL_2      ((uint32_t)0x00008000U) /* TRGSEL bit 2 */
#define LPTIM_CFG_TRGSEL_3      ((uint32_t)0x00010000U) /* TRGSEL bit 3 */

#define LPTIM_CFG_TRGEN         ((uint32_t)0x00060000U) /* TRGEN[1:0] bits (Trigger enable and polarity) */
#define LPTIM_CFG_TRGEN_0       ((uint32_t)0x00020000U) /* TRGEN bit 0 */
#define LPTIM_CFG_TRGEN_1       ((uint32_t)0x00040000U) /* TRGEN bit 1 */

#define LPTIM_CFG_TIMOUTEN      ((uint32_t)0x00080000U) /* Timout enable */
#define LPTIM_CFG_WAVE          ((uint32_t)0x00100000U) /* Waveform shape */
#define LPTIM_CFG_WAVEPOL       ((uint32_t)0x00200000U) /* Waveform shape polarity */
#define LPTIM_CFG_RELOAD        ((uint32_t)0x00400000U) /* Reg update mode */
#define LPTIM_CFG_CNTMEN        ((uint32_t)0x00800000U) /* Counter mode enable */
#define LPTIM_CFG_ENC           ((uint32_t)0x01000000U) /* Encoder mode enable */
#define LPTIM_CFG_NENC          ((uint32_t)0x02000000U) /* NONEncoder mode enable */

/** Bit definition for LPTIM_CTRL register **/
#define LPTIM_CTRL_LPTIMEN      ((uint32_t)0x00000001U) /* LPTIMer enable */
#define LPTIM_CTRL_SNGMST       ((uint32_t)0x00000002U) /* Timer start in single mode */
#define LPTIM_CTRL_TSTCM        ((uint32_t)0x00000004U) /* Timer start in continuous mode */

/** Bit definition for LPTIM_CMP register **/
#define LPTIM_CMP_CMPVAL        ((uint16_t)0xFFFFU) /* Compare register */

/** Bit definition for LPTIM_ARR register **/
#define LPTIM_ARR_ARRVAL        ((uint16_t)0xFFFFU) /* Auto reload register */

/** Bit definition for LPTIM_CNT register **/
#define LPTIM_CNT_CNTVAL        ((uint16_t)0xFFFFU) /* Counter register */

/** Bit definition for LPTIM_OPT register **/
#define LPTIM_OPT_OPT1          ((uint32_t)0x00000007U) /* OPT1[2:0]] bits (LPTIM input1 connection option bits) */
#define LPTIM_OPT_OPT1_0        ((uint32_t)0x00000001U) /* OPT1 bit 0 */
#define LPTIM_OPT_OPT1_1        ((uint32_t)0x00000002U) /* OPT1 bit 1 */
#define LPTIM_OPT_OPT1_2        ((uint32_t)0x00000004U) /* OPT1 bit 2 */
#define LPTIM_OPT_OPT2          ((uint32_t)0x00000038U) /* OPT2[2:0]] bits (LPTIM input2 connection option bits) */
#define LPTIM_OPT_OPT2_0        ((uint32_t)0x00000008U) /* OPT2 bit 0 */
#define LPTIM_OPT_OPT2_1        ((uint32_t)0x00000010U) /* OPT2 bit 1 */
#define LPTIM_OPT_OPT2_2        ((uint32_t)0x00000020U) /* OPT2 bit 2 */


/******** Bit definition for XSPI_CTRL0 register  ********/
#define XSPI_CTRL0_MST                            ((uint32_t)0x80000000U)    /* Bit[31] */
#define XSPI_CTRL0_MST_MASTER                     ((uint32_t)0x80000000U)
#define XSPI_CTRL0_MST_SLAVE                      ((uint32_t)0x00000000U)
#define XSPI_CTRL0_DWSEN                          ((uint32_t)0x02000000U)    /* Bit[25] */
#define XSPI_CTRL0_SPIHYPEEN                      ((uint32_t)0x01000000U)    /* Bit[24] */
#define XSPI_CTRL0_SPIFRF                         ((uint32_t)0x00C00000U)    /* Bit[23:22] */
#define XSPI_CTRL0_SPIFRF_0                       ((uint32_t)0x00400000U)    /* Bit22*/
#define XSPI_CTRL0_SPIFRF_1                       ((uint32_t)0x00800000U)    /* Bit23*/
#define XSPI_CTRL0_SPIFRF_STANDARD_FORMAT         ((uint32_t)0x00000000U)
#define XSPI_CTRL0_SPIFRF_DUAL_FORMAT             ((uint32_t)0x00400000U)
#define XSPI_CTRL0_SPIFRF_QUAD_FORMAT             ((uint32_t)0x00800000U)
#define XSPI_CTRL0_SPIFRF_OCTAL_FORMAT            ((uint32_t)0x00C00000U)

#define XSPI_CTRL0_CFS                            ((uint32_t)0x000F0000U)    /* Bit[19:16] */
#define XSPI_CTRL0_CFS_0                          ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_CTRL0_CFS_1                          ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_CTRL0_CFS_2                          ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_CTRL0_CFS_3                          ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_CTRL0_CFS_1_BIT                      ((uint32_t)0x00000000U)
#define XSPI_CTRL0_CFS_2_BIT                      ((uint32_t)0x00010000U)
#define XSPI_CTRL0_CFS_3_BIT                      ((uint32_t)0x00020000U)
#define XSPI_CTRL0_CFS_4_BIT                      ((uint32_t)0x00030000U)
#define XSPI_CTRL0_CFS_5_BIT                      ((uint32_t)0x00040000U)
#define XSPI_CTRL0_CFS_6_BIT                      ((uint32_t)0x00050000U)
#define XSPI_CTRL0_CFS_7_BIT                      ((uint32_t)0x00060000U)
#define XSPI_CTRL0_CFS_8_BIT                      ((uint32_t)0x00070000U)
#define XSPI_CTRL0_CFS_9_BIT                      ((uint32_t)0x00080000U)
#define XSPI_CTRL0_CFS_10_BIT                     ((uint32_t)0x00090000U)
#define XSPI_CTRL0_CFS_11_BIT                     ((uint32_t)0x000A0000U)
#define XSPI_CTRL0_CFS_12_BIT                     ((uint32_t)0x000B0000U)
#define XSPI_CTRL0_CFS_13_BIT                     ((uint32_t)0x000C0000U)
#define XSPI_CTRL0_CFS_14_BIT                     ((uint32_t)0x000D0000U)
#define XSPI_CTRL0_CFS_15_BIT                     ((uint32_t)0x000E0000U)
#define XSPI_CTRL0_CFS_16_BIT                     ((uint32_t)0x000F0000U)

#define XSPI_CTRL0_SSTE                           ((uint32_t)0x00004000U)    /* Bit[14] */
#define XSPI_CTRL0_SSTE_EN                        ((uint32_t)0x00004000U)    /* SSTE(Slave Select Toggle Enable) */
#define XSPI_CTRL0_SSTE_DISABLE                   ((uint32_t)0x00000000U)  
#define XSPI_CTRL0_SRL                            ((uint32_t)0x00002000U)    /* Bit[13] */
#define XSPI_CTRL0_SRL_EN                         ((uint32_t)0x00002000U)    /* SRL (Shift Register Loop) */
#define XSPI_CTRL0_SLVOE                          ((uint32_t)0x00001000U)    /* Bit[12] */

#define XSPI_CTRL0_TMOD                           ((uint32_t)0x00000C00U)    /* Bit[11:10] */
#define XSPI_CTRL0_TMOD_0                         ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_CTRL0_TMOD_1                         ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_CTRL0_TMOD_TX_AND_RX                 ((uint32_t)0x00000000U)
#define XSPI_CTRL0_TMOD_TX_ONLY                   ((uint32_t)0x00000400U)
#define XSPI_CTRL0_TMOD_RX_ONLY                   ((uint32_t)0x00000800U)
#define XSPI_CTRL0_TMOD_EEPROM_READ               ((uint32_t)0x00000C00U)

#define XSPI_CTRL0_SCPOL                          ((uint32_t)0x00000200U)    /* Bit[9] */
#define XSPI_CTRL0_SCPOL_LOW                      ((uint32_t)0x00000000U)
#define XSPI_CTRL0_SCPOL_HIGH                     ((uint32_t)0x00000200U)

#define XSPI_CTRL0_SCPH                           ((uint32_t)0x00000100U)    /* Bit[8] */
#define XSPI_CTRL0_SCPH_FIRST_EDGE                ((uint32_t)0x00000000U)
#define XSPI_CTRL0_SCPH_SECOND_EDGE               ((uint32_t)0x00000100U)

#define XSPI_CTRL0_FRF                            ((uint32_t)0x000000C0U)    /* Bit[7:6] */
#define XSPI_CTRL0_FRF_0                          ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_CTRL0_FRF_1                          ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_CTRL0_FRF_MOTOROLA                   ((uint32_t)0x00000000U)
#define XSPI_CTRL0_FRF_TI                         ((uint32_t)0x00000040U)
#define XSPI_CTRL0_FRF_MICROWIRE                  ((uint32_t)0x00000080U)

#define XSPI_CTRL0_DFS                            ((uint32_t)0x0000001FU)    /* Bit[4:0] */
#define XSPI_CTRL0_DFS_0                          ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_CTRL0_DFS_1                          ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_CTRL0_DFS_2                          ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_CTRL0_DFS_3                          ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_CTRL0_DFS_4                          ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_CTRL0_DFS_4_BIT                      ((uint32_t)0x00000003U)
#define XSPI_CTRL0_DFS_5_BIT                      ((uint32_t)0x00000004U)
#define XSPI_CTRL0_DFS_6_BIT                      ((uint32_t)0x00000005U)
#define XSPI_CTRL0_DFS_7_BIT                      ((uint32_t)0x00000006U)
#define XSPI_CTRL0_DFS_8_BIT                      ((uint32_t)0x00000007U)
#define XSPI_CTRL0_DFS_9_BIT                      ((uint32_t)0x00000008U)
#define XSPI_CTRL0_DFS_10_BIT                     ((uint32_t)0x00000009U)
#define XSPI_CTRL0_DFS_11_BIT                     ((uint32_t)0x0000000AU)
#define XSPI_CTRL0_DFS_12_BIT                     ((uint32_t)0x0000000BU)
#define XSPI_CTRL0_DFS_13_BIT                     ((uint32_t)0x0000000CU)
#define XSPI_CTRL0_DFS_14_BIT                     ((uint32_t)0x0000000DU)
#define XSPI_CTRL0_DFS_15_BIT                     ((uint32_t)0x0000000EU)
#define XSPI_CTRL0_DFS_16_BIT                     ((uint32_t)0x0000000FU)
#define XSPI_CTRL0_DFS_17_BIT                     ((uint32_t)0x00000010U)
#define XSPI_CTRL0_DFS_18_BIT                     ((uint32_t)0x00000011U)
#define XSPI_CTRL0_DFS_19_BIT                     ((uint32_t)0x00000012U)
#define XSPI_CTRL0_DFS_20_BIT                     ((uint32_t)0x00000013U)
#define XSPI_CTRL0_DFS_21_BIT                     ((uint32_t)0x00000014U)
#define XSPI_CTRL0_DFS_22_BIT                     ((uint32_t)0x00000015U)
#define XSPI_CTRL0_DFS_23_BIT                     ((uint32_t)0x00000016U)
#define XSPI_CTRL0_DFS_24_BIT                     ((uint32_t)0x00000017U)
#define XSPI_CTRL0_DFS_25_BIT                     ((uint32_t)0x00000018U)
#define XSPI_CTRL0_DFS_26_BIT                     ((uint32_t)0x00000019U)
#define XSPI_CTRL0_DFS_27_BIT                     ((uint32_t)0x0000001AU)
#define XSPI_CTRL0_DFS_28_BIT                     ((uint32_t)0x0000001BU)
#define XSPI_CTRL0_DFS_29_BIT                     ((uint32_t)0x0000001CU)
#define XSPI_CTRL0_DFS_30_BIT                     ((uint32_t)0x0000001DU)
#define XSPI_CTRL0_DFS_31_BIT                     ((uint32_t)0x0000001EU)
#define XSPI_CTRL0_DFS_32_BIT                     ((uint32_t)0x0000001FU)

/******** Bit definition for XSPI_CTRL1 register  ********/
#define XSPI_CTRL1_NDF                            ((uint32_t)0x0000FFFFU)    /* Bit[15:0] */
#define XSPI_CTRL1_NDF_0                          ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_CTRL1_NDF_1                          ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_CTRL1_NDF_2                          ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_CTRL1_NDF_3                          ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_CTRL1_NDF_4                          ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_CTRL1_NDF_5                          ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_CTRL1_NDF_6                          ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_CTRL1_NDF_7                          ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_CTRL1_NDF_8                          ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_CTRL1_NDF_9                          ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_CTRL1_NDF_10                         ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_CTRL1_NDF_11                         ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_CTRL1_NDF_12                         ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_CTRL1_NDF_13                         ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_CTRL1_NDF_14                         ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_CTRL1_NDF_15                         ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_EN register  ********/
#define XSPI_EN_XSPIEN                            ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_MW_CTRL register  ********/
#define XSPI_MW_CTRL_MHSEN                        ((uint32_t)0x00000004U)    /* Bit[2] */

#define XSPI_MW_CTRL_MCDIR                        ((uint32_t)0x00000002U)    /* Bit[1] */
#define XSPI_MW_CTRL_MCDIR_RX                     ((uint32_t)0x00000000U)
#define XSPI_MW_CTRL_MCDIR_TX                     ((uint32_t)0x00000002U)

#define XSPI_MW_CTRL_MWMOD                        ((uint32_t)0x00000001U)    /* Bit[0] */
#define XSPI_MW_CTRL_MWMOD_UNSEQUENTIAL           ((uint32_t)0x00000000U)
#define XSPI_MW_CTRL_MWMOD_SEQUENTIAL             ((uint32_t)0x00000001U)

/******** Bit definition for XSPI_SLAVE_EN register  ********/
#define XSPI_SLAVE_EN_SEN                         ((uint32_t)0x0000000FU)    /* Bit[3:0] */
#define XSPI_SLAVE_EN_SEN_0                       ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_SLAVE_EN_SEN_1                       ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_SLAVE_EN_SEN_2                       ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_SLAVE_EN_SEN_3                       ((uint32_t)0x00000008U)    /* Bit3*/

/******** Bit definition for XSPI_BAUD register  ********/
#define XSPI_BAUD_CLKDIV                          ((uint32_t)0x0000FFFEU)    /* Bit[15:1] */
#define XSPI_BAUD_CLKDIV_0                        ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_BAUD_CLKDIV_1                        ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_BAUD_CLKDIV_2                        ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_BAUD_CLKDIV_3                        ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_BAUD_CLKDIV_4                        ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_BAUD_CLKDIV_5                        ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_BAUD_CLKDIV_6                        ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_BAUD_CLKDIV_7                        ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_BAUD_CLKDIV_8                        ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_BAUD_CLKDIV_9                        ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_BAUD_CLKDIV_10                       ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_BAUD_CLKDIV_11                       ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_BAUD_CLKDIV_12                       ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_BAUD_CLKDIV_13                       ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_BAUD_CLKDIV_14                       ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_TXFT register  ********/
#define XSPI_TXFT_TXFTST                          ((uint32_t)0x001F0000U)    /* Bit[20:16] */
#define XSPI_TXFT_TXFTST_0                        ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_TXFT_TXFTST_1                        ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_TXFT_TXFTST_2                        ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_TXFT_TXFTST_3                        ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_TXFT_TXFTST_4                        ((uint32_t)0x00100000U)    /* Bit20*/

#define XSPI_TXFT_TXFTTEI                         ((uint32_t)0x0000001FU)    /* Bit[4:0] */
#define XSPI_TXFT_TXFTTEI_0                       ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_TXFT_TXFTTEI_1                       ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_TXFT_TXFTTEI_2                       ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_TXFT_TXFTTEI_3                       ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_TXFT_TXFTTEI_4                       ((uint32_t)0x00000010U)    /* Bit4*/

/******** Bit definition for XSPI_RXFT register  ********/
#define XSPI_RXFT_RXFTTFI                         ((uint32_t)0x0000001FU)    /* Bit[4:0] */
#define XSPI_RXFT_RXFTTFI_0                       ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_RXFT_RXFTTFI_1                       ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_RXFT_RXFTTFI_2                       ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_RXFT_RXFTTFI_3                       ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_RXFT_RXFTTFI_4                       ((uint32_t)0x00000010U)    /* Bit4*/

/******** Bit definition for XSPI_TXFN register  ********/
#define XSPI_TXFN_TXFN                            ((uint32_t)0x0000003FU)    /* Bit[5:0] */
#define XSPI_TXFN_TXFN_0                          ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_TXFN_TXFN_1                          ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_TXFN_TXFN_2                          ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_TXFN_TXFN_3                          ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_TXFN_TXFN_4                          ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_TXFN_TXFN_5                          ((uint32_t)0x00000020U)    /* Bit5*/

/******** Bit definition for XSPI_RXFN register  ********/
#define XSPI_RXFN_RXFN                            ((uint32_t)0x0000003FU)    /* Bit[5:0] */
#define XSPI_RXFN_RXFN_0                          ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_RXFN_RXFN_1                          ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_RXFN_RXFN_2                          ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_RXFN_RXFN_3                          ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_RXFN_RXFN_4                          ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_RXFN_RXFN_5                          ((uint32_t)0x00000020U)    /* Bit5*/

/******** Bit definition for XSPI_STS register  ********/
#define XSPI_STS_CMPLTDDF                         ((uint32_t)0xFFFF8000U)    /* Bit[31:15] */
#define XSPI_STS_CMPLTDDF_0                       ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_STS_CMPLTDDF_1                       ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_STS_CMPLTDDF_2                       ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_STS_CMPLTDDF_3                       ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_STS_CMPLTDDF_4                       ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_STS_CMPLTDDF_5                       ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_STS_CMPLTDDF_6                       ((uint32_t)0x00200000U)    /* Bit21*/
#define XSPI_STS_CMPLTDDF_7                       ((uint32_t)0x00400000U)    /* Bit22*/
#define XSPI_STS_CMPLTDDF_8                       ((uint32_t)0x00800000U)    /* Bit23*/
#define XSPI_STS_CMPLTDDF_9                       ((uint32_t)0x01000000U)    /* Bit24*/
#define XSPI_STS_CMPLTDDF_10                      ((uint32_t)0x02000000U)    /* Bit25*/
#define XSPI_STS_CMPLTDDF_11                      ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_STS_CMPLTDDF_12                      ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_STS_CMPLTDDF_13                      ((uint32_t)0x10000000U)    /* Bit28*/
#define XSPI_STS_CMPLTDDF_14                      ((uint32_t)0x20000000U)    /* Bit29*/
#define XSPI_STS_CMPLTDDF_15                      ((uint32_t)0x40000000U)    /* Bit30*/
#define XSPI_STS_CMPLTDDF_16                      ((uint32_t)0x80000000U)    /* Bit31*/

#define XSPI_STS                                  ((uint32_t)0x0000007FU)    /* STS[6:0] (status flag) */
#define XSPI_STS_DCERR                            ((uint32_t)0x00000040U)    /* Bit[6] DCERR (Data Conflict Error)*/
#define XSPI_STS_TXE                              ((uint32_t)0x00000020U)    /* Bit[5] TXE (Transmit FIFO error)*/
#define XSPI_STS_RXFF                             ((uint32_t)0x00000010U)    /* Bit[4] RXFF (Receive FIFO not Full)*/
#define XSPI_STS_RXFNE                            ((uint32_t)0x00000008U)    /* Bit[3] RXFNE (Receive FIFO not Empty)*/
#define XSPI_STS_TXFE                             ((uint32_t)0x00000004U)    /* Bit[2] TXFE (Transmit FIFO not Empty)*/
#define XSPI_STS_TXFNF                            ((uint32_t)0x00000002U)    /* Bit[1] TXFNF (Transmit FIFO not Full)*/
#define XSPI_STS_BUSY                             ((uint32_t)0x00000001U)    /* Bit[0] BUSY (Transfer Busy Flag) */

/******** Bit definition for XSPI_IMASK register  ********/
#define XSPI_IMASK_DONEIM                         ((uint32_t)0x00000800U)    /* Bit[11] */
#define XSPI_IMASK_SPITEIM                        ((uint32_t)0x00000400U)    /* Bit[10] */
#define XSPI_IMASK_AXIEIM                         ((uint32_t)0x00000100U)    /* Bit[8] */
#define XSPI_IMASK_TXUIM                          ((uint32_t)0x00000080U)    /* Bit[7] */

#define XSPI_IMASK                                ((uint32_t)0x0000007FU)    /* IMASK[6:0] (Interrupt of Mask) */
#define XSPI_IMASK_XRXOIM                         ((uint32_t)0x00000040U)    /* Bit[6] */
#define XSPI_IMASK_MMCIM                          ((uint32_t)0x00000020U)    /* Bit[5] */
#define XSPI_IMASK_RXFFIM                         ((uint32_t)0x00000010U)    /* Bit[4] */
#define XSPI_IMASK_RXFOIM                         ((uint32_t)0x00000008U)    /* Bit[3] */
#define XSPI_IMASK_RXFUIM                         ((uint32_t)0x00000004U)    /* Bit[2] */
#define XSPI_IMASK_TXFOIM                         ((uint32_t)0x00000002U)    /* Bit[1] */
#define XSPI_IMASK_TXFEIM                         ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_ISTS register  ********/
#define XSPI_ISTS_DONEIS                          ((uint32_t)0x00000800U)    /* Bit[11] */
#define XSPI_ISTS_SPITEIS                         ((uint32_t)0x00000400U)    /* Bit[10] */
#define XSPI_ISTS_AXIEIS                          ((uint32_t)0x00000100U)    /* Bit[8] */
#define XSPI_ISTS_TXUIS                           ((uint32_t)0x00000080U)    /* Bit[7] */

#define XSPI_ISTS                                 ((uint32_t)0x0000007FU) /* All bits of interrupt stasus */
#define XSPI_ISTS_XRXOIS                          ((uint32_t)0x00000040U)    /* Bit[6] */
#define XSPI_ISTS_MMCIS                           ((uint32_t)0x00000020U)    /* Bit[5] */
#define XSPI_ISTS_RXFFIS                          ((uint32_t)0x00000010U)    /* Bit[4] */
#define XSPI_ISTS_RXFOIS                          ((uint32_t)0x00000008U)    /* Bit[3] */
#define XSPI_ISTS_RXFUIS                          ((uint32_t)0x00000004U)    /* Bit[2] */
#define XSPI_ISTS_TXFOIS                          ((uint32_t)0x00000002U)    /* Bit[1] */
#define XSPI_ISTS_TXFEIS                          ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_RISTS register  ********/
#define XSPI_RISTS_DONEIR                         ((uint32_t)0x00000800U)    /* Bit[11] */
#define XSPI_RISTS_SPITEIR                        ((uint32_t)0x00000400U)    /* Bit[10] */
#define XSPI_RISTS_AXIEIR                         ((uint32_t)0x00000100U)    /* Bit[8] */
#define XSPI_RISTS_TXUIR                          ((uint32_t)0x00000080U)    /* Bit[7] */

#define XSPI_RISTS                                ((uint32_t)0x0000007FU)    /* All bits of raw interrupt stasus */
#define XSPI_RISTS_XRXORIS                        ((uint32_t)0x00000040U)    /* Bit[6] */
#define XSPI_RISTS_MMCRIS                         ((uint32_t)0x00000020U)    /* Bit[5] */
#define XSPI_RISTS_RXFFRIS                        ((uint32_t)0x00000010U)    /* Bit[4] */
#define XSPI_RISTS_RXFORIS                        ((uint32_t)0x00000008U)    /* Bit[3] */
#define XSPI_RISTS_RXFURIS                        ((uint32_t)0x00000004U)    /* Bit[2] */
#define XSPI_RISTS_TXFORIS                        ((uint32_t)0x00000002U)    /* Bit[1] */
#define XSPI_RISTS_TXFERIS                        ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_TXEICR_CLR register  ********/
#define XSPI_TXEICR_CLR_TXEICR                    ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_RXFOI_CLR register  ********/
#define XSPI_RXFOI_CLR_RXFOIC                     ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_RXFUI_CLR register  ********/
#define XSPI_RXFUI_CLR_RXFUIC                     ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_MMC_CLR register  ********/
#define XSPI_MMC_CLR_MMCIC                        ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_ICLR register  ********/
#define XSPI_ICLR_INTC                            ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_DMA_CTRL register  ********/
#define XSPI_DMA_CTRL_AID                         ((uint32_t)0x001F8000U)    /* Bit[20:15] */
#define XSPI_DMA_CTRL_AID_0                       ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_DMA_CTRL_AID_1                       ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_DMA_CTRL_AID_2                       ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_DMA_CTRL_AID_3                       ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_DMA_CTRL_AID_4                       ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_DMA_CTRL_AID_5                       ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_DMA_CTRL_APROT                       ((uint32_t)0x00007000U)    /* Bit[14:12] */
#define XSPI_DMA_CTRL_APROT_0                     ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_DMA_CTRL_APROT_1                     ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_DMA_CTRL_APROT_2                     ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_DMA_CTRL_ACACHE                      ((uint32_t)0x00000F00U)    /* Bit[11:8] */
#define XSPI_DMA_CTRL_ACACHE_0                    ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_DMA_CTRL_ACACHE_1                    ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_DMA_CTRL_ACACHE_2                    ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_DMA_CTRL_ACACHE_3                    ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_DMA_CTRL_AINC                        ((uint32_t)0x00000040U)    /* Bit[6] */
#define XSPI_DMA_CTRL_ATW                         ((uint32_t)0x00000018U)    /* Bit[4:3] */
#define XSPI_DMA_CTRL_ATW_0                       ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_DMA_CTRL_ATW_1                       ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_DMA_CTRL_IDMAE                       ((uint32_t)0x00000004U)    /* Bit[2] */
#define XSPI_DMA_CTRL_TXDMAEN                     ((uint32_t)0x00000002U)    /* Bit[1] */
#define XSPI_DMA_CTRL_RXDMAEN                     ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_DMATDL_CTRL register  ********/
#define XSPI_DMATDL_CTRL_DMATDL                   ((uint32_t)0x0000001FU)    /* Bit[4:0] */
#define XSPI_DMATDL_CTRL_DMATDL_0                 ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_DMATDL_CTRL_DMATDL_1                 ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_DMATDL_CTRL_DMATDL_2                 ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_DMATDL_CTRL_DMATDL_3                 ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_DMATDL_CTRL_DMATDL_4                 ((uint32_t)0x00000010U)    /* Bit4*/

/******** Bit definition for XSPI_DMARDL_CTRL register  ********/
#define XSPI_DMARDL_CTRL_DMARDL                   ((uint32_t)0x0000001FU)    /* Bit[4:0] */
#define XSPI_DMARDL_CTRL_DMARDL_0                 ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_DMARDL_CTRL_DMARDL_1                 ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_DMARDL_CTRL_DMARDL_2                 ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_DMARDL_CTRL_DMARDL_3                 ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_DMARDL_CTRL_DMARDL_4                 ((uint32_t)0x00000010U)    /* Bit4*/

/******** Bit definition for XSPI_IDR register  ********/
#define XSPI_IDR_IDCODE                           ((uint32_t)0xFFFFFFFFU)    /* Bit[31:0] */
#define XSPI_IDR_IDCODE_0                         ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_IDR_IDCODE_1                         ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_IDR_IDCODE_2                         ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_IDR_IDCODE_3                         ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_IDR_IDCODE_4                         ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_IDR_IDCODE_5                         ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_IDR_IDCODE_6                         ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_IDR_IDCODE_7                         ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_IDR_IDCODE_8                         ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_IDR_IDCODE_9                         ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_IDR_IDCODE_10                        ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_IDR_IDCODE_11                        ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_IDR_IDCODE_12                        ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_IDR_IDCODE_13                        ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_IDR_IDCODE_14                        ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_IDR_IDCODE_15                        ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_IDR_IDCODE_16                        ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_IDR_IDCODE_17                        ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_IDR_IDCODE_18                        ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_IDR_IDCODE_19                        ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_IDR_IDCODE_20                        ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_IDR_IDCODE_21                        ((uint32_t)0x00200000U)    /* Bit21*/
#define XSPI_IDR_IDCODE_22                        ((uint32_t)0x00400000U)    /* Bit22*/
#define XSPI_IDR_IDCODE_23                        ((uint32_t)0x00800000U)    /* Bit23*/
#define XSPI_IDR_IDCODE_24                        ((uint32_t)0x01000000U)    /* Bit24*/
#define XSPI_IDR_IDCODE_25                        ((uint32_t)0x02000000U)    /* Bit25*/
#define XSPI_IDR_IDCODE_26                        ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_IDR_IDCODE_27                        ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_IDR_IDCODE_28                        ((uint32_t)0x10000000U)    /* Bit28*/
#define XSPI_IDR_IDCODE_29                        ((uint32_t)0x20000000U)    /* Bit29*/
#define XSPI_IDR_IDCODE_30                        ((uint32_t)0x40000000U)    /* Bit30*/
#define XSPI_IDR_IDCODE_31                        ((uint32_t)0x80000000U)    /* Bit31*/

/******** Bit definition for XSPI_VERSION_ID register  ********/
#define XSPI_VERSION_ID_VERSION                   ((uint32_t)0xFFFFFFFFU)    /* Bit[31:0] */
#define XSPI_VERSION_ID_VERSION_0                 ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_VERSION_ID_VERSION_1                 ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_VERSION_ID_VERSION_2                 ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_VERSION_ID_VERSION_3                 ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_VERSION_ID_VERSION_4                 ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_VERSION_ID_VERSION_5                 ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_VERSION_ID_VERSION_6                 ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_VERSION_ID_VERSION_7                 ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_VERSION_ID_VERSION_8                 ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_VERSION_ID_VERSION_9                 ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_VERSION_ID_VERSION_10                ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_VERSION_ID_VERSION_11                ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_VERSION_ID_VERSION_12                ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_VERSION_ID_VERSION_13                ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_VERSION_ID_VERSION_14                ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_VERSION_ID_VERSION_15                ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_VERSION_ID_VERSION_16                ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_VERSION_ID_VERSION_17                ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_VERSION_ID_VERSION_18                ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_VERSION_ID_VERSION_19                ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_VERSION_ID_VERSION_20                ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_VERSION_ID_VERSION_21                ((uint32_t)0x00200000U)    /* Bit21*/
#define XSPI_VERSION_ID_VERSION_22                ((uint32_t)0x00400000U)    /* Bit22*/
#define XSPI_VERSION_ID_VERSION_23                ((uint32_t)0x00800000U)    /* Bit23*/
#define XSPI_VERSION_ID_VERSION_24                ((uint32_t)0x01000000U)    /* Bit24*/
#define XSPI_VERSION_ID_VERSION_25                ((uint32_t)0x02000000U)    /* Bit25*/
#define XSPI_VERSION_ID_VERSION_26                ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_VERSION_ID_VERSION_27                ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_VERSION_ID_VERSION_28                ((uint32_t)0x10000000U)    /* Bit28*/
#define XSPI_VERSION_ID_VERSION_29                ((uint32_t)0x20000000U)    /* Bit29*/
#define XSPI_VERSION_ID_VERSION_30                ((uint32_t)0x40000000U)    /* Bit30*/
#define XSPI_VERSION_ID_VERSION_31                ((uint32_t)0x80000000U)    /* Bit31*/

/******** Bit definition for XSPI_DATx register  ********/
#define XSPI_DATx_DATx                            ((uint32_t)0xFFFFFFFFU)    /* Bit[31:0] */
#define XSPI_DATx_DATx_0                          ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_DATx_DATx_1                          ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_DATx_DATx_2                          ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_DATx_DATx_3                          ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_DATx_DATx_4                          ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_DATx_DATx_5                          ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_DATx_DATx_6                          ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_DATx_DATx_7                          ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_DATx_DATx_8                          ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_DATx_DATx_9                          ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_DATx_DATx_10                         ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_DATx_DATx_11                         ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_DATx_DATx_12                         ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_DATx_DATx_13                         ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_DATx_DATx_14                         ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_DATx_DATx_15                         ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_DATx_DATx_16                         ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_DATx_DATx_17                         ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_DATx_DATx_18                         ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_DATx_DATx_19                         ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_DATx_DATx_20                         ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_DATx_DATx_21                         ((uint32_t)0x00200000U)    /* Bit21*/
#define XSPI_DATx_DATx_22                         ((uint32_t)0x00400000U)    /* Bit22*/
#define XSPI_DATx_DATx_23                         ((uint32_t)0x00800000U)    /* Bit23*/
#define XSPI_DATx_DATx_24                         ((uint32_t)0x01000000U)    /* Bit24*/
#define XSPI_DATx_DATx_25                         ((uint32_t)0x02000000U)    /* Bit25*/
#define XSPI_DATx_DATx_26                         ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_DATx_DATx_27                         ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_DATx_DATx_28                         ((uint32_t)0x10000000U)    /* Bit28*/
#define XSPI_DATx_DATx_29                         ((uint32_t)0x20000000U)    /* Bit29*/
#define XSPI_DATx_DATx_30                         ((uint32_t)0x40000000U)    /* Bit30*/
#define XSPI_DATx_DATx_31                         ((uint32_t)0x80000000U)    /* Bit31*/

/******** Bit definition for XSPI_RX_DELAY register  ********/
#define XSPI_RX_DELAY_SES                         ((uint32_t)0x00010000U)    /* Bit[16] */
#define XSPI_RX_DELAY_SES_RISING_EDGE             ((uint32_t)0x00000000U)
#define XSPI_RX_DELAY_SES_FALLING_EDGE            ((uint32_t)0x00010000U)

#define XSPI_RX_DELAY_SDCN                        ((uint32_t)0x000000FFU)    /* Bit[7:0] */
#define XSPI_RX_DELAY_SDCN_0                      ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_RX_DELAY_SDCN_1                      ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_RX_DELAY_SDCN_2                      ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_RX_DELAY_SDCN_3                      ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_RX_DELAY_SDCN_4                      ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_RX_DELAY_SDCN_5                      ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_RX_DELAY_SDCN_6                      ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_RX_DELAY_SDCN_7                      ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_RX_DELAY_SDCN_0_CYCLES               ((uint32_t)0x00000000U)
#define XSPI_RX_DELAY_SDCN_1_CYCLES               ((uint32_t)0x00000001U)
#define XSPI_RX_DELAY_SDCN_2_CYCLES               ((uint32_t)0x00000002U)
#define XSPI_RX_DELAY_SDCN_3_CYCLES               ((uint32_t)0x00000003U)
#define XSPI_RX_DELAY_SDCN_4_CYCLES               ((uint32_t)0x00000004U)
#define XSPI_RX_DELAY_SDCN_5_CYCLES               ((uint32_t)0x00000005U)
#define XSPI_RX_DELAY_SDCN_6_CYCLES               ((uint32_t)0x00000006U)

/******** Bit definition for XSPI_ENH_CTRL0 register  ********/
#define XSPI_ENH_CTRL0_CLKSTREN                   ((uint32_t)0x40000000U)    /* Bit[30] */
#define XSPI_ENH_CTRL0_XIPPREEN                   ((uint32_t)0x20000000U)    /* Bit[29] */
#define XSPI_ENH_CTRL0_XIPMBL                     ((uint32_t)0x0C000000U)    /* Bit[27:26] */
#define XSPI_ENH_CTRL0_XIPMBL_0                   ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_ENH_CTRL0_XIPMBL_1                   ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_ENH_CTRL0_RXDSSIGEN                  ((uint32_t)0x02000000U)    /* Bit[25] */
#define XSPI_ENH_CTRL0_SPIDMEN                    ((uint32_t)0x01000000U)    /* Bit[24] */
#define XSPI_ENH_CTRL0_XIPCTEN                    ((uint32_t)0x00200000U)    /* Bit[21] */
#define XSPI_ENH_CTRL0_XIPINSTEN                  ((uint32_t)0x00100000U)    /* Bit[20] */
#define XSPI_ENH_CTRL0_XIPDFSHC                   ((uint32_t)0x00080000U)    /* Bit[19] */

#define XSPI_ENH_CTRL0_SPIRXDSEN                  ((uint32_t)0x00040000U)    /* Bit[18] */
#define XSPI_ENH_CTRL0_WRINDDREN                  ((uint32_t)0x00020000U)    /* Bit[17] */
#define XSPI_ENH_CTRL0_WRSPIDDREN                 ((uint32_t)0x00010000U)    /* Bit[16] */

#define XSPI_ENH_CTRL0_WAITCYCLES                 ((uint32_t)0x0000F800U)    /* Bit[15:11] */
#define XSPI_ENH_CTRL0_WAITCYCLES_0               ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_ENH_CTRL0_WAITCYCLES_1               ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_ENH_CTRL0_WAITCYCLES_2               ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_ENH_CTRL0_WAITCYCLES_3               ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_ENH_CTRL0_WAITCYCLES_4               ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_ENH_CTRL0_WAIT_1CYCLES               ((uint32_t)0x00000800U)
#define XSPI_ENH_CTRL0_WAIT_2CYCLES               ((uint32_t)0x00001000U)
#define XSPI_ENH_CTRL0_WAIT_3CYCLES               ((uint32_t)0x00001800U)
#define XSPI_ENH_CTRL0_WAIT_4CYCLES               ((uint32_t)0x00002000U)
#define XSPI_ENH_CTRL0_WAIT_5CYCLES               ((uint32_t)0x00002800U)
#define XSPI_ENH_CTRL0_WAIT_6CYCLES               ((uint32_t)0x00003000U)
#define XSPI_ENH_CTRL0_WAIT_7CYCLES               ((uint32_t)0x00003800U)
#define XSPI_ENH_CTRL0_WAIT_8CYCLES               ((uint32_t)0x00004000U)
#define XSPI_ENH_CTRL0_WAIT_9CYCLES               ((uint32_t)0x00004800U)
#define XSPI_ENH_CTRL0_WAIT_10CYCLES              ((uint32_t)0x00005000U)
#define XSPI_ENH_CTRL0_WAIT_11CYCLES              ((uint32_t)0x00005800U)
#define XSPI_ENH_CTRL0_WAIT_12CYCLES              ((uint32_t)0x00006000U)
#define XSPI_ENH_CTRL0_WAIT_13CYCLES              ((uint32_t)0x00006800U)
#define XSPI_ENH_CTRL0_WAIT_14CYCLES              ((uint32_t)0x00007000U)
#define XSPI_ENH_CTRL0_WAIT_15CYCLES              ((uint32_t)0x00007800U)
#define XSPI_ENH_CTRL0_WAIT_16CYCLES              ((uint32_t)0x00008000U)
#define XSPI_ENH_CTRL0_WAIT_17CYCLES              ((uint32_t)0x00008800U)
#define XSPI_ENH_CTRL0_WAIT_18CYCLES              ((uint32_t)0x00009000U)
#define XSPI_ENH_CTRL0_WAIT_19CYCLES              ((uint32_t)0x00009800U)
#define XSPI_ENH_CTRL0_WAIT_20CYCLES              ((uint32_t)0x0000A000U)
#define XSPI_ENH_CTRL0_WAIT_21CYCLES              ((uint32_t)0x0000A800U)
#define XSPI_ENH_CTRL0_WAIT_22CYCLES              ((uint32_t)0x0000B000U)
#define XSPI_ENH_CTRL0_WAIT_23CYCLES              ((uint32_t)0x0000B800U)
#define XSPI_ENH_CTRL0_WAIT_24CYCLES              ((uint32_t)0x0000C000U)
#define XSPI_ENH_CTRL0_WAIT_25CYCLES              ((uint32_t)0x0000C800U)
#define XSPI_ENH_CTRL0_WAIT_26CYCLES              ((uint32_t)0x0000D000U)
#define XSPI_ENH_CTRL0_WAIT_27CYCLES              ((uint32_t)0x0000D800U)
#define XSPI_ENH_CTRL0_WAIT_28CYCLES              ((uint32_t)0x0000E000U)
#define XSPI_ENH_CTRL0_WAIT_29CYCLES              ((uint32_t)0x0000E800U)
#define XSPI_ENH_CTRL0_WAIT_30CYCLES              ((uint32_t)0x0000F000U)
#define XSPI_ENH_CTRL0_WAIT_31CYCLES              ((uint32_t)0x0000F800U)

#define XSPI_ENH_CTRL0_INSTL                      ((uint32_t)0x00000300U)    /* Bit[9:8] */
#define XSPI_ENH_CTRL0_INSTL_0                    ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_ENH_CTRL0_INSTL_1                    ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_ENH_CTRL0_INST_L_0_LINE              ((uint32_t)0x00000000U)
#define XSPI_ENH_CTRL0_INST_L_4_LINE              ((uint32_t)0x00000100U)
#define XSPI_ENH_CTRL0_INST_L_8_LINE              ((uint32_t)0x00000200U)
#define XSPI_ENH_CTRL0_INST_L_16_LINE             ((uint32_t)0x00000300U)

#define XSPI_ENH_CTRL0_XIPMDBEN                   ((uint32_t)0x00000080U)    /* Bit[7] */

#define XSPI_ENH_CTRL0_ADDRLEN                    ((uint32_t)0x0000003CU)    /* Bit[5:2] */
#define XSPI_ENH_CTRL0_ADDRLEN_0                  ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_ENH_CTRL0_ADDRLEN_1                  ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_ENH_CTRL0_ADDRLEN_2                  ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_ENH_CTRL0_ADDRLEN_3                  ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_ENH_CTRL0_ADDRLEN_4_BIT              ((uint32_t)0x00000004U)
#define XSPI_ENH_CTRL0_ADDRLEN_8_BIT              ((uint32_t)0x00000008U)
#define XSPI_ENH_CTRL0_ADDRLEN_12_BIT             ((uint32_t)0x0000000CU)
#define XSPI_ENH_CTRL0_ADDRLEN_16_BIT             ((uint32_t)0x00000010U)
#define XSPI_ENH_CTRL0_ADDRLEN_20_BIT             ((uint32_t)0x00000014U)
#define XSPI_ENH_CTRL0_ADDRLEN_24_BIT             ((uint32_t)0x00000018U)
#define XSPI_ENH_CTRL0_ADDRLEN_28_BIT             ((uint32_t)0x0000001CU)
#define XSPI_ENH_CTRL0_ADDRLEN_32_BIT             ((uint32_t)0x00000020U)
#define XSPI_ENH_CTRL0_ADDRLEN_36_BIT             ((uint32_t)0x00000024U)
#define XSPI_ENH_CTRL0_ADDRLEN_40_BIT             ((uint32_t)0x00000028U)
#define XSPI_ENH_CTRL0_ADDRLEN_44_BIT             ((uint32_t)0x0000002CU)
#define XSPI_ENH_CTRL0_ADDRLEN_48_BIT             ((uint32_t)0x00000030U)
#define XSPI_ENH_CTRL0_ADDRLEN_52_BIT             ((uint32_t)0x00000034U)
#define XSPI_ENH_CTRL0_ADDRLEN_56_BIT             ((uint32_t)0x00000038U)
#define XSPI_ENH_CTRL0_ADDRLEN_60_BIT             ((uint32_t)0x0000003CU)

#define XSPI_ENH_CTRL0_TRANSTYPE                  ((uint32_t)0x00000003U)    /* Bit[1:0] */
#define XSPI_ENH_CTRL0_TRANSTYPE_0                ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_ENH_CTRL0_TRANSTYPE_1                ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_ENH_CTRL0_TRANSTYPE_STANDARD         ((uint32_t)0x00000000U)
#define XSPI_ENH_CTRL0_TRANSTYPE_ADDRESS_BY_FRF   ((uint32_t)0x00000001U)
#define XSPI_ENH_CTRL0_TRANSTYPE_ALL_BY_FRF       ((uint32_t)0x00000002U)
/******** Bit definition for XSPI_DDR_TXDE register  ********/
#define XSPI_DDR_TXDE_TXDE                        ((uint32_t)0x000000FFU)    /* Bit[7:0] */
#define XSPI_DDR_TXDE_TXDE_0                      ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_DDR_TXDE_TXDE_1                      ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_DDR_TXDE_TXDE_2                      ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_DDR_TXDE_TXDE_3                      ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_DDR_TXDE_TXDE_4                      ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_DDR_TXDE_TXDE_5                      ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_DDR_TXDE_TXDE_6                      ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_DDR_TXDE_TXDE_7                      ((uint32_t)0x00000080U)    /* Bit7*/

/******** Bit definition for XSPI_XIP_MODE register  ********/
#define XSPI_XIP_MODE_XIPMDBITS                   ((uint32_t)0x0000FFFFU)    /* Bit[15:0] */
#define XSPI_XIP_MODE_XIPMDBITS_0                 ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_MODE_XIPMDBITS_1                 ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_MODE_XIPMDBITS_2                 ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_MODE_XIPMDBITS_3                 ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_MODE_XIPMDBITS_4                 ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_MODE_XIPMDBITS_5                 ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_MODE_XIPMDBITS_6                 ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_MODE_XIPMDBITS_7                 ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_MODE_XIPMDBITS_8                 ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_MODE_XIPMDBITS_9                 ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_MODE_XIPMDBITS_10                ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_MODE_XIPMDBITS_11                ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_XIP_MODE_XIPMDBITS_12                ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_XIP_MODE_XIPMDBITS_13                ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_MODE_XIPMDBITS_14                ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_MODE_XIPMDBITS_15                ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_XIP_INCR_TOC register  ********/
#define XSPI_XIP_INCR_TOC_ITOC                    ((uint32_t)0x0000FFFFU)    /* Bit[15:0] */
#define XSPI_XIP_INCR_TOC_ITOC_0                  ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_INCR_TOC_ITOC_1                  ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_INCR_TOC_ITOC_2                  ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_INCR_TOC_ITOC_3                  ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_INCR_TOC_ITOC_4                  ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_INCR_TOC_ITOC_5                  ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_INCR_TOC_ITOC_6                  ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_INCR_TOC_ITOC_7                  ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_INCR_TOC_ITOC_8                  ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_INCR_TOC_ITOC_9                  ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_INCR_TOC_ITOC_10                 ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_INCR_TOC_ITOC_11                 ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_XIP_INCR_TOC_ITOC_12                 ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_XIP_INCR_TOC_ITOC_13                 ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_INCR_TOC_ITOC_14                 ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_INCR_TOC_ITOC_15                 ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_XIP_WRAP_TOC register  ********/
#define XSPI_XIP_WRAP_TOC_WTOC                    ((uint32_t)0x0000FFFFU)    /* Bit[15:0] */
#define XSPI_XIP_WRAP_TOC_WTOC_0                  ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_WRAP_TOC_WTOC_1                  ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_WRAP_TOC_WTOC_2                  ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_WRAP_TOC_WTOC_3                  ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_WRAP_TOC_WTOC_4                  ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_WRAP_TOC_WTOC_5                  ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_WRAP_TOC_WTOC_6                  ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_WRAP_TOC_WTOC_7                  ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_WRAP_TOC_WTOC_8                  ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_WRAP_TOC_WTOC_9                  ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_WRAP_TOC_WTOC_10                 ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_WRAP_TOC_WTOC_11                 ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_XIP_WRAP_TOC_WTOC_12                 ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_XIP_WRAP_TOC_WTOC_13                 ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_WRAP_TOC_WTOC_14                 ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_WRAP_TOC_WTOC_15                 ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_XIP_CTRL register  ********/
#define XSPI_XIP_CTRL_XIPPREEN                    ((uint32_t)0x20000000U)    /* Bit[29] */

#define XSPI_XIP_CTRL_XIPMBL                      ((uint32_t)0x0C000000U)    /* Bit[27:26] */
#define XSPI_XIP_CTRL_XIPMBL_0                    ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_XIP_CTRL_XIPMBL_1                    ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_XIP_CTRL_XIPMBL_LEN_2_BIT            ((uint32_t)0x00000000U)
#define XSPI_XIP_CTRL_XIPMBL_LEN_4_BIT            ((uint32_t)0x04000000U)
#define XSPI_XIP_CTRL_XIPMBL_LEN_8_BIT            ((uint32_t)0x08000000U)
#define XSPI_XIP_CTRL_XIPMBL_LEN_16_BIT           ((uint32_t)0x0C000000U)

#define XSPI_XIP_CTRL_RXDSSIGEN                   ((uint32_t)0x02000000U)    /* Bit[25] */
#define XSPI_XIP_CTRL_XIPHYPEEN                   ((uint32_t)0x01000000U)    /* Bit[24] */
#define XSPI_XIP_CTRL_XIPCTEN                     ((uint32_t)0x00800000U)    /* Bit[23] */
#define XSPI_XIP_CTRL_XIPINSTEN                   ((uint32_t)0x00400000U)    /* Bit[22] */
#define XSPI_XIP_CTRL_RXDSEN                      ((uint32_t)0x00200000U)    /* Bit[21] */
#define XSPI_XIP_CTRL_WRINDDREN                   ((uint32_t)0x00100000U)    /* Bit[20] */
#define XSPI_XIP_CTRL_DDREN                       ((uint32_t)0x00080000U)    /* Bit[19] */
#define XSPI_XIP_CTRL_DFSHC                       ((uint32_t)0x00040000U)    /* Bit[18] */

#define XSPI_XIP_CTRL_WAITCYCLES                  ((uint32_t)0x0003E000U)    /* Bit[17:13] */
#define XSPI_XIP_CTRL_WAITCYCLES_0                ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_CTRL_WAITCYCLES_1                ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_CTRL_WAITCYCLES_2                ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_XIP_CTRL_WAITCYCLES_3                ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_XIP_CTRL_WAITCYCLES_4                ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_XIP_CTRL_WAIT_1CYCLES                ((uint32_t)0x00002000U)
#define XSPI_XIP_CTRL_WAIT_2CYCLES                ((uint32_t)0x00004000U)
#define XSPI_XIP_CTRL_WAIT_3CYCLES                ((uint32_t)0x00006000U)
#define XSPI_XIP_CTRL_WAIT_4CYCLES                ((uint32_t)0x00008000U)
#define XSPI_XIP_CTRL_WAIT_5CYCLES                ((uint32_t)0x0000A000U)
#define XSPI_XIP_CTRL_WAIT_6CYCLES                ((uint32_t)0x0000C000U)
#define XSPI_XIP_CTRL_WAIT_7CYCLES                ((uint32_t)0x0000E000U)
#define XSPI_XIP_CTRL_WAIT_8CYCLES                ((uint32_t)0x00010000U)
#define XSPI_XIP_CTRL_WAIT_9CYCLES                ((uint32_t)0x00012000U)
#define XSPI_XIP_CTRL_WAIT_10CYCLES               ((uint32_t)0x00014000U)
#define XSPI_XIP_CTRL_WAIT_11CYCLES               ((uint32_t)0x00016000U)
#define XSPI_XIP_CTRL_WAIT_12CYCLES               ((uint32_t)0x00018000U)
#define XSPI_XIP_CTRL_WAIT_13CYCLES               ((uint32_t)0x0001A000U)
#define XSPI_XIP_CTRL_WAIT_14CYCLES               ((uint32_t)0x0001C000U)
#define XSPI_XIP_CTRL_WAIT_15CYCLES               ((uint32_t)0x0001E000U)
#define XSPI_XIP_CTRL_WAIT_16CYCLES               ((uint32_t)0x00020000U)
#define XSPI_XIP_CTRL_WAIT_17CYCLES               ((uint32_t)0x00022000U)
#define XSPI_XIP_CTRL_WAIT_18CYCLES               ((uint32_t)0x00024000U)
#define XSPI_XIP_CTRL_WAIT_19CYCLES               ((uint32_t)0x00026000U)
#define XSPI_XIP_CTRL_WAIT_20CYCLES               ((uint32_t)0x00028000U)
#define XSPI_XIP_CTRL_WAIT_21CYCLES               ((uint32_t)0x0002A000U)
#define XSPI_XIP_CTRL_WAIT_22CYCLES               ((uint32_t)0x0002C000U)
#define XSPI_XIP_CTRL_WAIT_23CYCLES               ((uint32_t)0x0002E000U)
#define XSPI_XIP_CTRL_WAIT_24CYCLES               ((uint32_t)0x00030000U)
#define XSPI_XIP_CTRL_WAIT_25CYCLES               ((uint32_t)0x00032000U)
#define XSPI_XIP_CTRL_WAIT_26CYCLES               ((uint32_t)0x00034000U)
#define XSPI_XIP_CTRL_WAIT_27CYCLES               ((uint32_t)0x00036000U)
#define XSPI_XIP_CTRL_WAIT_28CYCLES               ((uint32_t)0x00038000U)
#define XSPI_XIP_CTRL_WAIT_29CYCLES               ((uint32_t)0x0003A000U)
#define XSPI_XIP_CTRL_WAIT_30CYCLES               ((uint32_t)0x0003C000U)
#define XSPI_XIP_CTRL_WAIT_31CYCLES               ((uint32_t)0x0003E000U)

#define XSPI_XIP_CTRL_MDBITSEN                    ((uint32_t)0x00001000U)    /* Bit[12] */

#define XSPI_XIP_CTRL_INSTL                       ((uint32_t)0x00000600U)    /* Bit[10:9] */
#define XSPI_XIP_CTRL_INSTL_0                     ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_CTRL_INSTL_1                     ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_CTRL_INSTL_0_LINE                ((uint32_t)0x00000000U)
#define XSPI_XIP_CTRL_INSTL_4_LINE                ((uint32_t)0x00000200U)
#define XSPI_XIP_CTRL_INSTL_8_LINE                ((uint32_t)0x00000400U)
#define XSPI_XIP_CTRL_INSTL_16_LINE               ((uint32_t)0x00000600U)

#define XSPI_XIP_CTRL_ADDRL                       ((uint32_t)0x000000F0U)    /* Bit[7:4] */
#define XSPI_XIP_CTRL_ADDRL_0                     ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_CTRL_ADDRL_1                     ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_CTRL_ADDRL_2                     ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_CTRL_ADDRL_3                     ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_CTRL_ADDR_4BIT                   ((uint32_t)0x00000010U)
#define XSPI_XIP_CTRL_ADDR_8BIT                   ((uint32_t)0x00000020U)
#define XSPI_XIP_CTRL_ADDR_12BIT                  ((uint32_t)0x00000030U)
#define XSPI_XIP_CTRL_ADDR_16BIT                  ((uint32_t)0x00000040U)
#define XSPI_XIP_CTRL_ADDR_20BIT                  ((uint32_t)0x00000050U)
#define XSPI_XIP_CTRL_ADDR_24BIT                  ((uint32_t)0x00000060U)
#define XSPI_XIP_CTRL_ADDR_28BIT                  ((uint32_t)0x00000070U)
#define XSPI_XIP_CTRL_ADDR_32BIT                  ((uint32_t)0x00000080U)
#define XSPI_XIP_CTRL_ADDR_36BIT                  ((uint32_t)0x00000090U)
#define XSPI_XIP_CTRL_ADDR_40BIT                  ((uint32_t)0x000000A0U)
#define XSPI_XIP_CTRL_ADDR_44BIT                  ((uint32_t)0x000000B0U)
#define XSPI_XIP_CTRL_ADDR_48BIT                  ((uint32_t)0x000000C0U)
#define XSPI_XIP_CTRL_ADDR_52BIT                  ((uint32_t)0x000000D0U)
#define XSPI_XIP_CTRL_ADDR_56BIT                  ((uint32_t)0x000000E0U)
#define XSPI_XIP_CTRL_ADDR_60BIT                  ((uint32_t)0x000000F0U)

#define XSPI_XIP_CTRL_TRANSTYPE                   ((uint32_t)0x0000000CU)    /* Bit[3:2] */
#define XSPI_XIP_CTRL_TRANSTYPE_0                 ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_CTRL_TRANSTYPE_1                 ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_CTRL_TRANSTYPE_STANDARD_SPI         ((uint32_t)0x00000000U)
#define XSPI_XIP_CTRL_TRANSTYPE_ADDRESS_BY_XIP_FRF   ((uint32_t)0x00000004U)
#define XSPI_XIP_CTRL_TRANSTYPE_INSTRUCT_BY_XIP_FRF  ((uint32_t)0x00000008U)

#define XSPI_XIP_CTRL_FRF                         ((uint32_t)0x00000003U)    /* Bit[1:0] */
#define XSPI_XIP_CTRL_FRF_0                       ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_CTRL_FRF_1                       ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_CTRL_FRF_2_LINE                  ((uint32_t)0x00000001U)
#define XSPI_XIP_CTRL_FRF_4_LINE                  ((uint32_t)0x00000002U)

/******** Bit definition for XSPI_XIP_SLAVE_EN register  ********/
#define XSPI_XIP_SLAVE_EN_SEN                     ((uint32_t)0x0000000FU)    /* Bit[3:0] */
#define XSPI_XIP_SLAVE_EN_SEN_0                   ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_SLAVE_EN_SEN_1                   ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_SLAVE_EN_SEN_2                   ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_SLAVE_EN_SEN_3                   ((uint32_t)0x00000008U)    /* Bit3*/

/******** Bit definition for XSPI_XIP_RXFOI_CLR register  ********/
#define XSPI_XIP_RXFOI_CLR_XRXFOIC                ((uint32_t)0x00000001U)    /* Bit[0] */

/******** Bit definition for XSPI_XIP_TOUT register  ********/
#define XSPI_XIP_TOUT_XTOUT                       ((uint32_t)0x000000FFU)    /* Bit[7:0] */
#define XSPI_XIP_TOUT_XTOUT_0                     ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_TOUT_XTOUT_1                     ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_TOUT_XTOUT_2                     ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_TOUT_XTOUT_3                     ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_TOUT_XTOUT_4                     ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_TOUT_XTOUT_5                     ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_TOUT_XTOUT_6                     ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_TOUT_XTOUT_7                     ((uint32_t)0x00000080U)    /* Bit7*/

/******** Bit definition for XSPI_XIP_WRITE_INCR_INST register  ********/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST       ((uint32_t)0x0000FFFFU)    /* Bit[15:0] */
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_0     ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_1     ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_2     ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_3     ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_4     ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_5     ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_6     ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_7     ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_8     ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_9     ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_10    ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_11    ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_12    ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_13    ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_14    ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_WRITE_INCR_INST_INCRWRINST_15    ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_XIP_WRITE_WRAP_INST register  ********/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST       ((uint32_t)0x0000FFFFU)    /* Bit[15:0] */
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_0     ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_1     ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_2     ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_3     ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_4     ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_5     ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_6     ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_7     ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_8     ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_9     ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_10    ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_11    ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_12    ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_13    ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_14    ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_WRITE_WRAP_INST_WRAPWRINST_15    ((uint32_t)0x00008000U)    /* Bit15*/

/******** Bit definition for XSPI_XIP_WRITE_CTRL register  ********/
#define XSPI_XIP_WRITE_CTRL_XIPWRWCY              ((uint32_t)0x001F0000U)    /* Bit[20:16] */
#define XSPI_XIP_WRITE_CTRL_XIPWRWCY_0            ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_XIP_WRITE_CTRL_XIPWRWCY_1            ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_XIP_WRITE_CTRL_XIPWRWCY_2            ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_XIP_WRITE_CTRL_XIPWRWCY_3            ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_XIP_WRITE_CTRL_XIPWRWCY_4            ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_XIP_WRITE_CTRL_WAIT_1CYCLES          ((uint32_t)0x00010000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_2CYCLES          ((uint32_t)0x00020000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_3CYCLES          ((uint32_t)0x00030000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_4CYCLES          ((uint32_t)0x00040000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_5CYCLES          ((uint32_t)0x00050000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_6CYCLES          ((uint32_t)0x00060000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_7CYCLES          ((uint32_t)0x00070000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_8CYCLES          ((uint32_t)0x00080000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_9CYCLES          ((uint32_t)0x00090000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_10CYCLES         ((uint32_t)0x000A0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_11CYCLES         ((uint32_t)0x000B0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_12CYCLES         ((uint32_t)0x000C0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_13CYCLES         ((uint32_t)0x000D0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_14CYCLES         ((uint32_t)0x000E0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_15CYCLES         ((uint32_t)0x000F0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_16CYCLES         ((uint32_t)0x00100000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_17CYCLES         ((uint32_t)0x00110000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_18CYCLES         ((uint32_t)0x00120000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_19CYCLES         ((uint32_t)0x00130000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_20CYCLES         ((uint32_t)0x00140000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_21CYCLES         ((uint32_t)0x00150000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_22CYCLES         ((uint32_t)0x00160000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_23CYCLES         ((uint32_t)0x00170000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_24CYCLES         ((uint32_t)0x00180000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_25CYCLES         ((uint32_t)0x00190000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_26CYCLES         ((uint32_t)0x001A0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_27CYCLES         ((uint32_t)0x001B0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_28CYCLES         ((uint32_t)0x001C0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_29CYCLES         ((uint32_t)0x001D0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_30CYCLES         ((uint32_t)0x001E0000U)
#define XSPI_XIP_WRITE_CTRL_WAIT_31CYCLES         ((uint32_t)0x001F0000U)

#define XSPI_XIP_WRITE_CTRL_XIPWRRXDSSIGEN        ((uint32_t)0x00002000U)    /* Bit[13] */
#define XSPI_XIP_WRITE_CTRL_XIPWRHYPEEN           ((uint32_t)0x00001000U)    /* Bit[12] */

#define XSPI_XIP_WRITE_CTRL_WRINDDREN             ((uint32_t)0x00000800U)    /* Bit[11] */
#define XSPI_XIP_WRITE_CTRL_WRSPIDDREN            ((uint32_t)0x00000400U)    /* Bit[10] */

#define XSPI_XIP_WRITE_CTRL_WRINSTL               ((uint32_t)0x00000300U)    /* Bit[9:8] */
#define XSPI_XIP_WRITE_CTRL_WRINSTL_0             ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_WRITE_CTRL_WRINSTL_1             ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_WRITE_CTRL_WRINSTL_0_LINE        ((uint32_t)0x00000000U)
#define XSPI_XIP_WRITE_CTRL_WRINSTL_4_LINE        ((uint32_t)0x00000200U)
#define XSPI_XIP_WRITE_CTRL_WRINSTL_8_LINE        ((uint32_t)0x00000400U)
#define XSPI_XIP_WRITE_CTRL_WRINSTL_16_LINE       ((uint32_t)0x00000600U)

#define XSPI_XIP_WRITE_CTRL_WRADDRL               ((uint32_t)0x000000F0U)    /* Bit[7:4] */
#define XSPI_XIP_WRITE_CTRL_WRADDRL_0             ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_WRITE_CTRL_WRADDRL_1             ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_WRITE_CTRL_WRADDRL_2             ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_WRITE_CTRL_WRADDRL_3             ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_WRITE_CTRL_WRADDRL_4BIT          ((uint32_t)0x00000010U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_8BIT          ((uint32_t)0x00000020U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_12BIT         ((uint32_t)0x00000030U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_16BIT         ((uint32_t)0x00000040U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_20BIT         ((uint32_t)0x00000050U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_24BIT         ((uint32_t)0x00000060U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_28BIT         ((uint32_t)0x00000070U)
#define XSPI_XIP_WRITE_CTRL_WRADDRL_32BIT         ((uint32_t)0x00000080U)

#define XSPI_XIP_WRITE_CTRL_WRTRTYPE              ((uint32_t)0x0000000CU)    /* Bit[3:2] */
#define XSPI_XIP_WRITE_CTRL_WRTRTYPE_0            ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_WRITE_CTRL_WRTRTYPE_1            ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_WRITE_CTRL_WRTRTYPE_STANDARD_SPI                   ((uint32_t)0x00000000U)
#define XSPI_XIP_WRITE_CTRL_WRTRTYPE_ADDRESS_BY_XIP_WRITE_WRFRF     ((uint32_t)0x00000004U)
#define XSPI_XIP_WRITE_CTRL_WRTRTYPE_INSTRUCT_BY_XIP_WRITE_WRFRF    ((uint32_t)0x00000008U)


#define XSPI_XIP_WRITE_CTRL_WRFRF                 ((uint32_t)0x00000003U)    /* Bit[1:0] */
#define XSPI_XIP_WRITE_CTRL_WRFRF_0               ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_WRITE_CTRL_WRFRF_1               ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_WRITE_CTRL_WRFRF_2_LINE          ((uint32_t)0x00000001U)
#define XSPI_XIP_WRITE_CTRL_WRFRF_4_LINE          ((uint32_t)0x00000002U)
#define XSPI_XIP_WRITE_CTRL_WRFRF_8_LINE          ((uint32_t)0x00000003U)
/******** Bit definition for XSPI_XIP_WRITE_TIMING register  ********/
#define XSPI_XIP_WRITE_TIMING_TPP                 ((uint32_t)0xFFFFFFFFU)    /* Bit[31:0] */
#define XSPI_XIP_WRITE_TIMING_TPP_0               ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_XIP_WRITE_TIMING_TPP_1               ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_XIP_WRITE_TIMING_TPP_2               ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_XIP_WRITE_TIMING_TPP_3               ((uint32_t)0x00000008U)    /* Bit3*/
#define XSPI_XIP_WRITE_TIMING_TPP_4               ((uint32_t)0x00000010U)    /* Bit4*/
#define XSPI_XIP_WRITE_TIMING_TPP_5               ((uint32_t)0x00000020U)    /* Bit5*/
#define XSPI_XIP_WRITE_TIMING_TPP_6               ((uint32_t)0x00000040U)    /* Bit6*/
#define XSPI_XIP_WRITE_TIMING_TPP_7               ((uint32_t)0x00000080U)    /* Bit7*/
#define XSPI_XIP_WRITE_TIMING_TPP_8               ((uint32_t)0x00000100U)    /* Bit8*/
#define XSPI_XIP_WRITE_TIMING_TPP_9               ((uint32_t)0x00000200U)    /* Bit9*/
#define XSPI_XIP_WRITE_TIMING_TPP_10              ((uint32_t)0x00000400U)    /* Bit10*/
#define XSPI_XIP_WRITE_TIMING_TPP_11              ((uint32_t)0x00000800U)    /* Bit11*/
#define XSPI_XIP_WRITE_TIMING_TPP_12              ((uint32_t)0x00001000U)    /* Bit12*/
#define XSPI_XIP_WRITE_TIMING_TPP_13              ((uint32_t)0x00002000U)    /* Bit13*/
#define XSPI_XIP_WRITE_TIMING_TPP_14              ((uint32_t)0x00004000U)    /* Bit14*/
#define XSPI_XIP_WRITE_TIMING_TPP_15              ((uint32_t)0x00008000U)    /* Bit15*/
#define XSPI_XIP_WRITE_TIMING_TPP_16              ((uint32_t)0x00010000U)    /* Bit16*/
#define XSPI_XIP_WRITE_TIMING_TPP_17              ((uint32_t)0x00020000U)    /* Bit17*/
#define XSPI_XIP_WRITE_TIMING_TPP_18              ((uint32_t)0x00040000U)    /* Bit18*/
#define XSPI_XIP_WRITE_TIMING_TPP_19              ((uint32_t)0x00080000U)    /* Bit19*/
#define XSPI_XIP_WRITE_TIMING_TPP_20              ((uint32_t)0x00100000U)    /* Bit20*/
#define XSPI_XIP_WRITE_TIMING_TPP_21              ((uint32_t)0x00200000U)    /* Bit21*/
#define XSPI_XIP_WRITE_TIMING_TPP_22              ((uint32_t)0x00400000U)    /* Bit22*/
#define XSPI_XIP_WRITE_TIMING_TPP_23              ((uint32_t)0x00800000U)    /* Bit23*/
#define XSPI_XIP_WRITE_TIMING_TPP_24              ((uint32_t)0x01000000U)    /* Bit24*/
#define XSPI_XIP_WRITE_TIMING_TPP_25              ((uint32_t)0x02000000U)    /* Bit25*/
#define XSPI_XIP_WRITE_TIMING_TPP_26              ((uint32_t)0x04000000U)    /* Bit26*/
#define XSPI_XIP_WRITE_TIMING_TPP_27              ((uint32_t)0x08000000U)    /* Bit27*/
#define XSPI_XIP_WRITE_TIMING_TPP_28              ((uint32_t)0x10000000U)    /* Bit28*/
#define XSPI_XIP_WRITE_TIMING_TPP_29              ((uint32_t)0x20000000U)    /* Bit29*/
#define XSPI_XIP_WRITE_TIMING_TPP_30              ((uint32_t)0x40000000U)    /* Bit30*/
#define XSPI_XIP_WRITE_TIMING_TPP_31              ((uint32_t)0x80000000U)    /* Bit31*/

/******** Bit definition for XSPI_RXDS_DELAY_CTRL register  ********/
#define XSPI_RXDS_DELAY_CTRL_RXDSDELAYEN          ((uint32_t)0x00000010U)    /* Bit[4] */
#define XSPI_RXDS_DELAY_CTRL_RXDSTAPDELAY         ((uint32_t)0x0000000FU)    /* Bit[3:0] */
#define XSPI_RXDS_DELAY_CTRL_RXDSTAPDELAY_0       ((uint32_t)0x00000001U)    /* Bit0*/
#define XSPI_RXDS_DELAY_CTRL_RXDSTAPDELAY_1       ((uint32_t)0x00000002U)    /* Bit1*/
#define XSPI_RXDS_DELAY_CTRL_RXDSTAPDELAY_2       ((uint32_t)0x00000004U)    /* Bit2*/
#define XSPI_RXDS_DELAY_CTRL_RXDSTAPDELAY_3       ((uint32_t)0x00000008U)    /* Bit3*/

/** Bit definition for SPI_CTRL1 register **/
#define SPI_CTRL1_BR                        ((uint16_t)0x0007U)    /* BR[2:0] bits (Baud Rate Control) */
#define SPI_CTRL1_BR0                       ((uint16_t)0x0001U)    /* Bit 0 */
#define SPI_CTRL1_BR1                       ((uint16_t)0x0002U)    /* Bit 1 */
#define SPI_CTRL1_BR2                       ((uint16_t)0x0004U)    /* Bit 2 */
                                                                   
#define SPI_CTRL1_CLKPOL                    ((uint16_t)0x0010U)    /* Clock Polarity */
#define SPI_CTRL1_CLKPHA                    ((uint16_t)0x0020U)    /* Clock Phase */
                                                                   
#define SPI_CTRL1_MSEL                      ((uint16_t)0x0040U)    /* Master Selection */
#define SPI_CTRL1_LSBFF                     ((uint16_t)0x0080U)    /* Frame Format */
#define SPI_CTRL1_DATFF                     ((uint16_t)0x0100U)    /* Data Frame Format */
#define SPI_CTRL1_CRCNEXT                   ((uint16_t)0x0200U)    /* Transmit CRC next Software slave management */
#define SPI_CTRL1_SSOEN                     ((uint16_t)0x0400U)    /* SS Output Enable */
#define SPI_CTRL1_SSEL                      ((uint16_t)0x0800U)    /* Internal slave select  */
#define SPI_CTRL1_SSMEN                     ((uint16_t)0x1000U)    /* Software slave management */
#define SPI_CTRL1_RONLY                     ((uint16_t)0x2000U)    /* Receive only  */
#define SPI_CTRL1_BIDIROEN                  ((uint16_t)0x4000U)    /* Output enable in bidirectional mode */
#define SPI_CTRL1_BIDIRMODE                 ((uint16_t)0x8000U)    /* Bidirectional data mode enable */

/** Bit definition for SPI_CTRL2 register **/
#define SPI_CTRL2_SPIEN                     ((uint16_t)0x0001U)    /* SPI enable */
#define SPI_CTRL2_RDMAEN                    ((uint16_t)0x0002U)    /* Rx buffer DMA enable */
#define SPI_CTRL2_TDMAEN                    ((uint16_t)0x0004U)    /* Tx buffer DMA enable */
#define SPI_CTRL2_CRCEN                     ((uint16_t)0x0008U)    /* Hardware CRC calculation enable */
#define SPI_CTRL2_TEINTEN                   ((uint16_t)0x0010U)    /* Tx buffer empty interrupt enable */
#define SPI_CTRL2_RNEINTEN                  ((uint16_t)0x0020U)    /* RX buffer not empty interrupt enable */
#define SPI_CTRL2_ERRINTEN                  ((uint16_t)0x0040U)    /* Error interrupt enable */
#define SPI_CTRL2_SS_POL                    ((uint16_t)0x0080U)    /* NSS polarity control */
#define SPI_CTRL2_FIFOEN                    ((uint16_t)0x0100U)    /* FIFO mode enable */
#define SPI_CTRL2_FIFOCLR                   ((uint16_t)0x0200U)    /* FIFO clear enable */
#define SPI_CTRL2_TXFHEINTEN                ((uint16_t)0x0400U)    /* Send FIFO half empty interrupt enable */
#define SPI_CTRL2_RXFHFINTEN                ((uint16_t)0x0800U)    /* Receive FIFO half full interrupt enable */
#define SPI_CTRL2_RXFFUINTEN                ((uint16_t)0x1000U)    /* Receive FIFO full interrupt enable */
#define SPI_CTRL2_CRCNMISEN                 ((uint16_t)0x2000U)    /* CRC stop calculation enable */
#define SPI_CTRL2_RXCPINTEN                 ((uint16_t)0x4000U)    /* Receive transfer complete interrupt enable */
#define SPI_CTRL2_RNEDMABYPASS              ((uint16_t)0x8000U)    /* rxne for dma is bypass */

/** Bit definition for SPI_STS register **/
#define SPI_STS_TE                          ((uint16_t)0x0001U)    /* Transmit buffer Empty */
#define SPI_STS_RNE                         ((uint16_t)0x0002U)    /* Receive buffer Not Empty */
#define SPI_STS_BUSY                        ((uint16_t)0x0004U)    /* Busy flag */
#define SPI_STS_CRCERR                      ((uint16_t)0x0008U)    /* CRC Error flag */
#define SPI_STS_MODERR                      ((uint16_t)0x0010U)    /* Mode fault */
#define SPI_STS_OVER                        ((uint16_t)0x0020U)    /* Overrun flag */
#define SPI_STS_UNDER                       ((uint16_t)0x0040U)    /* Underrun flag */
#define SPI_STS_CHSIDE                      ((uint16_t)0x0080U)    /* Channel side */
#define SPI_STS_TXFIFHE                     ((uint16_t)0x0100U)    /* TX FIFO half empty flag */
#define SPI_STS_RXFIFHF                     ((uint16_t)0x0200U)    /* RX FIFO half empty flag */
#define SPI_STS_TXFIFFU                     ((uint16_t)0x0400U)    /* TX FIFO full flag */
#define SPI_STS_RXFIFFU                     ((uint16_t)0x0800U)    /* RX FIFO full flag */
#define SPI_STS_RXTSCP                      ((uint16_t)0x1000U)    /* In receive-only mode, the transmission complete status */

/** Bit definition for SPI_DAT register **/
#define SPI_DAT_DAT                         ((uint16_t)0xFFFFU)    /* Data Register */

/** Bit definition for SPI_CRCTDAT register **/
#define SPI_CRCTDAT_CRCTDAT                 ((uint16_t)0xFFFFU)    /* Tx CRC Register */

/** Bit definition for SPI_CRCRDAT register **/
#define SPI_CRCRDAT_CRCRDAT                 ((uint16_t)0xFFFFU)    /* Rx CRC Register */

/** Bit definition for SPI_CRCPOLY register **/
#define SPI_CRCPOLY_CRCPOLY                 ((uint16_t)0xFFFFU)    /* CRC polynomial register */

/** Bit definition for SPI_I2SCFG register **/
#define SPI_I2SCFG_I2SEN                    ((uint16_t)0x0001U)    /* I2S Enable */
#define SPI_I2SCFG_I2SMOD                   ((uint16_t)0x0002U)    /* I2S mode selection */
#define SPI_I2SCFG_I2SSTD                   ((uint16_t)0x000CU)    /* I2SSTD[1:0] bits (I2S standard selection) */
#define SPI_I2SCFG_I2SSTD0                  ((uint16_t)0x0004U)    /* Bit 0 */
#define SPI_I2SCFG_I2SSTD1                  ((uint16_t)0x0008U)    /* Bit 1 */
#define SPI_I2SCFG_I2SCFG                   ((uint16_t)0x0030U)    /* I2SCFG[1:0] bits (I2S mode setting) */
#define SPI_I2SCFG_I2SCFG0                  ((uint16_t)0x0010U)    /* Bit 0 */
#define SPI_I2SCFG_I2SCFG1                  ((uint16_t)0x0020U)    /* Bit 1 */
#define SPI_I2SCFG_DATLEN                   ((uint16_t)0x00C0U)    /* DATLEN[1:0] bits (Data length to be transferred) */
#define SPI_I2SCFG_DATLEN0                  ((uint16_t)0x0040U)    /* Bit 0 */
#define SPI_I2SCFG_DATLEN1                  ((uint16_t)0x0080U)    /* Bit 1 */
#define SPI_I2SCFG_CHLEN                    ((uint16_t)0x0100U)    /* Channel length (number of bits per audio channel) */
#define SPI_I2SCFG_PCMFSYNC                 ((uint16_t)0x0200U)    /* PCM frame synchronization */
#define SPI_I2SCFG_CLKPOL                   ((uint16_t)0x0400U)    /* steady state clock polarity */
#define SPI_I2SCFG_PCMBYPASS                ((uint16_t)0x0800U)    /* pcm long for 13bit is bypass */

/** Bit definition for SPI_I2SPREDIV register **/
#define SPI_I2SPREDIV_LDIV                  ((uint16_t)0x03FFU)    /* I2S Linear prescaler */
#define SPI_I2SPREDIV_ODDEVEN               ((uint16_t)0x0400U)    /* Odd factor for the prescaler */
#define SPI_I2SPREDIV_MCLKOEN               ((uint16_t)0x0800U)    /* Master Clock Output Enable */

/** Bit definition for SPI_RX_FIFO register **/
#define SPI_RXFIFDAT                        ((uint16_t)0xFFFFU)    /* RX FIFO Data Register */

/** Bit definition for SPI_FIFO_NUM register **/
#define SPI_FIFO_NUM_TXFBSNUM               ((uint16_t)0x0007U)    /* FIFO_NUM [2:0] bits (TX FIFO half empty NUM configuration) */
#define SPI_FIFO_NUM_TXFBSNUM0              ((uint16_t)0x0001U)    /* Bit 0 */
#define SPI_FIFO_NUM_TXFBSNUM1              ((uint16_t)0x0002U)    /* Bit 1 */
#define SPI_FIFO_NUM_TXFBSNUM2              ((uint16_t)0x0004U)    /* Bit 2*/
#define SPI_FIFO_NUM_RXFBSNUM               ((uint16_t)0x0070U)    /* FIFO_NUM [2:0] bits (RX FIFO half full NUM configuration) */
#define SPI_FIFO_NUM_RXFBSNUM0              ((uint16_t)0x0010U)    /* Bit 0 */
#define SPI_FIFO_NUM_RXFBSNUM1              ((uint16_t)0x0020U)    /* Bit 1 */
#define SPI_FIFO_NUM_RXFBSNUM2              ((uint16_t)0x0040U)    /* Bit 2*/

/** Bit definition for SPI_FIFO_CNT register **/
#define SPI_FIFO_CNT_TXFIFCNT               ((uint16_t)0x000FU)    /* FIFO_CNT[3:0] bits (TX FIFO Valid number) */
#define SPI_FIFO_CNT_TXFIFCNT0              ((uint16_t)0x0001U)    /* Bit 0 */
#define SPI_FIFO_CNT_TXFIFCNT1              ((uint16_t)0x0002U)    /* Bit 1 */
#define SPI_FIFO_CNT_TXFIFCNT2              ((uint16_t)0x0004U)    /* Bit 2*/
#define SPI_FIFO_CNT_TXFIFCNT3              ((uint16_t)0x0008U)    /* Bit 3*/
#define SPI_FIFO_CNT_RXFIFCNT               ((uint16_t)0x00F0U)    /* FIFO_CNT [3:0] bits (RX FIFO Valid number) */
#define SPI_FIFO_CNT_RXFIFCNT0              ((uint16_t)0x0010U)    /* Bit 0 */
#define SPI_FIFO_CNT_RXFIFCNT1              ((uint16_t)0x0020U)    /* Bit 1 */
#define SPI_FIFO_CNT_RXFIFCNT2              ((uint16_t)0x0040U)    /* Bit 2*/
#define SPI_FIFO_CNT_RXFIFCNT3              ((uint16_t)0x0080U)    /* Bit 3*/

/** Bit definition for SPI_TRANS_NUM register **/
#define SPI_TRANS_NUM_TRANSNUM              ((uint16_t)0xFFFFU)    /* RX FIFO Data Register */

/** Bit definition for SPI_CR3 register **/
#define SPI_CR3_DELAYTIME                   ((uint16_t)0x000FU)    /* CR[3:0] bits (Clock Sample Delay Register) */
#define SPI_CR3_DELAYTIME0                  ((uint16_t)0x0001U)    /* Bit 0 */
#define SPI_CR3_DELAYTIME1                  ((uint16_t)0x0002U)    /* Bit 1 */
#define SPI_CR3_DELAYTIME2                  ((uint16_t)0x0004U)    /* Bit 2 */
#define SPI_CR3_DELAYTIME3                  ((uint16_t)0x0008U)    /* Bit 3 */

/** Bit definition for I2SEXT_CTRL2 register **/
#define I2SEXT_CTRL2_RDMAEN                 ((uint16_t)0x0002U)    /* Rx buffer DMA enable */
#define I2SEXT_CTRL2_TDMAEN                 ((uint16_t)0x0004U)    /* Tx buffer DMA enable */
#define I2SEXT_CTRL2_TEINTEN                ((uint16_t)0x0010U)    /* Tx buffer empty interrupt enable */
#define I2SEXT_CTRL2_RNEINTEN               ((uint16_t)0x0020U)    /* RX buffer not empty interrupt enable */
#define I2SEXT_CTRL2_ERRINTEN               ((uint16_t)0x0040U)    /* Error interrupt enable */
#define I2SEXT_CTRL2_RXNEDMABYPASS          ((uint16_t)0x8000U)    /* rxne for dma is bypass */

/** Bit definition for I2SEXT_STS register **/
#define I2SEXT_STS_TE                       ((uint16_t)0x0001U)    /* Transmit buffer Empty */
#define I2SEXT_STS_RNE                      ((uint16_t)0x0002U)    /* Receive buffer Not Empty */
#define I2SEXT_STS_BUSY                     ((uint16_t)0x0004U)    /* Busy flag */
#define I2SEXT_STS_OVER                     ((uint16_t)0x0020U)    /* Overrun flag */
#define I2SEXT_STS_UNDER                    ((uint16_t)0x0040U)    /* Underrun flag */
#define I2SEXT_STS_CHSIDE                   ((uint16_t)0x0080U)    /* Channel side */

/** Bit definition for I2SEXT_DAT register **/
#define I2SEXT_DAT_DAT                      ((uint16_t)0xFFFFU)    /* Data Register */

/** Bit definition for I2SEXT_I2SCFG register **/
#define I2SEXT_I2SCFG_I2SEN                 ((uint16_t)0x0001U)    /* I2S Enable */
#define I2SEXT_I2SCFG_I2SMOD                ((uint16_t)0x0002U)    /* I2S mode selection */
#define I2SEXT_I2SCFG_I2SSTD                ((uint16_t)0x000CU)    /* STDSEL[1:0] bits (I2S standard selection) */
#define I2SEXT_I2SCFG_I2SSTD0               ((uint16_t)0x0004U)    /* Bit 0 */
#define I2SEXT_I2SCFG_I2SSTD1               ((uint16_t)0x0008U)    /* Bit 1 */
#define I2SEXT_I2SCFG_I2SCFG                ((uint16_t)0x0030U)    /* MODCFG[1:0] bits (I2S configuration mode) */
#define I2SEXT_I2SCFG_I2SCFG0               ((uint16_t)0x0010U)    /* Bit 0 */
#define I2SEXT_I2SCFG_I2SCFG1               ((uint16_t)0x0020U)    /* Bit 1 */
#define I2SEXT_I2SCFG_DATLEN                ((uint16_t)0x00C0U)    /* TDATLEN[1:0] bits (Data length to be transferred) */
#define I2SEXT_I2SCFG_DATLEN0               ((uint16_t)0x0040U)    /* Bit 0 */
#define I2SEXT_I2SCFG_DATLEN1               ((uint16_t)0x0080U)    /* Bit 1 */
#define I2SEXT_I2SCFG_CHLEN                 ((uint16_t)0x0100U)    /* Channel length (number of bits per audio channel) */
#define I2SEXT_I2SCFG_PCMFSYNC              ((uint16_t)0x0200U)    /* PCM frame synchronization */
#define I2SEXT_I2SCFG_CLKPOL                ((uint16_t)0x0400U)    /* steady state clock polarity */
#define I2SEXT_I2SCFG_PCMLBYPASS            ((uint16_t)0x0800U)    /* pcm long for 13bit is bypass */

/******** Bit definition for I2C_CTRL1 register  ********/
#define I2C_CTRL1_FTXIE                  ((uint32_t)0x80000000U) /*  FTXIE enable */
#define I2C_CTRL1_FRXIE                  ((uint32_t)0x40000000U) /*  FRXIE enable */
#define I2C_CTRL1_DFX                    ((uint32_t)0x3F000000U) /*  DFX enable */
#define I2C_CTRL1_DFX_0                  ((uint32_t)0x01000000U) /* Bit24*/
#define I2C_CTRL1_DFX_1                  ((uint32_t)0x02000000U) /* Bit25*/
#define I2C_CTRL1_DFX_2                  ((uint32_t)0x04000000U) /* Bit26*/
#define I2C_CTRL1_DFX_3                  ((uint32_t)0x08000000U) /* Bit27*/
#define I2C_CTRL1_DFX_4                  ((uint32_t)0x10000000U) /* Bit28*/
#define I2C_CTRL1_DFX_5                  ((uint32_t)0x20000000U) /* Bit29*/
#define I2C_CTRL1_CRCEN                  ((uint32_t)0x00800000U) /* CRC enable */
#define I2C_CTRL1_ALRTEN                 ((uint32_t)0x00400000U) /* SMBus alert enable */
#define I2C_CTRL1_SMBD                   ((uint32_t)0x00200000U) /* SMBus host default address enable */
#define I2C_CTRL1_SMBH                   ((uint32_t)0x00100000U) /* SMBus host address enable */
#define I2C_CTRL1_GENC                   ((uint32_t)0x00080000U) /* General call enable */
#define I2C_CTRL1_NOSTRCH                ((uint32_t)0x00020000U) /* Clock stretching disable */
#define I2C_CTRL1_SBCTL                  ((uint32_t)0x00010000U) /* Slave byte control */
#define I2C_CTRL1_DMARDEN                ((uint32_t)0x00008000U) /* DMA reception requests enable */
#define I2C_CTRL1_DMAWREN                ((uint32_t)0x00004000U) /* DMA transmission requests enable */
#define I2C_CTRL1_AFOFF                  ((uint32_t)0x00001000U) /* Analog noise filter OFF */
#define I2C_CTRL1_DF                     ((uint32_t)0x00000F00U) /* Digital noise filter */
#define I2C_CTRL1_DF_0                   ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_CTRL1_DF_1                   ((uint32_t)0x00000200U) /* Bit9*/
#define I2C_CTRL1_DF_2                   ((uint32_t)0x00000400U) /* Bit10*/
#define I2C_CTRL1_DF_3                   ((uint32_t)0x00000800U) /* Bit11*/
#define I2C_CTRL1_ERRIE                  ((uint32_t)0x00000080U) /* Errors interrupt enable */
#define I2C_CTRL1_TFCIE                  ((uint32_t)0x00000040U) /* Transfer complete interrupt enable */
#define I2C_CTRL1_STOPIE                 ((uint32_t)0x00000020U) /* STOP detection interrupt enable */
#define I2C_CTRL1_NAKIE                  ((uint32_t)0x00000010U) /* NACK received interrupt enable */
#define I2C_CTRL1_ADRIE                  ((uint32_t)0x00000008U) /* Address match interrupt enable */
#define I2C_CTRL1_RDRIE                  ((uint32_t)0x00000004U) /* RX interrupt enable */
#define I2C_CTRL1_WDRIE                  ((uint32_t)0x00000002U) /* TX interrupt enable */
#define I2C_CTRL1_I2CEN                  ((uint32_t)0x00000001U) /* Peripheral enable */

/******** Bit definition for I2C_CTRL2 register  ********/
#define I2C_CTRL2_CRCBYTE                ((uint32_t)0x04000000U) /* Packet error checking byte */
#define I2C_CTRL2_AUTOSTOP               ((uint32_t)0x02000000U) /* Automatic end mode (master mode) */
#define I2C_CTRL2_REFILL                 ((uint32_t)0x01000000U) /* NBYTES reload mode */
#define I2C_CTRL2_BYTECNT                ((uint32_t)0x00FF0000U) /* Number of bytes */
#define I2C_CTRL2_BYTECNT_0              ((uint32_t)0x00010000U) /* Bit16*/
#define I2C_CTRL2_BYTECNT_1              ((uint32_t)0x00020000U) /* Bit17*/
#define I2C_CTRL2_BYTECNT_2              ((uint32_t)0x00040000U) /* Bit18*/
#define I2C_CTRL2_BYTECNT_3              ((uint32_t)0x00080000U) /* Bit19*/
#define I2C_CTRL2_BYTECNT_4              ((uint32_t)0x00100000U) /* Bit20*/
#define I2C_CTRL2_BYTECNT_5              ((uint32_t)0x00200000U) /* Bit21*/
#define I2C_CTRL2_BYTECNT_6              ((uint32_t)0x00400000U) /* Bit22*/
#define I2C_CTRL2_BYTECNT_7              ((uint32_t)0x00800000U) /* Bit23*/
#define I2C_CTRL2_NAK                    ((uint32_t)0x00008000U) /* NACK generation (slave mode) */
#define I2C_CTRL2_STOP                   ((uint32_t)0x00004000U) /* STOP generation (master mode) */
#define I2C_CTRL2_START                  ((uint32_t)0x00002000U) /* START generation */
#define I2C_CTRL2_HDR10                  ((uint32_t)0x00001000U) /* 10-bit address header only read direction (master mode) */
#define I2C_CTRL2_ADR10                  ((uint32_t)0x00000800U) /* 10-bit addressing mode (master mode) */
#define I2C_CTRL2_RWN                    ((uint32_t)0x00000400U) /* Transfer direction (master mode) */
#define I2C_CTRL2_SADR                   ((uint32_t)0x000003FFU) /* Slave address (master mode) */
#define I2C_CTRL2_SADR_0                 ((uint32_t)0x00000001U) /* Bit0*/
#define I2C_CTRL2_SADR_1                 ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_CTRL2_SADR_2                 ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_CTRL2_SADR_3                 ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_CTRL2_SADR_4                 ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_CTRL2_SADR_5                 ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_CTRL2_SADR_6                 ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_CTRL2_SADR_7                 ((uint32_t)0x00000080U) /* Bit7*/
#define I2C_CTRL2_SADR_8                 ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_CTRL2_SADR_9                 ((uint32_t)0x00000200U) /* Bit9*/

/******** Bit definition for I2C_ADR1 register  ********/
#define I2C_ADR1_AD1EN                  ((uint32_t)0x00008000U) /* Own address 1 enable */
#define I2C_ADR1_AD1MODE                ((uint32_t)0x00000400U) /* Own address 1 10-bit mode */
#define I2C_ADR1_AD1                    ((uint32_t)0x000003FFU) /* Interface own address 1 */
#define I2C_ADR1_AD1_0                  ((uint32_t)0x00000001U) /* Bit0*/
#define I2C_ADR1_AD1_1                  ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_ADR1_AD1_2                  ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_ADR1_AD1_3                  ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_ADR1_AD1_4                  ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_ADR1_AD1_5                  ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_ADR1_AD1_6                  ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_ADR1_AD1_7                  ((uint32_t)0x00000080U) /* Bit7*/
#define I2C_ADR1_AD1_8                  ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_ADR1_AD1_9                  ((uint32_t)0x00000200U) /* Bit9*/

/******** Bit definition for I2C_ADR2 register  ********/
#define I2C_ADR2_AD2EN                  ((uint32_t)0x00008000U) /* Own address 2 enable */
#define I2C_ADR2_AD2MSK                 ((uint32_t)0x00000700U) /* AD2[7:1] is masked, No comparison is done */
#define I2C_ADR2_AD2MSK_0               ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_ADR2_AD2MSK_1               ((uint32_t)0x00000200U) /* Bit9*/
#define I2C_ADR2_AD2MSK_2               ((uint32_t)0x00000400U) /* Bit10*/
#define I2C_ADR2_AD2                    ((uint32_t)0x000000FEU) /* Own address 2 masks */
#define I2C_ADR2_AD2_0                  ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_ADR2_AD2_1                  ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_ADR2_AD2_2                  ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_ADR2_AD2_3                  ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_ADR2_AD2_4                  ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_ADR2_AD2_5                  ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_ADR2_AD2_6                  ((uint32_t)0x00000080U) /* Bit7*/

/******** Bit definition for I2C_BUSTM register  ********/
#define I2C_BUSTM_CKDIV                  ((uint32_t)0xF0000000U) /* Timings CK Divider */
#define I2C_BUSTM_CKDIV_0                ((uint32_t)0x10000000U) /* Bit28*/
#define I2C_BUSTM_CKDIV_1                ((uint32_t)0x20000000U) /* Bit29*/
#define I2C_BUSTM_CKDIV_2                ((uint32_t)0x40000000U) /* Bit30*/
#define I2C_BUSTM_CKDIV_3                ((uint32_t)0x80000000U) /* Bit31*/
#define I2C_BUSTM_DSCL                   ((uint32_t)0x00F00000U) /* Data setup time */
#define I2C_BUSTM_DSCL_0                 ((uint32_t)0x00100000U) /* Bit20*/
#define I2C_BUSTM_DSCL_1                 ((uint32_t)0x00200000U) /* Bit21*/
#define I2C_BUSTM_DSCL_2                 ((uint32_t)0x00400000U) /* Bit22*/
#define I2C_BUSTM_DSCL_3                 ((uint32_t)0x00800000U) /* Bit23*/
#define I2C_BUSTM_DSDA                   ((uint32_t)0x000F0000U) /* Data hold time */
#define I2C_BUSTM_DSDA_0                 ((uint32_t)0x00010000U) /* Bit16*/
#define I2C_BUSTM_DSDA_1                 ((uint32_t)0x00020000U) /* Bit17*/
#define I2C_BUSTM_DSDA_2                 ((uint32_t)0x00040000U) /* Bit18*/
#define I2C_BUSTM_DSDA_3                 ((uint32_t)0x00080000U) /* Bit19*/
#define I2C_BUSTM_HSCL                   ((uint32_t)0x0000FF00U) /* SCL high period (master mode) */
#define I2C_BUSTM_HSCL_0                 ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_BUSTM_HSCL_1                 ((uint32_t)0x00000200U) /* Bit9*/
#define I2C_BUSTM_HSCL_2                 ((uint32_t)0x00000400U) /* Bit10*/
#define I2C_BUSTM_HSCL_3                 ((uint32_t)0x00000800U) /* Bit11*/
#define I2C_BUSTM_HSCL_4                 ((uint32_t)0x00001000U) /* Bit12*/
#define I2C_BUSTM_HSCL_5                 ((uint32_t)0x00002000U) /* Bit13*/
#define I2C_BUSTM_HSCL_6                 ((uint32_t)0x00004000U) /* Bit14*/
#define I2C_BUSTM_HSCL_7                 ((uint32_t)0x00008000U) /* Bit15*/
#define I2C_BUSTM_LSCL                   ((uint32_t)0x000000FFU) /* SCL low period (master mode) */
#define I2C_BUSTM_LSCL_0                 ((uint32_t)0x00000001U) /* Bit0*/
#define I2C_BUSTM_LSCL_1                 ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_BUSTM_LSCL_2                 ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_BUSTM_LSCL_3                 ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_BUSTM_LSCL_4                 ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_BUSTM_LSCL_5                 ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_BUSTM_LSCL_6                 ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_BUSTM_LSCL_7                 ((uint32_t)0x00000080U) /* Bit7*/

/******** Bit definition for I2C_TMOUTR register  ********/
#define I2C_TMOUTR_TMEXTEN                ((uint32_t)0x80000000U) /* Extended clock timeout enable */
#define I2C_TMOUTR_TMOUTB                 ((uint32_t)0x0FFF0000U) /* Bus timeout B*/
#define I2C_TMOUTR_TMOUTB_0               ((uint32_t)0x00010000U) /* Bit16*/
#define I2C_TMOUTR_TMOUTB_1               ((uint32_t)0x00020000U) /* Bit17*/
#define I2C_TMOUTR_TMOUTB_2               ((uint32_t)0x00040000U) /* Bit18*/
#define I2C_TMOUTR_TMOUTB_3               ((uint32_t)0x00080000U) /* Bit19*/
#define I2C_TMOUTR_TMOUTB_4               ((uint32_t)0x00100000U) /* Bit20*/
#define I2C_TMOUTR_TMOUTB_5               ((uint32_t)0x00200000U) /* Bit21*/
#define I2C_TMOUTR_TMOUTB_6               ((uint32_t)0x00400000U) /* Bit22*/
#define I2C_TMOUTR_TMOUTB_7               ((uint32_t)0x00800000U) /* Bit23*/
#define I2C_TMOUTR_TMOUTB_8               ((uint32_t)0x01000000U) /* Bit24*/
#define I2C_TMOUTR_TMOUTB_9               ((uint32_t)0x02000000U) /* Bit25*/
#define I2C_TMOUTR_TMOUTB_10              ((uint32_t)0x04000000U) /* Bit26*/
#define I2C_TMOUTR_TMOUTB_11              ((uint32_t)0x08000000U) /* Bit27*/
#define I2C_TMOUTR_TMOUTEN                ((uint32_t)0x00008000U) /* Clock timeout enable */
#define I2C_TMOUTR_TMIDLE                 ((uint32_t)0x00001000U) /* Idle clock timeout detection */
#define I2C_TMOUTR_TMOUTA                 ((uint32_t)0x00000FFFU) /* Bus timeout A */
#define I2C_TMOUTR_TMOUTA_0               ((uint32_t)0x00000001U) /* Bit0*/
#define I2C_TMOUTR_TMOUTA_1               ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_TMOUTR_TMOUTA_2               ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_TMOUTR_TMOUTA_3               ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_TMOUTR_TMOUTA_4               ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_TMOUTR_TMOUTA_5               ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_TMOUTR_TMOUTA_6               ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_TMOUTR_TMOUTA_7               ((uint32_t)0x00000080U) /* Bit7*/
#define I2C_TMOUTR_TMOUTA_8               ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_TMOUTR_TMOUTA_9               ((uint32_t)0x00000200U) /* Bit9*/
#define I2C_TMOUTR_TMOUTA_10              ((uint32_t)0x00000400U) /* Bit10*/
#define I2C_TMOUTR_TMOUTA_11              ((uint32_t)0x00000800U) /* Bit11*/

/******** Bit definition for I2C_STSINT register  ********/
#define I2C_STSINT_FTXIS                  ((uint32_t)0x80000000U) /* Bit[31] */
#define I2C_STSINT_FRXNE                  ((uint32_t)0x40000000U) /* Bit[30] */
#define I2C_STSINT_ADRRCV                 ((uint32_t)0x00FE0000U) /* Address match code (slave mode) */
#define I2C_STSINT_ADRRCV_0               ((uint32_t)0x00020000U) /* Bit17*/
#define I2C_STSINT_ADRRCV_1               ((uint32_t)0x00040000U) /* Bit18*/
#define I2C_STSINT_ADRRCV_2               ((uint32_t)0x00080000U) /* Bit19*/
#define I2C_STSINT_ADRRCV_3               ((uint32_t)0x00100000U) /* Bit20*/
#define I2C_STSINT_ADRRCV_4               ((uint32_t)0x00200000U) /* Bit21*/
#define I2C_STSINT_ADRRCV_5               ((uint32_t)0x00400000U) /* Bit22*/
#define I2C_STSINT_ADRRCV_6               ((uint32_t)0x00800000U) /* Bit23*/
#define I2C_STSINT_DIR                    ((uint32_t)0x00010000U) /* Transfer direction (slave mode) */
#define I2C_STSINT_BUSY                   ((uint32_t)0x00008000U) /* Bus busy */
#define I2C_STSINT_QADR                   ((uint32_t)0x00004000U) /* Quick command address matched */
#define I2C_STSINT_ALRT                   ((uint32_t)0x00002000U) /* SMBus alert */
#define I2C_STSINT_TMOUT                  ((uint32_t)0x00001000U) /* Timeout or Tlow detection flag */
#define I2C_STSINT_CRCERR                 ((uint32_t)0x00000800U) /* PEC error in reception */
#define I2C_STSINT_OVF                    ((uint32_t)0x00000400U) /* Overrun/Underrun */
#define I2C_STSINT_ABLO                   ((uint32_t)0x00000200U) /* Arbitration lost */
#define I2C_STSINT_BSER                   ((uint32_t)0x00000100U) /* Bus error */
#define I2C_STSINT_TFCR                   ((uint32_t)0x00000080U) /* Transfer complete reload */
#define I2C_STSINT_TFC                    ((uint32_t)0x00000040U) /* Transfer complete (master mode) */
#define I2C_STSINT_STOPF                  ((uint32_t)0x00000020U) /* STOP detection flag */
#define I2C_STSINT_NAKF                   ((uint32_t)0x00000010U) /* NACK received flag */
#define I2C_STSINT_ADR                    ((uint32_t)0x00000008U) /* ADRess matched (slave mode)*/
#define I2C_STSINT_RDAVL                  ((uint32_t)0x00000004U) /* Receive data register not empty */
#define I2C_STSINT_WRAVL                  ((uint32_t)0x00000002U) /* Transmit interrupt status */
#define I2C_STSINT_WRE                    ((uint32_t)0x00000001U) /* Transmit data register empty */

/******** Bit definition for I2C_INTCLR register  ********/
#define I2C_INTCLR_ALRTCLR                ((uint32_t)0x00002000U)  /* Alert clear flag */
#define I2C_INTCLR_TMOUTCLR               ((uint32_t)0x00001000U)  /* Timeout clear flag */
#define I2C_INTCLR_CRCCLR                 ((uint32_t)0x00000800U)  /* PAC error clear flag */
#define I2C_INTCLR_OVFCLR                 ((uint32_t)0x00000400U)  /* Overrun/Underrun clear flag */
#define I2C_INTCLR_ABLOCLR                ((uint32_t)0x00000200U)  /* Arbitration lost clear flag */
#define I2C_INTCLR_BSERCLR                ((uint32_t)0x00000100U)  /* Bus error clear flag */
#define I2C_INTCLR_STOPCLR                ((uint32_t)0x00000020U)  /* STOP detection clear flag */
#define I2C_INTCLR_NAKCLR                 ((uint32_t)0x00000010U)  /* NACK clear flag */
#define I2C_INTCLR_ADRCLR                 ((uint32_t)0x00000008U)  /* Address matched clear flag */

/******** Bit definition for I2C_CRCR register  ********/
#define I2C_CRCR_CRC                    ((uint32_t)0x000000FFU) /* CRC register */

/******** Bit definition for I2C_RDR register  ********/
#define I2C_RDR_RDAT                   ((uint32_t)0x000000FFU) /* 8-bit receive data */

/******** Bit definition for I2C_WDR register  ********/
#define I2C_WDR_WDAT                   ((uint32_t)0x000000FFU) /* 8-bit transmit data */

/******** Bit definition for I2C_HSBUSTM register  ********/
#define I2C_HSBUSTM_HSCKDIV                ((uint32_t)0xF0000000U) /* High speed mode timing prescaler*/
#define I2C_HSBUSTM_HSCKDIV_0              ((uint32_t)0x10000000U) /* Bit28*/
#define I2C_HSBUSTM_HSCKDIV_1              ((uint32_t)0x20000000U) /* Bit29*/
#define I2C_HSBUSTM_HSCKDIV_2              ((uint32_t)0x40000000U) /* Bit30*/
#define I2C_HSBUSTM_HSCKDIV_3              ((uint32_t)0x80000000U) /* Bit31*/
#define I2C_HSBUSTM_HSDSCL                 ((uint32_t)0x00F00000U) /* High speed mode Data setup time*/
#define I2C_HSBUSTM_HSDSCL_0               ((uint32_t)0x00100000U) /* Bit20*/
#define I2C_HSBUSTM_HSDSCL_1               ((uint32_t)0x00200000U) /* Bit21*/
#define I2C_HSBUSTM_HSDSCL_2               ((uint32_t)0x00400000U) /* Bit22*/
#define I2C_HSBUSTM_HSDSCL_3               ((uint32_t)0x00800000U) /* Bit23*/
#define I2C_HSBUSTM_HSDSDA                 ((uint32_t)0x000F0000U) /* High speed mode Data hold time*/
#define I2C_HSBUSTM_HSDSDA_0               ((uint32_t)0x00010000U) /* Bit16*/
#define I2C_HSBUSTM_HSDSDA_1               ((uint32_t)0x00020000U) /* Bit17*/
#define I2C_HSBUSTM_HSDSDA_2               ((uint32_t)0x00040000U) /* Bit18*/
#define I2C_HSBUSTM_HSDSDA_3               ((uint32_t)0x00080000U) /* Bit19*/
#define I2C_HSBUSTM_HSHSCL                 ((uint32_t)0x0000FF00U) /* High speed mode SCL High period */
#define I2C_HSBUSTM_HSHSCL_0               ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_HSBUSTM_HSHSCL_1               ((uint32_t)0x00000200U) /* Bit9*/
#define I2C_HSBUSTM_HSHSCL_2               ((uint32_t)0x00000400U) /* Bit10*/
#define I2C_HSBUSTM_HSHSCL_3               ((uint32_t)0x00000800U) /* Bit11*/
#define I2C_HSBUSTM_HSHSCL_4               ((uint32_t)0x00001000U) /* Bit12*/
#define I2C_HSBUSTM_HSHSCL_5               ((uint32_t)0x00002000U) /* Bit13*/
#define I2C_HSBUSTM_HSHSCL_6               ((uint32_t)0x00004000U) /* Bit14*/
#define I2C_HSBUSTM_HSHSCL_7               ((uint32_t)0x00008000U) /* Bit15*/
#define I2C_HSBUSTM_HSLSCL                 ((uint32_t)0x000000FFU) /* High speed mode SCL low period */
#define I2C_HSBUSTM_HSLSCL_0               ((uint32_t)0x00000001U) /* Bit0*/
#define I2C_HSBUSTM_HSLSCL_1               ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_HSBUSTM_HSLSCL_2               ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_HSBUSTM_HSLSCL_3               ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_HSBUSTM_HSLSCL_4               ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_HSBUSTM_HSLSCL_5               ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_HSBUSTM_HSLSCL_6               ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_HSBUSTM_HSLSCL_7               ((uint32_t)0x00000080U) /* Bit7*/

/******** Bit definition for I2C_FIFOCSR register  ********/
#define I2C_FIFOCSR_TFE                    ((uint32_t)0x80000000U) /* Set TX FIFO active*/
#define I2C_FIFOCSR_RFE                    ((uint32_t)0x40000000U) /* Set RX FIFO active*/
#define I2C_FIFOCSR_TXILEVEL               ((uint32_t)0x0F000000U) /* Bit[27:24] */
#define I2C_FIFOCSR_TXILEVEL_0             ((uint32_t)0x01000000U) /* Bit24*/
#define I2C_FIFOCSR_TXILEVEL_1             ((uint32_t)0x02000000U) /* Bit25*/
#define I2C_FIFOCSR_TXILEVEL_2             ((uint32_t)0x04000000U) /* Bit26*/
#define I2C_FIFOCSR_TXILEVEL_3             ((uint32_t)0x08000000U) /* Bit27*/
#define I2C_FIFOCSR_RXILEVEL               ((uint32_t)0x000F0000U) /* Bit[19:16] */
#define I2C_FIFOCSR_RXILEVEL_0             ((uint32_t)0x00010000U) /* Bit16*/
#define I2C_FIFOCSR_RXILEVEL_1             ((uint32_t)0x00020000U) /* Bit17*/
#define I2C_FIFOCSR_RXILEVEL_2             ((uint32_t)0x00040000U) /* Bit18*/
#define I2C_FIFOCSR_RXILEVEL_3             ((uint32_t)0x00080000U) /* Bit19*/
#define I2C_FIFOCSR_TXFLEVEL               ((uint32_t)0x00000F00U) /* TX FIFO filled level*/
#define I2C_FIFOCSR_TXFLEVEL_0             ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_FIFOCSR_TXFLEVEL_1             ((uint32_t)0x00000200U) /* Bit9*/
#define I2C_FIFOCSR_TXFLEVEL_2             ((uint32_t)0x00000400U) /* Bit10*/
#define I2C_FIFOCSR_TXFLEVEL_3             ((uint32_t)0x00000800U) /* Bit11*/
#define I2C_FIFOCSR_RXFLEVEL               ((uint32_t)0x0000000FU) /* RX FIFO filled level*/
#define I2C_FIFOCSR_RXFLEVEL_0             ((uint32_t)0x00000001U) /* Bit0*/
#define I2C_FIFOCSR_RXFLEVEL_1             ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_FIFOCSR_RXFLEVEL_2             ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_FIFOCSR_RXFLEVEL_3             ((uint32_t)0x00000008U) /* Bit3*/

/******** Bit definition for I2C_QCMD register  ********/
#define I2C_QCMD_QCMDEN                 ((uint32_t)0x00008000U) /* SMB Quick command enable*/
#define I2C_QCMD_QCMDAD                 ((uint32_t)0x000000FEU) /* SMB Quick command address*/
#define I2C_QCMD_QCMDAD_0               ((uint32_t)0x00000002U) /* Bit1*/
#define I2C_QCMD_QCMDAD_1               ((uint32_t)0x00000004U) /* Bit2*/
#define I2C_QCMD_QCMDAD_2               ((uint32_t)0x00000008U) /* Bit3*/
#define I2C_QCMD_QCMDAD_3               ((uint32_t)0x00000010U) /* Bit4*/
#define I2C_QCMD_QCMDAD_4               ((uint32_t)0x00000020U) /* Bit5*/
#define I2C_QCMD_QCMDAD_5               ((uint32_t)0x00000040U) /* Bit6*/
#define I2C_QCMD_QCMDAD_6               ((uint32_t)0x00000080U) /* Bit7*/

/******** Bit definition for I2C_GFLTRCTRL register  ********/
#define I2C_GFLTRCTRL_SCLAFENN               ((uint32_t)0x00008000U) /* SCL analog filter enable*/
#define I2C_GFLTRCTRL_SCLAFW                 ((uint32_t)0x00003000U) /* SCL analog filter adjustment range control*/
#define I2C_GFLTRCTRL_SCLAFW_0               ((uint32_t)0x00001000U) /* Bit12*/
#define I2C_GFLTRCTRL_SCLAFW_1               ((uint32_t)0x00002000U) /* Bit13*/
#define I2C_GFLTRCTRL_SDAAFENN               ((uint32_t)0x00000800U) /* SDA analog filter enable*/
#define I2C_GFLTRCTRL_SDAAFW                 ((uint32_t)0x00000300U) /* SDA analog filter adjustment range control*/
#define I2C_GFLTRCTRL_SDAAFW_0               ((uint32_t)0x00000100U) /* Bit8*/
#define I2C_GFLTRCTRL_SDAAFW_1               ((uint32_t)0x00000200U) /* Bit9*/


/** Bit definition for USART_CTRL1 register **/
#define USART_CTRL1_UEN         ((uint32_t)0x00000001U) /* USART Enable */
#define USART_CTRL1_RXEN        ((uint32_t)0x00000002U) /* Receiver Enable */
#define USART_CTRL1_TXEN        ((uint32_t)0x00000004U) /* Transmitter Enable */
#define USART_CTRL1_PSEL        ((uint32_t)0x00000008U) /* Parity Selection */
#define USART_CTRL1_PCEN        ((uint32_t)0x00000010U) /* Parity Control Enable */
#define USART_CTRL1_WL          ((uint32_t)0x00000020U) /* Word length */
#define USART_CTRL1_RCVWU       ((uint32_t)0x00000040U) /* Receiver wakeup */
#define USART_CTRL1_WUM         ((uint32_t)0x00000080U) /* Wakeup method */
#define USART_CTRL1_IDLEIEN     ((uint32_t)0x00000100U) /* IDLE Interrupt Enable */
#define USART_CTRL1_RXDNEIEN    ((uint32_t)0x00000200U) /* RXNE Interrupt Enable */
#define USART_CTRL1_TXDEIEN     ((uint32_t)0x00000400U) /* TXE Interrupt Enable */
#define USART_CTRL1_TXCIEN      ((uint32_t)0x00000800U) /* Transmission Complete Interrupt Enable */
#define USART_CTRL1_PEIEN       ((uint32_t)0x00001000U) /* PE Interrupt Enable */
#define USART_CTRL1_SDBRK       ((uint32_t)0x00002000U) /* Send Break */
#define USART_CTRL1_DEM         ((uint32_t)0x00004000U) /* Driver enable mode */
#define USART_CTRL1_DEP         ((uint32_t)0x00008000U) /* Driver enable polarity selection */
#define USART_CTRL1_DEDT_MASK   ((uint32_t)0x001F0000U) /* Driver Enable deassertion time mask */
#define USART_CTRL1_DEAT_MASK   ((uint32_t)0x03E00000U) /* Driver Enable assertion time mask */
#define USART_CTRL1_OSPM        ((uint32_t)0x04000000U) /* Oversampling mode */
#define USART_CTRL1_SWAP        ((uint32_t)0x08000000U) /* Swap TX/RX pins */
#define USART_CTRL1_IFCEN       ((uint32_t)0x10000000U) /* Idle frame controllable enable */

/** Bit definition for USART_CTRL2 register **/
#define USART_CTRL2_ADDR        ((uint32_t)0x0000000FU) /* Address of the USART node */
#define USART_CTRL2_STPB        ((uint32_t)0x00000060U) /* STOP[1:0] bits (STOP bits) */
#define USART_CTRL2_STPB_0      ((uint32_t)0x00000020U) /* Bit 0 */
#define USART_CTRL2_STPB_1      ((uint32_t)0x00000040U) /* Bit 1 */
#define USART_CTRL2_CLKEN       ((uint32_t)0x00000100U) /* Clock Enable */
#define USART_CTRL2_CLKPOL      ((uint32_t)0x00000200U) /* Clock Polarity */
#define USART_CTRL2_CLKPHA      ((uint32_t)0x00000400U) /* Clock Phase */
#define USART_CTRL2_LBCLK       ((uint32_t)0x00000800U) /* Last Bit Clock pulse */
#define USART_CTRL2_LINMEN      ((uint32_t)0x00001000U) /* LIN mode enable */
#define USART_CTRL2_LINBDIEN    ((uint32_t)0x00002000U) /* LIN Break Detection Interrupt Enable */
#define USART_CTRL2_LINBDL      ((uint32_t)0x00004000U) /* LIN Break Detection Length */
#define USART_CTRL2_RTOEN       ((uint32_t)0x00008000U) /* Receiver timeout enable */
#define USART_CTRL2_RTOCF       ((uint32_t)0x00010000U) /* Receiver timeout clear flag */
#define USART_CTRL2_RTOIEN      ((uint32_t)0x00020000U) /* Receiver timeout interrupt enable */
#define USART_CTRL2_PEFLOSE     ((uint32_t)0x00040000U) /* PEF Data Discard Enable Bit */
#define USART_CTRL2_NEFLOSE     ((uint32_t)0x00080000U) /* NEF Data Discard Enable Bit */
#define USART_CTRL2_FEFLOSE     ((uint32_t)0x00100000U) /* FEF Data Discard Enable Bit */

/** Bit definition for USART_CTRL3 register **/
#define USART_CTRL3_CTSEN   ((uint32_t)0x00000001U) /* CTS Enable */
#define USART_CTRL3_CTSIEN  ((uint32_t)0x00000002U) /* CTS Interrupt Enable */
#define USART_CTRL3_RTSEN   ((uint32_t)0x00000004U) /* RTS Enable */
#define USART_CTRL3_HDMEN   ((uint32_t)0x00000008U) /* Half-Duplex Selection */
#define USART_CTRL3_DMATXEN ((uint32_t)0x00000010U) /* DMA Enable Transmitter */
#define USART_CTRL3_DMARXEN ((uint32_t)0x00000020U) /* DMA Enable Receiver */
#define USART_CTRL3_ERRIEN  ((uint32_t)0x00000040U) /* Error Interrupt Enable */
#define USART_CTRL3_IRDAMEN ((uint32_t)0x00000080U) /* IrDA mode Enable */
#define USART_CTRL3_IRDALP  ((uint32_t)0x00000100U) /* IrDA Low-Power */
#define USART_CTRL3_SCMEN   ((uint32_t)0x00000200U) /* Smartcard mode enable */
#define USART_CTRL3_SCNACK  ((uint32_t)0x00000400U) /* Smartcard NACK enable */

/** Bit definition for USART_STS register **/
#define USART_STS_TXFF      ((uint32_t)0x00000001U) /* Send FIFO full */
#define USART_STS_RXFF      ((uint32_t)0x00000002U) /* Receive FIFO full */
#define USART_STS_TXFE      ((uint32_t)0x00000004U) /* Send FIFO empty*/
#define USART_STS_RXFE      ((uint32_t)0x00000008U) /* Receive FIFO empty */
#define USART_STS_RXFT      ((uint32_t)0x00000010U) /* RX FIFO threshold */
#define USART_STS_TXFT      ((uint32_t)0x00000020U) /* TX FIFO threshold*/
#define USART_STS_IDLEF     ((uint32_t)0x00000040U) /* IDLE line detected */
#define USART_STS_TXDE      ((uint32_t)0x00000080U) /* Transmit Data Register Empty */
#define USART_STS_TXC       ((uint32_t)0x00000100U) /* Transmission Complete */
#define USART_STS_RXDNE     ((uint32_t)0x00000200U) /* Read Data Register Not Empty */
#define USART_STS_CTSF      ((uint32_t)0x00000400U) /* CTS Flag */
#define USART_STS_LINBDF    ((uint32_t)0x00000800U) /* LIN Break Detection Flag */
#define USART_STS_PEF       ((uint32_t)0x00001000U) /* Parity Error */
#define USART_STS_OREF      ((uint32_t)0x00002000U) /* OverRun Error */
#define USART_STS_NEF       ((uint32_t)0x00004000U) /* Noise Error Flag */
#define USART_STS_FEF       ((uint32_t)0x00008000U) /* Framing Error */
#define USART_STS_RTOF      ((uint32_t)0x00010000U) /* recevier timeout */
#define USART_STS_PELOSEF   ((uint32_t)0x00020000U) /* Received Data PE Error Discard Flag */
#define USART_STS_NELOSEF   ((uint32_t)0x00040000U) /* Received Data NE Error Discard Flag */
#define USART_STS_FELOSEF   ((uint32_t)0x00080000U) /* Received Data FE Error Discard Flag */

/** Bit definition for USART_DAT register **/
#define USART_DAT_DATV      ((uint32_t)0x000001FFU) /* Data value */

/** Bit definition for USART_BRCF register **/
#define USART_BRCF_DIV_Decimal ((uint32_t)0x000FU) /* Fraction of USARTDIV */
#define USART_BRCF_DIV_Integer ((uint32_t)0xFFF0U) /* Mantissa of USARTDIV */

/** Bit definition for USART_GTP register **/
#define USART_GTP_PSCV   ((uint32_t)0x00FFU) /* PSC[7:0] bits (Prescaler value) */
#define USART_GTP_PSCV_0 ((uint32_t)0x0001U) /* Bit 0 */
#define USART_GTP_PSCV_1 ((uint32_t)0x0002U) /* Bit 1 */
#define USART_GTP_PSCV_2 ((uint32_t)0x0004U) /* Bit 2 */
#define USART_GTP_PSCV_3 ((uint32_t)0x0008U) /* Bit 3 */
#define USART_GTP_PSCV_4 ((uint32_t)0x0010U) /* Bit 4 */
#define USART_GTP_PSCV_5 ((uint32_t)0x0020U) /* Bit 5 */
#define USART_GTP_PSCV_6 ((uint32_t)0x0040U) /* Bit 6 */
#define USART_GTP_PSCV_7 ((uint32_t)0x0080U) /* Bit 7 */

#define USART_GTP_GTV ((uint32_t)0xFF00U) /* Guard time value */

/** Bit definition for USART_FIFO register **/
#define USART_FIFO_EN               ((uint32_t)0x00000001U) /* FIFO model enable */
#define USART_FIFO_CLR              ((uint32_t)0x00000002U) /* FIFO clear */
#define USART_FIFO_TXFTCFG_MASK     ((uint32_t)0x0000001CU) /* TXFIFO threshold configuration */
#define USART_FIFO_RXFTCFG_MASK     ((uint32_t)0x000000E0U) /* RXFIFO threshold configuration */
#define USART_FIFO_TXFFIEN          ((uint32_t)0x00000100U) /* TXFIFO full interrupt enable */
#define USART_FIFO_RXFFIEN          ((uint32_t)0x00000200U) /* RXFIFO full interrupt enable */
#define USART_FIFO_TXFEIEN          ((uint32_t)0x00000400U) /* TXFIFO empty interrupt enable */
#define USART_FIFO_RXFEIEN          ((uint32_t)0x00000800U) /* RXFIFO empty interrupt enable */
#define USART_FIFO_RXFTIEN          ((uint32_t)0x00001000U) /* RXFIFO threshold interrupt enable */
#define USART_FIFO_TXFTIEN          ((uint32_t)0x00002000U) /* TXFIFO threshold interrupt enable */
#define USART_FIFO_RXCNT_MASK       ((uint32_t)0x0003C000U) /* number of  RXFIFO valid data mask */
#define USART_FIFO_TXCNT_MASK       ((uint32_t)0x003C0000U) /* number of  TXFIFO valid data mask */

/** Bit definition for USART_IFW register **/
#define USART_IFW_WIDTH_MASK        ((uint32_t)0x0FFFFFFFU) /* Receiver timeout value */

/*** USB High Speed ***/
/** Bit definition for USBHS_GCTRLSTS register **/
#define USBHS_GCTRLSTS_VBVALOVEN_POS                   (2U)
#define USBHS_GCTRLSTS_VBVALOVEN                       ((uint32_t)0x00000004U)   /* VBUS valid override enable */
#define USBHS_GCTRLSTS_VBVALOVAL_POS                   (3U)
#define USBHS_GCTRLSTS_VBVALOVAL                       ((uint32_t)0x00000008U)   /* VBUS valid override value */
#define USBHS_GCTRLSTS_AVALOVEN_POS                    (4U)
#define USBHS_GCTRLSTS_AVALOVEN                        ((uint32_t)0x00000010U)   /* A perpheral session valid override enable */
#define USBHS_GCTRLSTS_AVALOVAL_POS                    (5U)
#define USBHS_GCTRLSTS_AVALOVAL                        ((uint32_t)0x00000020U)   /* A perpheral session valid override value */
#define USBHS_GCTRLSTS_BVALOVEN_POS                    (6U)
#define USBHS_GCTRLSTS_BVALOVEN                        ((uint32_t)0x00000040U)   /* B perpheral session valid override enable */
#define USBHS_GCTRLSTS_BVALOVAL_POS                    (7U)
#define USBHS_GCTRLSTS_BVALOVAL                        ((uint32_t)0x00000080U)   /* B perpheral session valid override value */
#define USBHS_GCTRLSTS_IDSTS_POS                       (16U)
#define USBHS_GCTRLSTS_IDSTS                           ((uint32_t)0x00010000U)   /* ID pin status */
#define USBHS_GCTRLSTS_DETIM_POS                       (17U)
#define USBHS_GCTRLSTS_DETIM                           ((uint32_t)0x00020000U)   /* Debounce valid */
#define USBHS_GCTRLSTS_ASVLD_POS                       (18U)
#define USBHS_GCTRLSTS_ASVLD                           ((uint32_t)0x00040000U)   /* A session valid */
#define USBHS_GCTRLSTS_BSVLD_POS                       (19U)
#define USBHS_GCTRLSTS_BSVLD                           ((uint32_t)0x00080000U)   /* B session valid */ 
#define USBHS_GCTRLSTS_CMODE_POS                       (21U)
#define USBHS_GCTRLSTS_CMODE                           ((uint32_t)0x00200000U)   /* Current mode */                          


/** Bit definition for USBHS_GAHBCFG register **/
#define USBHS_GAHBCFG_GINTEN_POS                       (0U)
#define USBHS_GAHBCFG_GINTEN                           ((uint32_t)0x00000001U)
#define USBHS_GAHBCFG_BURSTTYP_POS                     (1U)
#define USBHS_GAHBCFG_BURSTTYP                         ((uint32_t)0x0000001EU)
#define USBHS_GAHBCFG_DMAEN_POS                        (5U)
#define USBHS_GAHBCFG_DMAEN                            ((uint32_t)0x00000020U)
#define USBHS_GAHBCFG_NPTXFETH_POS                     (7U)
#define USBHS_GAHBCFG_NPTXFETH                         ((uint32_t)0x00000080U)
#define USBHS_GAHBCFG_PTXFETH_POS                      (8U)
#define USBHS_GAHBCFG_PTXFETH                          ((uint32_t)0x00000100U)

/**  Bit definition for USBHS_GCFG register **/
#define USBHS_GCFG_TOCAL_POS                           (0U)
#define USBHS_GCFG_TOCAL                               ((uint32_t)0x00000007U)
#define USBHS_GCFG_PHYIF_POS                           (3U)
#define USBHS_GCFG_PHYIF                               ((uint32_t)0x00000008U)
#define USBHS_GCFG_PHYSEL_POS                          (6U)
#define USBHS_GCFG_PHYSEL                              ((uint32_t)0x00000040U)
#define USBHS_GCFG_TRDTIM_POS                          (10U)
#define USBHS_GCFG_TRDTIM                              ((uint32_t)0x00003C00U)
#define USBHS_GCFG_FHMODE_POS                          (29U)
#define USBHS_GCFG_FHMODE                              ((uint32_t)0x20000000U)
#define USBHS_GCFG_FDMODE_POS                          (30U)
#define USBHS_GCFG_FDMODE                              ((uint32_t)0x40000000U)

/**  Bit definition for USBHS_GRSTCTRL register **/
#define USBHS_GRSTCTRL_CSRST_POS                        (0U)
#define USBHS_GRSTCTRL_CSRST                            ((uint32_t)0x00000001U)
#define USBHS_GRSTCTRL_PFSSRST_POS                      (1U)
#define USBHS_GRSTCTRL_PFSSRST                          ((uint32_t)0x00000002U)
#define USBHS_GRSTCTRL_HFCRST_POS                       (2U)
#define USBHS_GRSTCTRL_HFCRST                           ((uint32_t)0x00000004U)
#define USBHS_GRSTCTRL_RXFFLSH_POS                      (4U)
#define USBHS_GRSTCTRL_RXFFLSH                          ((uint32_t)0x00000010U)
#define USBHS_GRSTCTRL_TXFFLSH_POS                      (5U)
#define USBHS_GRSTCTRL_TXFFLSH                          ((uint32_t)0x00000020U)
#define USBHS_GRSTCTRL_TXFNUM_POS                       (6U)
#define USBHS_GRSTCTRL_TXFNUM                           ((uint32_t)0x000007C0U)
#define USBHS_GRSTCTRL_SRSTDNE_POS                      (29U)
#define USBHS_GRSTCTRL_SRSTDNE                          ((uint32_t)0x20000000U)
#define USBHS_GRSTCTRL_DMAREQ_POS                       (30U)
#define USBHS_GRSTCTRL_DMAREQ                           ((uint32_t)0x40000000U)
#define USBHS_GRSTCTRL_AHBIDLE_POS                      (31U)
#define USBHS_GRSTCTRL_AHBIDLE                          ((uint32_t)0x80000000U)

/** Bit definition for USBHS_GINTSTS register **/
#define USBHS_GINTSTS_CMODE_POS                        (0U)
#define USBHS_GINTSTS_CMODE                            ((uint32_t)0x00000001U)
#define USBHS_GINTSTS_MODMISIF_POS                     (1U)
#define USBHS_GINTSTS_MODMISIF                         ((uint32_t)0x00000002U)
#define USBHS_GINTSTS_SOFIF_POS                        (3U)
#define USBHS_GINTSTS_SOFIF                            ((uint32_t)0x00000008U)
#define USBHS_GINTSTS_RXFNEIF_POS                      (4U)
#define USBHS_GINTSTS_RXFNEIF                          ((uint32_t)0x00000010U)
#define USBHS_GINTSTS_NPTXFEIF_POS                     (5U)
#define USBHS_GINTSTS_NPTXFEIF                         ((uint32_t)0x00000020U)
#define USBHS_GINTSTS_GINNPNAKEIF_POS                  (6U)
#define USBHS_GINTSTS_GINNPNAKEIF                      ((uint32_t)0x00000040U)
#define USBHS_GINTSTS_GOUTNAKEIF_POS                   (7U)
#define USBHS_GINTSTS_GOUTNAKEIF                       ((uint32_t)0x00000080U)
#define USBHS_GINTSTS_ESUSPIF_POS                      (10U)
#define USBHS_GINTSTS_ESUSPIF                          ((uint32_t)0x00000400U)
#define USBHS_GINTSTS_USBSUSPIF_POS                    (11U)
#define USBHS_GINTSTS_USBSUSPIF                        ((uint32_t)0x00000800U)
#define USBHS_GINTSTS_USBRSTIF_POS                     (12U)
#define USBHS_GINTSTS_USBRSTIF                         ((uint32_t)0x00001000U)
#define USBHS_GINTSTS_ENUMDIF_POS                      (13U)
#define USBHS_GINTSTS_ENUMDIF                          ((uint32_t)0x00002000U)
#define USBHS_GINTSTS_ISOUTPDIF_POS                    (14U)
#define USBHS_GINTSTS_ISOUTPDIF                        ((uint32_t)0x00004000U)
#define USBHS_GINTSTS_EOPFIF_POS                       (15U)
#define USBHS_GINTSTS_EOPFIF                           ((uint32_t)0x00008000U)
#define USBHS_GINTSTS_INEPIF_POS                       (18U)
#define USBHS_GINTSTS_INEPIF                           ((uint32_t)0x00040000U)
#define USBHS_GINTSTS_OUTEPIF_POS                      (19U)
#define USBHS_GINTSTS_OUTEPIF                          ((uint32_t)0x00080000U)
#define USBHS_GINTSTS_ISOINCIF_POS                     (20U)
#define USBHS_GINTSTS_ISOINCIF                         ((uint32_t)0x00100000U)
#define USBHS_GINTSTS_PTNCIF_ISOUTNCIF_POS             (21U)
#define USBHS_GINTSTS_PTNCIF_ISOUTNCIF                 ((uint32_t)0x00200000U)
#define USBHS_GINTSTS_FETSUSPIF_POS                    (22U)
#define USBHS_GINTSTS_FETSUSPIF                        ((uint32_t)0x00400000U)
#define USBHS_GINTSTS_RSTDIF_POS                       (23U)
#define USBHS_GINTSTS_RSTDIF                           ((uint32_t)0x00800000U)
#define USBHS_GINTSTS_HPIF_POS                         (24U)
#define USBHS_GINTSTS_HPIF                             ((uint32_t)0x01000000U)
#define USBHS_GINTSTS_HCHIF_POS                        (25U)
#define USBHS_GINTSTS_HCHIF                            ((uint32_t)0x02000000U)
#define USBHS_GINTSTS_PTXFEIF_POS                      (26U)
#define USBHS_GINTSTS_PTXFEIF                          ((uint32_t)0x04000000U)
#define USBHS_GINTSTS_IDSTSCIF_POS                     (28U)
#define USBHS_GINTSTS_IDSTSCIF                         ((uint32_t)0x10000000U)
#define USBHS_GINTSTS_DISCIF_POS                       (29U)
#define USBHS_GINTSTS_DISCIF                           ((uint32_t)0x20000000U)
#define USBHS_GINTSTS_WKUPIF_POS                       (31U)
#define USBHS_GINTSTS_WKUPIF                           ((uint32_t)0x80000000U)

/** Bit definition for USBHS_GINTEN register **/
#define USBHS_GINTEN_MODMISIEN_POS                     (1U)
#define USBHS_GINTEN_MODMISIEN                         ((uint32_t)0x00000002U)
#define USBHS_GINTEN_USBHSIEN_POS                      (2U)
#define USBHS_GINTEN_USBHSIEN                          ((uint32_t)0x00000004U)
#define USBHS_GINTEN_SOFIEN_POS                        (3U)
#define USBHS_GINTEN_SOFIEN                            ((uint32_t)0x00000008U)
#define USBHS_GINTEN_RXFNEIEN_POS                      (4U)
#define USBHS_GINTEN_RXFNEIEN                          ((uint32_t)0x00000010U)
#define USBHS_GINTEN_NPTXFEIEN_POS                     (5U)
#define USBHS_GINTEN_NPTXFEIEN                         ((uint32_t)0x00000020U)
#define USBHS_GINTEN_GINNPNAKEIEN_POS                  (6U)
#define USBHS_GINTEN_GINNPNAKEIEN                      ((uint32_t)0x00000040U)
#define USBHS_GINTEN_GOUTNAKEIEN_POS                   (7U)
#define USBHS_GINTEN_GOUTNAKEIEN                       ((uint32_t)0x00000080U)
#define USBHS_GINTEN_ESUSPIEN_POS                      (10U)
#define USBHS_GINTEN_ESUSPIEN                          ((uint32_t)0x00000400U)
#define USBHS_GINTEN_USBSUSPIEN_POS                    (11U)
#define USBHS_GINTEN_USBSUSPIEN                        ((uint32_t)0x00000800U)
#define USBHS_GINTEN_USBRSTIEN_POS                     (12U)
#define USBHS_GINTEN_USBRSTIEN                         ((uint32_t)0x00001000U)
#define USBHS_GINTEN_ENUMDIEN_POS                      (13U)
#define USBHS_GINTEN_ENUMDIEN                          ((uint32_t)0x00002000U)
#define USBHS_GINTEN_ISOUTPDIEN_POS                    (14U)
#define USBHS_GINTEN_ISOUTPDIEN                        ((uint32_t)0x00004000U)
#define USBHS_GINTEN_EOPFIEN_POS                       (15U)
#define USBHS_GINTEN_EOPFIEN                           ((uint32_t)0x00008000U)
#define USBHS_GINTEN_INEPIEN_POS                       (18U)
#define USBHS_GINTEN_INEPIEN                           ((uint32_t)0x00040000U)
#define USBHS_GINTEN_OUTEPIEN_POS                      (19U)
#define USBHS_GINTEN_OUTEPIEN                          ((uint32_t)0x00080000U)
#define USBHS_GINTEN_ISOINCIEN_POS                     (20U)
#define USBHS_GINTEN_ISOINCIEN                         ((uint32_t)0x00100000U)
#define USBHS_GINTEN_PTNCIEN_ISOUTNCIEN_POS            (21U)
#define USBHS_GINTEN_PTNCIEN_ISOUTNCIEN                ((uint32_t)0x00200000U)
#define USBHS_GINTEN_FETSUSPIEN_POS                    (22U)
#define USBHS_GINTEN_FETSUSPIEN                        ((uint32_t)0x00400000U)
#define USBHS_GINTEN_RSTDIEN_POS                       (23U)
#define USBHS_GINTEN_RSTDIEN                           ((uint32_t)0x00800000U)
#define USBHS_GINTEN_HPIEN_POS                         (24U)
#define USBHS_GINTEN_HPIEN                             ((uint32_t)0x01000000U)
#define USBHS_GINTEN_HCHIEN_POS                        (25U)
#define USBHS_GINTEN_HCHIEN                            ((uint32_t)0x02000000U)
#define USBHS_GINTEN_PTXFEIEN_POS                      (26U)
#define USBHS_GINTEN_PTXFEIEN                          ((uint32_t)0x04000000U)
#define USBHS_GINTEN_IDSTSCIEN_POS                     (28U)
#define USBHS_GINTEN_IDSTSCIEN                         ((uint32_t)0x10000000U)
#define USBHS_GINTEN_DISCIEN_POS                       (29U)
#define USBHS_GINTEN_DISCIEN                           ((uint32_t)0x20000000U)
#define USBHS_GINTEN_VBUSVIF_POS                       (30U)
#define USBHS_GINTEN_VBUSVIF                           ((uint32_t)0x40000000U)
#define USBHS_GINTEN_WKUPIEN_POS                       (31U)
#define USBHS_GINTEN_WKUPIEN                           ((uint32_t)0x80000000U)

/** Bit definition for USBHS_GRXSTS/USBHS_GRXSTSP register **/
#define USBHS_GRXSTS_CHEPNUM_POS                      (0U)
#define USBHS_GRXSTS_CHEPNUM                          ((uint32_t)0x0000000FU)
#define USBHS_GRXSTS_BCNT_POS                         (4U)
#define USBHS_GRXSTS_BCNT                             ((uint32_t)0x00007FF0U)
#define USBHS_GRXSTS_DPID_POS                         (15U)
#define USBHS_GRXSTS_DPID                             ((uint32_t)0x00018000U)
#define USBHS_GRXSTS_PKTSTS_POS                       (17U)
#define USBHS_GRXSTS_PKTSTS                           ((uint32_t)0x001E0000U)
#define USBHS_GRXSTS_FUNM_POS                         (21U)
#define USBHS_GRXSTS_FUNM                             ((uint32_t)0x01E00000U)

/** Bit definition for USBHS_GRXFSIZ register **/
#define USBHS_GRXFSIZ_RXFDEP                           ((uint32_t)0x000007FFU)

/** Bit definition for USBHS_HNPTXFSIZ register **/
#define USBHS_HNPTXFSIZ_NPTXFSADD_POS                  (0U)
#define USBHS_HNPTXFSIZ_NPTXFSADD                      ((uint32_t)0x000007FFU)
#define USBHS_HNPTXFSIZ_IEP0TXFDEP_POS                 (16U)
#define USBHS_HNPTXFSIZ_IEP0TXFDEP                     ((uint32_t)0x07FF0000U)

/** Bit definition for USBHS_DINEP0TXSIZ register **/
#define USBHS_DINEP0TXSIZ_IEP0TXFRSADD_POS             (0U)
#define USBHS_DINEP0TXSIZ_IEP0TXFRSADD                 ((uint32_t)0x000007FFU)
#define USBHS_DINEP0TXSIZ_NPTXFDEP_POS                 (16U)
#define USBHS_DINEP0TXSIZ_NPTXFDEP                     ((uint32_t)0x07FF0000U)

/** Bit definition for USBHS_GNPTXFSTS register **/
#define USBHS_GNPTXFSTS_NPTXFSAV_POS                   (0U)
#define USBHS_GNPTXFSTS_NPTXFSAV                       ((uint32_t)0x0000FFFFU)
#define USBHS_GNPTXFSTS_NPTXRQSAV_POS                  (16U)
#define USBHS_GNPTXFSTS_NPTXRQSAV                      ((uint32_t)0x00FF0000U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_POS                  (24U)
#define USBHS_GNPTXFSTS_NPTXRQTOP                      ((uint32_t)0x7F000000U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_END_POS              (24U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_END                  ((uint32_t)0x01000000U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_TOKEN_POS            (25U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_TOKEN                ((uint32_t)0x06000000U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_CHNUM_POS            (27U)
#define USBHS_GNPTXFSTS_NPTXRQTOP_CHNUM                ((uint32_t)0x78000000U)

/** Bit definition for USBHS_CID register **/
#define USBHS_CID                                      ((uint32_t)0xFFFFFFFFU)

/** Bit definition for USBHS_GPD register **/
#define USBHS_GPD_LINSTSCHNGSTS_POS                    (7U)
#define USBHS_GPD_LINSTSCHNGSTS                        ((uint32_t)0x00000080U)
#define USBHS_GPD_LINSTSCHNGINTEN_POS                  (8U)
#define USBHS_GPD_LINSTSCHNGINTEN                      ((uint32_t)0x00000100U)
#define USBHS_GPD_RESTDETSTS_POS                       (9U)
#define USBHS_GPD_RESTDETSTS                           ((uint32_t)0x00000200U)
#define USBHS_GPD_RESTDETINTEN_POS                     (10U)
#define USBHS_GPD_RESTDETINTEN                         ((uint32_t)0x00000400U)
#define USBHS_GPD_DISCONNDETSTS_POS                    (11U)
#define USBHS_GPD_DISCONNDETSTS                        ((uint32_t)0x00000800U)
#define USBHS_GPD_DISCONNDETINTEN_POS                  (12U)
#define USBHS_GPD_DISCONNDETINTEN                      ((uint32_t)0x00001000U)
#define USBHS_GPD_CONNDETSTS_POS                       (13U)
#define USBHS_GPD_CONNDETSTS                           ((uint32_t)0x00002000U)
#define USBHS_GPD_CONNDETINTEN_POS                     (14U)
#define USBHS_GPD_CONNDETINTEN                         ((uint32_t)0x00004000U)
#define USBHS_GPD_STSCHNGINTSTS_POS                    (17U)
#define USBHS_GPD_STSCHNGINTSTS                        ((uint32_t)0x00020000U)
#define USBHS_GPD_STSCHNGINTEN_POS                     (18U)
#define USBHS_GPD_STSCHNGINTEN                         ((uint32_t)0x00040000U)
#define USBHS_GPD_LINSTS_POS                           (19U)
#define USBHS_GPD_LINSTS                               ((uint32_t)0x00180000U)
#define USBHS_GPD_IDDIG_POS                            (21U)
#define USBHS_GPD_IDDIG                                ((uint32_t)0x00200000U)

/** Bit definition for USBHS_HPTXFSIZ register **/
#define USBHS_HPTXFSIZ_HPTXFSADD_POS                   (0U)
#define USBHS_HPTXFSIZ_HPTXFSADD                       ((uint32_t)0x0000FFFFU)
#define USBHS_HPTXFSIZ_HPTXFDEP_POS                    (16U)
#define USBHS_HPTXFSIZ_HPTXFDEP                        ((uint32_t)0xFFFF0000U)

/** Bit definition for USBHS_DINEPPTXFSIZ1/2/3/4/5/6/7/8 register **/
#define USBHS_DINEPPTXFSIZ_INEPTXSADD_POS                   (0U)
#define USBHS_DINEPPTXFSIZ_INEPTXSADD                       ((uint32_t)0x0000FFFFU)
#define USBHS_DINEPPTXFSIZ_INEPTXFDEP_POS                   (16U)
#define USBHS_DINEPPTXFSIZ_INEPTXFDEP                       ((uint32_t)0xFFFF0000U)

/** Bit definition for USBHS_HCFG register **/
#define USBHS_HCFG_SPSEL_POS                           (2U)
#define USBHS_HCFG_SPSEL                               ((uint32_t)0x00000004U)

/** Bit definition for USBHS_HFRI register **/
#define USBHS_HFRI_FRI_POS                             (0U)
#define USBHS_HFRI_FRI                                 ((uint32_t)0x0000FFFFU)
#define USBHS_HFRI_DRLDEN_POS                          (16U)
#define USBHS_HFRI_DRLDEN                              ((uint32_t)0x00010000U)

/** Bit definition for USBHS_HFNUM register **/
#define USBHS_HFNUM_FRNUM_POS                          (0U)
#define USBHS_HFNUM_FRNUM                              ((uint32_t)0x0000FFFFU)
#define USBHS_HFNUM_FRT_POS                            (16U)
#define USBHS_HFNUM_FRT                                ((uint32_t)0xFFFF0000U)

/** Bit definition for USBHS_HPTXFQSTS register **/
#define USBHS_HPTXFQSTS_PTXFSAVL_POS                   (0U)
#define USBHS_HPTXFQSTS_PTXFSAVL                       ((uint32_t)0x0000FFFFU)
#define USBHS_HPTXFQSTS_PTXRQSAV_POS                   (16U)
#define USBHS_HPTXFQSTS_PTXRQSAV                       ((uint32_t)0x007F0000U)
#define USBHS_HPTXFQSTS_PTXRQTOP_POS                   (23U)
#define USBHS_HPTXFQSTS_PTXRQTOP                       ((uint32_t)0xFF800000U)
#define USBHS_HPTXFQSTS_PTXRQTOP_END_POS               (23U)
#define USBHS_HPTXFQSTS_PTXRQTOP_END                   ((uint32_t)0x00800000U)
#define USBHS_HPTXFQSTS_PTXRQTOP_PEND_POS              (24U)
#define USBHS_HPTXFQSTS_PTXRQTOP_PEND                  ((uint32_t)0x01000000U)
#define USBHS_HPTXFQSTS_PTXRQTOP_TOKEN_POS             (25U)
#define USBHS_HPTXFQSTS_PTXRQTOP_TOKEN                 ((uint32_t)0x06000000U)
#define USBHS_HPTXFQSTS_PTXRQTOP_CHNUM_POS             (27U)
#define USBHS_HPTXFQSTS_PTXRQTOP_CHNUM                 ((uint32_t)0x78000000U)
#define USBHS_HPTXFQSTS_PTXRQTOP_OEFRM_POS             (31U)
#define USBHS_HPTXFQSTS_PTXRQTOP_OEFRM                 ((uint32_t)0x80000000U)



/** Bit definition for USBHS_HACHINT register **/
#define USBHS_HACHINT_POS                              (0U)
#define USBHS_HACHINT                                  ((uint32_t)0x0000FFFFU)

/** Bit definition for USBHS_HACHINTEN register **/
#define USBHS_HACHINTEN_POS                            (0U)
#define USBHS_HACHINTEN                                ((uint32_t)0x0000FFFFU)

/** Bit definition for USBHS_HPCS register **/
#define USBHS_HPCS_PCSTS_POS                           (0U)
#define USBHS_HPCS_PCSTS                               ((uint32_t)0x00000001U)
#define USBHS_HPCS_PCDET_POS                           (1U)
#define USBHS_HPCS_PCDET                               ((uint32_t)0x00000002U)
#define USBHS_HPCS_PEN_POS                             (2U)
#define USBHS_HPCS_PEN                                 ((uint32_t)0x00000004U)
#define USBHS_HPCS_PENC_POS                            (3U)
#define USBHS_HPCS_PENC                                ((uint32_t)0x00000008U)
#define USBHS_HPCS_POCA_POS                            (4U)
#define USBHS_HPCS_POCA                                ((uint32_t)0x00000010U)
#define USBHS_HPCS_POCC_POS                            (5U)
#define USBHS_HPCS_POCC                                ((uint32_t)0x00000020U)
#define USBHS_HPCS_PRES_POS                            (6U)
#define USBHS_HPCS_PRES                                ((uint32_t)0x00000040U)
#define USBHS_HPCS_PSUSP_POS                           (7U)
#define USBHS_HPCS_PSUSP                               ((uint32_t)0x00000080U)
#define USBHS_HPCS_PRST_POS                            (8U)
#define USBHS_HPCS_PRST                                ((uint32_t)0x00000100U)
#define USBHS_HPCS_PLSTS_POS                           (10U)
#define USBHS_HPCS_PLSTS                               ((uint32_t)0x00000C00U)
#define USBHS_HPCS_PPWR_POS                            (12U)
#define USBHS_HPCS_PPWR                                ((uint32_t)0x00001000U)
#define USBHS_HPCS_PTCTRL_POS                          (13U)
#define USBHS_HPCS_PTCTRL                              ((uint32_t)0x0001E000U)
#define USBHS_HPCS_PSPD_POS                            (17U)
#define USBHS_HPCS_PSPD                                ((uint32_t)0x00060000U)

/** Bit definition for USBHS_HCHCTRL(0~15) register **/
#define USBHS_HCHCTRL_MPS_POS                          (0U)
#define USBHS_HCHCTRL_MPS                              ((uint32_t)0x000007FFU)
#define USBHS_HCHCTRL_EPNUM_POS                        (11U)
#define USBHS_HCHCTRL_EPNUM                            ((uint32_t)0x00007800U)
#define USBHS_HCHCTRL_EPDIR_POS                        (15U)
#define USBHS_HCHCTRL_EPDIR                            ((uint32_t)0x00008000U)
#define USBHS_HCHCTRL_LSPDDEV_POS                      (17U)
#define USBHS_HCHCTRL_LSPDDEV                          ((uint32_t)0x00020000U)
#define USBHS_HCHCTRL_EPTYPE_POS                       (18U)
#define USBHS_HCHCTRL_EPTYPE                           ((uint32_t)0x000C0000U)
#define USBHS_HCHCTRL_DEVADDR_POS                      (22U)
#define USBHS_HCHCTRL_DEVADR                           ((uint32_t)0x1FC00000U)
#define USBHS_HCHCTRL_ODDFRM_POS                       (29U)
#define USBHS_HCHCTRL_ODDFRM                           ((uint32_t)0x20000000U)
#define USBHS_HCHCTRL_CHDIS_POS                        (30U)
#define USBHS_HCHCTRL_CHDIS                            ((uint32_t)0x40000000U)
#define USBHS_HCHCTRL_CHEN_POS                         (31U)
#define USBHS_HCHCTRL_CHEN                             ((uint32_t)0x80000000U)

/** Bit definition for USBHS_HCHSCTRL(0~15) register **/
#define USBHS_HCHSCTRL_PRTADD_POS                      (0U)
#define USBHS_HCHSCTRL_PRTADD                          ((uint32_t)0x0000007FU)
#define USBHS_HCHSCTRL_HUBADD_POS                      (7U)
#define USBHS_HCHSCTRL_HUBADD                          ((uint32_t)0x00003FC0U)
#define USBHS_HCHSCTRL_TRANPOS_POS                     (14U)
#define USBHS_HCHSCTRL_TRANPOS                         ((uint32_t)0x0000C000U)
#define USBHS_HCHSCTRL_COMPSPLF_POS                    (16U)
#define USBHS_HCHSCTRL_COMPSPLF                        ((uint32_t)0x00010000U)
#define USBHS_HCHCTRL_SPLEN_POS                        (31U)
#define USBHS_HCHCTRL_SPLEN                            ((uint32_t)0x80000000U)

/** Bit definition for USBHS_HCINTSTS(0~15) register **/
#define USBHS_HCHINTSTS_TXCFIF_POS                     (0U)
#define USBHS_HCHINTSTS_TXCFIF                         ((uint32_t)0x00000001U)
#define USBHS_HCHINTSTS_CHHTDIF_POS                    (1U)
#define USBHS_HCHINTSTS_CHHTDIF                        ((uint32_t)0x00000002U)
#define USBHS_HCHINTSTS_AHBERRIF_POS                   (2U)
#define USBHS_HCHINTSTS_AHBERRIF                       ((uint32_t)0x00000004U)
#define USBHS_HCHINTSTS_STALLIF_POS                    (3U)
#define USBHS_HCHINTSTS_STALLIF                        ((uint32_t)0x00000008U)
#define USBHS_HCHINTSTS_NAKIF_POS                      (4U)
#define USBHS_HCHINTSTS_NAKIF                          ((uint32_t)0x00000010U)
#define USBHS_HCHINTSTS_ACKIF_POS                      (5U)
#define USBHS_HCHINTSTS_ACKIF                          ((uint32_t)0x00000020U)
#define USBHS_HCHINTSTS_NYETIF_POS                     (6U)
#define USBHS_HCHINTSTS_NYETIF                         ((uint32_t)0x00000040U)
#define USBHS_HCHINTSTS_TXERRIF_POS                    (7U)
#define USBHS_HCHINTSTS_TXERRIF                        ((uint32_t)0x00000080U)
#define USBHS_HCHINTSTS_BBERRIF_POS                    (8U)
#define USBHS_HCHINTSTS_BBERRIF                        ((uint32_t)0x00000100U)
#define USBHS_HCHINTSTS_FOVRIF_POS                     (9U)
#define USBHS_HCHINTSTS_FOVRIF                         ((uint32_t)0x00000200U)
#define USBHS_HCHINTSTS_DTERRIF_POS                    (10U)
#define USBHS_HCHINTSTS_DTERRIF                        ((uint32_t)0x00000400U)

/** Bit definition for USBHS_HCHINTEN(0~15) register **/
#define USBHS_HCHINTEN_TXCIEN_POS                      (0U)
#define USBHS_HCHINTEN_TXCIEN                          ((uint32_t)0x00000001U)
#define USBHS_HCHINTEN_CHHTDIEN_POS                    (1U)
#define USBHS_HCHINTEN_CHHTDIEN                        ((uint32_t)0x00000002U)
#define USBHS_HCHINTEN_AHBERRIEN_POS                   (2U)
#define USBHS_HCHINTEN_AHBERRIEN                       ((uint32_t)0x00000004U)
#define USBHS_HCHINTEN_STALLIEN_POS                    (3U)
#define USBHS_HCHINTEN_STALLIEN                        ((uint32_t)0x00000008U)
#define USBHS_HCHINTEN_NAKIEN_POS                      (4U)
#define USBHS_HCHINTEN_NAKIEN                          ((uint32_t)0x00000010U)
#define USBHS_HCHINTEN_ACKIEN_POS                      (5U)
#define USBHS_HCHINTEN_ACKIEN                          ((uint32_t)0x00000020U)
#define USBHS_HCHINTEN_NYETIEN_POS                     (6U)
#define USBHS_HCHINTEN_NYETIEN                         ((uint32_t)0x00000020U)
#define USBHS_HCHINTEN_TXERRIEN_POS                    (7U)
#define USBHS_HCHINTEN_TXERRIEN                        ((uint32_t)0x00000080U)
#define USBHS_HCHINTEN_BBERRIEN_POS                    (8U)
#define USBHS_HCHINTEN_BBERRIEN                        ((uint32_t)0x00000100U)
#define USBHS_HCHINTEN_FOVRIEN_POS                     (9U)
#define USBHS_HCHINTEN_FOVRIEN                         ((uint32_t)0x00000200U)
#define USBHS_HCHINTEN_DTERRIEN_POS                    (10U)
#define USBHS_HCHINTEN_DTERRIEN                        ((uint32_t)0x00000400U)

/** Bit definition for USBHS_HCHTXSIZ(0~15) register **/
#define USBHS_HCHTXSIZ_TXSIZ_POS                       (0U)
#define USBHS_HCHTXSIZ_TXSIZ                           ((uint32_t)0x0007FFFFU)
#define USBHS_HCHTXSIZ_PKCNT_POS                       (19U)
#define USBHS_HCHTXSIZ_PKCNT                           ((uint32_t)0x1FF80000U)
#define USBHS_HCHTXSIZ_PID_POS                         (29U)
#define USBHS_HCHTXSIZ_PID                             ((uint32_t)0x60000000U)
#define USBHS_HCHCTRL_DPING_POS                        (31U)
#define USBHS_HCHCTRL_DPING                            ((uint32_t)0x80000000U)

/** Bit definition for USBHS_HCDMA(0~15) register **/
#define USBHS_HCDMA                                    ((uint32_t)0xFFFFFFFFU)

/** Bit definition for USBHS_DCFG register **/
#define USBHS_DCFG_DEVSPD_POS                          (0U)
#define USBHS_DCFG_DEVSPD                              ((uint32_t)0x00000003U)
#define USBHS_DCFG_NZLSOUTHSK_POS                      (2U)
#define USBHS_DCFG_NZLSOUTHSK                          ((uint32_t)0x00000004U)
#define USBHS_DCFG_DEVARR_POS                          (4U)
#define USBHS_DCFG_DEVARR                              ((uint32_t)0x000007F0U)
#define USBHS_DCFG_PFRITVL_POS                         (11U)
#define USBHS_DCFG_PFRITVL                             ((uint32_t)0x00001800U)
#define USBHS_DCFG_XCVDRLY_POS                         (14U)
#define USBHS_DCFG_XCVDRLY                             ((uint32_t)0x00004000U)
#define USBHS_DCFG_EERRAIEN_POS                        (15U)
#define USBHS_DCFG_EERRAIEN                            ((uint32_t)0x00008000U)
#define USBHS_DCFG_PSITVL_POS                          (24U)
#define USBHS_DCFG_PSITVL                              ((uint32_t)0x03000000U)

/** Bit definition for USBHS_DCTRL register **/
#define USBHS_DCTRL_RMWKUP_POS                         (0U)
#define USBHS_DCTRL_RMWKUP                             ((uint32_t)0x00000001U)
#define USBHS_DCTRL_SFTDIS_POS                         (1U)
#define USBHS_DCTRL_SFTDIS                             ((uint32_t)0x00000002U)
#define USBHS_DCTRL_GINAKSTS_POS                       (2U)
#define USBHS_DCTRL_GINAKSTS                           ((uint32_t)0x00000004U)
#define USBHS_DCTRL_GONAKSTS_POS                       (3U)
#define USBHS_DCTRL_GONAKSTS                           ((uint32_t)0x00000008U)
#define USBHS_DCTRL_TSCTRL_POS                         (4U)
#define USBHS_DCTRL_TSCTRL                             ((uint32_t)0x00000070U)
#define USBHS_DCTRL_SGINAK_POS                         (7U)
#define USBHS_DCTRL_SGINAK                             ((uint32_t)0x00000080U)
#define USBHS_DCTRL_CGNPINAK_POS                       (8U)
#define USBHS_DCTRL_CGNPINAK                           ((uint32_t)0x00000100U)
#define USBHS_DCTRL_SGONAK_POS                         (9U)
#define USBHS_DCTRL_SGONAK                             ((uint32_t)0x00000200U)
#define USBHS_DCTRL_CGONAK_POS                         (10U)
#define USBHS_DCTRL_CGONAK                             ((uint32_t)0x00000400U)
#define USBHS_DCTRL_POPDNE_POS                         (11U)
#define USBHS_DCTRL_POPDNE                             ((uint32_t)0x00000800U)
#define USBHS_DCTRL_NAKOBBLE_POS                       (16U)
#define USBHS_DCTRL_NAKOBBLE                           ((uint32_t)0x00010000U)

/** Bit definition for USBHS_DSTS register **/
#define USBHS_DSTS_SUSPF_POS                           (0U)
#define USBHS_DSTS_SUSPF                               ((uint32_t)0x00000001U)
#define USBHS_DSTS_ENUMSPD_POS                         (1U)
#define USBHS_DSTS_ENUMSPD                             ((uint32_t)0x00000006U)
#define USBHS_DSTS_ERERRF_POS                          (3U)
#define USBHS_DSTS_ERERRF                              ((uint32_t)0x00000008U)
#define USBHS_DSTS_SOFFN_POS                           (8U)
#define USBHS_DSTS_SOFFN                               ((uint32_t)0x003FFF00U)
#define USBHS_DSTS_DEVLINSTS_POS                       (22U)
#define USBHS_DSTS_DEVLINSTS                           ((uint32_t)0x00C00000U)

/** Bit definition for USBHS_DINEPINTEN register **/
#define USBHS_DINEPINTEN_TXCIEN_POS                    (0U)
#define USBHS_DINEPINTEN_TXCIEN                        ((uint32_t)0x00000001U)
#define USBHS_DINEPINTEN_EPDIEN_POS                    (1U)
#define USBHS_DINEPINTEN_EPDIEN                        ((uint32_t)0x00000002U)
#define USBHS_DINEPINTEN_AHBERRIEN_POS                 (2U)
#define USBHS_DINEPINTEN_AHBERRIEN                     ((uint32_t)0x00000004U)
#define USBHS_DINEPINTEN_TOIEN_POS                     (3U)
#define USBHS_DINEPINTEN_TOIEN                         ((uint32_t)0x00000008U)
#define USBHS_DINEPINTEN_TXFERINTKIEN_POS              (4U)
#define USBHS_DINEPINTEN_TXFERINTKIEN                  ((uint32_t)0x00000010U)
#define USBHS_DINEPINTEN_INTREPMISIEN_POS              (5U)
#define USBHS_DINEPINTEN_INTREPMISIEN                  ((uint32_t)0x00000020U)
#define USBHS_DINEPINTEN_INEPNAKEIEN_POS               (6U)
#define USBHS_DINEPINTEN_INEPNAKEIEN                   ((uint32_t)0x00000040U)
#define USBHS_DINEPINTEN_TXFUDIEN_POS                  (8U)
#define USBHS_DINEPINTEN_TXFUDIEN                      ((uint32_t)0x00000100U)
#define USBHS_DINEPINTEN_NAKIEN_POS                    (13U)
#define USBHS_DINEPINTEN_NAKIEN                        ((uint32_t)0x00002000U)

/** Bit definition for USBHS_DOUTEPINTEN register **/
#define USBHS_DOUTEPINTEN_TXCIEN_POS                   (0U)
#define USBHS_DOUTEPINTEN_TXCIEN                       ((uint32_t)0x00000001U)
#define USBHS_DOUTEPINTEN_EPDIEN_POS                   (1U)
#define USBHS_DOUTEPINTEN_EPDIEN                       ((uint32_t)0x00000002U)
#define USBHS_DOUTEPINTEN_AHBERRIEN_POS                (2U)
#define USBHS_DOUTEPINTEN_AHBERRIEN                    ((uint32_t)0x00000004U)
#define USBHS_DOUTEPINTEN_STUPDNEIEN_POS               (3U)
#define USBHS_DOUTEPINTEN_STUPDNEIEN                   ((uint32_t)0x00000008U)
#define USBHS_DOUTEPINTEN_EPDISROTIEN_POS              (4U)
#define USBHS_DOUTEPINTEN_EPDISROTIEN                  ((uint32_t)0x00000010U)
#define USBHS_DOUTEPINTEN_B2BSTUPIEN_POS               (6U)
#define USBHS_DOUTEPINTEN_B2BSTUPIEN                   ((uint32_t)0x00000040U)
#define USBHS_DOUTEPINTEN_OPERRIEN_POS                 (8U)
#define USBHS_DOUTEPINTEN_OPERRIEN                     ((uint32_t)0x00000100U)
#define USBHS_DOUTEPINTEN_BERRIEN_POS                  (12U)
#define USBHS_DOUTEPINTEN_BERRIEN                      ((uint32_t)0x00001000U)
#define USBHS_DOUTEPINTEN_NAKIEN_POS                   (13U)
#define USBHS_DOUTEPINTEN_NAKIEN                       ((uint32_t)0x00002000U)
#define USBHS_DOUTEPINTEN_NYETIEN_POS                  (14U)
#define USBHS_DOUTEPINTEN_NYETIEN                      ((uint32_t)0x00004000U)

/** Bit definition for USBHS_DAEPINTSTS register **/
#define USBHS_DAEPINTSTS_INEPINT_POS                   (0U)
#define USBHS_DAEPINTSTS_IEPINT                        ((uint32_t)0x000001FFU)
#define USBHS_DAEPINTSTS_OUTEPINT_POS                  (16U)
#define USBHS_DAEPINTSTS_OUTEPINT                      ((uint32_t)0x01FF0000U)

/** Bit definition for USBHS_DAEPINTEN register **/
#define USBHS_DAEPINTEN_INEPIEN_POS                    (0U)
#define USBHS_DAEPINTEN_INEPIEN                        ((uint32_t)0x000001FFU)
#define USBHS_DAEPINTEN_OUTEPIEN_POS                   (16U)
#define USBHS_DAEPINTEN_OUTEPIEN                       ((uint32_t)0x01FF0000U)

/** Bit definition for USBHS_DTHRCTRL register **/
#define USBHS_DTHRCTRL_NISOINEPTHREN_POS               (0U)
#define USBHS_DTHRCTRL_NISOINEPTHREN                   ((uint32_t)0x00000001U)
#define USBHS_DTHRCTRL_ISOINEPTHREN_POS                (1U)
#define USBHS_DTHRCTRL_ISOINEPTHREN                    ((uint32_t)0x00000002U)
#define USBHS_DTHRCTRL_TXTHRLEN_POS                    (2U)
#define USBHS_DTHRCTRL_TXTHRLEN                        ((uint32_t)0x000007FCU)
#define USBHS_DTHRCTRL_RXTHREN_POS                     (16U)
#define USBHS_DTHRCTRL_RXTHREN                         ((uint32_t)0x00010000U)
#define USBHS_DTHRCTRL_RXTHRLEN_POS                    (17U)
#define USBHS_DTHRCTRL_RXTHRLEN                        ((uint32_t)0x03FE0000U)
#define USBHS_DTHRCTRL_ARPEN_POS                       (27U)
#define USBHS_DTHRCTRL_ARPEN                           ((uint32_t)0x08000000U)

/** Bit definition for USBHS_DINEPFEINTEN register **/
#define USBHS_DINEPFEINTEN_INEPTXFEIEN                 ((uint32_t)0x0000FFFFU)

/** Bit definition for USBHS_DEEPINTSTS register **/
#define USBHS_DEEPINTSTS_INEPINT_POS                   (0U)
#define USBHS_DEEPINTSTS_IEPINT                        ((uint32_t)0x000000FFU)
#define USBHS_DEEPINTSTS_OUTEPINT_POS                  (16U)
#define USBHS_DEEPINTSTS_OUTEPINT                      ((uint32_t)0x00FF0000U)

/** Bit definition for USBHS_DEEPINTEN register **/
#define USBHS_DEEPINTEN_INEPIEN_POS                    (0U)
#define USBHS_DEEPINTEN_INEPIEN                        ((uint32_t)0x000000FFU)
#define USBHS_DEEPINTEN_OUTEPIEN_POS                   (16U)
#define USBHS_DEEPINTEN_OUTEPIEN                       ((uint32_t)0x00FF0000U)

/** Bit definition for USBHS_DINEPXINTEN(0~8) register **/
#define USBHS_DINEPXINTEN_TXCIEN_POS                   (0U)
#define USBHS_DINEPXINTEN_TXCIEN                       ((uint32_t)0x00000001U)
#define USBHS_DINEPXINTEN_EPDISIEN_POS                 (1U)
#define USBHS_DINEPXINTEN_EPDISIEN                     ((uint32_t)0x00000002U)
#define USBHS_DINEPXINTEN_AHBERRIEN_POS                (2U)
#define USBHS_DINEPXINTEN_AHBERRIEN                    ((uint32_t)0x00000004U)
#define USBHS_DINEPXINTEN_TOIEN_POS                    (3U)
#define USBHS_DINEPXINTEN_TOIEN                        ((uint32_t)0x00000008U)
#define USBHS_DINEPXINTEN_TXFERINTKIEN_POS             (4U)
#define USBHS_DINEPXINTEN_TXFERINTKIEN                 ((uint32_t)0x00000010U)
#define USBHS_DINEPXINTEN_INTREPMISIEN_POS             (5U)
#define USBHS_DINEPXINTEN_INTREPMISIEN                 ((uint32_t)0x00000020U)
#define USBHS_DINEPXINTEN_INEPNAKEIEN_POS              (6U)
#define USBHS_DINEPXINTEN_INEPNAKEIEN                  ((uint32_t)0x00000040U)
#define USBHS_DINEPXINTEN_TXFUDIEN_POS                 (8U)
#define USBHS_DINEPXINTEN_TXFUDIEN                     ((uint32_t)0x00000100U)
#define USBHS_DINEPXINTEN_NAKIEN_POS                   (13U)
#define USBHS_DINEPXINTEN_NAKIEN                       ((uint32_t)0x00002000U)

/** Bit definition for USBHS_DOUTEPXINTEN(0~8) register **/
#define USBHS_DOUTEPXINTEN_TXCIEN_POS                  (0U)
#define USBHS_DOUTEPXINTEN_TXCIEN                      ((uint32_t)0x00000001U)
#define USBHS_DOUTEPXINTEN_EPDIEN_POS                  (1U)
#define USBHS_DOUTEPXINTEN_EPDIEN                      ((uint32_t)0x00000002U)
#define USBHS_DOUTEPXINTEN_AHBERRIEN_POS               (2U)
#define USBHS_DOUTEPXINTEN_AHBERRIEN                   ((uint32_t)0x00000004U)
#define USBHS_DOUTEPXINTEN_STUPDNEIEN_POS              (3U)
#define USBHS_DOUTEPXINTEN_STUPDNEIEN                  ((uint32_t)0x00000008U)
#define USBHS_DOUTEPXINTEN_EPDISROTIEN_POS             (4U)
#define USBHS_DOUTEPXINTEN_EPDISROTIEN                 ((uint32_t)0x00000010U)
#define USBHS_DOUTEPXINTEN_B2BSTUPIEN_POS              (6U)
#define USBHS_DOUTEPXINTEN_B2BSTUPIEN                  ((uint32_t)0x00000040U)
#define USBHS_DOUTEPXINTEN_OPERRIEN_POS                (8U)
#define USBHS_DOUTEPXINTEN_OPERRIEN                    ((uint32_t)0x00000100U)
#define USBHS_DOUTEPXINTEN_BERRIEN_POS                 (12U)
#define USBHS_DOUTEPXINTEN_BERRIEN                     ((uint32_t)0x00001000U)
#define USBHS_DOUTEPXINTEN_NAKIEN_POS                  (13U)
#define USBHS_DOUTEPXINTEN_NAKIEN                      ((uint32_t)0x00002000U)
#define USBHS_DOUTEPXINTEN_NYETIEN_POS                 (14U)
#define USBHS_DOUTEPXINTEN_NYETIEN                     ((uint32_t)0x00004000U)

/** Bit definition for USBHS_DINEP0CTRL register **/
#define USBHS_DINEP0CTRL_MPLEN_POS                     (0U)
#define USBHS_DINEP0CTRL_MPLEN                         ((uint32_t)0x00000003U)
#define USBHS_DINEP0CTRL_EPACT_POS                     (15U)
#define USBHS_DINEP0CTRL_EPACT                         ((uint32_t)0x00008000U)
#define USBHS_DINEP0CTRL_NAKSTS_POS                    (17U)
#define USBHS_DINEP0CTRL_NAKSTS                        ((uint32_t)0x00020000U)
#define USBHS_DINEP0CTRL_EPTYPE_POS                    (18U)
#define USBHS_DINEP0CTRL_EPTYPE                        ((uint32_t)0x000C0000U)
#define USBHS_DINEP0CTRL_STALL_POS                     (21U)
#define USBHS_DINEP0CTRL_STALL                         ((uint32_t)0x00200000U)
#define USBHS_DINEP0CTRL_TXFNUM_POS                    (22U)
#define USBHS_DINEP0CTRL_TXFNUM                        ((uint32_t)0x03C00000U)
#define USBHS_DINEP0CTRL_CNAK_POS                      (26U)
#define USBHS_DINEP0CTRL_CNAK                          ((uint32_t)0x04000000U)
#define USBHS_DINEP0CTRL_SNAK_POS                      (27U)
#define USBHS_DINEP0CTRL_SNAK                          ((uint32_t)0x08000000U)
#define USBHS_DINEP0CTRL_EPDIS_POS                     (30U)
#define USBHS_DINEP0CTRL_EPDIS                         ((uint32_t)0x40000000U)
#define USBHS_DINEP0CTRL_EPEN_POS                      (31U)
#define USBHS_DINEP0CTRL_EPEN                          ((uint32_t)0x80000000U)

/** Bit definition for USBHS_DINEPCTRL(1~8) register **/
#define USBHS_DINEPCTRL_MPLEN_POS                      (0U)
#define USBHS_DINEPCTRL_MPLEN                          ((uint32_t)0x000007FFU)
#define USBHS_DINEPCTRL_EPACT_POS                      (15U)
#define USBHS_DINEPCTRL_EPACT                          ((uint32_t)0x00008000U)
#define USBHS_DINEPCTRL_EPDPID_EPEOFRM_POS             (16U)
#define USBHS_DINEPCTRL_EPDPID_EPEOFRM                 ((uint32_t)0x00010000U)
#define USBHS_DINEPCTRL_NAKSTS_POS                     (17U)
#define USBHS_DINEPCTRL_NAKSTS                         ((uint32_t)0x00020000U)
#define USBHS_DINEPCTRL_EPTYPE_POS                     (18U)
#define USBHS_DINEPCTRL_EPTYPE                         ((uint32_t)0x000C0000U)
#define USBHS_DINEPCTRL_STALL_POS                      (21U)
#define USBHS_DINEPCTRL_STALL                          ((uint32_t)0x00200000U)
#define USBHS_DINEPCTRL_TXFNUM_POS                     (22U)
#define USBHS_DINEPCTRL_TXFNUM                         ((uint32_t)0x03C00000U)
#define USBHS_DINEPCTRL_CNAK_POS                       (26U)
#define USBHS_DINEPCTRL_CNAK                           ((uint32_t)0x04000000U)
#define USBHS_DINEPCTRL_SNAK_POS                       (27U)
#define USBHS_DINEPCTRL_SNAK                           ((uint32_t)0x08000000U)
#define USBHS_DINEPCTRL_SD0PID_SEVNFRM_POS             (28U)
#define USBHS_DINEPCTRL_SD0PID_SEVNFRM                 ((uint32_t)0x10000000U)
#define USBHS_DINEPCTRL_SD1PID_SODDFRM_POS             (29U)
#define USBHS_DINEPCTRL_SD1PID_SODDFRM                 ((uint32_t)0x20000000U)
#define USBHS_DINEPCTRL_EPDIS_POS                      (30U)
#define USBHS_DINEPCTRL_EPDIS                          ((uint32_t)0x40000000U)
#define USBHS_DINEPCTRL_EPEN_POS                       (31U)
#define USBHS_DINEPCTRL_EPEN                           ((uint32_t)0x80000000U)

/** Bit definition for USBHS_DINEPINTSTS(0~8) register **/
#define USBHS_DINEPINTSTS_TXCIF_POS                    (0U)
#define USBHS_DINEPINTSTS_TXCIF                        ((uint32_t)0x00000001U)
#define USBHS_DINEPINTSTS_EPDISIF_POS                  (1U)
#define USBHS_DINEPINTSTS_EPDISIF                      ((uint32_t)0x00000002U)
#define USBHS_DINEPINTSTS_AHBERRIF_POS                 (2U)
#define USBHS_DINEPINTSTS_AHBERRIF                     ((uint32_t)0x00000004U)
#define USBHS_DINEPINTSTS_TOUTIF_POS                   (3U)
#define USBHS_DINEPINTSTS_TOUTIF                       ((uint32_t)0x00000008U)
#define USBHS_DINEPINTSTS_TXFERINTIF_POS               (4U)
#define USBHS_DINEPINTSTS_TXFERINTIF                   ((uint32_t)0x00000010U)
#define USBHS_DINEPINTSTS_INEPMISIF_POS                (5U)
#define USBHS_DINEPINTSTS_INEPMISIF                    ((uint32_t)0x00000020U)
#define USBHS_DINEPINTSTS_INEPNAKEIF_POS               (6U)
#define USBHS_DINEPINTSTS_INEPNAKEIF                   ((uint32_t)0x00000040U)
#define USBHS_DINEPINTSTS_TXFEIF_POS                   (7U)
#define USBHS_DINEPINTSTS_TXFEIF                       ((uint32_t)0x00000080U)
#define USBHS_DINEPINTSTS_TXFUDRIF_POS                 (8U)
#define USBHS_DINEPINTSTS_TXFUDRIF                     ((uint32_t)0x00000100U)
#define USBHS_DINEPINTSTS_PKDRPSTS_POS                 (11U)
#define USBHS_DINEPINTSTS_PKDRPSTS                     ((uint32_t)0x00000800U)
#define USBHS_DINEPINTSTS_BBERRIF_POS                  (12U)
#define USBHS_DINEPINTSTS_BBERRIF                      ((uint32_t)0x00001000U)
#define USBHS_DINEPINTSTS_NAKIF_POS                    (13U)
#define USBHS_DINEPINTSTS_NAKIF                        ((uint32_t)0x00002000U)
#define USBHS_DINEPINTSTS_NYETIF_POS                   (14U)
#define USBHS_DINEPINTSTS_NYETIF                       ((uint32_t)0x00004000U)

/** Bit definition for USBHS_DINEP0TXSIZ register **/
#define USBHS_DINEP0TXSIZ_TLEN_POS                     (0U)
#define USBHS_DINEP0TXSIZ_TLEN                         ((uint32_t)0x0000007FU)
#define USBHS_DINEP0TXSIZ_PKTCNT_POS                   (19U)
#define USBHS_DINEP0TXSIZ_PKTCNT                       ((uint32_t)0x00180000U)

/** Bit definition for USBHS_DINEPTXSIZ(1~8) register **/
#define USBHS_DINEPTXSIZ_TLEN_POS                      (0U)
#define USBHS_DINEPTXSIZ_TLEN                          ((uint32_t)0x0007FFFFU)
#define USBHS_DINEPTXSIZ_PKTCNT_POS                    (19U)
#define USBHS_DINEPTXSIZ_PKTCNT                        ((uint32_t)0x1FF80000U)
#define USBHS_DINEPTXSIZ_MCNT_POS                      (29U)
#define USBHS_DINEPTXSIZ_MCNT                          ((uint32_t)0x60000000U)

/** Bit definition for USBHS_DIEPDMADD(0~8) register **/
#define USBHS_DIEPDMADD_DMADD_POS                      (0U)
#define USBHS_DIEPDMADD_DMADD                          ((uint32_t)0xFFFFFFFFU)

/** Bit definition for USBHS_DINEPTXFSTS(0~8) register **/
#define USBHS_DINEPTXFSTS_TXFSPCAVL_POS                (0U)
#define USBHS_DINEPTXFSTS_TXFSPCAVL                    ((uint32_t)0x0000FFFFU)

/** Bit definition for USBHS_DOUTEP0CTRL register **/
#define USBHS_DOUTEP0CTRL_MPLEN_POS                    (0U)
#define USBHS_DOUTEP0CTRL_MPLEN                        ((uint32_t)0x00000003U)
#define USBHS_DOUTEP0CTRL_EPACT_POS                    (15U)
#define USBHS_DOUTEP0CTRL_EPACT                        ((uint32_t)0x00008000U)
#define USBHS_DOUTEP0CTRL_NAKSTS_POS                   (17U)
#define USBHS_DOUTEP0CTRL_NAKSTS                       ((uint32_t)0x00020000U)
#define USBHS_DOUTEP0CTRL_EPTYPE_POS                   (18U)
#define USBHS_DOUTEP0CTRL_EPTYPE                       ((uint32_t)0x000C0000U)
#define USBHS_DOUTEP0CTRL_STALL_POS                    (21U)
#define USBHS_DOUTEP0CTRL_STALL                        ((uint32_t)0x00200000U)
#define USBHS_DOUTEP0CTRL_CNAK_POS                     (26U)
#define USBHS_DOUTEP0CTRL_CNAK                         ((uint32_t)0x04000000U)
#define USBHS_DOUTEP0CTRL_SNAK_POS                     (27U)
#define USBHS_DOUTEP0CTRL_SNAK                         ((uint32_t)0x08000000U)
#define USBHS_DOUTEP0CTRL_EPDIS_POS                    (30U)
#define USBHS_DOUTEP0CTRL_EPDIS                        ((uint32_t)0x40000000U)
#define USBHS_DOUTEP0CTRL_EPEN_POS                     (31U)
#define USBHS_DOUTEP0CTRL_EPEN                         ((uint32_t)0x80000000U)


/** Bit definition for USBHS_DOUTEPCTRL(1~8) register **/
#define USBHS_DOUTEPCTRL_MPLEN_POS                     (0U)
#define USBHS_DOUTEPCTRL_MPLEN                         ((uint32_t)0x00000003U)
#define USBHS_DOUTEPCTRL_EPACT_POS                     (15U)
#define USBHS_DOUTEPCTRL_EPACT                         ((uint32_t)0x00008000U)
#define USBHS_DOUTEPCTRL_EPDPID_EPEOFRM_POS            (16U)
#define USBHS_DOUTEPCTRL_EPDPID_EPEOFRM                ((uint32_t)0x00010000U)
#define USBHS_DOUTEPCTRL_NAKSTS_POS                    (17U)
#define USBHS_DOUTEPCTRL_NAKSTS                        ((uint32_t)0x00020000U)
#define USBHS_DOUTEPCTRL_EPTYPE_POS                    (18U)
#define USBHS_DOUTEPCTRL_EPTYPE                        ((uint32_t)0x000C0000U)
#define USBHS_DOUTEPCTRL_STALL_POS                     (21U)
#define USBHS_DOUTEPCTRL_STALL                         ((uint32_t)0x00200000U)
#define USBHS_DOUTEPCTRL_CNAK_POS                      (26U)
#define USBHS_DOUTEPCTRL_CNAK                          ((uint32_t)0x04000000U)
#define USBHS_DOUTEPCTRL_SNAK_POS                      (27U)
#define USBHS_DOUTEPCTRL_SNAK                          ((uint32_t)0x08000000U)
#define USBHS_DOUTEPCTRL_SD0PID_SEVNFRM_POS            (28U)
#define USBHS_DOUTEPCTRL_SD0PID_SEVNFRM                ((uint32_t)0x10000000U)
#define USBHS_DOUTEPCTRL_SD1PID_SODDFRM_POS            (29U)
#define USBHS_DOUTEPCTRL_SD1PID_SODDFRM                ((uint32_t)0x20000000U)
#define USBHS_DOUTEPCTRL_EPDIS_POS                     (30U)
#define USBHS_DOUTEPCTRL_EPDIS                         ((uint32_t)0x40000000U)
#define USBHS_DOUTEPCTRL_EPEN_POS                      (31U)
#define USBHS_DOUTEPCTRL_EPEN                          ((uint32_t)0x80000000U)


/** Bit definition for USBHS_DOUTEPINTSTS(0~8) register **/
#define USBHS_DOUTEPINTSTS_TXCIF_POS                    (0U)
#define USBHS_DOUTEPINTSTS_TXCIF                        ((uint32_t)0x00000001U)
#define USBHS_DOUTEPINTSTS_EPDISIF_POS                  (1U)
#define USBHS_DOUTEPINTSTS_EPDISIF                      ((uint32_t)0x00000002U)
#define USBHS_DOUTEPINTSTS_AHBERRIF_POS                 (2U)
#define USBHS_DOUTEPINTSTS_AHBERRIF                     ((uint32_t)0x00000004U)
#define USBHS_DOUTEPINTSTS_STUPPDNEIF_POS               (3U)
#define USBHS_DOUTEPINTSTS_STUPPDNEIF                   ((uint32_t)0x00000008U)
#define USBHS_DOUTEPINTSTS_OUTTRXEPDISIF_POS            (4U)
#define USBHS_DOUTEPINTSTS_OUTTRXEPDISIF                ((uint32_t)0x00000010U)
#define USBHS_DOUTEPINTSTS_STSPRXIF_POS                 (5U)
#define USBHS_DOUTEPINTSTS_STSPRXIF                     ((uint32_t)0x00000020U)
#define USBHS_DOUTEPINTSTS_B2BSTUPRIF_POS               (6U)
#define USBHS_DOUTEPINTSTS_B2BSTUPRIF                   ((uint32_t)0x00000040U)
#define USBHS_DOUTEPINTSTS_OUTPCKERRIF_POS              (8U)
#define USBHS_DOUTEPINTSTS_OUTPCKERRIF                  ((uint32_t)0x00000100U)
#define USBHS_DOUTEPINTSTS_PKDRPSTS_POS                 (11U)
#define USBHS_DOUTEPINTSTS_PKDRPSTS                     ((uint32_t)0x00000800U)
#define USBHS_DOUTEPINTSTS_BBERRIF_POS                  (12U)
#define USBHS_DOUTEPINTSTS_BBERRIF                      ((uint32_t)0x00001000U)
#define USBHS_DOUTEPINTSTS_NAKIF_POS                    (13U)
#define USBHS_DOUTEPINTSTS_NAKIF                        ((uint32_t)0x00002000U)
#define USBHS_DOUTEPINTSTS_NYETIF_POS                   (14U)
#define USBHS_DOUTEPINTSTS_NYETIF                       ((uint32_t)0x00004000U)
#define USBHS_DOUTEPINTSTS_STUPPRXIF_POS                (15U)
#define USBHS_DOUTEPINTSTS_STUPPRXIF                    ((uint32_t)0x00008000U)


/** Bit definition for USBHS_DOUTEP0TXSIZ register **/
#define USBHS_DOUTEP0TXSIZ_TLEN_POS                    (0U)
#define USBHS_DOUTEP0TXSIZ_TLEN                        ((uint32_t)0x0000007FU)
#define USBHS_DOUTEP0TXSIZ_PKTCNT_POS                  (19U)
#define USBHS_DOUTEP0TXSIZ_PKTCNT                      ((uint32_t)0x00080000U)
#define USBHS_DOUTEP0TXSIZ_STUPPCNT_POS                (29U)
#define USBHS_DOUTEP0TXSIZ_STUPPCNT                    ((uint32_t)0x60000000U)

/** Bit definition for USBHS_DOUTEPTXSIZ(1~8) register **/
#define USBHS_DOUTEPTXSIZ_TLEN_POS                     (0U)
#define USBHS_DOUTEPTXSIZ_TLEN                         ((uint32_t)0x0007FFFFU)
#define USBHS_DOUTEPTXSIZ_PKTCNT_POS                   (19U)
#define USBHS_DOUTEPTXSIZ_PKTCNT                       ((uint32_t)0x1FF80000U)
#define USBHS_DOUTEPTXSIZ_STUPPCNT_POS                 (29U)
#define USBHS_DOUTEPTXSIZ_STUPPCNT_RXDPID              ((uint32_t)0x60000000U)

/** Bit definition for USBHS_DINEPDMADD(0~8) register **/
#define USBHS_DINEPDMADD_DMADD                         ((uint32_t)0xFFFFFFFFU)

/** Bit definition for USBHS_PWRCTRL register **/
#define USBHS_PWRCTRL_PHYSTP_POS                       (0U)
#define USBHS_PWRCTRL_PHYSTP                           ((uint32_t)0x00000001U)
#define USBHS_PWRCTRL_GATEHCLK_POS                     (1U)
#define USBHS_PWRCTRL_GATEHCLK                         ((uint32_t)0x00000002U)
#define USBHS_PWRCTRL_PDMRST_POS                       (3U)
#define USBHS_PWRCTRL_PDMRST                           ((uint32_t)0x00000008U)
#define USBHS_PWRCTRL_PHYSLEEP_POS                     (6U)
#define USBHS_PWRCTRL_PHYSLEEP                         ((uint32_t)0x00000040U)
#define USBHS_PWRCTRL_DSLEEP_POS                       (7U)
#define USBHS_PWRCTRL_DSLEEP                           ((uint32_t)0x00000080U)

/** Bit definition for USBHS_PWRCTRL1 register **/
#define USBHS_PWRCTRL1_GATEN_POS                       (0U)
#define USBHS_PWRCTRL1_GATEN                           ((uint32_t)0x00000001U)
#define USBHS_PWRCTRL1_CNT_POS                         (1U)
#define USBHS_PWRCTRL1_CNT                             ((uint32_t)0x00000006U)
#define USBHS_PWRCTRL1_RAMCLKEN_POS                    (3U)
#define USBHS_PWRCTRL1_RAMCLKEN                        ((uint32_t)0x00000008U)

/** Bit definition for USBHS_WRPCTRL register **/
#define USBHS_WRPCTRL_PINDETEN_POS                     (16U)
#define USBHS_WRPCTRL_PINDETEN                         ((uint32_t)0x00010000U)
#define USBHS_WRPCTRL_VBRMDETEN_POS                    (17U)
#define USBHS_WRPCTRL_VBRMDETEN                        ((uint32_t)0x00020000U)
#define USBHS_WRPCTRL_HDISCEN_POS                      (18U)
#define USBHS_WRPCTRL_HDISCEN                          ((uint32_t)0x00040000U)
#define USBHS_WRPCTRL_IDDETEN_POS                      (19U)
#define USBHS_WRPCTRL_IDDETEN                          ((uint32_t)0x00080000U)
#define USBHS_WRPCTRL_SUSPWKEN_POS                     (20U)
#define USBHS_WRPCTRL_SUSPWKEN                         ((uint32_t)0x00100000U)
#define USBHS_WRPCTRL_LSCHGEN_POS                      (21U)
#define USBHS_WRPCTRL_LSCHGEN                          ((uint32_t)0x00200000U)

/** Bit definition for USBHS_WRPCFG register **/
#define USBHS_WRPCFG_PHYCLKSEL_POS                     (0U)
#define USBHS_WRPCFG_PHYCLKSEL                         ((uint32_t)0x00000007U)
#define USBHS_WRPCFG_PHYCLKSEL_10M                     ((uint32_t)0x00000000)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_12M                     ((uint32_t)0x00000001)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_25M                     ((uint32_t)0x00000002)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_30M                     ((uint32_t)0x00000003)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_19_2M                   ((uint32_t)0x00000004)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_24M                     ((uint32_t)0x00000005)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_27M                     ((uint32_t)0x00000006)//[2:0]
#define USBHS_WRPCFG_PHYCLKSEL_40M                     ((uint32_t)0x00000007)//[2:0]

#define USBHS_WRPCFG_PLLEN_POS                         (3U)
#define USBHS_WRPCFG_PLLEN                             ((uint32_t)0x00000008U)
#define USBHS_WRPCFG_IDEN_POS                          (9U)
#define USBHS_WRPCFG_IDEN                              ((uint32_t)0x00000200U)
#define USBHS_WRPCFG_LSEN_POS                          (10U)
#define USBHS_WRPCFG_LSEN                              ((uint32_t)0x00000400U)
#define USBHS_WRPCFG_SOFDEN_POS                        (11U)
#define USBHS_WRPCFG_SOFDEN                            ((uint32_t)0x00000800U)
#define USBHS_WRPCFG_IDSIG_POS                         (12U)
#define USBHS_WRPCFG_IDSIG                             ((uint32_t)0x00001000U)

/*** MIPI DSI HOST ***/

/**  Bit definition for DSI_Wrapper register **/
/**  Bit definition for DSI_WRPCTRL register **/
#define DSI_WRPCTRL_ULPSCLEN        ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_WRPCTRL_ULPSDLEN_POS    (1)
#define DSI_WRPCTRL_ULPSDLEN        ((uint32_t)0x0000001EU) /* Bit[4:1] */
#define DSI_WRPCTRL_ULPSDLEN_0      ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_WRPCTRL_ULPSDLEN_1      ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_WRPCTRL_ULPSDLEN_2      ((uint32_t)0x00000008U) /* Bit 3 */
#define DSI_WRPCTRL_ULPSDLEN_3      ((uint32_t)0x00000010U) /* Bit 4 */
#define DSI_WRPCTRL_ISKEWCAL        ((uint32_t)0x00000020U) /* Bit 5 */
#define DSI_WRPCTRL_PSKEWCAL        ((uint32_t)0x00000040U) /* Bit 6 */
#define DSI_WRPCTRL_TRIGSEND_POS    (7)
#define DSI_WRPCTRL_TRIGSEND        ((uint32_t)0x00000180U) /* Bit[8:7] */
#define DSI_WRPCTRL_TRIGSEND_0      ((uint32_t)0x00000080U) /* Bit 7 */
#define DSI_WRPCTRL_TRIGSEND_1      ((uint32_t)0x00000100U) /* Bit 8 */
#define DSI_WRPCTRL_TRIGREQ         ((uint32_t)0x00000200U) /* Bit 9 */
#define DSI_WRPCTRL_BLKEERIEN       ((uint32_t)0x00000400U) /* Bit 10 */
#define DSI_WRPCTRL_SPERRIEN        ((uint32_t)0x00000800U) /* Bit 11 */
#define DSI_WRPCTRL_OVERRIEN        ((uint32_t)0x00001000U) /* Bit 12 */
#define DSI_WRPCTRL_UNDERRIEN       ((uint32_t)0x00002000U) /* Bit 13 */

/**  Bit definition for DSI_WRPSTS register **/
#define DSI_WRPSTS_ULPSCLACT        ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_WRPSTS_ULPSDLACT_POS    (1)
#define DSI_WRPSTS_ULPSDLACT        ((uint32_t)0x0000001EU) /* Bit[4:1] */
#define DSI_WRPSTS_ULPSDLEN_0       ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_WRPSTS_ULPSDLEN_1       ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_WRPSTS_ULPSDLEN_2       ((uint32_t)0x00000008U) /* Bit 3 */
#define DSI_WRPSTS_ULPSDLEN_3       ((uint32_t)0x00000010U) /* Bit 4 */
#define DSI_WRPSTS_ISKEWCALDN       ((uint32_t)0x00000020U) /* Bit 5 */
#define DSI_WRPSTS_PSKEWCALDN       ((uint32_t)0x00000040U) /* Bit 6 */
#define DSI_WRPSTS_TRIGACK          ((uint32_t)0x00000080U) /* Bit 7 */
#define DSI_WRPSTS_BLKERRF          ((uint32_t)0x00000100U) /* Bit 8 */
#define DSI_WRPSTS_SPERRIEN         ((uint32_t)0x00000200U) /* Bit 9 */
#define DSI_WRPSTS_OVERRIEN         ((uint32_t)0x00000400U) /* Bit 10 */
#define DSI_WRPSTS_UNDERRIEN        ((uint32_t)0x00000800U) /* Bit 11 */

/**  Bit definition for DSIPHY_CTRL1 register **/
#define DSIPHY_CTRL1_HSDBW          ((uint32_t)0x00000001U) /* Bit 0 */
#define DSIPHY_CTRL1_CKLANESET_POS  (1)
#define DSIPHY_CTRL1_CKLANESET      ((uint32_t)0x0000003EU) /* Bit[5:1] */
#define DSIPHY_CTRL1_L4SEL_POS      (6)
#define DSIPHY_CTRL1_L4SEL          ((uint32_t)0x000001C0U) /* Bit[8:6] */
#define DSIPHY_CTRL1_L3SEL_POS      (9)
#define DSIPHY_CTRL1_L3SEL          ((uint32_t)0x00000E00U) /* Bit[11:9] */
#define DSIPHY_CTRL1_L2SEL_POS      (12)
#define DSIPHY_CTRL1_L2SEL          ((uint32_t)0x00007000U) /* Bit[14:12] */
#define DSIPHY_CTRL1_L1SEL_POS      (15)
#define DSIPHY_CTRL1_L1SEL          ((uint32_t)0x00038000U) /* Bit[17:15] */
#define DSIPHY_CTRL1_L0SEL_POS      (18)
#define DSIPHY_CTRL1_L0SEL          ((uint32_t)0x001C0000U) /* Bit[20:18] */
#define DSIPHY_CTRL1_DPDNSEN_POS    (21)
#define DSIPHY_CTRL1_DPDNSEN        ((uint32_t)0x03E00000U) /* Bit[25:21] */
#define DSIPHY_CTRL1_REFCKSEL_POS   (26)
#define DSIPHY_CTRL1_REFCKSEL       ((uint32_t)0x1C000000U) /* Bit[28:26] */
#define DSIPHY_CTRL1_EXTDCYCEL_POS  (29)
#define DSIPHY_CTRL1_EXTDCYCEL      ((uint32_t)0xE0000000U) /* Bit[31:29] */

/**  Bit definition for DSIPHY_CTRL2 register **/
#define DSIPHY_CTRL2_DLPRET_POS     (0)
#define DSIPHY_CTRL2_DLPRET         ((uint32_t)0x000000FFU) /* Bit[7:0] */
#define DSIPHY_CTRL2_DLZEROT_POS    (8)
#define DSIPHY_CTRL2_DLZEROT        ((uint32_t)0x0000FF00U) /* Bit[15:8] */
#define DSIPHY_CTRL2_DLTRAT_POS     (16)
#define DSIPHY_CTRL2_DLTRAT         ((uint32_t)0x00FF0000U) /* Bit[23:16] */
#define DSIPHY_CTRL2_CLPRET_POS     (24)
#define DSIPHY_CTRL2_CLPRET         ((uint32_t)0xFF000000U) /* Bit[31:24] */

/**  Bit definition for DSIPHY_CTRL3 register **/
#define DSIPHY_CTRL3_CLZEROT_POS    (0)
#define DSIPHY_CTRL3_CLZEROT        ((uint32_t)0x000000FFU) /* Bit[7:0] */
#define DSIPHY_CTRL3_CLTRLT_POS     (8)
#define DSIPHY_CTRL3_CLTRLT         ((uint32_t)0x0000FF00U) /* Bit[15:8] */
#define DSIPHY_CTRL3_CLCLKPRET_POS  (16)
#define DSIPHY_CTRL3_CLCLKPRET      ((uint32_t)0x00FF0000U) /* Bit[23:16] */
#define DSIPHY_CTRL3_CLCLKPOST_POS  (24)
#define DSIPHY_CTRL3_CLCLKPOST      ((uint32_t)0xFF000000U) /* Bit[31:24] */

/**  Bit definition for DSIPHY_CTRL4 register **/
#define DSIPHY_CTRL4_VCTRL_POS      (0)
#define DSIPHY_CTRL4_VCTRL          ((uint32_t)0x0000001FU) /* Bit[4:0] */

/**  Bit definition for DSIPHY_PLLCTRL1 register **/
#define DSIPHY_PLLCTRL1_PLLFBKFRA_POS   (0)
#define DSIPHY_PLLCTRL1_PLLFBKFRA       ((uint32_t)0x00FFFFFFU) /* Bit[23:0] */

/**  Bit definition for DSIPHY_PLLCTRL2 register **/
#define DSIPHY_PLLCTRL2_FBKINT_POS      (0)
#define DSIPHY_PLLCTRL2_FBKINT          ((uint32_t)0x000001FFU) /* Bit[8:0] */
#define DSIPHY_PLLCTRL2_PREDIV_POS      (9)
#define DSIPHY_PLLCTRL2_PREDIV          ((uint32_t)0x00000600U) /* Bit[10:9] */
#define DSIPHY_PLLCTRL2_DOSTBEN         ((uint32_t)0x00000800U) /* Bit 11 */
#define DSIPHY_PLLCTRL2_SSCAMPOP_POS    (12)
#define DSIPHY_PLLCTRL2_SSCAMPOP        ((uint32_t)0x03FFF000U) /* Bit[29:12] */

/**  Bit definition for DSIPHY_PLLCTRL3 register **/
#define DSIPHY_PLLCTRL3_SSCAMPINIT_POS  (0)
#define DSIPHY_PLLCTRL3_SSCAMPINIT      ((uint32_t)0x00003FFFU) /* Bit[17:0] */
#define DSIPHY_PLLCTRL3_SSCPRD_POS      (18)
#define DSIPHY_PLLCTRL3_SSCPRD          ((uint32_t)0x0FFC0000U) /* Bit[27:18] */
#define DSIPHY_PLLCTRL3_SSCEN           ((uint32_t)0x10000000U) /* Bit 28 */
#define DSIPHY_PLLCTRL3_PLLFBKCHG       ((uint32_t)0x20000000U) /* Bit 29 */
#define DSIPHY_PLLCTRL3_PLLDOST_POS     (30)
#define DSIPHY_PLLCTRL3_PLLDOST         ((uint32_t)0xC0000000U) /* Bit[31:30] */

/**  Bit definition for DSIPHY_PLLCTRL4 register **/
#define DSIPHY_PLLCTRL4_L2NHTR_POS      (0)
#define DSIPHY_PLLCTRL4_L2NHTR          ((uint32_t)0x0000001FU) /* Bit[4:0] */
#define DSIPHY_PLLCTRL4_L2PHTR_POS      (5)
#define DSIPHY_PLLCTRL4_L2PHTR          ((uint32_t)0x000003E0U) /* Bit[9:5] */
#define DSIPHY_PLLCTRL4_L1NHTR_POS      (10)
#define DSIPHY_PLLCTRL4_L1NHTR          ((uint32_t)0x00007C00U) /* Bit[14:10] */
#define DSIPHY_PLLCTRL4_L1PHTR_POS      (15)
#define DSIPHY_PLLCTRL4_L1PHTR          ((uint32_t)0x000F8000U) /* Bit[19:15] */
#define DSIPHY_PLLCTRL4_L0NHTR_POS      (20)
#define DSIPHY_PLLCTRL4_L0NHTR          ((uint32_t)0x01F00000U) /* Bit[24:20] */
#define DSIPHY_PLLCTRL4_L0PHTR_POS      (25)
#define DSIPHY_PLLCTRL4_L0PHTR          ((uint32_t)0x3E000000U) /* Bit[29:25] */

/**  Bit definition for DSIPHY_PLLCTRL5 register **/
#define DSIPHY_PLLCTRL5_L4NHTR_POS      (0)
#define DSIPHY_PLLCTRL5_L4NHTR          ((uint32_t)0x0000001FU) /* Bit[4:0] */
#define DSIPHY_PLLCTRL5_L4PHTR_POS      (5)
#define DSIPHY_PLLCTRL5_L4PHTR          ((uint32_t)0x000003E0U) /* Bit[9:5] */
#define DSIPHY_PLLCTRL5_L3NHTR_POS      (10)
#define DSIPHY_PLLCTRL5_L3NHTR          ((uint32_t)0x00007C00U) /* Bit[14:10] */
#define DSIPHY_PLLCTRL5_L3PHTR_POS      (15)
#define DSIPHY_PLLCTRL5_L3PHTR          ((uint32_t)0x000F8000U) /* Bit[19:15] */
#define DSIPHY_PLLCTRL5_PLLFMTOR_POS    (20)
#define DSIPHY_PLLCTRL5_PLLFMTOR        ((uint32_t)0x00300000U) /* Bit[21:20] */
#define DSIPHY_PLLCTRL3_PLLWTGEN        ((uint32_t)0x00400000U) /* Bit 22 */
#define DSIPHY_PLLCTRL3_PLLFMEN         ((uint32_t)0x00800000U) /* Bit 23 */

/**  Bit definition for DSIPHY_PLLSTS register **/
#define DSIPHY_PLLSTS_PLLUNLOCK         ((uint32_t)0x00000001U) /* Bit 0 */
#define DSIPHY_PLLSTS_PLLFMCPLT         ((uint32_t)0x00000002U) /* Bit 1 */
#define DSIPHY_PLLSTS_PLLFMUNDER        ((uint32_t)0x00000004U) /* Bit 2 */
#define DSIPHY_PLLSTS_PLLFMOVER         ((uint32_t)0x00000008U) /* Bit 3 */
#define DSIPHY_PLLSTS_PLLDIGCKMISS      ((uint32_t)0x00000010U) /* Bit 4 */
#define DSIPHY_PLLSTS_PLLFBKCKMISS      ((uint32_t)0x00000020U) /* Bit 5 */
#define DSIPHY_PLLSTS_PLLREFCKMISS      ((uint32_t)0x00000040U) /* Bit 6 */
#define DSIPHY_PLLSTS_PHYREADY          ((uint32_t)0x00000080U) /* Bit 7 */

/**  Bit definition for DSI HOST Control register **/
/**  Bit definition for DSI_NUMLANES register **/
#define DSI_NUMLANES_NUMLANES_POS       (0)
#define DSI_NUMLANES_NUMLANES           ((uint32_t)0x0000000FU) /* Bit[3:0] */
#define DSI_NUMLANES_NUMLANES_0         ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_NUMLANES_NUMLANES_1         ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_NUMLANES_NUMLANES_2         ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_NUMLANES_NUMLANES_3         ((uint32_t)0x00000008U) /* Bit 3 */

/**  Bit definition for DSI_CONTHSCLK register **/
#define DSI_CONTHSCLK_CONTHSCLK_POS     (0)
#define DSI_CONTHSCLK_CONTHSCLK         ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for DSI_TPRE register **/
#define DSI_TPRE_TPRE_POS               (0)
#define DSI_TPRE_TPRE                   ((uint32_t)0x000000FFU) /* Bit[7:0] */

/**  Bit definition for DSI_TPOST register **/
#define DSI_TPOST_TPOST_POS             (0)
#define DSI_TPOST_TPOST                 ((uint32_t)0x000000FFU) /* Bit[7:0] */

/**  Bit definition for DSI_TXGAP register **/
#define DSI_TXGAP_TXGAP_POS             (0)
#define DSI_TXGAP_TXGAP                 ((uint32_t)0x000000FFU) /* Bit[7:0] */

/**  Bit definition for DSI_AUTOINSERT_EOTP register **/
#define DSI_AUTOINSERT_EOTP_AUTOINSEOTP ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for DSI_DISRXCRCCHK register **/
#define DSI_DISRXCRCCHK_DISRXCRCCHK     ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for DSI_HSTXTOCNT register **/
#define DSI_HSTXTOCNT_HSTXTOCNT_POS     (0)
#define DSI_HSTXTOCNT_HSTXTOCNT         ((uint32_t)0x00FFFFFFU) /* Bit[23:0] */

/**  Bit definition for DSI_LRXTOCNT register **/
#define DSI_LRXTOCNT_LRXTOCNT_POS       (0)
#define DSI_LRXTOCNT_LRXTOCNT           ((uint32_t)0x00FFFFFFU) /* Bit[23:0] */

/**  Bit definition for DSI_BTATOCNT register **/
#define DSI_BTATOCNT_BTATOCNT_POS       (0)
#define DSI_BTATOCNT_BTATOCNT           ((uint32_t)0x00FFFFFFU) /* Bit[23:0] */

/**  Bit definition for DSI_TWAKEUP register **/
#define DSI_TWAKEUP_TWAKEUP_POS         (0)
#define DSI_TWAKEUP_TWAKEUP             ((uint32_t)0x0007FFFFU) /* Bit[18:0] */

/**  Bit definition for DSI_DISBST register **/
#define DSI_DISBST_DISBST               ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for DSI_STS register **/
#define DSI_STS_SOTERR                  ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_STS_SOTSYNCERR              ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_STS_EOTSYNCERR              ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_STS_ESCMODERR               ((uint32_t)0x00000008U) /* Bit 3 */
#define DSI_STS_LPTXSYNCERR             ((uint32_t)0x00000010U) /* Bit 4 */
#define DSI_STS_TOERR                   ((uint32_t)0x00000020U) /* Bit 5 */
#define DSI_STS_FCTRLERR                ((uint32_t)0x00000040U) /* Bit 6 */
#define DSI_STS_COTDET                  ((uint32_t)0x00000080U) /* Bit 7 */
#define DSI_STS_ECCSERR                 ((uint32_t)0x00000100U) /* Bit 8 */
#define DSI_STS_ECCMERR                 ((uint32_t)0x00000200U) /* Bit 9 */
#define DSI_STS_CRCERR                  ((uint32_t)0x00000400U) /* Bit 10 */
#define DSI_STS_DATYPERR                ((uint32_t)0x00000800U) /* Bit 11 */
#define DSI_STS_VCIDINVLD               ((uint32_t)0x00001000U) /* Bit 12 */
#define DSI_STS_INVLDTXL                ((uint32_t)0x00002000U) /* Bit 13 */
#define DSI_STS_PROVILT                 ((uint32_t)0x00008000U) /* Bit 15 */
#define DSI_STS_BIT0                    ((uint32_t)0x00010000U) /* Bit 16 */
#define DSI_STS_BIT1                    ((uint32_t)0x00020000U) /* Bit 17 */
#define DSI_STS_BIT2                    ((uint32_t)0x00040000U) /* Bit 18 */
#define DSI_STS_BIT3                    ((uint32_t)0x00080000U) /* Bit 19 */

/**  Bit definition for DSI_ERRSTS register **/
#define DSI_ERRSTS_ECCSERR              ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_ERRSTS_ECCMERR              ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_ERRSTS_ECCERRBIT_POS        (2)
#define DSI_ERRSTS_ECCERRBIT            ((uint32_t)0x0000007CU) /* Bit [6:2] */
#define DSI_ERRSTS_ECCERRBIT_0          ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_ERRSTS_ECCERRBIT_1          ((uint32_t)0x00000008U) /* Bit 3 */
#define DSI_ERRSTS_ECCERRBIT_2          ((uint32_t)0x00000010U) /* Bit 4 */
#define DSI_ERRSTS_ECCERRBIT_3          ((uint32_t)0x00000020U) /* Bit 5 */
#define DSI_ERRSTS_ECCERRBIT_4          ((uint32_t)0x00000040U) /* Bit 6 */
#define DSI_ERRSTS_CRCERR               ((uint32_t)0x00000080U) /* Bit 7 */
#define DSI_ERRSTS_HTXTOERR             ((uint32_t)0x00000100U) /* Bit 8 */
#define DSI_ERRSTS_LRXTOERR             ((uint32_t)0x00000200U) /* Bit 9 */
#define DSI_ERRSTS_BATTOERR             ((uint32_t)0x00000400U) /* Bit 10 */

/**  Bit definition for DSI_CLKLANEN register **/
#define DSI_CLKLANEN_CLKLANEN           ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for DSI_DATLANEN register **/
#define DSI_DATLANEN_DATLANEN_POS       (0)
#define DSI_DATLANEN_DATLANEN           ((uint32_t)0x0000000FU) /* Bit[3:0] */
#define DSI_DATLANEN_DATLANEN_0         ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_DATLANEN_DATLANEN_1         ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_DATLANEN_DATLANEN_2         ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_DATLANEN_DATLANEN_3         ((uint32_t)0x00000008U) /* Bit 3 */

/**  Bit definition for DSI_SKEWCALTIMI register **/
#define DSI_SKEWCALTIMI_SKEWVALTIMI_POS (0)
#define DSI_SKEWCALTIMI_SKEWVALTIMI     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for DSI_SKEWCALTIMP register **/
#define DSI_SKEWCALTIMP_SKEWVALTIMP_POS (0)
#define DSI_SKEWCALTIMP_SKEWVALTIMP     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for DSI_ALTCALTIM register **/
#define DSI_ALTCALTIM_ALTCALTIM_POS     (0)
#define DSI_ALTCALTIM_ALTCALTIM         ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for DSI_SKEWCALINE register **/
#define DSI_SKEWCALINE_SKEWCALINE_POS   (0)
#define DSI_SKEWCALINE_SKEWCALINE       ((uint32_t)0x000000FFU) /* Bit[7:0] */

/**  Bit definition for VID_EN register **/
#define VID_EN_EN_POS                   (0)
#define VID_EN_EN                       ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_PIXPERPKT register **/
#define VID_PIXPERPKT_PIXPERPKT_POS     (0)
#define VID_PIXPERPKT_PIXPERPKT         ((uint32_t)0x0000FFFFU) /* Bit[15:0] */


/**  Bit definition for VID_PIXPLDSIZ register **/
#define VID_PIXPLDSIZ_PIXPLDSIZ_POS     (0)
#define VID_PIXPLDSIZ_PIXPLDSIZ         ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_PIXALIGN register **/
#define VID_PIXALIGN_PIXALIGN_POS       (0)
#define VID_PIXALIGN_PIXALIGN           ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_PIXFMT register **/
#define VID_PIXFMT_PIXFMT_POS           (0)
#define VID_PIXFMT_PIXFMT               ((uint32_t)0x0000003FU) /* Bit[5:0] */

/**  Bit definition for VID_VSYNCPOL register **/
#define VID_VSYNCPOL_VSYNCPOL_POS       (0)
#define VID_VSYNCPOL_VSYNCPOL           ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_HSYNCPOL register **/
#define VID_HSYNCPOL_HSYNCPOL_POS       (0)
#define VID_HSYNCPOL_HSYNCPOL           ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_VIDEOMOD register **/
#define VID_VIDEOMOD_VIDEOMOD_POS       (0)
#define VID_VIDEOMOD_VIDEOMOD           ((uint32_t)0x00000003U) /* Bit[1:0] */
#define VID_VIDEOMOD_VIDEOMOD_0         ((uint32_t)0x00000001U) /* Bit 0 */
#define VID_VIDEOMOD_VIDEOMOD_1         ((uint32_t)0x00000002U) /* Bit 1 */


/**  Bit definition for VID_OVERIDE register **/
#define VID_OVERIDE_OVERIDE_POS         (0)
#define VID_OVERIDE_OVERIDE             ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_STD register **/
#define VID_STD_STD_POS                 (0)
#define VID_STD_STD                     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_HFP register **/
#define VID_HFP_HFP_POS                 (0)
#define VID_HFP_HFP                     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_HBP register **/
#define VID_HBP_HBP_POS                 (0)
#define VID_HBP_HBP                     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_HSA register **/
#define VID_HSA_HSA_POS                 (0)
#define VID_HSA_HSA                     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_PKTPERLINE register **/
#define VID_PKTPERLINE_PKTPERLINE_POS   (0)
#define VID_PKTPERLINE_PKTPERLINE       ((uint32_t)0x0000000FU) /* Bit[3:0] */
#define VID_PKTPERLINE_PKTPERLINE_0     ((uint32_t)0x00000001U) /* Bit 0 */
#define VID_PKTPERLINE_PKTPERLINE_1     ((uint32_t)0x00000002U) /* Bit 1 */
#define VID_PKTPERLINE_PKTPERLINE_2     ((uint32_t)0x00000004U) /* Bit 2 */
#define VID_PKTPERLINE_PKTPERLINE_3     ((uint32_t)0x00000008U) /* Bit 3 */

/**  Bit definition for VID_VBP register **/
#define VID_VBP_VBP_POS                 (0)
#define VID_VBP_VBP                     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_VFP register **/
#define VID_VFP_VFP_POS                 (0)
#define VID_VFP_VFP                     ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_BLLPMOD register **/
#define VID_BLLPMOD_BLLPMOD_POS         (0)
#define VID_BLLPMOD_BLLPMOD             ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_NULLPKTBLLP register **/
#define VID_NULLPKTBLLP_NULLPKTBLLP_POS (0)
#define VID_NULLPKTBLLP_NULLPKTBLLP     ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for VID_VACT register **/
#define VID_VACT_VACT_POS               (0)
#define VID_VACT_VACT                   ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_VC register **/
#define VID_VC_VC_POS                   (0)
#define VID_VC_VC                       ((uint32_t)0x00000003U) /* Bit[1:0] */
#define VID_VC_VC_0                     ((uint32_t)0x00000001U) /* Bit 0 */
#define VID_VC_VC_1                     ((uint32_t)0x00000002U) /* Bit 1 */

/**  Bit definition for VID_EXTPKTEN register **/
#define VID_EXTPKTEN_EXTPKTEN_POS       (0)
#define VID_EXTPKTEN_EXTPKTEN           ((uint32_t)0x0000000FU) /* Bit[3:0] */
#define VID_EXTPKTEN_EXTPKTEN_0         ((uint32_t)0x00000001U) /* Bit 0 */
#define VID_EXTPKTEN_EXTPKTEN_1         ((uint32_t)0x00000002U) /* Bit 1 */
#define VID_EXTPKTEN_EXTPKTEN_2         ((uint32_t)0x00000003U) /* Bit 2 */
#define VID_EXTPKTEN_EXTPKTEN_3         ((uint32_t)0x00000004U) /* Bit 3 */

/**  Bit definition for VID_VSSPLD register **/
#define VID_VSSPLD_VSSPLD_POS           (0)
#define VID_VSSPLD_VSSPLD               ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for VID_PLDPERPKT register **/
#define VID_PLDPERPKT_PLLPERPKT_POS     (0)
#define VID_PLDPERPKT_PLLPERPKT         ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for DSI_TXPLD register **/
#define DSI_TXPLD_TXPLD_POS             (0)
#define DSI_TXPLD_TXPLD                 ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] */

/**  Bit definition for DSI_PKTCTRL register **/
#define DSI_PKTCTRL_CNT_POS             (0)
#define DSI_PKTCTRL_CNT                 ((uint32_t)0x0000FFFFU) /* Bit[15:0] */
#define DSI_PKTCTRL_VC_POS              (16)
#define DSI_PKTCTRL_VC                  ((uint32_t)0x00030000U) /* Bit[17:16] */
#define DSI_PKTCTRL_VC_0                ((uint32_t)0x00010000U) /* Bit 16 */
#define DSI_PKTCTRL_VC_1                ((uint32_t)0x00020000U) /* Bit 17 */
#define DSI_PKTCTRL_HDTYP_POS           (18)
#define DSI_PKTCTRL_HDTYP               ((uint32_t)0x00FC0000U) /* Bit[23:18] */
#define DSI_PKTCTRL_HDTYP_0             ((uint32_t)0x00040000U) /* Bit 18 */
#define DSI_PKTCTRL_HDTYP_1             ((uint32_t)0x00080000U) /* Bit 19 */
#define DSI_PKTCTRL_HDTYP_2             ((uint32_t)0x00100000U) /* Bit 20 */
#define DSI_PKTCTRL_HDTYP_3             ((uint32_t)0x00200000U) /* Bit 21 */
#define DSI_PKTCTRL_HDTYP_4             ((uint32_t)0x00400000U) /* Bit 22 */
#define DSI_PKTCTRL_HDTYP_5             ((uint32_t)0x00800000U) /* Bit 23 */
#define DSI_PKTCTRL_MOD                 ((uint32_t)0x01000000U) /* Bit 24 */
#define DSI_PKTCTRL_BATIMM              ((uint32_t)0x02000000U) /* Bit 25 */
#define DSI_PKTCTRL_BATNOPKT            ((uint32_t)0x04000000U) /* Bit 26 */

/**  Bit definition for DSI_SENDPKT register **/
#define DSI_SENDPKT_SENDPKT             ((uint32_t)0x00000001U) /* Bit 0 */

/**  Bit definition for DSI_PKTSTS register **/
#define DSI_PKTSTS_NIDLE                ((uint32_t)0x00000001U) /* Bit 0 */
#define DSI_PKTSTS_TXD                  ((uint32_t)0x00000002U) /* Bit 1 */
#define DSI_PKTSTS_DPHYDIR              ((uint32_t)0x00000004U) /* Bit 2 */
#define DSI_PKTSTS_TXFOVER              ((uint32_t)0x00000008U) /* Bit 3 */
#define DSI_PKTSTS_TXFUNDER             ((uint32_t)0x00000010U) /* Bit 4 */
#define DSI_PKTSTS_RXFOVER              ((uint32_t)0x00000020U) /* Bit 5 */
#define DSI_PKTSTS_RXFUNDER             ((uint32_t)0x00000040U) /* Bit 6 */
#define DSI_PKTSTS_RXPKTD               ((uint32_t)0x00000080U) /* Bit 7 */
#define DSI_PKTSTS_ALLRXPKTD            ((uint32_t)0x00000100U) /* Bit 8 */

/**  Bit definition for DSI_PKTFWRLVL register **/
#define DSI_PKTFWRLVL_POS               (0)
#define DSI_PKTFWRLVL_PKTFWRLVL         ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for DSI_PKTFRDLVL register **/
#define DSI_PKTFRDLVL_POS               (0)
#define DSI_PKTFRDLVL_PKTFRDLVL         ((uint32_t)0x0000FFFFU) /* Bit[15:0] */

/**  Bit definition for DSI_PKTRXPLD register **/
#define DSI_PKTRXPLD_POS                (0)
#define DSI_PKTRXPLD_PKTRXPLD           ((uint32_t)0xFFFFFFFFU) /* Bit[31:0] */

/**  Bit definition for DSI_PKTRXHDR register **/
#define DSI_PKTRXHDR_POS                (0)
#define DSI_PKTRXHDR_CNT                ((uint32_t)0x0000FFFFU) /* Bit[15:0] */
#define DSI_PKTRXHDR_DATATYP_POS        (16)
#define DSI_PKTRXHDR_DATATYP            ((uint32_t)0x003F0000U) /* Bit[21:16] */
#define DSI_PKTRXHDR_DATATYP_0          ((uint32_t)0x00010000U) /* Bit 16 */
#define DSI_PKTRXHDR_DATATYP_1          ((uint32_t)0x00020000U) /* Bit 17 */
#define DSI_PKTRXHDR_DATATYP_2          ((uint32_t)0x00040000U) /* Bit 18 */
#define DSI_PKTRXHDR_DATATYP_3          ((uint32_t)0x00080000U) /* Bit 19 */
#define DSI_PKTRXHDR_DATATYP_4          ((uint32_t)0x00100000U) /* Bit 20 */
#define DSI_PKTRXHDR_DATATYP_5          ((uint32_t)0x00200000U) /* Bit 21 */
#define DSI_PKTRXHDR_VCN_POS            (22)
#define DSI_PKTRXHDR_VCN                ((uint32_t)0x00C00000U) /* Bit[23:22] */
#define DSI_PKTRXHDR_VCN_0              ((uint32_t)0x00400000U) /* Bit 22 */
#define DSI_PKTRXHDR_VCN_1              ((uint32_t)0x00800000U) /* Bit 23 */

/**  Bit definition for DSI_IFPRIOSEL register **/
#define DSI_IFPRIOSEL_IFPRIOSEL          ((uint32_t)0x0000FFFFU) /* Bit 0 */

/*** Window WATCHDOG ***/

/**  Bit definition for WWDG_CFG register **/
#define WWDG_CFG_W       ((uint32_t)0x00003FFFU) /* W[13:0] bits (14-bit window value) */
#define WWDG_CFG_W0      ((uint32_t)0x00000001U) /* Bit 0 */
#define WWDG_CFG_W1      ((uint32_t)0x00000002U) /* Bit 1 */
#define WWDG_CFG_W2      ((uint32_t)0x00000004U) /* Bit 2 */
#define WWDG_CFG_W3      ((uint32_t)0x00000008U) /* Bit 3 */
#define WWDG_CFG_W4      ((uint32_t)0x00000010U) /* Bit 4 */
#define WWDG_CFG_W5      ((uint32_t)0x00000020U) /* Bit 5 */
#define WWDG_CFG_W6      ((uint32_t)0x00000040U) /* Bit 6 */
#define WWDG_CFG_W7      ((uint32_t)0x00000080U) /* Bit 7  */
#define WWDG_CFG_W8      ((uint32_t)0x00000100U) /* Bit 8  */
#define WWDG_CFG_W9      ((uint32_t)0x00000200U) /* Bit 9  */
#define WWDG_CFG_W10     ((uint32_t)0x00000400U) /* Bit 10 */
#define WWDG_CFG_W11     ((uint32_t)0x00000800U) /* Bit 11 */
#define WWDG_CFG_W12     ((uint32_t)0x00001000U) /* Bit 12 */
#define WWDG_CFG_W13     ((uint32_t)0x00002000U) /* Bit 13 */

#define WWDG_CFG_TIMERB  ((uint32_t)0x0000C000U) /* WDGTB[1:0] bits (Timer Base) */
#define WWDG_CFG_TIMERB0 ((uint32_t)0x00004000U) /* Bit 0 */
#define WWDG_CFG_TIMERB1 ((uint32_t)0x00008000U) /* Bit 1 */

#define WWDG_CFG_EWINT   ((uint32_t)0x00010000U) /* Early Wakeup Interrupt */

/** Bit definition for WWDG_CTRL register **/
#define WWDG_CTRL_T      ((uint16_t)0x3FFFU)     /*T[13:0] bits(14-bit counter (MSB to LSB)) */
#define WWDG_CTRL_T0     ((uint16_t)0x0001U)     /* Bit 0  */
#define WWDG_CTRL_T1     ((uint16_t)0x0002U)     /* Bit 1  */
#define WWDG_CTRL_T2     ((uint16_t)0x0004U)     /* Bit 2  */
#define WWDG_CTRL_T3     ((uint16_t)0x0008U)     /* Bit 3  */
#define WWDG_CTRL_T4     ((uint16_t)0x0010U)     /* Bit 4  */
#define WWDG_CTRL_T5     ((uint16_t)0x0020U)     /* Bit 5  */
#define WWDG_CTRL_T6     ((uint16_t)0x0040U)     /* Bit 6  */
#define WWDG_CTRL_T7     ((uint16_t)0x0080U)     /* Bit 7  */
#define WWDG_CTRL_T8     ((uint16_t)0x0100U)     /* Bit 8  */
#define WWDG_CTRL_T9     ((uint16_t)0x0200U)     /* Bit 9  */
#define WWDG_CTRL_T10    ((uint16_t)0x0400U)     /* Bit 10 */
#define WWDG_CTRL_T11    ((uint16_t)0x0800U)     /* Bit 11 */
#define WWDG_CTRL_T12    ((uint16_t)0x1000U)     /* Bit 12 */
#define WWDG_CTRL_T13    ((uint16_t)0x2000U)     /* Bit 13 */

#define WWDG_CTRL_ACTB   ((uint16_t)0x4000U)     /* Activation bit */

/** Bit definition for WWDG_STS register **/
#define WWDG_STS_EWINTF  ((uint8_t)0x01U)        /* Early Wakeup Interrupt Flag */

/*** Independent watchdog ***/

/** Bit definition for IWDG_KEY register **/
#define IWDG_KEY_KEYV     ((uint16_t)0xFFFFU) /* Key value (write only, read 0000h) */

/** Bit definition for IWDG_STS register **/
#define IWDG_STS_PVU      ((uint8_t)0x01U)    /* Watchdog prescaler value update */
#define IWDG_STS_CRVU     ((uint8_t)0x02U)    /* Watchdog counter reload value update */
#define IWDG_STS_FRZF     ((uint8_t)0x04U)    /* The freeze flag */

/** Bit definition for IWDG_PREDIV register **/
#define IWDG_PREDIV_PD    ((uint8_t)0x07U)    /* PD[2:0] (Prescaler divider) */
#define IWDG_PREDIV_PD0   ((uint8_t)0x01U)    /* Bit 0 */
#define IWDG_PREDIV_PD1   ((uint8_t)0x02U)    /* Bit 1 */
#define IWDG_PREDIV_PD2   ((uint8_t)0x04U)    /* Bit 2 */

/** Bit definition for IWDG_RELV register **/
#define IWDG_RELV_REL     ((uint16_t)0x0FFFU) /* Watchdog counter reload value */


/*** Flexible Datarate Controller Area Network ***/

/** Bit definition for FDCAN_CREL register **/
#define FDCAN_CREL_DAY          ((uint32_t)0x000000FFU)  /* Timestamp Day bits  */
#define FDCAN_CREL_DAY_0        ((uint32_t)0x00000001U)  /* Timestamp Day bit 0 */
#define FDCAN_CREL_DAY_1        ((uint32_t)0x00000002U)  /* Timestamp Day bit 1 */
#define FDCAN_CREL_DAY_2        ((uint32_t)0x00000004U)  /* Timestamp Day bit 2 */
#define FDCAN_CREL_DAY_3        ((uint32_t)0x00000008U)  /* Timestamp Day bit 3 */
#define FDCAN_CREL_DAY_4        ((uint32_t)0x00000010U)  /* Timestamp Day bit 4 */
#define FDCAN_CREL_DAY_5        ((uint32_t)0x00000020U)  /* Timestamp Day bit 5 */
#define FDCAN_CREL_DAY_6        ((uint32_t)0x00000040U)  /* Timestamp Day bit 6 */
#define FDCAN_CREL_DAY_7        ((uint32_t)0x00000080U)  /* Timestamp Day bit 7 */

#define FDCAN_CREL_MON          ((uint32_t)0x0000FF00U)  /* Timestamp Month bits  */
#define FDCAN_CREL_MON_0        ((uint32_t)0x00000100U)  /* Timestamp Month bit 0 */
#define FDCAN_CREL_MON_1        ((uint32_t)0x00000200U)  /* Timestamp Month bit 1 */
#define FDCAN_CREL_MON_2        ((uint32_t)0x00000400U)  /* Timestamp Month bit 2 */
#define FDCAN_CREL_MON_3        ((uint32_t)0x00000800U)  /* Timestamp Month bit 3 */
#define FDCAN_CREL_MON_4        ((uint32_t)0x00001000U)  /* Timestamp Month bit 4 */
#define FDCAN_CREL_MON_5        ((uint32_t)0x00002000U)  /* Timestamp Month bit 5 */
#define FDCAN_CREL_MON_6        ((uint32_t)0x00004000U)  /* Timestamp Month bit 6 */
#define FDCAN_CREL_MON_7        ((uint32_t)0x00008000U)  /* Timestamp Month bit 7 */

#define FDCAN_CREL_YEAR         ((uint32_t)0x000F0000U)  /* Timestamp Year bits  */
#define FDCAN_CREL_YEAR_0       ((uint32_t)0x00010000U)  /* Timestamp Year bit 0 */
#define FDCAN_CREL_YEAR_1       ((uint32_t)0x00020000U)  /* Timestamp Year bit 1 */
#define FDCAN_CREL_YEAR_2       ((uint32_t)0x00040000U)  /* Timestamp Year bit 2 */
#define FDCAN_CREL_YEAR_3       ((uint32_t)0x00080000U)  /* Timestamp Year bit 3 */

#define FDCAN_CREL_SUBSTEP      ((uint32_t)0x00F00000U)  /* Sub-step of Core release bits  */
#define FDCAN_CREL_SUBSTEP_0    ((uint32_t)0x00100000U)  /* Sub-step of Core release bit 0 */
#define FDCAN_CREL_SUBSTEP_1    ((uint32_t)0x00200000U)  /* Sub-step of Core release bit 1 */
#define FDCAN_CREL_SUBSTEP_2    ((uint32_t)0x00400000U)  /* Sub-step of Core release bit 2 */
#define FDCAN_CREL_SUBSTEP_3    ((uint32_t)0x00800000U)  /* Sub-step of Core release bit 3 */

#define FDCAN_CREL_STEP         ((uint32_t)0x0F000000U)  /* Step of Core release bits  */
#define FDCAN_CREL_STEP_0       ((uint32_t)0x01000000U)  /* Step of Core release bit 0 */
#define FDCAN_CREL_STEP_1       ((uint32_t)0x02000000U)  /* Step of Core release bit 1 */
#define FDCAN_CREL_STEP_2       ((uint32_t)0x04000000U)  /* Step of Core release bit 2 */
#define FDCAN_CREL_STEP_3       ((uint32_t)0x08000000U)  /* Step of Core release bit 3 */

#define FDCAN_CREL_REL          ((uint32_t)0xF0000000U)  /* Core release bits   */
#define FDCAN_CREL_REL_0        ((uint32_t)0x10000000U)  /* Core release bits 0 */
#define FDCAN_CREL_REL_1        ((uint32_t)0x20000000U)  /* Core release bits 1 */
#define FDCAN_CREL_REL_2        ((uint32_t)0x40000000U)  /* Core release bits 2 */
#define FDCAN_CREL_REL_3        ((uint32_t)0x80000000U)  /* Core release bits 3 */

/** Bit definition for FDCAN_ENDN register **/
#define FDCAN_ENDN_ETV          ((uint32_t)0xFFFFFFFFU)  /* Endianness Test Value */

/** Bit definition for FDCAN_DBTP register **/
#define FDCAN_DBTP_DSJW         ((uint32_t)0x0000000FU)  /* Synchronization Jump Width bits  */
#define FDCAN_DBTP_DTSEG2       ((uint32_t)0x000000F0U)  /* Data time segment after sample point bits  */
#define FDCAN_DBTP_DTSEG1       ((uint32_t)0x00001F00U)  /* Data time segment before sample point bits  */
#define FDCAN_DBTP_DBRP         ((uint32_t)0x001F0000U)  /* Data BIt Rate Prescaler bits  */

#define FDCAN_DBTP_TDC          ((uint32_t)0x00800000U)  /* Transceiver Delay Compensation */

/** Bit definition for FDCAN_TEST register **/
#define FDCAN_TEST_LBCK         ((uint32_t)0x00000010U)  /* Loop Back Mode                */
#define FDCAN_TEST_TX           ((uint32_t)0x00000060U)  /* Control bits of Transmit Pin  */
#define FDCAN_TEST_RX           ((uint32_t)0x00000080U)  /* Receive Pin status */

/** Bit definition for FDCAN_RWD register **/
#define FDCAN_RWD_WDC           ((uint32_t)0x000000FFU)  /* Watchdog Configuration bits  */
#define FDCAN_RWD_WDC_0         ((uint32_t)0x00000001U)  /* Watchdog Configuration bit 0 */
#define FDCAN_RWD_WDC_1         ((uint32_t)0x00000002U)  /* Watchdog Configuration bit 1 */
#define FDCAN_RWD_WDC_2         ((uint32_t)0x00000004U)  /* Watchdog Configuration bit 2 */
#define FDCAN_RWD_WDC_3         ((uint32_t)0x00000008U)  /* Watchdog Configuration bit 3 */
#define FDCAN_RWD_WDC_4         ((uint32_t)0x00000010U)  /* Watchdog Configuration bit 4 */
#define FDCAN_RWD_WDC_5         ((uint32_t)0x00000020U)  /* Watchdog Configuration bit 5 */
#define FDCAN_RWD_WDC_6         ((uint32_t)0x00000040U)  /* Watchdog Configuration bit 6 */
#define FDCAN_RWD_WDC_7         ((uint32_t)0x00000080U)  /* Watchdog Configuration bit 7 */

#define FDCAN_RWD_WDV           ((uint32_t)0x0000FF00U)  /* Watchdog Value bits  */
#define FDCAN_RWD_WDV_0         ((uint32_t)0x00000100U)  /* Watchdog Value bit 0 */
#define FDCAN_RWD_WDV_1         ((uint32_t)0x00000200U)  /* Watchdog Value bit 1 */
#define FDCAN_RWD_WDV_2         ((uint32_t)0x00000400U)  /* Watchdog Value bit 2 */
#define FDCAN_RWD_WDV_3         ((uint32_t)0x00000800U)  /* Watchdog Value bit 3 */
#define FDCAN_RWD_WDV_4         ((uint32_t)0x00001000U)  /* Watchdog Value bit 4 */
#define FDCAN_RWD_WDV_5         ((uint32_t)0x00002000U)  /* Watchdog Value bit 5 */
#define FDCAN_RWD_WDV_6         ((uint32_t)0x00004000U)  /* Watchdog Value bit 6 */
#define FDCAN_RWD_WDV_7         ((uint32_t)0x00008000U)  /* Watchdog Value bit 7 */

/** Bit definition for FDCAN_CCCR register **/
#define FDCAN_CCCR_INIT         ((uint32_t)0x00000001U)  /* Initialization                        */
#define FDCAN_CCCR_CCE          ((uint32_t)0x00000002U)  /* Configuration Change Enable           */
#define FDCAN_CCCR_ASM          ((uint32_t)0x00000004U)  /* ASM Restricted Operation Mode         */
#define FDCAN_CCCR_CSA          ((uint32_t)0x00000008U)  /* Clock Stop Acknowledge                */
#define FDCAN_CCCR_CSR          ((uint32_t)0x00000010U)  /* Clock Stop Request                    */
#define FDCAN_CCCR_MON          ((uint32_t)0x00000020U)  /* Bus Monitoring Mode                   */
#define FDCAN_CCCR_DAR          ((uint32_t)0x00000040U)  /* Disable Automatic Retransmission      */
#define FDCAN_CCCR_TEST         ((uint32_t)0x00000080U)  /* Test Mode Enable                      */
#define FDCAN_CCCR_FDOE         ((uint32_t)0x00000100U)  /* FD Operation Enable                   */
#define FDCAN_CCCR_BRSE         ((uint32_t)0x00000200U)  /* FDCAN Bit Rate Switch Enable          */
#define FDCAN_CCCR_PXHD         ((uint32_t)0x00001000U)  /* Protocol Exception Handling Disable   */
#define FDCAN_CCCR_EFBI         ((uint32_t)0x00002000U)  /* Edge Filtering during Bus Integration */
#define FDCAN_CCCR_TXP          ((uint32_t)0x00004000U)  /* Two CAN bit times Transmit Pause      */
#define FDCAN_CCCR_NISO         ((uint32_t)0x00008000U)  /* Non ISO Operation                     */

/** Bit definition for FDCAN_NBTP register **/
#define FDCAN_NBTP_NTSEG2       ((uint32_t)0x0000007FU)  /* Nominal Time segment after sample point  */
#define FDCAN_NBTP_NTSEG1       ((uint32_t)0x0000FF00U)  /* Nominal Time segment before sample point bits bits  */
#define FDCAN_NBTP_NBRP         ((uint32_t)0x01FF0000U)  /* Bit Rate Prescaler bits  */
#define FDCAN_NBTP_NSJW         ((uint32_t)0xFE000000U)  /* Nominal (Re)Synchronization Jump Width bits   */

/** Bit definition for FDCAN_TSCC register **/
#define FDCAN_TSCC_TSS          ((uint32_t)0x00000003U)  /* Timestamp Select bits  */
#define FDCAN_TSCC_CONSTANT     ((uint32_t)0x00000000U)  /* Timestamp counter is always 0x0000  */
#define FDCAN_TSCC_INC_TCP      ((uint32_t)0x00000001U)  /* Timestamp counter is increasd according to TCP  */
#define FDCAN_TSCC_USE_EXT      ((uint32_t)0x00000002U)  /* Use Extern Timestamp counter   */

#define FDCAN_TSCC_TCP          ((uint32_t)0x000F0000U)  /* Timestamp Counter Prescaler bits  */
#define FDCAN_TSCC_TCP_DIV1     ((uint32_t)0x00000000U) /* Timestamp counter time unit in equal to CAN bit time                 */
#define FDCAN_TSCC_TCP_DIV2     ((uint32_t)0x00010000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 2  */
#define FDCAN_TSCC_TCP_DIV3     ((uint32_t)0x00020000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 3  */
#define FDCAN_TSCC_TCP_DIV4     ((uint32_t)0x00030000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 4  */
#define FDCAN_TSCC_TCP_DIV5     ((uint32_t)0x00040000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 5  */
#define FDCAN_TSCC_TCP_DIV6     ((uint32_t)0x00050000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 6  */
#define FDCAN_TSCC_TCP_DIV7     ((uint32_t)0x00060000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 7  */
#define FDCAN_TSCC_TCP_DIV8     ((uint32_t)0x00070000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 8  */
#define FDCAN_TSCC_TCP_DIV9     ((uint32_t)0x00080000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 9  */
#define FDCAN_TSCC_TCP_DIV10    ((uint32_t)0x00090000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 10 */
#define FDCAN_TSCC_TCP_DIV11    ((uint32_t)0x000A0000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 11 */
#define FDCAN_TSCC_TCP_DIV12    ((uint32_t)0x000B0000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 12 */
#define FDCAN_TSCC_TCP_DIV13    ((uint32_t)0x000C0000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 13 */
#define FDCAN_TSCC_TCP_DIV14    ((uint32_t)0x000D0000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 14 */
#define FDCAN_TSCC_TCP_DIV15    ((uint32_t)0x000E0000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 15 */
#define FDCAN_TSCC_TCP_DIV16    ((uint32_t)0x000F0000U) /* Timestamp counter time unit in equal to CAN bit time multiplied by 16 */

/** Bit definition for FDCAN_TSCV register **/
#define FDCAN_TSCV_TSC          ((uint32_t)0x0000FFFFU)  /* Timestamp Counter */

/** Bit definition for FDCAN_TOCC register **/
#define FDCAN_TOCC_ETOC         ((uint32_t)0x00000001U)  /* Enable Timeout Counter */

#define FDCAN_TOCC_TOS                  ((uint32_t)0x00000006U)  /* Timeout Select bits  */
#define FDCAN_TOCC_TOS_CONTINUOUS       ((uint32_t)0x00000000U)  /* Continuous operation   */
#define FDCAN_TOCC_TOS_TX_EVENT_FIFO    ((uint32_t)0x00000002U)  /* Controlled  by Tx event FIFO  */
#define FDCAN_TOCC_TOS_RX_FIFO0         ((uint32_t)0x00000004U)  /* Controlled  by Rx FIFO 0  */
#define FDCAN_TOCC_TOS_RX_FIFO1         ((uint32_t)0x00000006U)  /* Controlled  by Rx FIFO 1  */

#define FDCAN_TOCC_TOP          ((uint32_t)0xFFFF0000U)  /* Timeout Period */

/** Bit definition for FDCAN_TOCV register **/
#define FDCAN_TOCV_TOC          ((uint32_t)0x0000FFFFU)  /* Timeout Counter */

/** Bit definition for FDCAN_ECR register **/
#define FDCAN_ECR_TEC           ((uint32_t)0x000000FFU)  /* Transmit Error Counter */
#define FDCAN_ECR_REC           ((uint32_t)0x00007F00U)  /* Receive Error Counter  */
#define FDCAN_ECR_RP            ((uint32_t)0x00008000U)  /* Receive Error Passive  */
#define FDCAN_ECR_CEL           ((uint32_t)0x00FF0000U)  /* CAN Error Logging      */

/** Bit definition for FDCAN_PSR register **/
#define FDCAN_PSR_LEC           ((uint32_t)0x00000007U)  /* Last Error Code bits  */
#define FDCAN_PSR_LEC_NONE      ((uint32_t)0x00000000U)  /* No error occurred         */
#define FDCAN_PSR_LEC_STUFF     ((uint32_t)0x00000001U)  /* Stuff error               */
#define FDCAN_PSR_LEC_FORM      ((uint32_t)0x00000002U)  /* Form error                */
#define FDCAN_PSR_LEC_ACK       ((uint32_t)0x00000003U)  /* Acknowledge error         */
#define FDCAN_PSR_LEC_BIT1      ((uint32_t)0x00000004U)  /* Bit 1 (recessive) error   */
#define FDCAN_PSR_LEC_BIT0      ((uint32_t)0x00000005U)  /* Bit 0 (dominant) error    */
#define FDCAN_PSR_LEC_CRC       ((uint32_t)0x00000006U)  /* CRC check sum error       */
#define FDCAN_PSR_LEC_NO_CHANGE ((uint32_t)0x00000007U)  /* No change since last read */

#define FDCAN_PSR_ACT           ((uint32_t)0x00000018U)  /* Activity bits  */
#define FDCAN_PSR_ACT_SYNC      ((uint32_t)0x00000000U)  /* Node is synchronizing on CAN communication */
#define FDCAN_PSR_ACT_IDLE      ((uint32_t)0x00000008U)  /* Node is neither receiver nor transmitter   */
#define FDCAN_PSR_ACT_RX        ((uint32_t)0x00000010U)  /* Node is operating as receiver              */
#define FDCAN_PSR_ACT_TX        ((uint32_t)0x00000018U)  /* Node is operating as transmitter           */

#define FDCAN_PSR_EP            ((uint32_t)0x00000020U)  /* Error Passive bit */
#define FDCAN_PSR_EW            ((uint32_t)0x00000040U)  /* Warning Status bit */
#define FDCAN_PSR_BO            ((uint32_t)0x00000080U)  /* Bus_Off Status */

#define FDCAN_PSR_DLEC              ((uint32_t)0x00000700U)  /* Data Last Error Code bits  */
#define FDCAN_PSR_DLEC_NONE         ((uint32_t)0x00000000U)  /* No error occurred         */
#define FDCAN_PSR_DLEC_STUFF        ((uint32_t)0x00000100U)  /* Stuff error               */
#define FDCAN_PSR_DLEC_FORM         ((uint32_t)0x00000200U)  /* Form error                */
#define FDCAN_PSR_DLEC_ACK          ((uint32_t)0x00000300U)  /* Acknowledge error         */
#define FDCAN_PSR_DLEC_BIT1         ((uint32_t)0x00000400U)  /* Bit 1 (recessive) error   */
#define FDCAN_PSR_DLEC_BIT0         ((uint32_t)0x00000500U)  /* Bit 0 (dominant) error    */
#define FDCAN_PSR_DLEC_CRC          ((uint32_t)0x00000600U)  /* CRC check sum error       */
#define FDCAN_PSR_DLEC_NO_CHANGE    ((uint32_t)0x00000700U)  /* No change since last read */

#define FDCAN_PSR_RESI          ((uint32_t)0x00000800U)  /* ESI flag of last received FDCAN Message  */
#define FDCAN_PSR_RBRS          ((uint32_t)0x00001000U)  /* BRS flag of last received FDCAN Message  */
#define FDCAN_PSR_RFDF          ((uint32_t)0x00002000U)  /* Received FDCAN Message                   */
#define FDCAN_PSR_PXE           ((uint32_t)0x00004000U)  /* Protocol Exception Event                 */

#define FDCAN_PSR_TDCV          ((uint32_t)0x007F0000U)  /* Transmitter Delay Compensation Value bits  */

/** Bit definition for FDCAN_TDCR register **/
#define FDCAN_TDCR_TDCF         ((uint32_t)0x0000007FU)  /* Transmitter Delay Compensation Filter bits  */
#define FDCAN_TDCR_TDCF_0       ((uint32_t)0x00000001U)  /* Transmitter Delay Compensation Filter bit 0 */
#define FDCAN_TDCR_TDCF_1       ((uint32_t)0x00000002U)  /* Transmitter Delay Compensation Filter bit 1 */
#define FDCAN_TDCR_TDCF_2       ((uint32_t)0x00000004U)  /* Transmitter Delay Compensation Filter bit 2 */
#define FDCAN_TDCR_TDCF_3       ((uint32_t)0x00000008U)  /* Transmitter Delay Compensation Filter bit 3 */
#define FDCAN_TDCR_TDCF_4       ((uint32_t)0x00000010U)  /* Transmitter Delay Compensation Filter bit 4 */
#define FDCAN_TDCR_TDCF_5       ((uint32_t)0x00000020U)  /* Transmitter Delay Compensation Filter bit 5 */
#define FDCAN_TDCR_TDCF_6       ((uint32_t)0x00000040U)  /* Transmitter Delay Compensation Filter bit 6 */

#define FDCAN_TDCR_TDCO         ((uint32_t)0x00007F00U)  /* Transmitter Delay Compensation Offset bits  */
#define FDCAN_TDCR_TDCO_0       ((uint32_t)0x00000100U)  /* Transmitter Delay Compensation Offset bit 0 */
#define FDCAN_TDCR_TDCO_1       ((uint32_t)0x00000200U)  /* Transmitter Delay Compensation Offset bit 1 */
#define FDCAN_TDCR_TDCO_2       ((uint32_t)0x00000400U)  /* Transmitter Delay Compensation Offset bit 2 */
#define FDCAN_TDCR_TDCO_3       ((uint32_t)0x00000800U)  /* Transmitter Delay Compensation Offset bit 3 */
#define FDCAN_TDCR_TDCO_4       ((uint32_t)0x00001000U)  /* Transmitter Delay Compensation Offset bit 4 */
#define FDCAN_TDCR_TDCO_5       ((uint32_t)0x00002000U)  /* Transmitter Delay Compensation Offset bit 5 */
#define FDCAN_TDCR_TDCO_6       ((uint32_t)0x00004000U)  /* Transmitter Delay Compensation Offset bit 6 */

/** Bit definition for FDCAN_IR register **/
#define FDCAN_IR_RF0N           ((uint32_t)0x00000001U)  /* Rx FIFO 0 New Message                 */
#define FDCAN_IR_RF0W           ((uint32_t)0x00000002U)  /* Rx FIFO 0 Watermark Reached           */
#define FDCAN_IR_RF0F           ((uint32_t)0x00000004U)  /* Rx FIFO 0 Full                        */
#define FDCAN_IR_RF0L           ((uint32_t)0x00000008U)  /* Rx FIFO 0 Message Lost                */
#define FDCAN_IR_RF1N           ((uint32_t)0x00000010U)  /* Rx FIFO 1 New Message                 */
#define FDCAN_IR_RF1W           ((uint32_t)0x00000020U)  /* Rx FIFO 1 Watermark Reached           */
#define FDCAN_IR_RF1F           ((uint32_t)0x00000040U)  /* Rx FIFO 1 Full                        */
#define FDCAN_IR_RF1L           ((uint32_t)0x00000080U)  /* Rx FIFO 1 Message Lost                */
#define FDCAN_IR_HPM            ((uint32_t)0x00000100U)  /* High Priority Message                 */
#define FDCAN_IR_TC             ((uint32_t)0x00000200U)  /* Transmission Completed                */
#define FDCAN_IR_TCF            ((uint32_t)0x00000400U)  /* Transmission Cancellation Finished    */
#define FDCAN_IR_TFE            ((uint32_t)0x00000800U)  /* Tx FIFO Empty                         */
#define FDCAN_IR_TEFN           ((uint32_t)0x00001000U)  /* Tx Event FIFO New Entry               */
#define FDCAN_IR_TEFW           ((uint32_t)0x00002000U)  /* Tx Event FIFO Watermark Reached       */
#define FDCAN_IR_TEFF           ((uint32_t)0x00004000U)  /* Tx Event FIFO Full                    */
#define FDCAN_IR_TEFL           ((uint32_t)0x00008000U)  /* Tx Event FIFO Element Lost            */
#define FDCAN_IR_TSW            ((uint32_t)0x00010000U)  /* Timestamp Wraparound                  */
#define FDCAN_IR_MRAF           ((uint32_t)0x00020000U)  /* Message RAM Access Failure            */
#define FDCAN_IR_TOO            ((uint32_t)0x00040000U)  /* Timeout Occurred                      */
#define FDCAN_IR_DRX            ((uint32_t)0x00080000U)  /* Bit Error Uncorrected                 */
#define FDCAN_IR_BEC            ((uint32_t)0x00100000U)  /* Bit Error Corrected                   */
#define FDCAN_IR_BEU            ((uint32_t)0x00200000U)  /* Bit Error Uncorrected                 */
#define FDCAN_IR_ELO            ((uint32_t)0x00400000U)  /* Error Logging Overflow                */
#define FDCAN_IR_EP             ((uint32_t)0x00800000U)  /* Error Passive                         */
#define FDCAN_IR_EW             ((uint32_t)0x01000000U)  /* Warning Status                        */
#define FDCAN_IR_BO             ((uint32_t)0x02000000U)  /* Bus_Off Status                        */
#define FDCAN_IR_WDI            ((uint32_t)0x04000000U)  /* Watchdog Interrupt                    */
#define FDCAN_IR_PEA            ((uint32_t)0x08000000U)  /* Protocol Error in Arbitration Phase   */
#define FDCAN_IR_PED            ((uint32_t)0x10000000U)  /* Protocol Error in Data Phase          */
#define FDCAN_IR_ARA            ((uint32_t)0x20000000U)  /* Access to Reserved Address            */

/** Bit definition for FDCAN_IE register **/
#define FDCAN_IE_RF0NE          ((uint32_t)0x00000001U)  /* Rx FIFO 0 New Message interrupt enable                 */
#define FDCAN_IE_RF0WE          ((uint32_t)0x00000002U)  /* Rx FIFO 0 Watermark Reached interrupt enable           */
#define FDCAN_IE_RF0FE          ((uint32_t)0x00000004U)  /* Rx FIFO 0 Full interrupt enable                        */
#define FDCAN_IE_RF0LE          ((uint32_t)0x00000008U)  /* Rx FIFO 0 Message Lost interrupt enable                */
#define FDCAN_IE_RF1NE          ((uint32_t)0x00000010U)  /* Rx FIFO 1 New Message interrupt enable                 */
#define FDCAN_IE_RF1WE          ((uint32_t)0x00000020U)  /* Rx FIFO 1 Watermark Reached interrupt enable           */
#define FDCAN_IE_RF1FE          ((uint32_t)0x00000040U)  /* Rx FIFO 1 Full interrupt enable                        */
#define FDCAN_IE_RF1LE          ((uint32_t)0x00000080U)  /* Rx FIFO 1 Message Lost interrupt enable                */
#define FDCAN_IE_HPME           ((uint32_t)0x00000100U)  /* High Priority Message interrupt enable                 */
#define FDCAN_IE_TCE            ((uint32_t)0x00000200U)  /* Transmission Completed interrupt enable                */
#define FDCAN_IE_TCFE           ((uint32_t)0x00000400U)  /* Transmission Cancellation Finished interrupt enable    */
#define FDCAN_IE_TFEE           ((uint32_t)0x00000800U)  /* Tx FIFO Empty interrupt enable                         */
#define FDCAN_IE_TEFNE          ((uint32_t)0x00001000U)  /* Tx Event FIFO New Entry interrupt enable               */
#define FDCAN_IE_TEFWE          ((uint32_t)0x00002000U)  /* Tx Event FIFO Watermark Reached interrupt enable       */
#define FDCAN_IE_TEFFE          ((uint32_t)0x00004000U)  /* Tx Event FIFO Full interrupt enable                    */
#define FDCAN_IE_TEFLE          ((uint32_t)0x00008000U)  /* Tx Event FIFO Element Lost interrupt enable            */
#define FDCAN_IE_TSWE           ((uint32_t)0x00010000U)  /* Timestamp Wraparound interrupt enable                  */
#define FDCAN_IE_MRAFE          ((uint32_t)0x00020000U)  /* Message RAM Access Failure interrupt enable            */
#define FDCAN_IE_TOOE           ((uint32_t)0x00040000U)  /* Timeout Occurred interrupt enable                      */
#define FDCAN_IE_DRXE           ((uint32_t)0x00080000U)  /* Message stored to Dedicated Rx Buffer interrupt enable */
#define FDCAN_IE_BECE           ((uint32_t)0x00100000U)  /* Bit Error Corrected interrupt enable                   */
#define FDCAN_IE_BEUE           ((uint32_t)0x00200000U)  /* Bit Error Uncorrected interrupt enable                 */
#define FDCAN_IE_ELOE           ((uint32_t)0x00400000U)  /* Error Logging Overflow interrupt enable                */
#define FDCAN_IE_EPE            ((uint32_t)0x00800000U)  /* Error Passive interrupt enable                         */
#define FDCAN_IE_EWE            ((uint32_t)0x01000000U)  /* Warning Status interrupt enable                        */
#define FDCAN_IE_BOE            ((uint32_t)0x02000000U)  /* Bus_Off Status interrupt enable                        */
#define FDCAN_IE_WDIE           ((uint32_t)0x04000000U)  /* Watchdog Interrupt enable                              */
#define FDCAN_IE_PEAE           ((uint32_t)0x08000000U)  /* Protocol Error in Arbitration Phase interrupt enable   */
#define FDCAN_IE_PEDE           ((uint32_t)0x10000000U)  /* Protocol Error in Data Phase interrupt enable          */
#define FDCAN_IE_ARAE           ((uint32_t)0x20000000U)  /* AcEcess to Reserved Address interrupt enable           */

/** Bit definition for FDCAN_ILS register **/
#define FDCAN_ILS_RF0NL         ((uint32_t)0x00000001U)  /* Rx FIFO 0 New Message Line                 */
#define FDCAN_ILS_RF0WL         ((uint32_t)0x00000002U)  /* Rx FIFO 0 Watermark Reached Line           */
#define FDCAN_ILS_RF0FL         ((uint32_t)0x00000004U)  /* Rx FIFO 0 Full Line                        */
#define FDCAN_ILS_RF0LL         ((uint32_t)0x00000008U)  /* Rx FIFO 0 Message Lost Line                */
#define FDCAN_ILS_RF1NL         ((uint32_t)0x00000010U)  /* Rx FIFO 1 New Message Line                 */
#define FDCAN_ILS_RF1WL         ((uint32_t)0x00000020U)  /* Rx FIFO 1 Watermark Reached Line           */
#define FDCAN_ILS_RF1FL         ((uint32_t)0x00000040U)  /* Rx FIFO 1 Full Line                        */
#define FDCAN_ILS_RF1LL         ((uint32_t)0x00000080U)  /* Rx FIFO 1 Message Lost Line                */
#define FDCAN_ILS_HPML          ((uint32_t)0x00000100U)  /* High Priority Message Line                 */
#define FDCAN_ILS_TCL           ((uint32_t)0x00000200U)  /* Transmission Completed Line                */
#define FDCAN_ILS_TCFL          ((uint32_t)0x00000400U)  /* Transmission Cancellation Finished Line    */
#define FDCAN_ILS_TFEL          ((uint32_t)0x00000800U)  /* Tx FIFO Empty Line                         */
#define FDCAN_ILS_TEFNL         ((uint32_t)0x00001000U)  /* Tx Event FIFO New Entry Line               */
#define FDCAN_ILS_TEFWL         ((uint32_t)0x00002000U)  /* Tx Event FIFO Watermark Reached Line       */
#define FDCAN_ILS_TEFFL         ((uint32_t)0x00004000U)  /* Tx Event FIFO Full Line                    */
#define FDCAN_ILS_TEFLL         ((uint32_t)0x00008000U)  /* Tx Event FIFO Element Lost Line            */
#define FDCAN_ILS_TSWL          ((uint32_t)0x00010000U)  /* Timestamp Wraparound Line                  */
#define FDCAN_ILS_MRAFL         ((uint32_t)0x00020000U)  /* Message RAM Access Failure Line            */
#define FDCAN_ILS_TOOL          ((uint32_t)0x00040000U)  /* Timeout Occurred Line                      */
#define FDCAN_ILS_DRXL          ((uint32_t)0x00080000U)  /* Message stored to Dedicated Rx Buffer Line */
#define FDCAN_ILS_BECL          ((uint32_t)0x00100000U)  /* Bit Error Corrected interrupt Line         */
#define FDCAN_ILS_BEUL          ((uint32_t)0x00200000U)  /* Bit Error Uncorrected interrupt Line       */
#define FDCAN_ILS_ELOL          ((uint32_t)0x00400000U)  /* Error Logging Overflow Line                */
#define FDCAN_ILS_EPL           ((uint32_t)0x00800000U)  /* Error Passive Line                         */
#define FDCAN_ILS_EWL           ((uint32_t)0x01000000U)  /* Warning Status Line                        */
#define FDCAN_ILS_BOL           ((uint32_t)0x02000000U)  /* Bus_Off Status Line                        */
#define FDCAN_ILS_WDIL          ((uint32_t)0x04000000U)  /* Watchdog Line                              */
#define FDCAN_ILS_PEAL          ((uint32_t)0x08000000U)  /* Protocol Error in Arbitration Phase Line   */
#define FDCAN_ILS_PEDL          ((uint32_t)0x10000000U)  /* Protocol Error in Data Phase Line          */
#define FDCAN_ILS_ARAL          ((uint32_t)0x20000000U)  /* Access to Reserved Address Line            */

/** Bit definition for FDCAN_ILE register **/
#define FDCAN_ILE_EINT0         ((uint32_t)0x00000001U)  /* Enable Interrupt Line 0 */
#define FDCAN_ILE_EINT1         ((uint32_t)0x00000002U)  /* Enable Interrupt Line 1 */

/** Bit definition for FDCAN_GFC register **/
#define FDCAN_GFC_RRFE          ((uint32_t)0x00000001U)  /* Reject Extended Remote Frames */
#define FDCAN_GFC_RRFS          ((uint32_t)0x00000002U)  /* Reject Standard Remote Frames */

#define FDCAN_GFC_ANFE          ((uint32_t)0x0000000CU)  /* Accept Extended Non-matching Frames bits  */
#define FDCAN_GFC_ANFE_0        ((uint32_t)0x00000004U)  /* Accept Extended Non-matching Frames bit 0 */
#define FDCAN_GFC_ANFE_1        ((uint32_t)0x00000008U)  /* Accept Extended Non-matching Frames bit 1 */

#define FDCAN_GFC_ANFS          ((uint32_t)0x00000030U)  /* Accept Standard Non-matching Frames bits  */
#define FDCAN_GFC_ANFS_0        ((uint32_t)0x00000010U)  /* Accept Standard Non-matching Frames bit 0 */
#define FDCAN_GFC_ANFS_1        ((uint32_t)0x00000020U)  /* Accept Standard Non-matching Frames bit 1 */

/** Bit definition for FDCAN_SIDFC register **/
#define FDCAN_SIDFC_FLSSA       ((uint32_t)0x0000FFFCU)  /* Filter List Standard Start Address */
#define FDCAN_SIDFC_LSS         ((uint32_t)0x00FF0000U)  /* List Size Standard                 */

/** Bit definition for FDCAN_XIDFC register **/
#define FDCAN_XIDFC_FLESA       ((uint32_t)0x0000FFFCU)  /* Filter List Extended Start Address */
#define FDCAN_XIDFC_LSE         ((uint32_t)0x007F0000U)  /* List Size Extended                 */

/** Bit definition for FDCAN_XIDAM register **/
#define FDCAN_XIDAM_EIDM        ((uint32_t)0x1FFFFFFFU)  /* Extended ID Mask */

/** Bit definition for FDCAN_HPMS register **/
#define FDCAN_HPMS_BIDX         ((uint32_t)0x0000003FU)  /* Buffer Index bits  */

#define FDCAN_HPMS_MSI          ((uint32_t)0x000000C0U)  /* Message Storage Indicator bits  */
#define FDCAN_HPMS_MSI_NO_FIFO  ((uint32_t)0x00000000U)  /* No fifo selected */
#define FDCAN_HPMS_MSI_MSG_LOST ((uint32_t)0x00000040U)  /* Message lost */
#define FDCAN_HPMS_MSI_FIFO0    ((uint32_t)0x00000080U)  /* Message Stored in FIFO 0 */
#define FDCAN_HPMS_MSI_FIFO1    ((uint32_t)0x000000C0U)  /* Message Stored in FIFO 1 */

#define FDCAN_HPMS_FIDX         ((uint32_t)0x00007F00U)  /* Filter Index bits  */

#define FDCAN_HPMS_FLST         ((uint32_t)0x00008000U)  /* Filter List */
#define FDCAN_HPMS_FLST_STD     ((uint32_t)0x00000000U)  /* Standard Filter List */
#define FDCAN_HPMS_FLST_EXT     ((uint32_t)0x00008000U)  /* Extended Filter List */

/** Bit definition for FDCAN_NDAT1 register **/
#define FDCAN_NDAT1_ND0         ((uint32_t)0x00000001U)  /* New Data flag of Rx Buffer 0  */
#define FDCAN_NDAT1_ND1         ((uint32_t)0x00000002U)  /* New Data flag of Rx Buffer 1  */
#define FDCAN_NDAT1_ND2         ((uint32_t)0x00000004U)  /* New Data flag of Rx Buffer 2  */
#define FDCAN_NDAT1_ND3         ((uint32_t)0x00000008U)  /* New Data flag of Rx Buffer 3  */
#define FDCAN_NDAT1_ND4         ((uint32_t)0x00000010U)  /* New Data flag of Rx Buffer 4  */
#define FDCAN_NDAT1_ND5         ((uint32_t)0x00000020U)  /* New Data flag of Rx Buffer 5  */
#define FDCAN_NDAT1_ND6         ((uint32_t)0x00000040U)  /* New Data flag of Rx Buffer 6  */
#define FDCAN_NDAT1_ND7         ((uint32_t)0x00000080U)  /* New Data flag of Rx Buffer 7  */
#define FDCAN_NDAT1_ND8         ((uint32_t)0x00000100U)  /* New Data flag of Rx Buffer 8  */
#define FDCAN_NDAT1_ND9         ((uint32_t)0x00000200U)  /* New Data flag of Rx Buffer 9  */
#define FDCAN_NDAT1_ND10        ((uint32_t)0x00000400U)  /* New Data flag of Rx Buffer 10 */
#define FDCAN_NDAT1_ND11        ((uint32_t)0x00000800U)  /* New Data flag of Rx Buffer 11 */
#define FDCAN_NDAT1_ND12        ((uint32_t)0x00001000U)  /* New Data flag of Rx Buffer 12 */
#define FDCAN_NDAT1_ND13        ((uint32_t)0x00002000U)  /* New Data flag of Rx Buffer 13 */
#define FDCAN_NDAT1_ND14        ((uint32_t)0x00004000U)  /* New Data flag of Rx Buffer 14 */
#define FDCAN_NDAT1_ND15        ((uint32_t)0x00008000U)  /* New Data flag of Rx Buffer 15 */
#define FDCAN_NDAT1_ND16        ((uint32_t)0x00010000U)  /* New Data flag of Rx Buffer 16 */
#define FDCAN_NDAT1_ND17        ((uint32_t)0x00020000U)  /* New Data flag of Rx Buffer 17 */
#define FDCAN_NDAT1_ND18        ((uint32_t)0x00040000U)  /* New Data flag of Rx Buffer 18 */
#define FDCAN_NDAT1_ND19        ((uint32_t)0x00080000U)  /* New Data flag of Rx Buffer 19 */
#define FDCAN_NDAT1_ND20        ((uint32_t)0x00100000U)  /* New Data flag of Rx Buffer 20 */
#define FDCAN_NDAT1_ND21        ((uint32_t)0x00200000U)  /* New Data flag of Rx Buffer 21 */
#define FDCAN_NDAT1_ND22        ((uint32_t)0x00400000U)  /* New Data flag of Rx Buffer 22 */
#define FDCAN_NDAT1_ND23        ((uint32_t)0x00800000U)  /* New Data flag of Rx Buffer 23 */
#define FDCAN_NDAT1_ND24        ((uint32_t)0x01000000U)  /* New Data flag of Rx Buffer 24 */
#define FDCAN_NDAT1_ND25        ((uint32_t)0x02000000U)  /* New Data flag of Rx Buffer 25 */
#define FDCAN_NDAT1_ND26        ((uint32_t)0x04000000U)  /* New Data flag of Rx Buffer 26 */
#define FDCAN_NDAT1_ND27        ((uint32_t)0x08000000U)  /* New Data flag of Rx Buffer 27 */
#define FDCAN_NDAT1_ND28        ((uint32_t)0x10000000U)  /* New Data flag of Rx Buffer 28 */
#define FDCAN_NDAT1_ND29        ((uint32_t)0x20000000U)  /* New Data flag of Rx Buffer 29 */
#define FDCAN_NDAT1_ND30        ((uint32_t)0x40000000U)  /* New Data flag of Rx Buffer 30 */
#define FDCAN_NDAT1_ND31        ((uint32_t)0x80000000U)  /* New Data flag of Rx Buffer 31 */

/** Bit definition for FDCAN_NDAT2 register **/
#define FDCAN_NDAT2_ND32        ((uint32_t)0x00000001U)  /* New Data flag of Rx Buffer 32 */
#define FDCAN_NDAT2_ND33        ((uint32_t)0x00000002U)  /* New Data flag of Rx Buffer 33 */
#define FDCAN_NDAT2_ND34        ((uint32_t)0x00000004U)  /* New Data flag of Rx Buffer 34 */
#define FDCAN_NDAT2_ND35        ((uint32_t)0x00000008U)  /* New Data flag of Rx Buffer 35 */
#define FDCAN_NDAT2_ND36        ((uint32_t)0x00000010U)  /* New Data flag of Rx Buffer 36 */
#define FDCAN_NDAT2_ND37        ((uint32_t)0x00000020U)  /* New Data flag of Rx Buffer 37 */
#define FDCAN_NDAT2_ND38        ((uint32_t)0x00000040U)  /* New Data flag of Rx Buffer 38 */
#define FDCAN_NDAT2_ND39        ((uint32_t)0x00000080U)  /* New Data flag of Rx Buffer 39 */
#define FDCAN_NDAT2_ND40        ((uint32_t)0x00000100U)  /* New Data flag of Rx Buffer 40 */
#define FDCAN_NDAT2_ND41        ((uint32_t)0x00000200U)  /* New Data flag of Rx Buffer 41 */
#define FDCAN_NDAT2_ND42        ((uint32_t)0x00000400U)  /* New Data flag of Rx Buffer 42 */
#define FDCAN_NDAT2_ND43        ((uint32_t)0x00000800U)  /* New Data flag of Rx Buffer 43 */
#define FDCAN_NDAT2_ND44        ((uint32_t)0x00001000U)  /* New Data flag of Rx Buffer 44 */
#define FDCAN_NDAT2_ND45        ((uint32_t)0x00002000U)  /* New Data flag of Rx Buffer 45 */
#define FDCAN_NDAT2_ND46        ((uint32_t)0x00004000U)  /* New Data flag of Rx Buffer 46 */
#define FDCAN_NDAT2_ND47        ((uint32_t)0x00008000U)  /* New Data flag of Rx Buffer 47 */
#define FDCAN_NDAT2_ND48        ((uint32_t)0x00010000U)  /* New Data flag of Rx Buffer 48 */
#define FDCAN_NDAT2_ND49        ((uint32_t)0x00020000U)  /* New Data flag of Rx Buffer 49 */
#define FDCAN_NDAT2_ND50        ((uint32_t)0x00040000U)  /* New Data flag of Rx Buffer 50 */
#define FDCAN_NDAT2_ND51        ((uint32_t)0x00080000U)  /* New Data flag of Rx Buffer 51 */
#define FDCAN_NDAT2_ND52        ((uint32_t)0x00100000U)  /* New Data flag of Rx Buffer 52 */
#define FDCAN_NDAT2_ND53        ((uint32_t)0x00200000U)  /* New Data flag of Rx Buffer 53 */
#define FDCAN_NDAT2_ND54        ((uint32_t)0x00400000U)  /* New Data flag of Rx Buffer 54 */
#define FDCAN_NDAT2_ND55        ((uint32_t)0x00800000U)  /* New Data flag of Rx Buffer 55 */
#define FDCAN_NDAT2_ND56        ((uint32_t)0x01000000U)  /* New Data flag of Rx Buffer 56 */
#define FDCAN_NDAT2_ND57        ((uint32_t)0x02000000U)  /* New Data flag of Rx Buffer 57 */
#define FDCAN_NDAT2_ND58        ((uint32_t)0x04000000U)  /* New Data flag of Rx Buffer 58 */
#define FDCAN_NDAT2_ND59        ((uint32_t)0x08000000U)  /* New Data flag of Rx Buffer 59 */
#define FDCAN_NDAT2_ND60        ((uint32_t)0x10000000U)  /* New Data flag of Rx Buffer 60 */
#define FDCAN_NDAT2_ND61        ((uint32_t)0x20000000U)  /* New Data flag of Rx Buffer 61 */
#define FDCAN_NDAT2_ND62        ((uint32_t)0x40000000U)  /* New Data flag of Rx Buffer 62 */
#define FDCAN_NDAT2_ND63        ((uint32_t)0x80000000U)  /* New Data flag of Rx Buffer 63 */

/** Bit definition for FDCAN_RXF0C register **/
#define FDCAN_RXF0C_F0SA        ((uint32_t)0x0000FFFCU)  /* Rx FIFO 0 Start Address  */
#define FDCAN_RXF0C_F0S         ((uint32_t)0x007F0000U)  /* Rx FIFO 0 Size           */
#define FDCAN_RXF0C_F0WM        ((uint32_t)0x7F000000U)  /* Rx FIFO 0 Watermark      */
#define FDCAN_RXF0C_F0OM        ((uint32_t)0x80000000U)  /* Rx FIFO 0 Operation Mode */

/** Bit definition for FDCAN_RXF0S register **/
#define FDCAN_RXF0S_F0FL        ((uint32_t)0x0000007FU)  /* Rx FIFO 0 Fill Level bits  */
#define FDCAN_RXF0S_F0GI        ((uint32_t)0x00003F00U)  /* Rx FIFO 0 Get Index bits  */
#define FDCAN_RXF0S_F0PI        ((uint32_t)0x003F0000U)  /* Rx FIFO 0 Put Index bits  */
#define FDCAN_RXF0S_F0F         ((uint32_t)0x01000000U)  /* Rx FIFO 0 Full         */
#define FDCAN_RXF0S_RF0L        ((uint32_t)0x02000000U)  /* Rx FIFO 0 Message Lost */

/** Bit definition for FDCAN_RXF0A register **/
#define FDCAN_RXF0A_F0AI        ((uint32_t)0x0000003FU)  /* Rx FIFO 0 Acknowledge Index bits  */

/** Bit definition for FDCAN_RXBC register **/
#define FDCAN_RXBC_RBSA         ((uint32_t)0x0000FFFCU)  /* Rx Buffer Start Address */

/** Bit definition for FDCAN_RXF1C register **/
#define FDCAN_RXF1C_F1SA        ((uint32_t)0x0000FFFCU)  /* Rx FIFO 1 Start Address  */
#define FDCAN_RXF1C_F1S         ((uint32_t)0x007F0000U)  /* Rx FIFO 1 Size           */
#define FDCAN_RXF1C_F1WM        ((uint32_t)0x7F000000U)  /* Rx FIFO 1 Watermark      */
#define FDCAN_RXF1C_F1OM        ((uint32_t)0x80000000U)  /* Rx FIFO 1 Operation Mode */

/** Bit definition for FDCAN_RXF1S register **/
#define FDCAN_RXF1S_F1FL        ((uint32_t)0x0000007FU)  /* Rx FIFO 1 Fill Level bits  */
#define FDCAN_RXF1S_F1GI        ((uint32_t)0x00003F00U)  /* Rx FIFO 1 Get Index bits  */
#define FDCAN_RXF1S_F1PI        ((uint32_t)0x003F0000U)  /* Rx FIFO 1 Put Index bits  */
#define FDCAN_RXF1S_F1F         ((uint32_t)0x01000000U)  /* Rx FIFO 1 Full         */
#define FDCAN_RXF1S_RF1L        ((uint32_t)0x02000000U)  /* Rx FIFO 1 Message Lost */

#define FDCAN_RXF1S_DMS         ((uint32_t)0xC0000000U)  /* Debug message status bits  */
#define FDCAN_RXF1S_DMS_0       ((uint32_t)0x40000000U)  /* Debug message status bit 0 */
#define FDCAN_RXF1S_DMS_1       ((uint32_t)0x80000000U)  /* Debug message status bit 1 */
        
/** Bit definition for FDCAN_RXF1A register **/
#define FDCAN_RXF1A_F1AI        ((uint32_t)0x0000003FU)  /* Rx FIFO 1 Acknowledge Index bits  */

/** Bit definition for FDCAN_RXESC register **/
#define FDCAN_RXESC_F0DS        ((uint32_t)0x00000007U)  /* Rx FIFO 1 Data Field Size bits  */
#define FDCAN_RXESC_F1DS        ((uint32_t)0x00000070U)  /* Rx FIFO 0 Data Field Size bits  */
#define FDCAN_RXESC_RBDS        ((uint32_t)0x00000700U)  /* Rx Buffer Data Field Size bits  */

/** Bit definition for FDCAN_TXBC register **/
#define FDCAN_TXBC_TBSA         ((uint32_t)0x0000FFFCU)  /* Tx Buffers Start Address */
#define FDCAN_TXBC_NDTB         ((uint32_t)0x003F0000U)  /* Number of Dedicated Transmit Buffers bits  */
#define FDCAN_TXBC_TFQS         ((uint32_t)0x3F000000U)  /* Transmit FIFO/Queue Size bits  */
#define FDCAN_TXBC_TFQM         ((uint32_t)0x40000000U)  /* Tx FIFO/Queue Mode */

/** Bit definition for FDCAN_TXFQS register **/
#define FDCAN_TXFQS_TFFL        ((uint32_t)0x0000003FU)  /* Tx FIFO Free Level bits  */
#define FDCAN_TXFQS_TFGI        ((uint32_t)0x00001F00U)  /* Tx FIFO Get Index bits  */
#define FDCAN_TXFQS_TFQPI       ((uint32_t)0x001F0000U)  /* Tx FIFO/Queue Put Index bis   */
#define FDCAN_TXFQS_TFQF        ((uint32_t)0x00200000U)  /* Tx FIFO/Queue Full */

/** Bit definition for FDCAN_TXESC register **/
#define FDCAN_TXESC_TBDS        ((uint32_t)0x00000007U)  /* Tx Buffer Data Field Size  */

#define FDCAN_TXESC_TBDS_8BYTE  ((uint32_t)0x00000000U)  /* Tx Buffer Data Field Size is 8  Byte */
#define FDCAN_TXESC_TBDS_12BYTE ((uint32_t)0x00000001U)  /* Tx Buffer Data Field Size is 12 Byte */
#define FDCAN_TXESC_TBDS_16BYTE ((uint32_t)0x00000002U)  /* Tx Buffer Data Field Size is 16 Byte */
#define FDCAN_TXESC_TBDS_20BYTE ((uint32_t)0x00000003U)  /* Tx Buffer Data Field Size is 20 Byte */
#define FDCAN_TXESC_TBDS_24BYTE ((uint32_t)0x00000004U)  /* Tx Buffer Data Field Size is 24 Byte */
#define FDCAN_TXESC_TBDS_32BYTE ((uint32_t)0x00000005U)  /* Tx Buffer Data Field Size is 32 Byte */
#define FDCAN_TXESC_TBDS_48BYTE ((uint32_t)0x00000006U)  /* Tx Buffer Data Field Size is 48 Byte */
#define FDCAN_TXESC_TBDS_64BYTE ((uint32_t)0x00000007U)  /* Tx Buffer Data Field Size is 64 Byte */

/** Bit definition for FDCAN_TXBRP register **/
#define FDCAN_TXBRP_TRP0        ((uint32_t)0x00000001U)  /* Transmission Request Pending 0  */
#define FDCAN_TXBRP_TRP1        ((uint32_t)0x00000002U)  /* Transmission Request Pending 1  */
#define FDCAN_TXBRP_TRP2        ((uint32_t)0x00000004U)  /* Transmission Request Pending 2  */
#define FDCAN_TXBRP_TRP3        ((uint32_t)0x00000008U)  /* Transmission Request Pending 3  */
#define FDCAN_TXBRP_TRP4        ((uint32_t)0x00000010U)  /* Transmission Request Pending 4  */
#define FDCAN_TXBRP_TRP5        ((uint32_t)0x00000020U)  /* Transmission Request Pending 5  */
#define FDCAN_TXBRP_TRP6        ((uint32_t)0x00000040U)  /* Transmission Request Pending 6  */
#define FDCAN_TXBRP_TRP7        ((uint32_t)0x00000080U)  /* Transmission Request Pending 7  */
#define FDCAN_TXBRP_TRP8        ((uint32_t)0x00000100U)  /* Transmission Request Pending 8  */
#define FDCAN_TXBRP_TRP9        ((uint32_t)0x00000200U)  /* Transmission Request Pending 9  */
#define FDCAN_TXBRP_TRP10       ((uint32_t)0x00000400U)  /* Transmission Request Pending 10 */
#define FDCAN_TXBRP_TRP11       ((uint32_t)0x00000800U)  /* Transmission Request Pending 11 */
#define FDCAN_TXBRP_TRP12       ((uint32_t)0x00001000U)  /* Transmission Request Pending 12 */
#define FDCAN_TXBRP_TRP13       ((uint32_t)0x00002000U)  /* Transmission Request Pending 13 */
#define FDCAN_TXBRP_TRP14       ((uint32_t)0x00004000U)  /* Transmission Request Pending 14 */
#define FDCAN_TXBRP_TRP15       ((uint32_t)0x00008000U)  /* Transmission Request Pending 15 */
#define FDCAN_TXBRP_TRP16       ((uint32_t)0x00010000U)  /* Transmission Request Pending 16 */
#define FDCAN_TXBRP_TRP17       ((uint32_t)0x00020000U)  /* Transmission Request Pending 17 */
#define FDCAN_TXBRP_TRP18       ((uint32_t)0x00040000U)  /* Transmission Request Pending 18 */
#define FDCAN_TXBRP_TRP19       ((uint32_t)0x00080000U)  /* Transmission Request Pending 19 */
#define FDCAN_TXBRP_TRP20       ((uint32_t)0x00100000U)  /* Transmission Request Pending 20 */
#define FDCAN_TXBRP_TRP21       ((uint32_t)0x00200000U)  /* Transmission Request Pending 21 */
#define FDCAN_TXBRP_TRP22       ((uint32_t)0x00400000U)  /* Transmission Request Pending 22 */
#define FDCAN_TXBRP_TRP23       ((uint32_t)0x00800000U)  /* Transmission Request Pending 23 */
#define FDCAN_TXBRP_TRP24       ((uint32_t)0x01000000U)  /* Transmission Request Pending 24 */
#define FDCAN_TXBRP_TRP25       ((uint32_t)0x02000000U)  /* Transmission Request Pending 25 */
#define FDCAN_TXBRP_TRP26       ((uint32_t)0x04000000U)  /* Transmission Request Pending 26 */
#define FDCAN_TXBRP_TRP27       ((uint32_t)0x08000000U)  /* Transmission Request Pending 27 */
#define FDCAN_TXBRP_TRP28       ((uint32_t)0x10000000U)  /* Transmission Request Pending 28 */
#define FDCAN_TXBRP_TRP29       ((uint32_t)0x20000000U)  /* Transmission Request Pending 29 */
#define FDCAN_TXBRP_TRP30       ((uint32_t)0x40000000U)  /* Transmission Request Pending 30 */
#define FDCAN_TXBRP_TRP31       ((uint32_t)0x80000000U)  /* Transmission Request Pending 31 */

/** Bit definition for FDCAN_TXBAR register **/
#define FDCAN_TXBAR_AR0         ((uint32_t)0x00000001U)  /* Add Request 0  */
#define FDCAN_TXBAR_AR1         ((uint32_t)0x00000002U)  /* Add Request 1  */
#define FDCAN_TXBAR_AR2         ((uint32_t)0x00000004U)  /* Add Request 2  */
#define FDCAN_TXBAR_AR3         ((uint32_t)0x00000008U)  /* Add Request 3  */
#define FDCAN_TXBAR_AR4         ((uint32_t)0x00000010U)  /* Add Request 4  */
#define FDCAN_TXBAR_AR5         ((uint32_t)0x00000020U)  /* Add Request 5  */
#define FDCAN_TXBAR_AR6         ((uint32_t)0x00000040U)  /* Add Request 6  */
#define FDCAN_TXBAR_AR7         ((uint32_t)0x00000080U)  /* Add Request 7  */
#define FDCAN_TXBAR_AR8         ((uint32_t)0x00000100U)  /* Add Request 8  */
#define FDCAN_TXBAR_AR9         ((uint32_t)0x00000200U)  /* Add Request 9  */
#define FDCAN_TXBAR_AR10        ((uint32_t)0x00000400U)  /* Add Request 10 */
#define FDCAN_TXBAR_AR11        ((uint32_t)0x00000800U)  /* Add Request 11 */
#define FDCAN_TXBAR_AR12        ((uint32_t)0x00001000U)  /* Add Request 12 */
#define FDCAN_TXBAR_AR13        ((uint32_t)0x00002000U)  /* Add Request 13 */
#define FDCAN_TXBAR_AR14        ((uint32_t)0x00004000U)  /* Add Request 14 */
#define FDCAN_TXBAR_AR15        ((uint32_t)0x00008000U)  /* Add Request 15 */
#define FDCAN_TXBAR_AR16        ((uint32_t)0x00010000U)  /* Add Request 16 */
#define FDCAN_TXBAR_AR17        ((uint32_t)0x00020000U)  /* Add Request 17 */
#define FDCAN_TXBAR_AR18        ((uint32_t)0x00040000U)  /* Add Request 18 */
#define FDCAN_TXBAR_AR19        ((uint32_t)0x00080000U)  /* Add Request 19 */
#define FDCAN_TXBAR_AR20        ((uint32_t)0x00100000U)  /* Add Request 20 */
#define FDCAN_TXBAR_AR21        ((uint32_t)0x00200000U)  /* Add Request 21 */
#define FDCAN_TXBAR_AR22        ((uint32_t)0x00400000U)  /* Add Request 22 */
#define FDCAN_TXBAR_AR23        ((uint32_t)0x00800000U)  /* Add Request 23 */
#define FDCAN_TXBAR_AR24        ((uint32_t)0x01000000U)  /* Add Request 24 */
#define FDCAN_TXBAR_AR25        ((uint32_t)0x02000000U)  /* Add Request 25 */
#define FDCAN_TXBAR_AR26        ((uint32_t)0x04000000U)  /* Add Request 26 */
#define FDCAN_TXBAR_AR27        ((uint32_t)0x08000000U)  /* Add Request 27 */
#define FDCAN_TXBAR_AR28        ((uint32_t)0x10000000U)  /* Add Request 28 */
#define FDCAN_TXBAR_AR29        ((uint32_t)0x20000000U)  /* Add Request 29 */
#define FDCAN_TXBAR_AR30        ((uint32_t)0x40000000U)  /* Add Request 30 */
#define FDCAN_TXBAR_AR31        ((uint32_t)0x80000000U)  /* Add Request 31 */

/** Bit definition for FDCAN_TXBCR register **/
#define FDCAN_TXBCR_CR0         ((uint32_t)0x00000001U)  /* Cancellation Request 0  */
#define FDCAN_TXBCR_CR1         ((uint32_t)0x00000002U)  /* Cancellation Request 1  */
#define FDCAN_TXBCR_CR2         ((uint32_t)0x00000004U)  /* Cancellation Request 2  */
#define FDCAN_TXBCR_CR3         ((uint32_t)0x00000008U)  /* Cancellation Request 3  */
#define FDCAN_TXBCR_CR4         ((uint32_t)0x00000010U)  /* Cancellation Request 4  */
#define FDCAN_TXBCR_CR5         ((uint32_t)0x00000020U)  /* Cancellation Request 5  */
#define FDCAN_TXBCR_CR6         ((uint32_t)0x00000040U)  /* Cancellation Request 6  */
#define FDCAN_TXBCR_CR7         ((uint32_t)0x00000080U)  /* Cancellation Request 7  */
#define FDCAN_TXBCR_CR8         ((uint32_t)0x00000100U)  /* Cancellation Request 8  */
#define FDCAN_TXBCR_CR9         ((uint32_t)0x00000200U)  /* Cancellation Request 9  */
#define FDCAN_TXBCR_CR10        ((uint32_t)0x00000400U)  /* Cancellation Request 10 */
#define FDCAN_TXBCR_CR11        ((uint32_t)0x00000800U)  /* Cancellation Request 11 */
#define FDCAN_TXBCR_CR12        ((uint32_t)0x00001000U)  /* Cancellation Request 12 */
#define FDCAN_TXBCR_CR13        ((uint32_t)0x00002000U)  /* Cancellation Request 13 */
#define FDCAN_TXBCR_CR14        ((uint32_t)0x00004000U)  /* Cancellation Request 14 */
#define FDCAN_TXBCR_CR15        ((uint32_t)0x00008000U)  /* Cancellation Request 15 */
#define FDCAN_TXBCR_CR16        ((uint32_t)0x00010000U)  /* Cancellation Request 16 */
#define FDCAN_TXBCR_CR17        ((uint32_t)0x00020000U)  /* Cancellation Request 17 */
#define FDCAN_TXBCR_CR18        ((uint32_t)0x00040000U)  /* Cancellation Request 18 */
#define FDCAN_TXBCR_CR19        ((uint32_t)0x00080000U)  /* Cancellation Request 19 */
#define FDCAN_TXBCR_CR20        ((uint32_t)0x00100000U)  /* Cancellation Request 20 */
#define FDCAN_TXBCR_CR21        ((uint32_t)0x00200000U)  /* Cancellation Request 21 */
#define FDCAN_TXBCR_CR22        ((uint32_t)0x00400000U)  /* Cancellation Request 22 */
#define FDCAN_TXBCR_CR23        ((uint32_t)0x00800000U)  /* Cancellation Request 23 */
#define FDCAN_TXBCR_CR24        ((uint32_t)0x01000000U)  /* Cancellation Request 24 */
#define FDCAN_TXBCR_CR25        ((uint32_t)0x02000000U)  /* Cancellation Request 25 */
#define FDCAN_TXBCR_CR26        ((uint32_t)0x04000000U)  /* Cancellation Request 26 */
#define FDCAN_TXBCR_CR27        ((uint32_t)0x08000000U)  /* Cancellation Request 27 */
#define FDCAN_TXBCR_CR28        ((uint32_t)0x10000000U)  /* Cancellation Request 28 */
#define FDCAN_TXBCR_CR29        ((uint32_t)0x20000000U)  /* Cancellation Request 29 */
#define FDCAN_TXBCR_CR30        ((uint32_t)0x40000000U)  /* Cancellation Request 30 */
#define FDCAN_TXBCR_CR31        ((uint32_t)0x80000000U)  /* Cancellation Request 31 */

/** Bit definition for FDCAN_TXBTO register **/
#define FDCAN_TXBTO_TO0         ((uint32_t)0x00000001U)  /* Transmission Occurred 0  */
#define FDCAN_TXBTO_TO1         ((uint32_t)0x00000002U)  /* Transmission Occurred 1  */
#define FDCAN_TXBTO_TO2         ((uint32_t)0x00000004U)  /* Transmission Occurred 2  */
#define FDCAN_TXBTO_TO3         ((uint32_t)0x00000008U)  /* Transmission Occurred 3  */
#define FDCAN_TXBTO_TO4         ((uint32_t)0x00000010U)  /* Transmission Occurred 4  */
#define FDCAN_TXBTO_TO5         ((uint32_t)0x00000020U)  /* Transmission Occurred 5  */
#define FDCAN_TXBTO_TO6         ((uint32_t)0x00000040U)  /* Transmission Occurred 6  */
#define FDCAN_TXBTO_TO7         ((uint32_t)0x00000080U)  /* Transmission Occurred 7  */
#define FDCAN_TXBTO_TO8         ((uint32_t)0x00000100U)  /* Transmission Occurred 8  */
#define FDCAN_TXBTO_TO9         ((uint32_t)0x00000200U)  /* Transmission Occurred 9  */
#define FDCAN_TXBTO_TO10        ((uint32_t)0x00000400U)  /* Transmission Occurred 10 */
#define FDCAN_TXBTO_TO11        ((uint32_t)0x00000800U)  /* Transmission Occurred 11 */
#define FDCAN_TXBTO_TO12        ((uint32_t)0x00001000U)  /* Transmission Occurred 12 */
#define FDCAN_TXBTO_TO13        ((uint32_t)0x00002000U)  /* Transmission Occurred 13 */
#define FDCAN_TXBTO_TO14        ((uint32_t)0x00004000U)  /* Transmission Occurred 14 */
#define FDCAN_TXBTO_TO15        ((uint32_t)0x00008000U)  /* Transmission Occurred 15 */
#define FDCAN_TXBTO_TO16        ((uint32_t)0x00010000U)  /* Transmission Occurred 16 */
#define FDCAN_TXBTO_TO17        ((uint32_t)0x00020000U)  /* Transmission Occurred 17 */
#define FDCAN_TXBTO_TO18        ((uint32_t)0x00040000U)  /* Transmission Occurred 18 */
#define FDCAN_TXBTO_TO19        ((uint32_t)0x00080000U)  /* Transmission Occurred 19 */
#define FDCAN_TXBTO_TO20        ((uint32_t)0x00100000U)  /* Transmission Occurred 20 */
#define FDCAN_TXBTO_TO21        ((uint32_t)0x00200000U)  /* Transmission Occurred 21 */
#define FDCAN_TXBTO_TO22        ((uint32_t)0x00400000U)  /* Transmission Occurred 22 */
#define FDCAN_TXBTO_TO23        ((uint32_t)0x00800000U)  /* Transmission Occurred 23 */
#define FDCAN_TXBTO_TO24        ((uint32_t)0x01000000U)  /* Transmission Occurred 24 */
#define FDCAN_TXBTO_TO25        ((uint32_t)0x02000000U)  /* Transmission Occurred 25 */
#define FDCAN_TXBTO_TO26        ((uint32_t)0x04000000U)  /* Transmission Occurred 26 */
#define FDCAN_TXBTO_TO27        ((uint32_t)0x08000000U)  /* Transmission Occurred 27 */
#define FDCAN_TXBTO_TO28        ((uint32_t)0x10000000U)  /* Transmission Occurred 28 */
#define FDCAN_TXBTO_TO29        ((uint32_t)0x20000000U)  /* Transmission Occurred 29 */
#define FDCAN_TXBTO_TO30        ((uint32_t)0x40000000U)  /* Transmission Occurred 30 */
#define FDCAN_TXBTO_TO31        ((uint32_t)0x80000000U)  /* Transmission Occurred 31 */

/** Bit definition for FDCAN_TXBCF register **/
#define FDCAN_TXBCF_CF0         ((uint32_t)0x00000001U)  /* Cancellation Finished 0  */
#define FDCAN_TXBCF_CF1         ((uint32_t)0x00000002U)  /* Cancellation Finished 1  */
#define FDCAN_TXBCF_CF2         ((uint32_t)0x00000004U)  /* Cancellation Finished 2  */
#define FDCAN_TXBCF_CF3         ((uint32_t)0x00000008U)  /* Cancellation Finished 3  */
#define FDCAN_TXBCF_CF4         ((uint32_t)0x00000010U)  /* Cancellation Finished 4  */
#define FDCAN_TXBCF_CF5         ((uint32_t)0x00000020U)  /* Cancellation Finished 5  */
#define FDCAN_TXBCF_CF6         ((uint32_t)0x00000040U)  /* Cancellation Finished 6  */
#define FDCAN_TXBCF_CF7         ((uint32_t)0x00000080U)  /* Cancellation Finished 7  */
#define FDCAN_TXBCF_CF8         ((uint32_t)0x00000100U)  /* Cancellation Finished 8  */
#define FDCAN_TXBCF_CF9         ((uint32_t)0x00000200U)  /* Cancellation Finished 9  */
#define FDCAN_TXBCF_CF10        ((uint32_t)0x00000400U)  /* Cancellation Finished 10 */
#define FDCAN_TXBCF_CF11        ((uint32_t)0x00000800U)  /* Cancellation Finished 11 */
#define FDCAN_TXBCF_CF12        ((uint32_t)0x00001000U)  /* Cancellation Finished 12 */
#define FDCAN_TXBCF_CF13        ((uint32_t)0x00002000U)  /* Cancellation Finished 13 */
#define FDCAN_TXBCF_CF14        ((uint32_t)0x00004000U)  /* Cancellation Finished 14 */
#define FDCAN_TXBCF_CF15        ((uint32_t)0x00008000U)  /* Cancellation Finished 15 */
#define FDCAN_TXBCF_CF16        ((uint32_t)0x00010000U)  /* Cancellation Finished 16 */
#define FDCAN_TXBCF_CF17        ((uint32_t)0x00020000U)  /* Cancellation Finished 17 */
#define FDCAN_TXBCF_CF18        ((uint32_t)0x00040000U)  /* Cancellation Finished 18 */
#define FDCAN_TXBCF_CF19        ((uint32_t)0x00080000U)  /* Cancellation Finished 19 */
#define FDCAN_TXBCF_CF20        ((uint32_t)0x00100000U)  /* Cancellation Finished 20 */
#define FDCAN_TXBCF_CF21        ((uint32_t)0x00200000U)  /* Cancellation Finished 21 */
#define FDCAN_TXBCF_CF22        ((uint32_t)0x00400000U)  /* Cancellation Finished 22 */
#define FDCAN_TXBCF_CF23        ((uint32_t)0x00800000U)  /* Cancellation Finished 23 */
#define FDCAN_TXBCF_CF24        ((uint32_t)0x01000000U)  /* Cancellation Finished 24 */
#define FDCAN_TXBCF_CF25        ((uint32_t)0x02000000U)  /* Cancellation Finished 25 */
#define FDCAN_TXBCF_CF26        ((uint32_t)0x04000000U)  /* Cancellation Finished 26 */
#define FDCAN_TXBCF_CF27        ((uint32_t)0x08000000U)  /* Cancellation Finished 27 */
#define FDCAN_TXBCF_CF28        ((uint32_t)0x10000000U)  /* Cancellation Finished 28 */
#define FDCAN_TXBCF_CF29        ((uint32_t)0x20000000U)  /* Cancellation Finished 29 */
#define FDCAN_TXBCF_CF30        ((uint32_t)0x40000000U)  /* Cancellation Finished 30 */
#define FDCAN_TXBCF_CF31        ((uint32_t)0x80000000U)  /* Cancellation Finished 31 */

/** Bit definition for FDCAN_TXBTIE register **/
#define FDCAN_TXBTIE_TIE0       ((uint32_t)0x00000001U)  /* Transmission Interrupt Enable 0  */
#define FDCAN_TXBTIE_TIE1       ((uint32_t)0x00000002U)  /* Transmission Interrupt Enable 1  */
#define FDCAN_TXBTIE_TIE2       ((uint32_t)0x00000004U)  /* Transmission Interrupt Enable 2  */
#define FDCAN_TXBTIE_TIE3       ((uint32_t)0x00000008U)  /* Transmission Interrupt Enable 3  */
#define FDCAN_TXBTIE_TIE4       ((uint32_t)0x00000010U)  /* Transmission Interrupt Enable 4  */
#define FDCAN_TXBTIE_TIE5       ((uint32_t)0x00000020U)  /* Transmission Interrupt Enable 5  */
#define FDCAN_TXBTIE_TIE6       ((uint32_t)0x00000040U)  /* Transmission Interrupt Enable 6  */
#define FDCAN_TXBTIE_TIE7       ((uint32_t)0x00000080U)  /* Transmission Interrupt Enable 7  */
#define FDCAN_TXBTIE_TIE8       ((uint32_t)0x00000100U)  /* Transmission Interrupt Enable 8  */
#define FDCAN_TXBTIE_TIE9       ((uint32_t)0x00000200U)  /* Transmission Interrupt Enable 9  */
#define FDCAN_TXBTIE_TIE10      ((uint32_t)0x00000400U)  /* Transmission Interrupt Enable 10 */
#define FDCAN_TXBTIE_TIE11      ((uint32_t)0x00000800U)  /* Transmission Interrupt Enable 11 */
#define FDCAN_TXBTIE_TIE12      ((uint32_t)0x00001000U)  /* Transmission Interrupt Enable 12 */
#define FDCAN_TXBTIE_TIE13      ((uint32_t)0x00002000U)  /* Transmission Interrupt Enable 13 */
#define FDCAN_TXBTIE_TIE14      ((uint32_t)0x00004000U)  /* Transmission Interrupt Enable 14 */
#define FDCAN_TXBTIE_TIE15      ((uint32_t)0x00008000U)  /* Transmission Interrupt Enable 15 */
#define FDCAN_TXBTIE_TIE16      ((uint32_t)0x00010000U)  /* Transmission Interrupt Enable 16 */
#define FDCAN_TXBTIE_TIE17      ((uint32_t)0x00020000U)  /* Transmission Interrupt Enable 17 */
#define FDCAN_TXBTIE_TIE18      ((uint32_t)0x00040000U)  /* Transmission Interrupt Enable 18 */
#define FDCAN_TXBTIE_TIE19      ((uint32_t)0x00080000U)  /* Transmission Interrupt Enable 19 */
#define FDCAN_TXBTIE_TIE20      ((uint32_t)0x00100000U)  /* Transmission Interrupt Enable 20 */
#define FDCAN_TXBTIE_TIE21      ((uint32_t)0x00200000U)  /* Transmission Interrupt Enable 21 */
#define FDCAN_TXBTIE_TIE22      ((uint32_t)0x00400000U)  /* Transmission Interrupt Enable 22 */
#define FDCAN_TXBTIE_TIE23      ((uint32_t)0x00800000U)  /* Transmission Interrupt Enable 23 */
#define FDCAN_TXBTIE_TIE24      ((uint32_t)0x01000000U)  /* Transmission Interrupt Enable 24 */
#define FDCAN_TXBTIE_TIE25      ((uint32_t)0x02000000U)  /* Transmission Interrupt Enable 25 */
#define FDCAN_TXBTIE_TIE26      ((uint32_t)0x04000000U)  /* Transmission Interrupt Enable 26 */
#define FDCAN_TXBTIE_TIE27      ((uint32_t)0x08000000U)  /* Transmission Interrupt Enable 27 */
#define FDCAN_TXBTIE_TIE28      ((uint32_t)0x10000000U)  /* Transmission Interrupt Enable 28 */
#define FDCAN_TXBTIE_TIE29      ((uint32_t)0x20000000U)  /* Transmission Interrupt Enable 29 */
#define FDCAN_TXBTIE_TIE30      ((uint32_t)0x40000000U)  /* Transmission Interrupt Enable 30 */
#define FDCAN_TXBTIE_TIE31      ((uint32_t)0x80000000U)  /* Transmission Interrupt Enable 31 */

/** Bit definition for TXBCIE register **/
#define FDCAN_TXBCIE_CFIE0      ((uint32_t)0x00000001U)  /* Cancellation Finished Interrupt Enable 0  */
#define FDCAN_TXBCIE_CFIE1      ((uint32_t)0x00000002U)  /* Cancellation Finished Interrupt Enable 1  */
#define FDCAN_TXBCIE_CFIE2      ((uint32_t)0x00000004U)  /* Cancellation Finished Interrupt Enable 2  */
#define FDCAN_TXBCIE_CFIE3      ((uint32_t)0x00000008U)  /* Cancellation Finished Interrupt Enable 3  */
#define FDCAN_TXBCIE_CFIE4      ((uint32_t)0x00000010U)  /* Cancellation Finished Interrupt Enable 4  */
#define FDCAN_TXBCIE_CFIE5      ((uint32_t)0x00000020U)  /* Cancellation Finished Interrupt Enable 5  */
#define FDCAN_TXBCIE_CFIE6      ((uint32_t)0x00000040U)  /* Cancellation Finished Interrupt Enable 6  */
#define FDCAN_TXBCIE_CFIE7      ((uint32_t)0x00000080U)  /* Cancellation Finished Interrupt Enable 7  */
#define FDCAN_TXBCIE_CFIE8      ((uint32_t)0x00000100U)  /* Cancellation Finished Interrupt Enable 8  */
#define FDCAN_TXBCIE_CFIE9      ((uint32_t)0x00000200U)  /* Cancellation Finished Interrupt Enable 9  */
#define FDCAN_TXBCIE_CFIE10     ((uint32_t)0x00000400U)  /* Cancellation Finished Interrupt Enable 10 */
#define FDCAN_TXBCIE_CFIE11     ((uint32_t)0x00000800U)  /* Cancellation Finished Interrupt Enable 11 */
#define FDCAN_TXBCIE_CFIE12     ((uint32_t)0x00001000U)  /* Cancellation Finished Interrupt Enable 12 */
#define FDCAN_TXBCIE_CFIE13     ((uint32_t)0x00002000U)  /* Cancellation Finished Interrupt Enable 13 */
#define FDCAN_TXBCIE_CFIE14     ((uint32_t)0x00004000U)  /* Cancellation Finished Interrupt Enable 14 */
#define FDCAN_TXBCIE_CFIE15     ((uint32_t)0x00008000U)  /* Cancellation Finished Interrupt Enable 15 */
#define FDCAN_TXBCIE_CFIE16     ((uint32_t)0x00010000U)  /* Cancellation Finished Interrupt Enable 16 */
#define FDCAN_TXBCIE_CFIE17     ((uint32_t)0x00020000U)  /* Cancellation Finished Interrupt Enable 17 */
#define FDCAN_TXBCIE_CFIE18     ((uint32_t)0x00040000U)  /* Cancellation Finished Interrupt Enable 18 */
#define FDCAN_TXBCIE_CFIE19     ((uint32_t)0x00080000U)  /* Cancellation Finished Interrupt Enable 19 */
#define FDCAN_TXBCIE_CFIE20     ((uint32_t)0x00100000U)  /* Cancellation Finished Interrupt Enable 20 */
#define FDCAN_TXBCIE_CFIE21     ((uint32_t)0x00200000U)  /* Cancellation Finished Interrupt Enable 21 */
#define FDCAN_TXBCIE_CFIE22     ((uint32_t)0x00400000U)  /* Cancellation Finished Interrupt Enable 22 */
#define FDCAN_TXBCIE_CFIE23     ((uint32_t)0x00800000U)  /* Cancellation Finished Interrupt Enable 23 */
#define FDCAN_TXBCIE_CFIE24     ((uint32_t)0x01000000U)  /* Cancellation Finished Interrupt Enable 24 */
#define FDCAN_TXBCIE_CFIE25     ((uint32_t)0x02000000U)  /* Cancellation Finished Interrupt Enable 25 */
#define FDCAN_TXBCIE_CFIE26     ((uint32_t)0x04000000U)  /* Cancellation Finished Interrupt Enable 26 */
#define FDCAN_TXBCIE_CFIE27     ((uint32_t)0x08000000U)  /* Cancellation Finished Interrupt Enable 27 */
#define FDCAN_TXBCIE_CFIE28     ((uint32_t)0x10000000U)  /* Cancellation Finished Interrupt Enable 28 */
#define FDCAN_TXBCIE_CFIE29     ((uint32_t)0x20000000U)  /* Cancellation Finished Interrupt Enable 29 */
#define FDCAN_TXBCIE_CFIE30     ((uint32_t)0x40000000U)  /* Cancellation Finished Interrupt Enable 30 */
#define FDCAN_TXBCIE_CFIE31     ((uint32_t)0x80000000U)  /* Cancellation Finished Interrupt Enable 31 */

/** Bit definition for FDCAN_TXEFC register **/
#define FDCAN_TXEFC_EFSA        ((uint32_t)0x0000FFFCU)  /* Event FIFO Start Address */
#define FDCAN_TXEFC_EFS         ((uint32_t)0x003F0000U)  /* Event FIFO Size bits  */
#define FDCAN_TXEFC_EFWM        ((uint32_t)0x3F000000U)  /* Event FIFO Watermark bits  */

/** Bit definition for FDCAN_TXEFS register **/
#define FDCAN_TXEFS_EFFL        ((uint32_t)0x0000003FU)  /* Event FIFO Fill Level bits  */
#define FDCAN_TXEFS_EFGI        ((uint32_t)0x00001F00U)  /* Event FIFO Get Index bits  */
#define FDCAN_TXEFS_EFPI        ((uint32_t)0x001F0000U)  /* Event FIFO Put Index bits  */
#define FDCAN_TXEFS_EFF         ((uint32_t)0x01000000U)  /* Event FIFO Full            */
#define FDCAN_TXEFS_TEFL        ((uint32_t)0x02000000U)  /* Tx Event FIFO Element Lost */

/** Bit definition for FDCAN_TXEFA register **/
#define FDCAN_TXEFA_EFAI        ((uint32_t)0x0000001FU)  /* Event FIFO Acknowledge Index bits  */

/** Bit definition for FDCAN_TTTMC register **/
#define FDCAN_TTTMC_TME          ((uint32_t)0x007F0000U)         /* Trigger memory elements bits */
#define FDCAN_TTTMC_TME_0        ((uint32_t)0x00010000U)         /* Trigger memory elements bits 0 */
#define FDCAN_TTTMC_TME_1        ((uint32_t)0x00020000U)         /* Trigger memory elements bits 1 */
#define FDCAN_TTTMC_TME_2        ((uint32_t)0x00040000U)         /* Trigger memory elements bits 2 */
#define FDCAN_TTTMC_TME_3        ((uint32_t)0x00080000U)         /* Trigger memory elements bits 3 */
#define FDCAN_TTTMC_TME_4        ((uint32_t)0x00100000U)         /* Trigger memory elements bits 4 */
#define FDCAN_TTTMC_TME_5        ((uint32_t)0x00200000U)         /* Trigger memory elements bits 5 */
#define FDCAN_TTTMC_TME_6        ((uint32_t)0x00400000U)         /* Trigger memory elements bits 6 */

#define FDCAN_TTTMC_TMSA         ((uint32_t)0x0000FFFCU)         /* Trigger memory start address bits */

/** Bit definition for FDCAN_TTRMC register  **/
#define FDCAN_TTRMC_RMPS         ((uint32_t)0x80000000U)         /* Reference message Payload select bit */
#define FDCAN_TTRMC_XTD          ((uint32_t)0x40000000U)         /* Extended identifier bit */

#define FDCAN_TTRMC_RID          ((uint32_t)0x1FFFFFFFU)         /* Reference identifier Bits  */
#define FDCAN_TTRMC_RID_0        ((uint32_t)0x00000001U)         /* Reference identifier Bit0  */
#define FDCAN_TTRMC_RID_1        ((uint32_t)0x00000002U)         /* Reference identifier Bit1  */
#define FDCAN_TTRMC_RID_2        ((uint32_t)0x00000004U)         /* Reference identifier Bit2  */
#define FDCAN_TTRMC_RID_3        ((uint32_t)0x00000008U)         /* Reference identifier Bit3  */
#define FDCAN_TTRMC_RID_4        ((uint32_t)0x00000010U)         /* Reference identifier Bit4  */
#define FDCAN_TTRMC_RID_5        ((uint32_t)0x00000020U)         /* Reference identifier Bit5  */
#define FDCAN_TTRMC_RID_6        ((uint32_t)0x00000040U)         /* Reference identifier Bit6  */
#define FDCAN_TTRMC_RID_7        ((uint32_t)0x00000080U)         /* Reference identifier Bit7  */
#define FDCAN_TTRMC_RID_8        ((uint32_t)0x00000100U)         /* Reference identifier Bit8  */
#define FDCAN_TTRMC_RID_9        ((uint32_t)0x00000200U)         /* Reference identifier Bit9  */
#define FDCAN_TTRMC_RID_10       ((uint32_t)0x00000400U)         /* Reference identifier Bit10 */
#define FDCAN_TTRMC_RID_11       ((uint32_t)0x00000800U)         /* Reference identifier Bit11 */
#define FDCAN_TTRMC_RID_12       ((uint32_t)0x00001000U)         /* Reference identifier Bit12 */
#define FDCAN_TTRMC_RID_13       ((uint32_t)0x00002000U)         /* Reference identifier Bit13 */
#define FDCAN_TTRMC_RID_14       ((uint32_t)0x00004000U)         /* Reference identifier Bit14 */
#define FDCAN_TTRMC_RID_15       ((uint32_t)0x00008000U)         /* Reference identifier Bit15 */
#define FDCAN_TTRMC_RID_16       ((uint32_t)0x00010000U)         /* Reference identifier Bit16 */
#define FDCAN_TTRMC_RID_17       ((uint32_t)0x00020000U)         /* Reference identifier Bit17 */
#define FDCAN_TTRMC_RID_18       ((uint32_t)0x00040000U)         /* Reference identifier Bit18 */
#define FDCAN_TTRMC_RID_19       ((uint32_t)0x00080000U)         /* Reference identifier Bit19 */
#define FDCAN_TTRMC_RID_20       ((uint32_t)0x00100000U)         /* Reference identifier Bit20 */
#define FDCAN_TTRMC_RID_21       ((uint32_t)0x00200000U)         /* Reference identifier Bit21 */
#define FDCAN_TTRMC_RID_22       ((uint32_t)0x00400000U)         /* Reference identifier Bit22 */
#define FDCAN_TTRMC_RID_23       ((uint32_t)0x00800000U)         /* Reference identifier Bit23 */
#define FDCAN_TTRMC_RID_24       ((uint32_t)0x01000000U)         /* Reference identifier Bit24 */
#define FDCAN_TTRMC_RID_25       ((uint32_t)0x02000000U)         /* Reference identifier Bit25 */
#define FDCAN_TTRMC_RID_26       ((uint32_t)0x04000000U)         /* Reference identifier Bit26 */
#define FDCAN_TTRMC_RID_27       ((uint32_t)0x08000000U)         /* Reference identifier Bit27 */
#define FDCAN_TTRMC_RID_28       ((uint32_t)0x10000000U)         /* Reference identifier Bit28 */

/** Bit definition for FDCAN_TTOCF register **/
#define FDCAN_TTOCF_EVTP         ((uint32_t)0x04000000U)         /* Event trigger polarity bit   */
#define FDCAN_TTOCF_ECC          ((uint32_t)0x02000000U)         /* Enable clock calibration bit */
#define FDCAN_TTOCF_EGTF         ((uint32_t)0x01000000U)         /* Enable global time Filtering bit */

#define FDCAN_TTOCF_AWL          ((uint32_t)0x00FF0000U)         /* Application watchdog limit bits  */
#define FDCAN_TTOCF_AWL_0        ((uint32_t)0x00010000U)         /* Application watchdog limit bit 0 */
#define FDCAN_TTOCF_AWL_1        ((uint32_t)0x00020000U)         /* Application watchdog limit bit 1 */
#define FDCAN_TTOCF_AWL_2        ((uint32_t)0x00040000U)         /* Application watchdog limit bit 2 */
#define FDCAN_TTOCF_AWL_3        ((uint32_t)0x00080000U)         /* Application watchdog limit bit 3 */
#define FDCAN_TTOCF_AWL_4        ((uint32_t)0x00100000U)         /* Application watchdog limit bit 4 */
#define FDCAN_TTOCF_AWL_5        ((uint32_t)0x00200000U)         /* Application watchdog limit bit 5 */
#define FDCAN_TTOCF_AWL_6        ((uint32_t)0x00400000U)         /* Application watchdog limit bit 6 */
#define FDCAN_TTOCF_AWL_7        ((uint32_t)0x00800000U)         /* Application watchdog limit bit 7 */

#define FDCAN_TTOCF_EECS         ((uint32_t)0x00008000U)         /* Enable external clock synchronization bit */

#define FDCAN_TTOCF_IRTO         ((uint32_t)0x00007F00U)         /* Initial reference trigger offset bits  */
#define FDCAN_TTOCF_IRTO_0       ((uint32_t)0x00000100U)         /* Initial reference trigger offset bit 0 */
#define FDCAN_TTOCF_IRTO_1       ((uint32_t)0x00000200U)         /* Initial reference trigger offset bit 1 */
#define FDCAN_TTOCF_IRTO_2       ((uint32_t)0x00000400U)         /* Initial reference trigger offset bit 2 */
#define FDCAN_TTOCF_IRTO_3       ((uint32_t)0x00000800U)         /* Initial reference trigger offset bit 3 */
#define FDCAN_TTOCF_IRTO_4       ((uint32_t)0x00001000U)         /* Initial reference trigger offset bit 4 */
#define FDCAN_TTOCF_IRTO_5       ((uint32_t)0x00002000U)         /* Initial reference trigger offset bit 5 */
#define FDCAN_TTOCF_IRTO_6       ((uint32_t)0x00004000U)         /* Initial reference trigger offset bit 6 */

#define FDCAN_TTOCF_LDSDL        ((uint32_t)0x000000E0U)         /* LD of synchronization deviation limit bits */
#define FDCAN_TTOCF_LDSDL_0      ((uint32_t)0x00000020U)         /* LD of synchronization deviation limit bit0 */
#define FDCAN_TTOCF_LDSDL_1      ((uint32_t)0x00000040U)         /* LD of synchronization deviation limit bit1 */
#define FDCAN_TTOCF_LDSDL_2      ((uint32_t)0x00000080U)         /* LD of synchronization deviation limit bit2 */

#define FDCAN_TTOCF_TM           ((uint32_t)0x00000010U)         /* Time master bit */
#define FDCAN_TTOCF_GEN          ((uint32_t)0x00000008U)         /* Gap enable bit */

#define FDCAN_TTOCF_OM           ((uint32_t)0x00000003U)         /* Operation mode bits */
#define FDCAN_TTOCF_OM_EVENT     ((uint32_t)0x00000000U)         /* Event driven CAN communication, default */
#define FDCAN_TTOCF_OM_LEVEL1    ((uint32_t)0x00000001U)         /* TTCAN Level 1 */
#define FDCAN_TTOCF_OM_LEVEL2    ((uint32_t)0x00000002U)         /* TTCAN Level 2 */
#define FDCAN_TTOCF_OM_LEVEL0    ((uint32_t)0x00000003U)         /* TTCAN Level 0 */

/** Bit definition for FDCAN_TTMLM register **/
#define FDCAN_TTMLM_ENTT         ((uint32_t)0x0FFF0000U)         /* Expected Number of Tx triggers bits   */
#define FDCAN_TTMLM_ENTT_0       ((uint32_t)0x00010000U)         /* Expected Number of Tx triggers bit 0  */
#define FDCAN_TTMLM_ENTT_1       ((uint32_t)0x00020000U)         /* Expected Number of Tx triggers bit 1  */
#define FDCAN_TTMLM_ENTT_2       ((uint32_t)0x00040000U)         /* Expected Number of Tx triggers bit 2  */
#define FDCAN_TTMLM_ENTT_3       ((uint32_t)0x00080000U)         /* Expected Number of Tx triggers bit 3  */
#define FDCAN_TTMLM_ENTT_4       ((uint32_t)0x00100000U)         /* Expected Number of Tx triggers bit 4  */
#define FDCAN_TTMLM_ENTT_5       ((uint32_t)0x00200000U)         /* Expected Number of Tx triggers bit 5  */
#define FDCAN_TTMLM_ENTT_6       ((uint32_t)0x00400000U)         /* Expected Number of Tx triggers bit 6  */
#define FDCAN_TTMLM_ENTT_7       ((uint32_t)0x00800000U)         /* Expected Number of Tx triggers bit 7  */
#define FDCAN_TTMLM_ENTT_8       ((uint32_t)0x01000000U)         /* Expected Number of Tx triggers bit 8  */
#define FDCAN_TTMLM_ENTT_9       ((uint32_t)0x02000000U)         /* Expected Number of Tx triggers bit 9  */
#define FDCAN_TTMLM_ENTT_10      ((uint32_t)0x04000000U)         /* Expected Number of Tx triggers bit 10 */
#define FDCAN_TTMLM_ENTT_11      ((uint32_t)0x08000000U)         /* Expected Number of Tx triggers bit 11 */

#define FDCAN_TTMLM_TXEW         ((uint32_t)0x00000F00U)         /* Tx enable Window bits  */
#define FDCAN_TTMLM_TXEW_0       ((uint32_t)0x00000100U)         /* Tx enable Window bit 0 */
#define FDCAN_TTMLM_TXEW_1       ((uint32_t)0x00000200U)         /* Tx enable Window bit 1 */
#define FDCAN_TTMLM_TXEW_2       ((uint32_t)0x00000400U)         /* Tx enable Window bit 2 */
#define FDCAN_TTMLM_TXEW_3       ((uint32_t)0x00000800U)         /* Tx enable Window bit 3 */

#define FDCAN_TTMLM_CSS          ((uint32_t)0x000000C0U)         /* Cycle start synchronization bits                           */
#define FDCAN_TTMLM_CSS_NONE     ((uint32_t)0x00000000U)         /* No synchronization pulse                                   */
#define FDCAN_TTMLM_CSS_BASIC    ((uint32_t)0x00000040U)         /* Synchronization pulse at the beginning of the basic cycle  */
#define FDCAN_TTMLM_CSS_MATRIX   ((uint32_t)0x00000080U)         /* Synchronization pulse at the beginning of the matrix cycle */

#define FDCAN_TTMLM_CCM          ((uint32_t)0x0000003FU)         /* Cycle count Max bits            */
#define FDCAN_TTMLM_CCM_NUM1     ((uint32_t)0x00000000U)         /* 1  basic cycle per matrix cycle */
#define FDCAN_TTMLM_CCM_NUM2     ((uint32_t)0x00000001U)         /* 2  basic cycle per matrix cycle */
#define FDCAN_TTMLM_CCM_NUM4     ((uint32_t)0x00000003U)         /* 4  basic cycle per matrix cycle */
#define FDCAN_TTMLM_CCM_NUM8     ((uint32_t)0x00000007U)         /* 8  basic cycle per matrix cycle */
#define FDCAN_TTMLM_CCM_NUM16    ((uint32_t)0x0000000FU)         /* 16 basic cycle per matrix cycle */
#define FDCAN_TTMLM_CCM_NUM32    ((uint32_t)0x0000001FU)         /* 32 basic cycle per matrix cycle */
#define FDCAN_TTMLM_CCM_NUM64    ((uint32_t)0x0000003FU)         /* 64 basic cycle per matrix cycle */

/** Bit definition for FDCAN_TURCF register **/
#define FDCAN_TURCF_ELT          ((uint32_t)0x80000000U)         /* Enable local time bit */

#define FDCAN_TURCF_DC           ((uint32_t)0x3FFF0000U)         /* Denominator configuration bits  */
#define FDCAN_TURCF_DC_0         ((uint32_t)0x00010000U)         /* Denominator configuration bit0  */
#define FDCAN_TURCF_DC_1         ((uint32_t)0x00020000U)         /* Denominator configuration bit1  */
#define FDCAN_TURCF_DC_2         ((uint32_t)0x00040000U)         /* Denominator configuration bit2  */
#define FDCAN_TURCF_DC_3         ((uint32_t)0x00080000U)         /* Denominator configuration bit3  */
#define FDCAN_TURCF_DC_4         ((uint32_t)0x00100000U)         /* Denominator configuration bit4  */
#define FDCAN_TURCF_DC_5         ((uint32_t)0x00200000U)         /* Denominator configuration bit5  */
#define FDCAN_TURCF_DC_6         ((uint32_t)0x00400000U)         /* Denominator configuration bit6  */
#define FDCAN_TURCF_DC_7         ((uint32_t)0x00800000U)         /* Denominator configuration bit7  */
#define FDCAN_TURCF_DC_8         ((uint32_t)0x01000000U)         /* Denominator configuration bit8  */
#define FDCAN_TURCF_DC_9         ((uint32_t)0x02000000U)         /* Denominator configuration bit9  */
#define FDCAN_TURCF_DC_10        ((uint32_t)0x04000000U)         /* Denominator configuration bit10 */
#define FDCAN_TURCF_DC_11        ((uint32_t)0x08000000U)         /* Denominator configuration bit11 */
#define FDCAN_TURCF_DC_12        ((uint32_t)0x10000000U)         /* Denominator configuration bit12 */
#define FDCAN_TURCF_DC_13        ((uint32_t)0x20000000U)         /* Denominator configuration bit13 */

#define FDCAN_TURCF_NCL          ((uint32_t)0x0000FFFFU)         /* Numerator configuration low bits  */
#define FDCAN_TURCF_NCL_0        ((uint32_t)0x00000001U)         /* Numerator configuration low bit0  */
#define FDCAN_TURCF_NCL_1        ((uint32_t)0x00000002U)         /* Numerator configuration low bit1  */
#define FDCAN_TURCF_NCL_2        ((uint32_t)0x00000004U)         /* Numerator configuration low bit2  */
#define FDCAN_TURCF_NCL_3        ((uint32_t)0x00000008U)         /* Numerator configuration low bit3  */
#define FDCAN_TURCF_NCL_4        ((uint32_t)0x00000010U)         /* Numerator configuration low bit4  */
#define FDCAN_TURCF_NCL_5        ((uint32_t)0x00000020U)         /* Numerator configuration low bit5  */
#define FDCAN_TURCF_NCL_6        ((uint32_t)0x00000040U)         /* Numerator configuration low bit6  */
#define FDCAN_TURCF_NCL_7        ((uint32_t)0x00000080U)         /* Numerator configuration low bit7  */
#define FDCAN_TURCF_NCL_8        ((uint32_t)0x00000100U)         /* Numerator configuration low bit8  */
#define FDCAN_TURCF_NCL_9        ((uint32_t)0x00000200U)         /* Numerator configuration low bit9  */
#define FDCAN_TURCF_NCL_10       ((uint32_t)0x00000400U)         /* Numerator configuration low bit10 */
#define FDCAN_TURCF_NCL_11       ((uint32_t)0x00000800U)         /* Numerator configuration low bit11 */
#define FDCAN_TURCF_NCL_12       ((uint32_t)0x00001000U)         /* Numerator configuration low bit12 */
#define FDCAN_TURCF_NCL_13       ((uint32_t)0x00002000U)         /* Numerator configuration low bit13 */
#define FDCAN_TURCF_NCL_14       ((uint32_t)0x00004000U)         /* Numerator configuration low bit14 */
#define FDCAN_TURCF_NCL_15       ((uint32_t)0x00008000U)         /* Numerator configuration low bit15 */

/** Bit definition for FDCAN_TTOCN register **/
#define FDCAN_TTOCN_LCKC         ((uint32_t)0x00008000U)         /* TT operation control register Locked bit     */
#define FDCAN_TTOCN_ESCN         ((uint32_t)0x00002000U)         /* External synchronization control bit         */
#define FDCAN_TTOCN_NIG          ((uint32_t)0x00001000U)         /* Next is Gap bit                              */
#define FDCAN_TTOCN_TMG          ((uint32_t)0x00000800U)         /* Time mark Gap bit                            */
#define FDCAN_TTOCN_FGP          ((uint32_t)0x00000400U)         /* Finish Gap bit                               */
#define FDCAN_TTOCN_GCS          ((uint32_t)0x00000200U)         /* Gap control select bit                       */
#define FDCAN_TTOCN_TTIE         ((uint32_t)0x00000100U)         /* Trigger time mark interrupt pulse enable bit */

#define FDCAN_TTOCN_TMC          ((uint32_t)0x000000C0U)         /* Register time mark Compare bits */
#define FDCAN_TTOCN_TMC_NONE     ((uint32_t)0x00000000U)         /* Register time stamp interrupt not generated                               */
#define FDCAN_TTOCN_TMC_BASIC    ((uint32_t)0x00000040U)         /* If time stamp = cycle time, a register time stamp interrupt is generated  */
#define FDCAN_TTOCN_TMC_LOCAL    ((uint32_t)0x00000080U)         /* If time stamp = local time, a register time stamp interrupt is generated  */
#define FDCAN_TTOCN_TMC_GLOBAL   ((uint32_t)0x000000C0U)         /* If time stamp = global time, a register time stamp interrupt is generated */

#define FDCAN_TTOCN_RTIE         ((uint32_t)0x00000020U)         /* Register time mark interrupt pulse enable */

#define FDCAN_TTOCN_SWS          ((uint32_t)0x00000018U)         /* Stop watch source bits */
#define FDCAN_TTOCN_SWS_STOP     ((uint32_t)0x00000000U)         /* Stop Monitor Disable                                             */
#define FDCAN_TTOCN_SWS_CYCLE    ((uint32_t)0x00000008U)         /* The actual value of the cycle time is copied to FDCAN_TTCPT.SWV  */
#define FDCAN_TTOCN_SWS_LOCAL    ((uint32_t)0x00000010U)         /* The actual value of the local time is copied to FDCAN_TTCPT.SWV  */
#define FDCAN_TTOCN_SWS_GLOBAL   ((uint32_t)0x00000018U)         /* The actual value of the global time is copied to FDCAN_TTCPT.SWV */

#define FDCAN_TTOCN_SWP          ((uint32_t)0x00000004U)         /* Stop watch polarity bit */
#define FDCAN_TTOCN_ECS          ((uint32_t)0x00000002U)         /* External clock synchronization bit */
#define FDCAN_TTOCN_SGT          ((uint32_t)0x00000001U)         /* Set global time bit */

/** Bit definition for FDCAN_TTGTP register **/
#define FDCAN_TTGTP_CTP          ((uint32_t)0xFFFF0000U)         /* Cycle time target phase bits  */
#define FDCAN_TTGTP_CTP_0        ((uint32_t)0x00010000U)         /* Cycle time target phase bit0  */
#define FDCAN_TTGTP_CTP_1        ((uint32_t)0x00020000U)         /* Cycle time target phase bit1  */
#define FDCAN_TTGTP_CTP_2        ((uint32_t)0x00040000U)         /* Cycle time target phase bit2  */
#define FDCAN_TTGTP_CTP_3        ((uint32_t)0x00080000U)         /* Cycle time target phase bit3  */
#define FDCAN_TTGTP_CTP_4        ((uint32_t)0x00100000U)         /* Cycle time target phase bit4  */
#define FDCAN_TTGTP_CTP_5        ((uint32_t)0x00200000U)         /* Cycle time target phase bit5  */
#define FDCAN_TTGTP_CTP_6        ((uint32_t)0x00400000U)         /* Cycle time target phase bit6  */
#define FDCAN_TTGTP_CTP_7        ((uint32_t)0x00800000U)         /* Cycle time target phase bit7  */
#define FDCAN_TTGTP_CTP_8        ((uint32_t)0x01000000U)         /* Cycle time target phase bit8  */
#define FDCAN_TTGTP_CTP_9        ((uint32_t)0x02000000U)         /* Cycle time target phase bit9  */
#define FDCAN_TTGTP_CTP_10       ((uint32_t)0x04000000U)         /* Cycle time target phase bit10 */
#define FDCAN_TTGTP_CTP_11       ((uint32_t)0x08000000U)         /* Cycle time target phase bit11 */
#define FDCAN_TTGTP_CTP_12       ((uint32_t)0x10000000U)         /* Cycle time target phase bit12 */
#define FDCAN_TTGTP_CTP_13       ((uint32_t)0x20000000U)         /* Cycle time target phase bit13 */
#define FDCAN_TTGTP_CTP_14       ((uint32_t)0x40000000U)         /* Cycle time target phase bit14 */
#define FDCAN_TTGTP_CTP_15       ((uint32_t)0x80000000U)         /* Cycle time target phase bit15 */

#define FDCAN_TTGTP_TP           ((uint32_t)0x0000FFFFU)         /* Time Preset bits  */
#define FDCAN_TTGTP_TP_0         ((uint32_t)0x00000001U)         /* Time Preset bit0  */
#define FDCAN_TTGTP_TP_1         ((uint32_t)0x00000002U)         /* Time Preset bit1  */
#define FDCAN_TTGTP_TP_2         ((uint32_t)0x00000004U)         /* Time Preset bit2  */
#define FDCAN_TTGTP_TP_3         ((uint32_t)0x00000008U)         /* Time Preset bit3  */
#define FDCAN_TTGTP_TP_4         ((uint32_t)0x00000010U)         /* Time Preset bit4  */
#define FDCAN_TTGTP_TP_5         ((uint32_t)0x00000020U)         /* Time Preset bit5  */
#define FDCAN_TTGTP_TP_6         ((uint32_t)0x00000040U)         /* Time Preset bit6  */
#define FDCAN_TTGTP_TP_7         ((uint32_t)0x00000080U)         /* Time Preset bit7  */
#define FDCAN_TTGTP_TP_8         ((uint32_t)0x00000100U)         /* Time Preset bit8  */
#define FDCAN_TTGTP_TP_9         ((uint32_t)0x00000200U)         /* Time Preset bit9  */
#define FDCAN_TTGTP_TP_10        ((uint32_t)0x00000400U)         /* Time Preset bit10 */
#define FDCAN_TTGTP_TP_11        ((uint32_t)0x00000800U)         /* Time Preset bit11 */
#define FDCAN_TTGTP_TP_12        ((uint32_t)0x00001000U)         /* Time Preset bit12 */
#define FDCAN_TTGTP_TP_13        ((uint32_t)0x00002000U)         /* Time Preset bit13 */
#define FDCAN_TTGTP_TP_14        ((uint32_t)0x00004000U)         /* Time Preset bit14 */
#define FDCAN_TTGTP_TP_15        ((uint32_t)0x00008000U)         /* Time Preset bit15 */

/** Bit definition for FDCAN_TTTMK register **/
#define FDCAN_TTTMK_LCKM         ((uint32_t)0x80000000U)         /* TT time mark register Locked */

#define FDCAN_TTTMK_TICC         ((uint32_t)0x007F0000U)         /* Time mark cycle code bits  */
#define FDCAN_TTTMK_TICC_0       ((uint32_t)0x00010000U)         /* Time mark cycle code bit 0 */
#define FDCAN_TTTMK_TICC_1       ((uint32_t)0x00020000U)         /* Time mark cycle code bit 1 */
#define FDCAN_TTTMK_TICC_2       ((uint32_t)0x00040000U)         /* Time mark cycle code bit 2 */
#define FDCAN_TTTMK_TICC_3       ((uint32_t)0x00080000U)         /* Time mark cycle code bit 3 */
#define FDCAN_TTTMK_TICC_4       ((uint32_t)0x00100000U)         /* Time mark cycle code bit 4 */
#define FDCAN_TTTMK_TICC_5       ((uint32_t)0x00200000U)         /* Time mark cycle code bit 5 */
#define FDCAN_TTTMK_TICC_6       ((uint32_t)0x00400000U)         /* Time mark cycle code bit 6 */

#define FDCAN_TTTMK_TM           ((uint32_t)0x0000FFFFU)         /* Time mark bits  */
#define FDCAN_TTTMK_TM_0         ((uint32_t)0x00000001U)         /* Time mark bit0  */
#define FDCAN_TTTMK_TM_1         ((uint32_t)0x00000002U)         /* Time mark bit1  */
#define FDCAN_TTTMK_TM_2         ((uint32_t)0x00000004U)         /* Time mark bit2  */
#define FDCAN_TTTMK_TM_3         ((uint32_t)0x00000008U)         /* Time mark bit3  */
#define FDCAN_TTTMK_TM_4         ((uint32_t)0x00000010U)         /* Time mark bit4  */
#define FDCAN_TTTMK_TM_5         ((uint32_t)0x00000020U)         /* Time mark bit5  */
#define FDCAN_TTTMK_TM_6         ((uint32_t)0x00000040U)         /* Time mark bit6  */
#define FDCAN_TTTMK_TM_7         ((uint32_t)0x00000080U)         /* Time mark bit7  */
#define FDCAN_TTTMK_TM_8         ((uint32_t)0x00000100U)         /* Time mark bit8  */
#define FDCAN_TTTMK_TM_9         ((uint32_t)0x00000200U)         /* Time mark bit9  */
#define FDCAN_TTTMK_TM_10        ((uint32_t)0x00000400U)         /* Time mark bit10 */
#define FDCAN_TTTMK_TM_11        ((uint32_t)0x00000800U)         /* Time mark bit11 */
#define FDCAN_TTTMK_TM_12        ((uint32_t)0x00001000U)         /* Time mark bit12 */
#define FDCAN_TTTMK_TM_13        ((uint32_t)0x00002000U)         /* Time mark bit13 */
#define FDCAN_TTTMK_TM_14        ((uint32_t)0x00004000U)         /* Time mark bit14 */
#define FDCAN_TTTMK_TM_15        ((uint32_t)0x00008000U)         /* Time mark bit15 */

/** Bit definition for FDCAN_TTIR register **/
#define FDCAN_TTIR_CER           ((uint32_t)0x00040000U)         /* Configuration error bit                */
#define FDCAN_TTIR_AW            ((uint32_t)0x00020000U)         /* Application watchdog bit               */
#define FDCAN_TTIR_WT            ((uint32_t)0x00010000U)         /* Watch trigger bit                      */
#define FDCAN_TTIR_IWT           ((uint32_t)0x00008000U)         /* Initialization watch trigger bit       */
#define FDCAN_TTIR_ELC           ((uint32_t)0x00004000U)         /* Error level Changed bit                */
#define FDCAN_TTIR_SE2           ((uint32_t)0x00002000U)         /* Scheduling error 2 bit                 */
#define FDCAN_TTIR_SE1           ((uint32_t)0x00001000U)         /* Scheduling error 1 bit                 */
#define FDCAN_TTIR_TXO           ((uint32_t)0x00000800U)         /* Tx count overflow bit                  */
#define FDCAN_TTIR_TXU           ((uint32_t)0x00000400U)         /* Tx count underflow bit                 */
#define FDCAN_TTIR_GTE           ((uint32_t)0x00000200U)         /* Global time error bit                  */
#define FDCAN_TTIR_GTD           ((uint32_t)0x00000100U)         /* Global time discontinuity bit          */
#define FDCAN_TTIR_GTW           ((uint32_t)0x00000080U)         /* Global time wrap bit                   */
#define FDCAN_TTIR_SWE           ((uint32_t)0x00000040U)         /* Stop watch event bit                   */
#define FDCAN_TTIR_TTMI          ((uint32_t)0x00000020U)         /* Trigger time mark event internal bit   */
#define FDCAN_TTIR_RTMI          ((uint32_t)0x00000010U)         /* Register time mark interrupt bit       */
#define FDCAN_TTIR_SOG           ((uint32_t)0x00000008U)         /* Start of Gap bit                       */
#define FDCAN_TTIR_CSM           ((uint32_t)0x00000004U)         /* Change of synchronization mode bit     */
#define FDCAN_TTIR_SMC           ((uint32_t)0x00000002U)         /* Start of matrix cycle bit              */
#define FDCAN_TTIR_SBC           ((uint32_t)0x00000001U)         /* Start of basic cycle bit               */

/** Bit definition for FDCAN_TTIE register **/
#define FDCAN_TTIE_CERE          ((uint32_t)0x00040000U)         /* Configuration error interrupt enable bit              */
#define FDCAN_TTIE_AWE           ((uint32_t)0x00020000U)         /* Application watchdog interrupt enable bit             */
#define FDCAN_TTIE_WTE           ((uint32_t)0x00010000U)         /* Watch trigger interrupt enable bit                    */
#define FDCAN_TTIE_IWTE          ((uint32_t)0x00008000U)         /* Initialization watch trigger interrupt enable bit     */
#define FDCAN_TTIE_ELCE          ((uint32_t)0x00004000U)         /* Change error level interrupt enable bit               */
#define FDCAN_TTIE_SE2E          ((uint32_t)0x00002000U)         /* Scheduling error 2 interrupt enable bit               */
#define FDCAN_TTIE_SE1E          ((uint32_t)0x00001000U)         /* Scheduling error 1 interrupt enable bit               */
#define FDCAN_TTIE_TXOE          ((uint32_t)0x00000800U)         /* Tx count overflow interrupt enable bit                */
#define FDCAN_TTIE_TXUE          ((uint32_t)0x00000400U)         /* Tx count underflow interrupt enable bit               */
#define FDCAN_TTIE_GTEE          ((uint32_t)0x00000200U)         /* Global time error interrupt enable bit                */
#define FDCAN_TTIE_GTDE          ((uint32_t)0x00000100U)         /* Global time discontinuity interrupt enable bit        */
#define FDCAN_TTIE_GTWE          ((uint32_t)0x00000080U)         /* Global time wrap interrupt enable bit                 */
#define FDCAN_TTIE_SWEE          ((uint32_t)0x00000040U)         /* Stop watch event interrupt enable bit                 */
#define FDCAN_TTIE_TTMIE         ((uint32_t)0x00000020U)         /* Trigger time mark event internal interrupt enable bit */
#define FDCAN_TTIE_RTMIE         ((uint32_t)0x00000010U)         /* Register time mark interrupt enable bit               */
#define FDCAN_TTIE_SOGE          ((uint32_t)0x00000008U)         /* Start of gap interrupt enable bit                     */
#define FDCAN_TTIE_CSME          ((uint32_t)0x00000004U)         /* Change of synchronization mode interrupt enable bit   */
#define FDCAN_TTIE_SMCE          ((uint32_t)0x00000002U)         /* Start of matrix cycle interrupt enable bit            */
#define FDCAN_TTIE_SBCE          ((uint32_t)0x00000001U)         /* Start of basic cycle interrupt enable bit             */

/** Bit definition for FDCAN_TTILS register **/
#define FDCAN_TTILS_CERL         ((uint32_t)0x00040000U)         /* Configuration error interrupt Line bit               */
#define FDCAN_TTILS_AWL          ((uint32_t)0x00020000U)         /* Application watchdog interrupt Line bit              */
#define FDCAN_TTILS_WTL          ((uint32_t)0x00010000U)         /* Watch trigger interrupt Line bit                     */
#define FDCAN_TTILS_IWTL         ((uint32_t)0x00008000U)         /* Initialization watch trigger interrupt Line bit      */
#define FDCAN_TTILS_ELCL         ((uint32_t)0x00004000U)         /* Change error level interrupt Line bit                */
#define FDCAN_TTILS_SE2L         ((uint32_t)0x00002000U)         /* Scheduling error 2 interrupt Line bit                */
#define FDCAN_TTILS_SE1L         ((uint32_t)0x00001000U)         /* Scheduling error 1 interrupt Line bit                */
#define FDCAN_TTILS_TXOL         ((uint32_t)0x00000800U)         /* Tx count overflow interrupt Line bit                 */
#define FDCAN_TTILS_TXUL         ((uint32_t)0x00000400U)         /* Tx count underflow interrupt Line bit                */
#define FDCAN_TTILS_GTEL         ((uint32_t)0x00000200U)         /* Global time error interrupt Line bit                 */
#define FDCAN_TTILS_GTDL         ((uint32_t)0x00000100U)         /* Global time discontinuity interrupt Line bit         */
#define FDCAN_TTILS_GTWL         ((uint32_t)0x00000080U)         /* Global time wrap interrupt Line bit                  */
#define FDCAN_TTILS_SWEL         ((uint32_t)0x00000040U)         /* Stop watch event interrupt Line bit                  */
#define FDCAN_TTILS_TTMIL        ((uint32_t)0x00000020U)         /* Trigger time mark event internal interrupt Line bit  */
#define FDCAN_TTILS_RTMIL        ((uint32_t)0x00000010U)         /* Register time mark interrupt Line bit                */
#define FDCAN_TTILS_SOGL         ((uint32_t)0x00000008U)         /* Start of gap interrupt Line bit                      */
#define FDCAN_TTILS_CSML         ((uint32_t)0x00000004U)         /* Change of synchronization mode interrupt Line bit    */
#define FDCAN_TTILS_SMCL         ((uint32_t)0x00000002U)         /* Start of matrix cycle interrupt Line bit             */
#define FDCAN_TTILS_SBCL         ((uint32_t)0x00000001U)         /* Start of basic cycle interrupt Line bit              */

/** Bit definition for FDCAN_TTOST register **/
#define FDCAN_TTOST_SPL          ((uint32_t)0x80000000U)         /* Schedule phase lock bit */
#define FDCAN_TTOST_WECS         ((uint32_t)0x40000000U)         /* Wait for external clock synchronization bit */
#define FDCAN_TTOST_AWE          ((uint32_t)0x20000000U)         /* Application watchdog event bit */
#define FDCAN_TTOST_WFE          ((uint32_t)0x10000000U)         /* Wait for event bit */
#define FDCAN_TTOST_GSI          ((uint32_t)0x08000000U)         /* Gap started Indicator bit */

#define FDCAN_TTOST_TMP          ((uint32_t)0x07000000U)         /* Time master priority bits */
#define FDCAN_TTOST_TMP_0        ((uint32_t)0x01000000U)         /* Time master priority bit0 */
#define FDCAN_TTOST_TMP_1        ((uint32_t)0x02000000U)         /* Time master priority bit1 */
#define FDCAN_TTOST_TMP_2        ((uint32_t)0x04000000U)         /* Time master priority bit2 */

#define FDCAN_TTOST_GFI          ((uint32_t)0x00800000U)         /* Gap finished Indicator bit              */
#define FDCAN_TTOST_WGTD         ((uint32_t)0x00400000U)         /* Wait for global time discontinuity bits */

#define FDCAN_TTOST_RTO          ((uint32_t)0x0000FF00U)         /* Reference trigger offset bits           */
#define FDCAN_TTOST_RTO_0        ((uint32_t)0x00000100U)         /* Reference trigger offset bit0           */
#define FDCAN_TTOST_RTO_1        ((uint32_t)0x00000200U)         /* Reference trigger offset bit1           */
#define FDCAN_TTOST_RTO_2        ((uint32_t)0x00000400U)         /* Reference trigger offset bit2           */
#define FDCAN_TTOST_RTO_3        ((uint32_t)0x00000800U)         /* Reference trigger offset bit3           */
#define FDCAN_TTOST_RTO_4        ((uint32_t)0x00001000U)         /* Reference trigger offset bit4           */
#define FDCAN_TTOST_RTO_5        ((uint32_t)0x00002000U)         /* Reference trigger offset bit5           */
#define FDCAN_TTOST_RTO_6        ((uint32_t)0x00004000U)         /* Reference trigger offset bit6           */
#define FDCAN_TTOST_RTO_7        ((uint32_t)0x00008000U)         /* Reference trigger offset bit7           */

#define FDCAN_TTOST_QCS          ((uint32_t)0x00000080U)         /* Quality of clock Speed bit              */
#define FDCAN_TTOST_QGTP         ((uint32_t)0x00000040U)         /* Quality of global time phase bit        */

#define FDCAN_TTOST_SYS          ((uint32_t)0x00000030U)         /* Synchronization state bits              */
#define FDCAN_TTOST_SYS_NONE     ((uint32_t)0x00000000U)         /* unsynchronized                          */
#define FDCAN_TTOST_SYS_BUS      ((uint32_t)0x00000010U)         /* Synchronization to FDCAN communications */
#define FDCAN_TTOST_SYS_GAP      ((uint32_t)0x00000020U)         /* Scheduling is hung up by gaps (In_Gap)  */
#define FDCAN_TTOST_SYS_SCHEDULE ((uint32_t)0x00000030U)         /* Synchronize to Schedule (In_Schedule)   */

#define FDCAN_TTOST_MS           ((uint32_t)0x0000000CU)         /* Master state bits                       */
#define FDCAN_TTOST_MS_NONE      ((uint32_t)0x00000000U)         /* No associated master node attributes    */
#define FDCAN_TTOST_MS_SLAVE     ((uint32_t)0x00000004U)         /* Working as a time-controlled node       */
#define FDCAN_TTOST_MS_BACKUP    ((uint32_t)0x00000008U)         /* Working as a backup time master node    */
#define FDCAN_TTOST_MS_CURRENT   ((uint32_t)0x0000000CU)         /* Work as a current time master node      */

#define FDCAN_TTOST_EL           ((uint32_t)0x00000003U)         /* Error level bits           */
#define FDCAN_TTOST_EL_S0        ((uint32_t)0x00000000U)         /* Severity 0 - no errors     */
#define FDCAN_TTOST_EL_S1        ((uint32_t)0x00000001U)         /* Severity 1 - Warning       */
#define FDCAN_TTOST_EL_S2        ((uint32_t)0x00000002U)         /* Severity 2 - Error         */
#define FDCAN_TTOST_EL_S3        ((uint32_t)0x00000003U)         /* Severity 3 - Serious error */

/** Bit definition for FDCAN_TURNA register **/
#define FDCAN_TURNA_NAV          ((uint32_t)0x0003FFFFU)         /* Numerator actual value bits  */
#define FDCAN_TURNA_NAV_0        ((uint32_t)0x00000001U)         /* Numerator actual value bit0  */
#define FDCAN_TURNA_NAV_1        ((uint32_t)0x00000002U)         /* Numerator actual value bit1  */
#define FDCAN_TURNA_NAV_2        ((uint32_t)0x00000004U)         /* Numerator actual value bit2  */
#define FDCAN_TURNA_NAV_3        ((uint32_t)0x00000008U)         /* Numerator actual value bit3  */
#define FDCAN_TURNA_NAV_4        ((uint32_t)0x00000010U)         /* Numerator actual value bit4  */
#define FDCAN_TURNA_NAV_5        ((uint32_t)0x00000020U)         /* Numerator actual value bit5  */
#define FDCAN_TURNA_NAV_6        ((uint32_t)0x00000040U)         /* Numerator actual value bit6  */
#define FDCAN_TURNA_NAV_7        ((uint32_t)0x00000080U)         /* Numerator actual value bit7  */
#define FDCAN_TURNA_NAV_8        ((uint32_t)0x00000100U)         /* Numerator actual value bit8  */
#define FDCAN_TURNA_NAV_9        ((uint32_t)0x00000200U)         /* Numerator actual value bit9  */
#define FDCAN_TURNA_NAV_10       ((uint32_t)0x00000400U)         /* Numerator actual value bit10 */
#define FDCAN_TURNA_NAV_11       ((uint32_t)0x00000800U)         /* Numerator actual value bit11 */
#define FDCAN_TURNA_NAV_12       ((uint32_t)0x00001000U)         /* Numerator actual value bit12 */
#define FDCAN_TURNA_NAV_13       ((uint32_t)0x00002000U)         /* Numerator actual value bit13 */
#define FDCAN_TURNA_NAV_14       ((uint32_t)0x00004000U)         /* Numerator actual value bit14 */
#define FDCAN_TURNA_NAV_15       ((uint32_t)0x00008000U)         /* Numerator actual value bit15 */
#define FDCAN_TURNA_NAV_16       ((uint32_t)0x00010000U)         /* Numerator actual value bit16 */
#define FDCAN_TURNA_NAV_17       ((uint32_t)0x00020000U)         /* Numerator actual value bit17 */

/** Bit definition for FDCAN_TTLGT register **/
#define FDCAN_TTLGT_GT           ((uint32_t)0xFFFF0000U)         /* Global time bits  */
#define FDCAN_TTLGT_GT_0         ((uint32_t)0x00010000U)         /* Global time bit0  */
#define FDCAN_TTLGT_GT_1         ((uint32_t)0x00020000U)         /* Global time bit1  */
#define FDCAN_TTLGT_GT_2         ((uint32_t)0x00040000U)         /* Global time bit2  */
#define FDCAN_TTLGT_GT_3         ((uint32_t)0x00080000U)         /* Global time bit3  */
#define FDCAN_TTLGT_GT_4         ((uint32_t)0x00100000U)         /* Global time bit4  */
#define FDCAN_TTLGT_GT_5         ((uint32_t)0x00200000U)         /* Global time bit5  */
#define FDCAN_TTLGT_GT_6         ((uint32_t)0x00400000U)         /* Global time bit6  */
#define FDCAN_TTLGT_GT_7         ((uint32_t)0x00800000U)         /* Global time bit7  */
#define FDCAN_TTLGT_GT_8         ((uint32_t)0x01000000U)         /* Global time bit8  */
#define FDCAN_TTLGT_GT_9         ((uint32_t)0x02000000U)         /* Global time bit9  */
#define FDCAN_TTLGT_GT_10        ((uint32_t)0x04000000U)         /* Global time bit10 */
#define FDCAN_TTLGT_GT_11        ((uint32_t)0x08000000U)         /* Global time bit11 */
#define FDCAN_TTLGT_GT_12        ((uint32_t)0x10000000U)         /* Global time bit12 */
#define FDCAN_TTLGT_GT_13        ((uint32_t)0x20000000U)         /* Global time bit13 */
#define FDCAN_TTLGT_GT_14        ((uint32_t)0x40000000U)         /* Global time bit14 */
#define FDCAN_TTLGT_GT_15        ((uint32_t)0x80000000U)         /* Global time bit15 */

#define FDCAN_TTLGT_LT           ((uint32_t)0x0000FFFFU)         /* Local time bits  */
#define FDCAN_TTLGT_LT_0         ((uint32_t)0x00000001U)         /* Local time bit0  */
#define FDCAN_TTLGT_LT_1         ((uint32_t)0x00000002U)         /* Local time bit1  */
#define FDCAN_TTLGT_LT_2         ((uint32_t)0x00000004U)         /* Local time bit2  */
#define FDCAN_TTLGT_LT_3         ((uint32_t)0x00000008U)         /* Local time bit3  */
#define FDCAN_TTLGT_LT_4         ((uint32_t)0x00000010U)         /* Local time bit4  */
#define FDCAN_TTLGT_LT_5         ((uint32_t)0x00000020U)         /* Local time bit5  */
#define FDCAN_TTLGT_LT_6         ((uint32_t)0x00000040U)         /* Local time bit6  */
#define FDCAN_TTLGT_LT_7         ((uint32_t)0x00000080U)         /* Local time bit7  */
#define FDCAN_TTLGT_LT_8         ((uint32_t)0x00000100U)         /* Local time bit8  */
#define FDCAN_TTLGT_LT_9         ((uint32_t)0x00000200U)         /* Local time bit9  */
#define FDCAN_TTLGT_LT_10        ((uint32_t)0x00000400U)         /* Local time bit10 */
#define FDCAN_TTLGT_LT_11        ((uint32_t)0x00000800U)         /* Local time bit11 */
#define FDCAN_TTLGT_LT_12        ((uint32_t)0x00001000U)         /* Local time bit12 */
#define FDCAN_TTLGT_LT_13        ((uint32_t)0x00002000U)         /* Local time bit13 */
#define FDCAN_TTLGT_LT_14        ((uint32_t)0x00004000U)         /* Local time bit14 */
#define FDCAN_TTLGT_LT_15        ((uint32_t)0x00008000U)         /* Local time bit15 */

/** Bit definition for FDCAN_TTCTC register **/
#define FDCAN_TTCTC_CC           ((uint32_t)0x003F0000U)         /* Cycle count bits */
#define FDCAN_TTCTC_CC_0         ((uint32_t)0x00010000U)         /* Cycle count bit0 */
#define FDCAN_TTCTC_CC_1         ((uint32_t)0x00020000U)         /* Cycle count bit1 */
#define FDCAN_TTCTC_CC_2         ((uint32_t)0x00040000U)         /* Cycle count bit2 */
#define FDCAN_TTCTC_CC_3         ((uint32_t)0x00080000U)         /* Cycle count bit3 */
#define FDCAN_TTCTC_CC_4         ((uint32_t)0x00100000U)         /* Cycle count bit4 */
#define FDCAN_TTCTC_CC_5         ((uint32_t)0x00200000U)         /* Cycle count bit5 */

#define FDCAN_TTCTC_CT           ((uint32_t)0x0000FFFFU)         /* Cycle time bits  */
#define FDCAN_TTCTC_CT_0         ((uint32_t)0x00000001U)         /* Cycle time bit0  */
#define FDCAN_TTCTC_CT_1         ((uint32_t)0x00000002U)         /* Cycle time bit1  */
#define FDCAN_TTCTC_CT_2         ((uint32_t)0x00000004U)         /* Cycle time bit2  */
#define FDCAN_TTCTC_CT_3         ((uint32_t)0x00000008U)         /* Cycle time bit3  */
#define FDCAN_TTCTC_CT_4         ((uint32_t)0x00000010U)         /* Cycle time bit4  */
#define FDCAN_TTCTC_CT_5         ((uint32_t)0x00000020U)         /* Cycle time bit5  */
#define FDCAN_TTCTC_CT_6         ((uint32_t)0x00000040U)         /* Cycle time bit6  */
#define FDCAN_TTCTC_CT_7         ((uint32_t)0x00000080U)         /* Cycle time bit7  */
#define FDCAN_TTCTC_CT_8         ((uint32_t)0x00000100U)         /* Cycle time bit8  */
#define FDCAN_TTCTC_CT_9         ((uint32_t)0x00000200U)         /* Cycle time bit9  */
#define FDCAN_TTCTC_CT_10        ((uint32_t)0x00000400U)         /* Cycle time bit10 */
#define FDCAN_TTCTC_CT_11        ((uint32_t)0x00000800U)         /* Cycle time bit11 */
#define FDCAN_TTCTC_CT_12        ((uint32_t)0x00001000U)         /* Cycle time bit12 */
#define FDCAN_TTCTC_CT_13        ((uint32_t)0x00002000U)         /* Cycle time bit13 */
#define FDCAN_TTCTC_CT_14        ((uint32_t)0x00004000U)         /* Cycle time bit14 */
#define FDCAN_TTCTC_CT_15        ((uint32_t)0x00008000U)         /* Cycle time bit15 */

/** Bit definition for FDCAN_TTCPT register **/
#define FDCAN_TTCPT_SWV          ((uint32_t)0xFFFF0000U)         /* Stop watch value bits  */
#define FDCAN_TTCPT_SWV_0        ((uint32_t)0x00010000U)         /* Stop watch value bit0  */
#define FDCAN_TTCPT_SWV_1        ((uint32_t)0x00020000U)         /* Stop watch value bit1  */
#define FDCAN_TTCPT_SWV_2        ((uint32_t)0x00040000U)         /* Stop watch value bit2  */
#define FDCAN_TTCPT_SWV_3        ((uint32_t)0x00080000U)         /* Stop watch value bit3  */
#define FDCAN_TTCPT_SWV_4        ((uint32_t)0x00100000U)         /* Stop watch value bit4  */
#define FDCAN_TTCPT_SWV_5        ((uint32_t)0x00200000U)         /* Stop watch value bit5  */
#define FDCAN_TTCPT_SWV_6        ((uint32_t)0x00400000U)         /* Stop watch value bit6  */
#define FDCAN_TTCPT_SWV_7        ((uint32_t)0x00800000U)         /* Stop watch value bit7  */
#define FDCAN_TTCPT_SWV_8        ((uint32_t)0x01000000U)         /* Stop watch value bit8  */
#define FDCAN_TTCPT_SWV_9        ((uint32_t)0x02000000U)         /* Stop watch value bit9  */
#define FDCAN_TTCPT_SWV_10       ((uint32_t)0x04000000U)         /* Stop watch value bit10 */
#define FDCAN_TTCPT_SWV_11       ((uint32_t)0x08000000U)         /* Stop watch value bit11 */
#define FDCAN_TTCPT_SWV_12       ((uint32_t)0x10000000U)         /* Stop watch value bit12 */
#define FDCAN_TTCPT_SWV_13       ((uint32_t)0x20000000U)         /* Stop watch value bit13 */
#define FDCAN_TTCPT_SWV_14       ((uint32_t)0x40000000U)         /* Stop watch value bit14 */
#define FDCAN_TTCPT_SWV_15       ((uint32_t)0x80000000U)         /* Stop watch value bit15 */

#define FDCAN_TTCPT_CCV          ((uint32_t)0x0000003FU)         /* Cycle count value bits */
#define FDCAN_TTCPT_CCV_0        ((uint32_t)0x00000001U)         /* Cycle count value bit0 */
#define FDCAN_TTCPT_CCV_1        ((uint32_t)0x00000002U)         /* Cycle count value bit1 */
#define FDCAN_TTCPT_CCV_2        ((uint32_t)0x00000004U)         /* Cycle count value bit2 */
#define FDCAN_TTCPT_CCV_3        ((uint32_t)0x00000008U)         /* Cycle count value bit3 */
#define FDCAN_TTCPT_CCV_4        ((uint32_t)0x00000010U)         /* Cycle count value bit4 */
#define FDCAN_TTCPT_CCV_5        ((uint32_t)0x00000020U)         /* Cycle count value bit5 */

/** Bit definition for FDCAN_TTCSM register **/
#define FDCAN_TTCSM_CSM          ((uint32_t)0x0000FFFFU)         /* Cycle sync mark bits  */
#define FDCAN_TTCSM_CSM_0        ((uint32_t)0x00000001U)         /* Cycle sync mark bit0  */
#define FDCAN_TTCSM_CSM_1        ((uint32_t)0x00000002U)         /* Cycle sync mark bit1  */
#define FDCAN_TTCSM_CSM_2        ((uint32_t)0x00000004U)         /* Cycle sync mark bit2  */
#define FDCAN_TTCSM_CSM_3        ((uint32_t)0x00000008U)         /* Cycle sync mark bit3  */
#define FDCAN_TTCSM_CSM_4        ((uint32_t)0x00000010U)         /* Cycle sync mark bit4  */
#define FDCAN_TTCSM_CSM_5        ((uint32_t)0x00000020U)         /* Cycle sync mark bit5  */
#define FDCAN_TTCSM_CSM_6        ((uint32_t)0x00000040U)         /* Cycle sync mark bit6  */
#define FDCAN_TTCSM_CSM_7        ((uint32_t)0x00000080U)         /* Cycle sync mark bit7  */
#define FDCAN_TTCSM_CSM_8        ((uint32_t)0x00000100U)         /* Cycle sync mark bit8  */
#define FDCAN_TTCSM_CSM_9        ((uint32_t)0x00000200U)         /* Cycle sync mark bit9  */
#define FDCAN_TTCSM_CSM_10       ((uint32_t)0x00000400U)         /* Cycle sync mark bit10 */
#define FDCAN_TTCSM_CSM_11       ((uint32_t)0x00000800U)         /* Cycle sync mark bit11 */
#define FDCAN_TTCSM_CSM_12       ((uint32_t)0x00001000U)         /* Cycle sync mark bit12 */
#define FDCAN_TTCSM_CSM_13       ((uint32_t)0x00002000U)         /* Cycle sync mark bit13 */
#define FDCAN_TTCSM_CSM_14       ((uint32_t)0x00004000U)         /* Cycle sync mark bit14 */
#define FDCAN_TTCSM_CSM_15       ((uint32_t)0x00008000U)         /* Cycle sync mark bit15 */

/** Bit definition for FDCAN_TTTS register **/
#define FDCAN_TTSS_SSWT          ((uint32_t)0x00000003U)         /* Select SWT bits  */
#define FDCAN_TTSS_SSWT_0        ((uint32_t)0x00000000U)         /* Select SWT0      */
#define FDCAN_TTSS_SSWT_1        ((uint32_t)0x00000001U)         /* Select SWT1      */
#define FDCAN_TTSS_SSWT_2        ((uint32_t)0x00000002U)         /* Select SWT1      */
#define FDCAN_TTSS_SSWT_3        ((uint32_t)0x00000003U)         /* Select SWT2      */

#define FDCAN_TTSS_SEVT          ((uint32_t)0x0000000CU)         /* Select SWT bits  */
#define FDCAN_TTSS_SEVT_0        ((uint32_t)0x00000000U)         /* Select SWT0      */
#define FDCAN_TTSS_SEVT_1        ((uint32_t)0x00000004U)         /* Select SWT1      */
#define FDCAN_TTSS_SEVT_2        ((uint32_t)0x00000008U)         /* Select SWT2      */
#define FDCAN_TTSS_SEVT_3        ((uint32_t)0x0000000CU)         /* Select SWT3      */

#define FDCAN_TTSS_MRD          ((uint32_t)0x00000010U)         /* Modify on read */

#define FDCAN_TTSS_TS_SEL       ((uint32_t)0x000000E0U)         /* Select External timestamp clock divided bits  */
#define FDCAN_TTSS_TS_SEL_0     ((uint32_t)0x00000020U)         /* Select External timestamp clock divided bit 0 */
#define FDCAN_TTSS_TS_SEL_1     ((uint32_t)0x00000040U)         /* Select External timestamp clock divided bit 1 */
#define FDCAN_TTSS_TS_SEL_2     ((uint32_t)0x00000080U)         /* Select External timestamp clock divided bit 2 */

#define FDCAN_TTSS_TS_SEL_DIV4      ((uint32_t)0x00000000U)     /* Select External timestamp clock divided is 4   */
#define FDCAN_TTSS_TS_SEL_DIV8      ((uint32_t)0x00000020U)     /* Select External timestamp clock divided is 8   */
#define FDCAN_TTSS_TS_SEL_DIV16     ((uint32_t)0x00000040U)     /* Select External timestamp clock divided is 16  */
#define FDCAN_TTSS_TS_SEL_DIV32     ((uint32_t)0x00000060U)     /* Select External timestamp clock divided is 32  */
#define FDCAN_TTSS_TS_SEL_DIV64     ((uint32_t)0x00000080U)     /* Select External timestamp clock divided is 64  */
#define FDCAN_TTSS_TS_SEL_DIV128    ((uint32_t)0x000000A0U)     /* Select External timestamp clock divided is 128 */
#define FDCAN_TTSS_TS_SEL_DIV256    ((uint32_t)0x000000C0U)     /* Select External timestamp clock divided is 256 */
#define FDCAN_TTSS_TS_SEL_DIV512    ((uint32_t)0x000000E0U)     /* Select External timestamp clock divided is 512 */

#define FDCAN_TTSS_TS_EN        ((uint32_t)0x00000100U)         /* External timestamp vector enable */

#define FDCAN_TTSS_RAMSEL       ((uint32_t)0x00000200U)          /* Message RAM Selection */

/*** Secure digital multimedia cards ***/

/** Bit definition for SDMMC_CFG1 register **/
#define SDMMC_CFG1_MBL                                ((uint32_t)0x00C00000U)         /* Maximum Block Length supported by the Core/Device */
#define SDMMC_CFG1_MBL_0                              ((uint32_t)0x00400000U)         /* Maximum Block Length supported by the Core/Device bit0 */
#define SDMMC_CFG1_MBL_1                              ((uint32_t)0x00800000U)         /* Maximum Block Length supported by the Core/Device bit1 */
#define SDMMC_CFG1_BCLKF                              ((uint32_t)0x003FC000U)         /* Base Clock Frequency for SD Clock */
#define SDMMC_CFG1_BCLKF_0                            ((uint32_t)0x00004000U)         /* Base Clock Frequency for SD Clock bit0 */
#define SDMMC_CFG1_BCLKF_1                            ((uint32_t)0x00008000U)         /* Base Clock Frequency for SD Clock bit1 */
#define SDMMC_CFG1_BCLKF_2                            ((uint32_t)0x00010000U)         /* Base Clock Frequency for SD Clock bit2 */
#define SDMMC_CFG1_BCLKF_3                            ((uint32_t)0x00020000U)         /* Base Clock Frequency for SD Clock bit3 */
#define SDMMC_CFG1_BCLKF_4                            ((uint32_t)0x00040000U)         /* Base Clock Frequency for SD Clock bit4 */
#define SDMMC_CFG1_BCLKF_5                            ((uint32_t)0x00080000U)         /* Base Clock Frequency for SD Clock bit5 */
#define SDMMC_CFG1_BCLKF_6                            ((uint32_t)0x00100000U)         /* Base Clock Frequency for SD Clock bit6 */
#define SDMMC_CFG1_BCLKF_7                            ((uint32_t)0x00200000U)         /* Base Clock Frequency for SD Clock bit7 */
#define SDMMC_CFG1_TCLKU                              ((uint32_t)0x00002000U)         /* Timeout Clock Unit */
#define SDMMC_CFG1_TCNT                               ((uint32_t)0x0000007EU)         /* Tuning Count */
#define SDMMC_CFG1_TCNT_0                             ((uint32_t)0x00000002U)         /* Tuning Count bit0 */
#define SDMMC_CFG1_TCNT_1                             ((uint32_t)0x00000004U)         /* Tuning Count bit1 */
#define SDMMC_CFG1_TCNT_2                             ((uint32_t)0x00000008U)         /* Tuning Count bit2 */
#define SDMMC_CFG1_TCNT_3                             ((uint32_t)0x00000010U)         /* Tuning Count bit3 */
#define SDMMC_CFG1_TCNT_4                             ((uint32_t)0x00000020U)         /* Tuning Count bit4 */
#define SDMMC_CFG1_TCNT_5                             ((uint32_t)0x00000040U)         /* Tuning Count bit5 */
#define SDMMC_CFG1_WSGM                               ((uint32_t)0x00000001U)         /* Wakeup Signal Generation Mode */

/** Bit definition for SDMMC_CFG2 register **/
#define SDMMC_CFG2_SPIBMOD                                 ((uint32_t)0x00080000U)         /* SPI Block Mode */
#define SDMMC_CFG2_SPIMOD                                  ((uint32_t)0x00040000U)         /* SPI Mode */
#define SDMMC_CFG2_DDR50                                   ((uint32_t)0x00004000U)         /* DDR50 Support */
#define SDMMC_CFG2_SDR104                                  ((uint32_t)0x00002000U)         /* SDR104 Support */
#define SDMMC_CFG2_SDR50                                   ((uint32_t)0x00001000U)         /* SDR50 Support */
#define SDMMC_CFG2_STYP                                    ((uint32_t)0x00000C00U)         /* lot Type */
#define SDMMC_CFG2_STYP_0                                  ((uint32_t)0x00000400U)         /* lot Type bit0 */
#define SDMMC_CFG2_STYP_1                                  ((uint32_t)0x00000800U)         /* lot Type bit1 */
#define SDMMC_CFG2_ASYNCINT                                ((uint32_t)0x00000200U)         /* Asynchronous Interrupt */
#define SDMMC_CFG2_VS33                                    ((uint32_t)0x00000020U)         /* 3.3V Support */
#define SDMMC_CFG2_SRS                                     ((uint32_t)0x00000010U)         /* Suspend/Resume Support */
#define SDMMC_CFG2_SDMA                                    ((uint32_t)0x00000008U)         /* SDMA Support */
#define SDMMC_CFG2_HS                                      ((uint32_t)0x00000004U)         /* High Speed Support */
#define SDMMC_CFG2_ADMA2                                   ((uint32_t)0x00000002U)         /* ADMA2 Mode */
#define SDMMC_CFG2_EMBUS                                   ((uint32_t)0x00000001U)         /* 8-bit Support for Embedded Device */

/** Bit definition for SDMMC_CFG3 register **/
#define SDMMC_CFG3_UTFSDR50                           ((uint32_t)0x00000010U)         /* Use Tuning for SDR50 */

/** Bit definition for SDMMC_PV0CTRL register **/
#define SDMMC_PV0CTRL_CLKFS_DS                           ((uint32_t)0x007FE000U)         /* SDCLK Frequency Select Value for Default Speed */
#define SDMMC_PV0CTRL_CLKFS_DS_0                         ((uint32_t)0x00002000U)         /* SDCLK Frequency Select Value for Default Speed bit0 */
#define SDMMC_PV0CTRL_CLKFS_DS_1                         ((uint32_t)0x00004000U)         /* SDCLK Frequency Select Value for Default Speed bit1 */
#define SDMMC_PV0CTRL_CLKFS_DS_2                         ((uint32_t)0x00008000U)         /* SDCLK Frequency Select Value for Default Speed bit2 */
#define SDMMC_PV0CTRL_CLKFS_DS_3                         ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for Default Speed bit3 */
#define SDMMC_PV0CTRL_CLKFS_DS_4                         ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for Default Speed bit4 */
#define SDMMC_PV0CTRL_CLKFS_DS_5                         ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for Default Speed bit5 */
#define SDMMC_PV0CTRL_CLKFS_DS_6                         ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for Default Speed bit6 */
#define SDMMC_PV0CTRL_CLKFS_DS_7                         ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for Default Speed bit7 */
#define SDMMC_PV0CTRL_CLKFS_DS_8                         ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for Default Speed bit8 */
#define SDMMC_PV0CTRL_CLKFS_DS_9                         ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for Default Speed bit9 */
#define SDMMC_PV0CTRL_CLKFS_INIT                         ((uint32_t)0x00001FFFU)         /* SDCLK Frequency Select Value for Initialization */
#define SDMMC_PV0CTRL_CLKFS_INIT_0                       ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for Initialization Bit0*/
#define SDMMC_PV0CTRL_CLKFS_INIT_1                       ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for Initialization Bit1*/
#define SDMMC_PV0CTRL_CLKFS_INIT_2                       ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for Initialization Bit2*/
#define SDMMC_PV0CTRL_CLKFS_INIT_3                       ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for Initialization Bit3*/
#define SDMMC_PV0CTRL_CLKFS_INIT_4                       ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for Initialization Bit4*/
#define SDMMC_PV0CTRL_CLKFS_INIT_5                       ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for Initialization Bit5*/
#define SDMMC_PV0CTRL_CLKFS_INIT_6                       ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for Initialization Bit6*/
#define SDMMC_PV0CTRL_CLKFS_INIT_7                       ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for Initialization Bit7*/
#define SDMMC_PV0CTRL_CLKFS_INIT_8                       ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for Initialization Bit8*/
#define SDMMC_PV0CTRL_CLKFS_INIT_9                       ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for Initialization Bit9*/

/** Bit definition for SDMMC_PV1CTRL register **/
#define SDMMC_PV1CTRL_CLKFS_SDR12                        ((uint32_t)0x007FE000U)         /* SDCLK Frequency Select Value for SDR12 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_0                      ((uint32_t)0x00002000U)         /* SDCLK Frequency Select Value for SDR12 bit0 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_1                      ((uint32_t)0x00004000U)         /* SDCLK Frequency Select Value for SDR12 bit1 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_2                      ((uint32_t)0x00008000U)         /* SDCLK Frequency Select Value for SDR12 bit2 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_3                      ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for SDR12 bit3 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_4                      ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for SDR12 bit4 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_5                      ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for SDR12 bit5 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_6                      ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for SDR12 bit6 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_7                      ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for SDR12 bit7 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_8                      ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for SDR12 bit8 */
#define SDMMC_PV1CTRL_CLKFS_SDR12_9                      ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for SDR12 bit9 */
#define SDMMC_PV1CTRL_CLKFS_HS                           ((uint32_t)0x00001FFFU)         /* SDCLK Frequency Select Value for High Speed */
#define SDMMC_PV1CTRL_CLKFS_HS_0                         ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for High Speed Bit0 */
#define SDMMC_PV1CTRL_CLKFS_HS_1                         ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for High Speed Bit1 */
#define SDMMC_PV1CTRL_CLKFS_HS_2                         ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for High Speed Bit2 */
#define SDMMC_PV1CTRL_CLKFS_HS_3                         ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for High Speed Bit3 */
#define SDMMC_PV1CTRL_CLKFS_HS_4                         ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for High Speed Bit4 */
#define SDMMC_PV1CTRL_CLKFS_HS_5                         ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for High Speed Bit5 */
#define SDMMC_PV1CTRL_CLKFS_HS_6                         ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for High Speed Bit6 */
#define SDMMC_PV1CTRL_CLKFS_HS_7                         ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for High Speed Bit7 */
#define SDMMC_PV1CTRL_CLKFS_HS_8                         ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for High Speed Bit8 */
#define SDMMC_PV1CTRL_CLKFS_HS_9                         ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for High Speed Bit9 */

/** Bit definition for SDMMC_PV2CTRL register **/
#define SDMMC_PV2CTRL_CLKFS_SDR50                        ((uint32_t)0x007FE000U)         /* SDCLK Frequency Select Value for SDR50 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_0                      ((uint32_t)0x00002000U)         /* SDCLK Frequency Select Value for SDR50 Bit0 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_1                      ((uint32_t)0x00004000U)         /* SDCLK Frequency Select Value for SDR50 Bit1 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_2                      ((uint32_t)0x00008000U)         /* SDCLK Frequency Select Value for SDR50 Bit2 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_3                      ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for SDR50 Bit3 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_4                      ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for SDR50 Bit4 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_5                      ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for SDR50 Bit5 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_6                      ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for SDR50 Bit6 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_7                      ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for SDR50 Bit7 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_8                      ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for SDR50 Bit8 */
#define SDMMC_PV2CTRL_CLKFS_SDR50_9                      ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for SDR50 Bit9 */
#define SDMMC_PV2CTRL_CLKFS_SDR25                        ((uint32_t)0x00001FFFU)         /* SDCLK Frequency Select Value for SDR25 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_0                      ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for SDR25 Bit0 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_1                      ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for SDR25 Bit1 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_2                      ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for SDR25 Bit2 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_3                      ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for SDR25 Bit3 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_4                      ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for SDR25 Bit4 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_5                      ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for SDR25 Bit5 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_6                      ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for SDR25 Bit6 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_7                      ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for SDR25 Bit7 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_8                      ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for SDR25 Bit8 */
#define SDMMC_PV2CTRL_CLKFS_SDR25_9                      ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for SDR25 Bit9 */

/** Bit definition for SDMMC_PV3CTRL register **/
#define SDMMC_PV3CTRL_CLKFS_SDR104                       ((uint32_t)0x007FE000U)         /* SDCLK Frequency Select Value for SDR104 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_0                     ((uint32_t)0x00002000U)         /* SDCLK Frequency Select Value for SDR104 Bit0 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_1                     ((uint32_t)0x00004000U)         /* SDCLK Frequency Select Value for SDR104 Bit1 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_2                     ((uint32_t)0x00008000U)         /* SDCLK Frequency Select Value for SDR104 Bit2 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_3                     ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for SDR104 Bit3 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_4                     ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for SDR104 Bit4 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_5                     ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for SDR104 Bit5 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_6                     ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for SDR104 Bit6 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_7                     ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for SDR104 Bit7 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_8                     ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for SDR104 Bit8 */
#define SDMMC_PV3CTRL_CLKFS_SDR104_9                     ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for SDR104 Bit9 */
#define SDMMC_PV3CTRL_CLKFS_DDR50                        ((uint32_t)0x00001FFFU)         /* SDCLK Frequency Select Value for DDR50 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_0                      ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for DDR50 Bit0 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_1                      ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for DDR50 Bit1 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_2                      ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for DDR50 Bit2 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_3                      ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for DDR50 Bit3 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_4                      ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for DDR50 Bit4 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_5                      ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for DDR50 Bit5 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_6                      ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for DDR50 Bit6 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_7                      ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for DDR50 Bit7 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_8                      ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for DDR50 Bit8 */
#define SDMMC_PV3CTRL_CLKFS_DDR50_9                      ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for DDR50 Bit9 */

/** Bit definition for SDMMC_DLYCTRL register **/
#define SDMMC_DLYCTRL_OTDE                               ((uint32_t)0x00000800U)         /* Output tap Delay Enable */
#define SDMMC_DLYCTRL_OTDS                               ((uint32_t)0x00000780U)         /* Output Tap Delay Select */
#define SDMMC_DLYCTRL_OTDS_0                             ((uint32_t)0x00000080U)         /* Output Tap Delay Select bit0 */
#define SDMMC_DLYCTRL_OTDS_1                             ((uint32_t)0x00000100U)         /* Output Tap Delay Select bit1 */
#define SDMMC_DLYCTRL_OTDS_2                             ((uint32_t)0x00000200U)         /* Output Tap Delay Select bit2 */
#define SDMMC_DLYCTRL_OTDS_3                             ((uint32_t)0x00000400U)         /* Output Tap Delay Select bit3 */
#define SDMMC_DLYCTRL_ITCW                               ((uint32_t)0x00000040U)         /* Input Tap Change Window */
#define SDMMC_DLYCTRL_ITDE                               ((uint32_t)0x00000020U)         /* Input Tap Delay Enable */
#define SDMMC_DLYCTRL_ITDS                               ((uint32_t)0x0000001FU)         /* Input Tap Delay Select */
#define SDMMC_DLYCTRL_ITDS_0                             ((uint32_t)0x00000001U)         /* Input Tap Delay Select Bit0 */
#define SDMMC_DLYCTRL_ITDS_1                             ((uint32_t)0x00000002U)         /* Input Tap Delay Select Bit1 */
#define SDMMC_DLYCTRL_ITDS_2                             ((uint32_t)0x00000004U)         /* Input Tap Delay Select Bit2 */
#define SDMMC_DLYCTRL_ITDS_3                             ((uint32_t)0x00000008U)         /* Input Tap Delay Select Bit3 */
#define SDMMC_DLYCTRL_ITDS_4                             ((uint32_t)0x00000010U)         /* Input Tap Delay Select Bit4 */

/** Bit definition for SDHOST_DSADD register **/
#define SDHOST_DSADD_ADD                                ((uint32_t)0xFFFFFFFFU)         /* physical system memory address used for DMA transfers 
                                                                                          or the second argument for the Auto CMD23 Bits  */ 

/** Bit definition for SDHOST_BLKCFG register **/
#define SDHOST_BLKCFG_CNT                               ((uint32_t)0xFFFF0000U)         /* Blocks Count for Current Transfer bits  */
#define SDHOST_BLKCFG_CNT_0                             ((uint32_t)0x00010000U)         /* Blocks Count for Current Transfer bit0  */
#define SDHOST_BLKCFG_CNT_1                             ((uint32_t)0x00020000U)         /* Blocks Count for Current Transfer bit1  */
#define SDHOST_BLKCFG_CNT_2                             ((uint32_t)0x00040000U)         /* Blocks Count for Current Transfer bit2  */
#define SDHOST_BLKCFG_CNT_3                             ((uint32_t)0x00080000U)         /* Blocks Count for Current Transfer bit3  */
#define SDHOST_BLKCFG_CNT_4                             ((uint32_t)0x00100000U)         /* Blocks Count for Current Transfer bit4  */
#define SDHOST_BLKCFG_CNT_5                             ((uint32_t)0x00200000U)         /* Blocks Count for Current Transfer bit5  */
#define SDHOST_BLKCFG_CNT_6                             ((uint32_t)0x00400000U)         /* Blocks Count for Current Transfer bit6  */
#define SDHOST_BLKCFG_CNT_7                             ((uint32_t)0x00800000U)         /* Blocks Count for Current Transfer bit7  */
#define SDHOST_BLKCFG_CNT_8                             ((uint32_t)0x01000000U)         /* Blocks Count for Current Transfer bit8  */
#define SDHOST_BLKCFG_CNT_9                             ((uint32_t)0x02000000U)         /* Blocks Count for Current Transfer bit9  */
#define SDHOST_BLKCFG_CNT_10                            ((uint32_t)0x04000000U)         /* Blocks Count for Current Transfer bit10 */
#define SDHOST_BLKCFG_CNT_11                            ((uint32_t)0x08000000U)         /* Blocks Count for Current Transfer bit11 */
#define SDHOST_BLKCFG_CNT_12                            ((uint32_t)0x10000000U)         /* Blocks Count for Current Transfer bit12 */
#define SDHOST_BLKCFG_CNT_13                            ((uint32_t)0x20000000U)         /* Blocks Count for Current Transfer bit13 */
#define SDHOST_BLKCFG_CNT_14                            ((uint32_t)0x40000000U)         /* Blocks Count for Current Transfer bit14 */
#define SDHOST_BLKCFG_CNT_15                            ((uint32_t)0x80000000U)         /* Blocks Count for Current Transfer bit15 */
#define SDHOST_BLKCFG_HDBS                              ((uint32_t)0x00007000U)         /* Host SDMA Buffer Size */
#define SDHOST_BLKCFG_HDBS_0                            ((uint32_t)0x00001000U)         /* Host SDMA Buffer Size Bit0 */
#define SDHOST_BLKCFG_HDBS_1                            ((uint32_t)0x00002000U)         /* Host SDMA Buffer Size Bit1 */
#define SDHOST_BLKCFG_HDBS_2                            ((uint32_t)0x00004000U)         /* Host SDMA Buffer Size Bit2 */
#define SDHOST_BLKCFG_SIZE                              ((uint32_t)0x00000FFFU)         /* Transfer Block Size */
#define SDHOST_BLKCFG_SIZE_0                            ((uint32_t)0x00000001U)         /* Transfer Block Size Bit0 */
#define SDHOST_BLKCFG_SIZE_1                            ((uint32_t)0x00000002U)         /* Transfer Block Size Bit1 */
#define SDHOST_BLKCFG_SIZE_2                            ((uint32_t)0x00000004U)         /* Transfer Block Size Bit2 */
#define SDHOST_BLKCFG_SIZE_3                            ((uint32_t)0x00000008U)         /* Transfer Block Size Bit3 */
#define SDHOST_BLKCFG_SIZE_4                            ((uint32_t)0x00000010U)         /* Transfer Block Size Bit4 */
#define SDHOST_BLKCFG_SIZE_5                            ((uint32_t)0x00000020U)         /* Transfer Block Size Bit5 */
#define SDHOST_BLKCFG_SIZE_6                            ((uint32_t)0x00000040U)         /* Transfer Block Size Bit6 */
#define SDHOST_BLKCFG_SIZE_7                            ((uint32_t)0x00000080U)         /* Transfer Block Size Bit7 */
#define SDHOST_BLKCFG_SIZE_8                            ((uint32_t)0x00000100U)         /* Transfer Block Size Bit8 */
#define SDHOST_BLKCFG_SIZE_9                            ((uint32_t)0x00000200U)         /* Transfer Block Size Bit9 */
#define SDHOST_BLKCFG_SIZE_10                           ((uint32_t)0x00000400U)         /* Transfer Block Size Bit10 */
#define SDHOST_BLKCFG_SIZE_11                           ((uint32_t)0x00000800U)         /* Transfer Block Size Bit11 */

/** Bit definition for SDHOST_CMDARG1 register **/
#define SDHOST_CMDARG1_ARG1                             ((uint32_t)0xFFFFFFFFU)         /* SD CMD Argument Bit   */
#define SDHOST_CMDARG1_ARG1_0                           ((uint32_t)0x00000001U)         /* SD CMD Argument Bit0  */
#define SDHOST_CMDARG1_ARG1_1                           ((uint32_t)0x00000002U)         /* SD CMD Argument Bit1  */
#define SDHOST_CMDARG1_ARG1_2                           ((uint32_t)0x00000004U)         /* SD CMD Argument Bit2  */
#define SDHOST_CMDARG1_ARG1_3                           ((uint32_t)0x00000008U)         /* SD CMD Argument Bit3  */
#define SDHOST_CMDARG1_ARG1_4                           ((uint32_t)0x00000010U)         /* SD CMD Argument Bit4  */
#define SDHOST_CMDARG1_ARG1_5                           ((uint32_t)0x00000020U)         /* SD CMD Argument Bit5  */
#define SDHOST_CMDARG1_ARG1_6                           ((uint32_t)0x00000040U)         /* SD CMD Argument Bit6  */
#define SDHOST_CMDARG1_ARG1_7                           ((uint32_t)0x00000080U)         /* SD CMD Argument Bit7  */
#define SDHOST_CMDARG1_ARG1_8                           ((uint32_t)0x00000100U)         /* SD CMD Argument Bit8  */
#define SDHOST_CMDARG1_ARG1_9                           ((uint32_t)0x00000200U)         /* SD CMD Argument Bit9  */
#define SDHOST_CMDARG1_ARG1_10                          ((uint32_t)0x00000400U)         /* SD CMD Argument Bit10 */
#define SDHOST_CMDARG1_ARG1_11                          ((uint32_t)0x00000800U)         /* SD CMD Argument Bit11 */
#define SDHOST_CMDARG1_ARG1_12                          ((uint32_t)0x00001000U)         /* SD CMD Argument Bit12 */
#define SDHOST_CMDARG1_ARG1_13                          ((uint32_t)0x00002000U)         /* SD CMD Argument Bit13 */
#define SDHOST_CMDARG1_ARG1_14                          ((uint32_t)0x00004000U)         /* SD CMD Argument Bit14 */
#define SDHOST_CMDARG1_ARG1_15                          ((uint32_t)0x00008000U)         /* SD CMD Argument Bit15 */
#define SDHOST_CMDARG1_ARG1_16                          ((uint32_t)0x00010000U)         /* SD CMD Argument Bit16 */
#define SDHOST_CMDARG1_ARG1_17                          ((uint32_t)0x00020000U)         /* SD CMD Argument Bit17 */
#define SDHOST_CMDARG1_ARG1_18                          ((uint32_t)0x00040000U)         /* SD CMD Argument Bit18 */
#define SDHOST_CMDARG1_ARG1_19                          ((uint32_t)0x00080000U)         /* SD CMD Argument Bit19 */
#define SDHOST_CMDARG1_ARG1_20                          ((uint32_t)0x00100000U)         /* SD CMD Argument Bit20 */
#define SDHOST_CMDARG1_ARG1_21                          ((uint32_t)0x00200000U)         /* SD CMD Argument Bit21 */
#define SDHOST_CMDARG1_ARG1_22                          ((uint32_t)0x00400000U)         /* SD CMD Argument Bit22 */
#define SDHOST_CMDARG1_ARG1_23                          ((uint32_t)0x00800000U)         /* SD CMD Argument Bit23 */
#define SDHOST_CMDARG1_ARG1_24                          ((uint32_t)0x01000000U)         /* SD CMD Argument Bit24 */
#define SDHOST_CMDARG1_ARG1_25                          ((uint32_t)0x02000000U)         /* SD CMD Argument Bit25 */
#define SDHOST_CMDARG1_ARG1_26                          ((uint32_t)0x04000000U)         /* SD CMD Argument Bit26 */
#define SDHOST_CMDARG1_ARG1_27                          ((uint32_t)0x08000000U)         /* SD CMD Argument Bit27 */
#define SDHOST_CMDARG1_ARG1_28                          ((uint32_t)0x10000000U)         /* SD CMD Argument Bit28 */
#define SDHOST_CMDARG1_ARG1_29                          ((uint32_t)0x20000000U)         /* SD CMD Argument Bit29 */
#define SDHOST_CMDARG1_ARG1_30                          ((uint32_t)0x40000000U)         /* SD CMD Argument Bit30 */
#define SDHOST_CMDARG1_ARG1_31                          ((uint32_t)0x80000000U)         /* SD CMD Argument Bit31 */

/** Bit definition for SDHOST_TMODE register **/
#define SDHOST_TMODE_INDEX                              ((uint32_t)0x3F000000U)         /* Command Index */
#define SDHOST_TMODE_INDEX_0                            ((uint32_t)0x01000000U)         /* Command Index Bit0 */
#define SDHOST_TMODE_INDEX_1                            ((uint32_t)0x02000000U)         /* Command Index Bit1 */
#define SDHOST_TMODE_INDEX_2                            ((uint32_t)0x04000000U)         /* Command Index Bit2 */
#define SDHOST_TMODE_INDEX_3                            ((uint32_t)0x08000000U)         /* Command Index Bit3 */
#define SDHOST_TMODE_INDEX_4                            ((uint32_t)0x10000000U)         /* Command Index Bit4 */
#define SDHOST_TMODE_INDEX_5                            ((uint32_t)0x20000000U)         /* Command Index Bit5 */
#define SDHOST_TMODE_TYPE                               ((uint32_t)0x00C00000U)         /* Command Type */
#define SDHOST_TMODE_TYPE_0                             ((uint32_t)0x00400000U)         /* Command Type bit0 */
#define SDHOST_TMODE_TYPE_1                             ((uint32_t)0x00800000U)         /* Command Type bit1 */
#define SDHOST_TMODE_DPRESEL                            ((uint32_t)0x00200000U)         /* Data Present Select */
#define SDHOST_TMODE_INDEXCK                            ((uint32_t)0x00100000U)         /* Command Index Check Enable */
#define SDHOST_TMODE_CRCCK                              ((uint32_t)0x00080000U)         /* Command CRC Check Enable */
#define SDHOST_TMODE_RTYPESEL                           ((uint32_t)0x00030000U)         /* Response Type Select */
#define SDHOST_TMODE_RTYPESEL_0                         ((uint32_t)0x00010000U)         /* Response Type Select Bit0 */
#define SDHOST_TMODE_RTYPESEL_1                         ((uint32_t)0x00020000U)         /* Response Type Select Bit1 */
#define SDHOST_TMODE_BLKSEL                             ((uint32_t)0x00000020U)         /* Multi / Single Block Select */
#define SDHOST_TMODE_DATDIR                             ((uint32_t)0x00000010U)         /* Data Transfer Direction Select */
#define SDHOST_TMODE_AUTOCMDE                           ((uint32_t)0x0000000CU)         /* Auto CMD Enable */
#define SDHOST_TMODE_AUTOCMDE_0                         ((uint32_t)0x00000004U)         /* Auto CMD Enable Bit0 */
#define SDHOST_TMODE_AUTOCMDE_1                         ((uint32_t)0x00000008U)         /* Auto CMD Enable Bit1 */
#define SDHOST_TMODE_BLOCKCNTE                          ((uint32_t)0x00000002U)         /* Block Count Enable */
#define SDHOST_TMODE_DMAE                               ((uint32_t)0x00000001U)         /* DMA Enable */

/** Bit definition for SDHOST_CMDRSP0 register **/
#define SDHOST_CMDRSP0_RESP0                            ((uint32_t)0xFFFFFFFFU)         /* CMD response Bit[31:0] */
/** Bit definition for SDHOST_CMDRSP1 register **/
#define SDHOST_CMDRSP1_RESP1                            ((uint32_t)0xFFFFFFFFU)         /* CMD response Bit[63:32] */
/** Bit definition for SDHOST_CMDRSP2 register **/
#define SDHOST_CMDRSP2_RESP2                            ((uint32_t)0xFFFFFFFFU)         /* CMD response Bit[95:64] */
/** Bit definition for SDHOST_CMDRSP3 register **/
#define SDHOST_CMDRSP3_RESP3                            ((uint32_t)0xFFFFFFFFU)         /* CMD response Bit[127:96] */

/** Bit definition for SDHOST_BUFDAT register **/
#define SDHOST_BUFDAT_DAT                               ((uint32_t)0xFFFFFFFFU)         /* Data content Bits  */
#define SDHOST_BUFDAT_DAT_0                             ((uint32_t)0x00000001U)         /* Data content Bit0  */
#define SDHOST_BUFDAT_DAT_1                             ((uint32_t)0x00000002U)         /* Data content Bit1  */
#define SDHOST_BUFDAT_DAT_2                             ((uint32_t)0x00000004U)         /* Data content Bit2  */
#define SDHOST_BUFDAT_DAT_3                             ((uint32_t)0x00000008U)         /* Data content Bit3  */
#define SDHOST_BUFDAT_DAT_4                             ((uint32_t)0x00000010U)         /* Data content Bit4  */
#define SDHOST_BUFDAT_DAT_5                             ((uint32_t)0x00000020U)         /* Data content Bit5  */
#define SDHOST_BUFDAT_DAT_6                             ((uint32_t)0x00000040U)         /* Data content Bit6  */
#define SDHOST_BUFDAT_DAT_7                             ((uint32_t)0x00000080U)         /* Data content Bit7  */
#define SDHOST_BUFDAT_DAT_8                             ((uint32_t)0x00000100U)         /* Data content Bit8  */
#define SDHOST_BUFDAT_DAT_9                             ((uint32_t)0x00000200U)         /* Data content Bit9  */
#define SDHOST_BUFDAT_DAT_10                            ((uint32_t)0x00000400U)         /* Data content Bit10 */
#define SDHOST_BUFDAT_DAT_11                            ((uint32_t)0x00000800U)         /* Data content Bit11 */
#define SDHOST_BUFDAT_DAT_12                            ((uint32_t)0x00001000U)         /* Data content Bit12 */
#define SDHOST_BUFDAT_DAT_13                            ((uint32_t)0x00002000U)         /* Data content Bit13 */
#define SDHOST_BUFDAT_DAT_14                            ((uint32_t)0x00004000U)         /* Data content Bit14 */
#define SDHOST_BUFDAT_DAT_15                            ((uint32_t)0x00008000U)         /* Data content Bit15 */
#define SDHOST_BUFDAT_DAT_16                            ((uint32_t)0x00010000U)         /* Data content Bit16 */
#define SDHOST_BUFDAT_DAT_17                            ((uint32_t)0x00020000U)         /* Data content Bit17 */
#define SDHOST_BUFDAT_DAT_18                            ((uint32_t)0x00040000U)         /* Data content Bit18 */
#define SDHOST_BUFDAT_DAT_19                            ((uint32_t)0x00080000U)         /* Data content Bit19 */
#define SDHOST_BUFDAT_DAT_20                            ((uint32_t)0x00100000U)         /* Data content Bit20 */
#define SDHOST_BUFDAT_DAT_21                            ((uint32_t)0x00200000U)         /* Data content Bit21 */
#define SDHOST_BUFDAT_DAT_22                            ((uint32_t)0x00400000U)         /* Data content Bit22 */
#define SDHOST_BUFDAT_DAT_23                            ((uint32_t)0x00800000U)         /* Data content Bit23 */
#define SDHOST_BUFDAT_DAT_24                            ((uint32_t)0x01000000U)         /* Data content Bit24 */
#define SDHOST_BUFDAT_DAT_25                            ((uint32_t)0x02000000U)         /* Data content Bit25 */
#define SDHOST_BUFDAT_DAT_26                            ((uint32_t)0x04000000U)         /* Data content Bit26 */
#define SDHOST_BUFDAT_DAT_27                            ((uint32_t)0x08000000U)         /* Data content Bit27 */
#define SDHOST_BUFDAT_DAT_28                            ((uint32_t)0x10000000U)         /* Data content Bit28 */
#define SDHOST_BUFDAT_DAT_29                            ((uint32_t)0x20000000U)         /* Data content Bit29 */
#define SDHOST_BUFDAT_DAT_30                            ((uint32_t)0x40000000U)         /* Data content Bit30 */
#define SDHOST_BUFDAT_DAT_31                            ((uint32_t)0x80000000U)         /* Data content Bit31 */

/** Bit definition for SDHOST_PRESTS register **/
#define SDHOST_PRESTS_DATLH                             ((uint32_t)0x1E000000U)         /* DAT[7:4] Line Signal Level */
#define SDHOST_PRESTS_DATLH_0                           ((uint32_t)0x02000000U)         /* DAT[4] Line Signal Level */
#define SDHOST_PRESTS_DATLH_1                           ((uint32_t)0x04000000U)         /* DAT[5] Line Signal Level */
#define SDHOST_PRESTS_DATLH_2                           ((uint32_t)0x08000000U)         /* DAT[6] Line Signal Level */
#define SDHOST_PRESTS_DATLH_3                           ((uint32_t)0x10000000U)         /* DAT[7] Line Signal Level */
#define SDHOST_PRESTS_CMDL                              ((uint32_t)0x01000000U)         /* CMD Line Signal Level */
#define SDHOST_PRESTS_DATLL                             ((uint32_t)0x00F00000U)         /* DAT[3:0] Line Signal Level */
#define SDHOST_PRESTS_DATLL_0                           ((uint32_t)0x00100000U)         /* DAT[0] Line Signal Level */
#define SDHOST_PRESTS_DATLL_1                           ((uint32_t)0x00200000U)         /* DAT[1] Line Signal Level */
#define SDHOST_PRESTS_DATLL_2                           ((uint32_t)0x00400000U)         /* DAT[2] Line Signal Level */
#define SDHOST_PRESTS_DATLL_3                           ((uint32_t)0x00800000U)         /* DAT[3] Line Signal Level */
#define SDHOST_PRESTS_SDWPL                             ((uint32_t)0x00080000U)         /* Write Protect Switch Pin Level */
#define SDHOST_PRESTS_SDCDL                             ((uint32_t)0x00040000U)         /* Card Detect Pin Level */
#define SDHOST_PRESTS_CSTSL                             ((uint32_t)0x00020000U)         /* Card State Stable */
#define SDHOST_PRESTS_CINS                              ((uint32_t)0x00010000U)         /* Card Inserted */
#define SDHOST_PRESTS_BUFR                              ((uint32_t)0x00000800U)         /* Buffer Read Enable */
#define SDHOST_PRESTS_BUFW                              ((uint32_t)0x00000400U)         /* Buffer Write Enable */
#define SDHOST_PRESTS_RTRANACT                          ((uint32_t)0x00000200U)         /* Read Transfer Active */
#define SDHOST_PRESTS_WTRANACT                          ((uint32_t)0x00000100U)         /* Write Transfer Active */
#define SDHOST_PRESTS_RETUNREQ                          ((uint32_t)0x00000008U)         /* Re-Tuning Request */
#define SDHOST_PRESTS_DLACT                             ((uint32_t)0x00000004U)         /* DAT Line Active */
#define SDHOST_PRESTS_CMDINHD                           ((uint32_t)0x00000002U)         /* Command Inhibit (DAT) */
#define SDHOST_PRESTS_CMDINHC                           ((uint32_t)0x00000001U)         /* Command Inhibit (CMD) */

/** Bit definition for SDHOST_CTRL1 register **/
#define SDHOST_CTRL1_RMVWKUP                                 ((uint32_t)0x04000000U)         /* Wakeup Event Enable On SD Card Removal */
#define SDHOST_CTRL1_INSTWKUP                                ((uint32_t)0x02000000U)         /* Wakeup Event Enable On SD Card Insertion */
#define SDHOST_CTRL1_INTWKUP                                 ((uint32_t)0x01000000U)         /* Wakeup Event Enable On Card Interrupt */
#define SDHOST_CTRL1_BOOTACKC                                ((uint32_t)0x00800000U)         /* Boot Ack Check */
#define SDHOST_CTRL1_BOOTINALT                               ((uint32_t)0x00400000U)         /* To start boot code access in alternative mode */
#define SDHOST_CTRL1_BOOTEN                                  ((uint32_t)0x00200000U)         /* To start boot code access */
#define SDHOST_CTRL1_SPIMODE                                 ((uint32_t)0x00100000U)         /* SPI mode enable */
#define SDHOST_CTRL1_INTATBG                                 ((uint32_t)0x00080000U)         /* Interrupt At Block Gap */
#define SDHOST_CTRL1_RWAITCTRL                               ((uint32_t)0x00040000U)         /* Read Wait Control */
#define SDHOST_CTRL1_CONTREQ                                 ((uint32_t)0x00020000U)         /* Continue Request */
#define SDHOST_CTRL1_SABGREQ                                 ((uint32_t)0x00010000U)         /* Stop At Block Gap Request */
#define SDHOST_CTRL1_HWRST                                   ((uint32_t)0x00001000U)         /* Hardware reset */
#define SDHOST_CTRL1_SDBVSEL                                 ((uint32_t)0x00000E00U)         /* SD Bus Voltage Select */
#define SDHOST_CTRL1_SDPWR                                   ((uint32_t)0x00000100U)         /* SD Bus Power */
#define SDHOST_CTRL1_CDSD                                    ((uint32_t)0x00000080U)         /* Card detect signal detection */
#define SDHOST_CTRL1_CDTL                                    ((uint32_t)0x00000040U)         /* Card Detect Test Level */
#define SDHOST_CTRL1_EDTWIDTH                                ((uint32_t)0x00000020U)         /* Extended Data Transfer Width */
#define SDHOST_CTRL1_DMASEL                                  ((uint32_t)0x00000018U)         /* DMA Select */
#define SDHOST_CTRL1_DMASEL_0                                ((uint32_t)0x00000008U)         /* DMA Select Bit0 */
#define SDHOST_CTRL1_DMASEL_1                                ((uint32_t)0x00000010U)         /* DMA Select Bit1 */
#define SDHOST_CTRL1_HSEN                                    ((uint32_t)0x00000004U)         /* High Speed Enable */
#define SDHOST_CTRL1_DTWIDTH                                 ((uint32_t)0x00000002U)         /* Data Transfer Width */
#define SDHOST_CTRL1_LEDCTRL                                 ((uint32_t)0x00000001U)         /* LED Control */

/** Bit definition for SDHOST_CTRL2 register **/
#define SDHOST_CTRL2_SWRSTDL                                 ((uint32_t)0x04000000U)         /* Software Reset for DAT Line */
#define SDHOST_CTRL2_SWRSTCL                                 ((uint32_t)0x02000000U)         /* Software Reset for CMD Line */
#define SDHOST_CTRL2_SWRSTALL                                ((uint32_t)0x01000000U)         /* Software Reset for All */
#define SDHOST_CTRL2_DTCNT                                   ((uint32_t)0x000F0000U)         /* Data Timeout Counter Value */
#define SDHOST_CTRL2_DTCNT_0                                 ((uint32_t)0x00010000U)         /* Data Timeout Counter Value Bit0 */
#define SDHOST_CTRL2_DTCNT_1                                 ((uint32_t)0x00020000U)         /* Data Timeout Counter Value Bit1 */
#define SDHOST_CTRL2_DTCNT_2                                 ((uint32_t)0x00040000U)         /* Data Timeout Counter Value Bit2 */
#define SDHOST_CTRL2_DTCNT_3                                 ((uint32_t)0x00080000U)         /* Data Timeout Counter Value Bit3 */
#define SDHOST_CTRL2_SDCLKSEL                                ((uint32_t)0x0000FFC0U)         /* SDCLK Frequency Select */
#define SDHOST_CTRL2_SDCLKSEL_0                              ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Bit0 */
#define SDHOST_CTRL2_SDCLKSEL_1                              ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Bit1 */
#define SDHOST_CTRL2_SDCLKSEL_2                              ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Bit2 */
#define SDHOST_CTRL2_SDCLKSEL_3                              ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Bit3 */
#define SDHOST_CTRL2_SDCLKSEL_4                              ((uint32_t)0x00000400U)         /* SDCLK Frequency Select Bit4 */
#define SDHOST_CTRL2_SDCLKSEL_5                              ((uint32_t)0x00000800U)         /* SDCLK Frequency Select Bit5 */
#define SDHOST_CTRL2_SDCLKSEL_6                              ((uint32_t)0x00001000U)         /* SDCLK Frequency Select Bit6 */
#define SDHOST_CTRL2_SDCLKSEL_7                              ((uint32_t)0x00002000U)         /* SDCLK Frequency Select Bit7 */
#define SDHOST_CTRL2_SDCLKSEL_8                              ((uint32_t)0x00004000U)         /* SDCLK Frequency Select Bit8 */
#define SDHOST_CTRL2_SDCLKSEL_9                              ((uint32_t)0x00008000U)         /* SDCLK Frequency Select Bit9 */
#define SDHOST_CTRL2_SDCLKE                                  ((uint32_t)0x00000004U)         /* SD Clock Enable */
#define SDHOST_CTRL2_INCLKSTS                                ((uint32_t)0x00000002U)         /* Internal Clock Stable */
#define SDHOST_CTRL2_INCLKE                                  ((uint32_t)0x00000001U)         /* Internal Clock Enable */

/** Bit definition for SDHOST_INTSTS register **/
#define SDHOST_INTSTS_TRGRERR                                 ((uint32_t)0x10000000U)         /* Target Response error */
#define SDHOST_INTSTS_ADMAERR                                 ((uint32_t)0x02000000U)         /* ADMA Error */
#define SDHOST_INTSTS_ACMDERR                                 ((uint32_t)0x01000000U)         /* Auto CMD Error */
#define SDHOST_INTSTS_DENDERR                                 ((uint32_t)0x00400000U)         /* Data End Bit Error */
#define SDHOST_INTSTS_DCRCERR                                 ((uint32_t)0x00200000U)         /* Data CRC Error */
#define SDHOST_INTSTS_DTERR                                   ((uint32_t)0x00100000U)         /* Data Timeout Error */
#define SDHOST_INTSTS_CINXERR                                 ((uint32_t)0x00080000U)         /* Command Index Error */
#define SDHOST_INTSTS_CENDBERR                                ((uint32_t)0x00040000U)         /* Command End Bit Error */
#define SDHOST_INTSTS_CCRCERR                                 ((uint32_t)0x00020000U)         /* Command CRC Error */
#define SDHOST_INTSTS_CTERR                                   ((uint32_t)0x00010000U)         /* Command Timeout Error */
#define SDHOST_INTSTS_ALLERR                                  ((uint32_t)0x00008000U)         /* Error Interrupt */
#define SDHOST_INTSTS_BOOTTER                                 ((uint32_t)0x00004000U)         /* Boot terminate Interrupt */
#define SDHOST_INTSTS_BOOTACKR                                ((uint32_t)0x00002000U)         /* Boot ack rcv */
#define SDHOST_INTSTS_RETUNE                                  ((uint32_t)0x00001000U)         /* Re-Tuning Event */
#define SDHOST_INTSTS_CINT                                    ((uint32_t)0x00000100U)         /* Card Interrupt */
#define SDHOST_INTSTS_CRMV                                    ((uint32_t)0x00000080U)         /* Card Removal */
#define SDHOST_INTSTS_CINS                                    ((uint32_t)0x00000040U)         /* Card Insertion */
#define SDHOST_INTSTS_BUFRRDY                                 ((uint32_t)0x00000020U)         /* Buffer Read Ready */
#define SDHOST_INTSTS_BUFWRDY                                 ((uint32_t)0x00000010U)         /* Buffer Write Ready */
#define SDHOST_INTSTS_DMAINT                                  ((uint32_t)0x00000008U)         /* DMA Interrupt */
#define SDHOST_INTSTS_BLKGAPE                                 ((uint32_t)0x00000004U)         /* Block Gap Event */
#define SDHOST_INTSTS_TC                                      ((uint32_t)0x00000002U)         /* Transfer Complete */
#define SDHOST_INTSTS_CMDC                                    ((uint32_t)0x00000001U)         /* Command Complete */

/** Bit definition for SDHOST_IE register **/
#define SDHOST_IE_TRGREE                                  ((uint32_t)0x10000000U)         /* Target Response Error /Host Error Status Enable */
#define SDHOST_IE_ADMAEE                                  ((uint32_t)0x02000000U)         /* ADMA Error Status Enable */
#define SDHOST_IE_ACMDEE                                  ((uint32_t)0x01000000U)         /* Auto CMD12 Error Status Enable */
#define SDHOST_IE_DENDEE                                  ((uint32_t)0x00400000U)         /* Data End Bit Error Status Enable */
#define SDHOST_IE_DCRCEE                                  ((uint32_t)0x00200000U)         /* Data CRC Error Status Enable */
#define SDHOST_IE_DTEE                                    ((uint32_t)0x00100000U)         /* Data Timeout Error Status Enable */
#define SDHOST_IE_CINXEE                                  ((uint32_t)0x00080000U)         /* Command Index Error Status Enable */
#define SDHOST_IE_CENDBEE                                 ((uint32_t)0x00040000U)         /* Command End Bit Error Status Enable */
#define SDHOST_IE_CCRCEE                                  ((uint32_t)0x00020000U)         /* Command CRC Error Status Enable */
#define SDHOST_IE_CTEE                                    ((uint32_t)0x00010000U)         /* Command Timeout Error Status Enable */
#define SDHOST_IE_BOOTTIE                                 ((uint32_t)0x00004000U)         /* Boot terminate Interrupt enable */
#define SDHOST_IE_BOOTACKRE                               ((uint32_t)0x00002000U)         /* Boot ack rcv enable */
#define SDHOST_IE_RTUNE                                   ((uint32_t)0x00001000U)         /* Re-Tuning Event Status Enable */
#define SDHOST_IE_CINTE                                   ((uint32_t)0x00000100U)         /* Card Interrupt Status Enable */
#define SDHOST_IE_CRMVE                                   ((uint32_t)0x00000080U)         /* Card Removal Status Enable */
#define SDHOST_IE_CINSE                                   ((uint32_t)0x00000040U)         /* Card Insertion Status Enable */
#define SDHOST_IE_BUFRRDYE                                ((uint32_t)0x00000020U)         /* Buffer Read Ready Status Enable */
#define SDHOST_IE_BUFWRDYE                                ((uint32_t)0x00000010U)         /* Buffer Write Ready Status Enable */
#define SDHOST_IE_DMAINTE                                 ((uint32_t)0x00000008U)         /* DMA Interrupt Status Enable */
#define SDHOST_IE_BLKGAPEE                                ((uint32_t)0x00000004U)         /* Block Gap Event Status Enable */
#define SDHOST_IE_TCE                                     ((uint32_t)0x00000002U)         /* Transfer Complete Status Enable */
#define SDHOST_IE_CMDCE                                   ((uint32_t)0x00000001U)         /* Command Complete Status Enable */

/** Bit definition for SDHOST_ISE register **/
#define SDHOST_ISE_TRGRESE                                 ((uint32_t)0x10000000U)         /* Target Response Error /Host Error Signal Enable */
#define SDHOST_ISE_ADMAESE                                 ((uint32_t)0x02000000U)         /* ADMA Error Signal Enable */
#define SDHOST_ISE_ACMDESE                                 ((uint32_t)0x01000000U)         /* Auto CMD12 Error Signal Enable */
#define SDHOST_ISE_DENDESE                                 ((uint32_t)0x00400000U)         /* Data End Bit Error Signal Enable */
#define SDHOST_ISE_DCRCESE                                 ((uint32_t)0x00200000U)         /* Data CRC Error Signal Enable */
#define SDHOST_ISE_DTESE                                   ((uint32_t)0x00100000U)         /* Data Timeout Error Signal Enable */
#define SDHOST_ISE_CINXESE                                 ((uint32_t)0x00080000U)         /* Command Index Error Signal Enable */
#define SDHOST_ISE_CENDBESE                                ((uint32_t)0x00040000U)         /* Command End Bit Error Signal Enable */
#define SDHOST_ISE_CCRCESE                                 ((uint32_t)0x00020000U)         /* Command CRC Error Signal Enable */
#define SDHOST_ISE_CTESE                                   ((uint32_t)0x00010000U)         /* Command Timeout Error Signal Enable */
#define SDHOST_ISE_BOOTTISE                                ((uint32_t)0x00004000U)         /* Boot terminate Interrupt signal enable */
#define SDHOST_ISE_BOOTACKRSE                              ((uint32_t)0x00002000U)         /* Boot ack rcv signal enable */
#define SDHOST_ISE_RTUNSE                                  ((uint32_t)0x00001000U)         /* Re-Tuning Event signal Enable */
#define SDHOST_ISE_CINTSE                                  ((uint32_t)0x00000100U)         /* Card Interrupt Signal Enable */
#define SDHOST_ISE_CRMVSE                                  ((uint32_t)0x00000080U)         /* Card Removal Signal Enable */
#define SDHOST_ISE_CINSSE                                  ((uint32_t)0x00000040U)         /* Card Insertion Signal Enable */
#define SDHOST_ISE_BUFRRDYSE                               ((uint32_t)0x00000020U)         /* Buffer Read Ready Signal Enable */
#define SDHOST_ISE_BUFWRDYSE                               ((uint32_t)0x00000010U)         /* Buffer Write Ready Signal Enable */
#define SDHOST_ISE_DMAINTSE                                ((uint32_t)0x00000008U)         /* DMA Interrupt Signal Enable */
#define SDHOST_ISE_BLKGAPESE                               ((uint32_t)0x00000004U)         /* Block Gap Event Signal Enable */
#define SDHOST_ISE_TCSE                                    ((uint32_t)0x00000002U)         /* Transfer Complete Signal Enable */
#define SDHOST_ISE_CMDCSE                                  ((uint32_t)0x00000001U)         /* Command Complete Signal Enable */

/** Bit definition for SDHOST_CTRLSTS register **/
#define SDHOST_CTRLSTS_PREVE                                   ((uint32_t)0x80000000U)         /* Preset Value Enable */
#define SDHOST_CTRLSTS_ASYNCIE                                 ((uint32_t)0x40000000U)         /* Asynchronous Interrupt Enable */
#define SDHOST_CTRLSTS_SCS                                     ((uint32_t)0x00800000U)         /* Sampling Clock Select */
#define SDHOST_CTRLSTS_ETUN                                    ((uint32_t)0x00400000U)         /* Execute Tuning */
#define SDHOST_CTRLSTS_V18SE                                   ((uint32_t)0x00080000U)         /* 1.8V Signaling Enable */
#define SDHOST_CTRLSTS_UHSMOD                                  ((uint32_t)0x00070000U)         /* UHS Mode Select */
#define SDHOST_CTRLSTS_UHSMOD_0                                ((uint32_t)0x00010000U)         /* UHS Mode Select Bit0 */
#define SDHOST_CTRLSTS_UHSMOD_1                                ((uint32_t)0x00020000U)         /* UHS Mode Select Bit1 */
#define SDHOST_CTRLSTS_UHSMOD_2                                ((uint32_t)0x00040000U)         /* UHS Mode Select Bit2 */
#define SDHOST_CTRLSTS_ACMD12E                                 ((uint32_t)0x00000080U)         /* Auto CMD12 Enable */
#define SDHOST_CTRLSTS_ACMDINXE                                ((uint32_t)0x00000010U)         /* Auto CMD Index Error */
#define SDHOST_CTRLSTS_ACMDEBE                                 ((uint32_t)0x00000008U)         /* Auto CMD End Bit Error */
#define SDHOST_CTRLSTS_ACMDCRCE                                ((uint32_t)0x00000004U)         /* Auto CMD CRC Error */
#define SDHOST_CTRLSTS_ACMDTE                                  ((uint32_t)0x00000002U)         /* Auto CMD Timeout Error */
#define SDHOST_CTRLSTS_ACMD12NE                                ((uint32_t)0x00000001U)         /* Auto CMD12 not Executed */

/** Bit definition for SDHOST_CAP0STS register **/
#define SDHOST_CAP0STS_STYP                                    ((uint32_t)0xC0000000U)         /* Slot Type */
#define SDHOST_CAP0STS_STYP_0                                  ((uint32_t)0x40000000U)         /* Slot Type bit0 */
#define SDHOST_CAP0STS_STYP_1                                  ((uint32_t)0x80000000U)         /* Slot Type bit1 */
#define SDHOST_CAP0STS_ASYNCINT                                ((uint32_t)0x20000000U)         /* Asynchronous Interrupt Support */
#define SDHOST_CAP0STS_VS33                                    ((uint32_t)0x01000000U)         /* Voltage Support 3.3V */
#define SDHOST_CAP0STS_SRS                                     ((uint32_t)0x00800000U)         /* Suspend / Resume Support */
#define SDHOST_CAP0STS_SDMA                                    ((uint32_t)0x00400000U)         /* SDMA Support */
#define SDHOST_CAP0STS_HS                                      ((uint32_t)0x00200000U)         /* High Speed Support */
#define SDHOST_CAP0STS_ADMA2                                   ((uint32_t)0x00080000U)         /* ADMA2 */
#define SDHOST_CAP0STS_EMBUS                                   ((uint32_t)0x00040000U)         /* Extended Media Bus Support */
#define SDHOST_CAP0STS_MBL                                     ((uint32_t)0x00030000U)         /* Max Block Length */
#define SDHOST_CAP0STS_MBL_0                                   ((uint32_t)0x00010000U)         /* Max Block Length Bit0 */
#define SDHOST_CAP0STS_MBL_1                                   ((uint32_t)0x00020000U)         /* Max Block Length Bit1 */
#define SDHOST_CAP0STS_BCLKF                                   ((uint32_t)0x0000FF00U)         /* Base Clock Frequency for SD Clock */
#define SDHOST_CAP0STS_BCLKF_0                                 ((uint32_t)0x00000100U)         /* Base Clock Frequency for SD Clock Bit0 */
#define SDHOST_CAP0STS_BCLKF_1                                 ((uint32_t)0x00000200U)         /* Base Clock Frequency for SD Clock Bit1 */
#define SDHOST_CAP0STS_BCLKF_2                                 ((uint32_t)0x00000400U)         /* Base Clock Frequency for SD Clock Bit2 */
#define SDHOST_CAP0STS_BCLKF_3                                 ((uint32_t)0x00000800U)         /* Base Clock Frequency for SD Clock Bit3 */
#define SDHOST_CAP0STS_BCLKF_4                                 ((uint32_t)0x00001000U)         /* Base Clock Frequency for SD Clock Bit4 */
#define SDHOST_CAP0STS_BCLKF_5                                 ((uint32_t)0x00002000U)         /* Base Clock Frequency for SD Clock Bit5 */
#define SDHOST_CAP0STS_BCLKF_6                                 ((uint32_t)0x00004000U)         /* Base Clock Frequency for SD Clock Bit6 */
#define SDHOST_CAP0STS_BCLKF_7                                 ((uint32_t)0x00008000U)         /* Base Clock Frequency for SD Clock Bit7 */
#define SDHOST_CAP0STS_TCLKU                                   ((uint32_t)0x00000080U)         /* Timeout Clock Unit */

/** Bit definition for SDHOST_CAP1STS register **/
#define SDHOST_CAP1STS_SPIBMOD                                 ((uint32_t)0x02000000U)         /* SPI block mode */
#define SDHOST_CAP1STS_SPIMOD                                  ((uint32_t)0x01000000U)         /* SPI mode */
#define SDHOST_CAP1STS_UTFSDR50                                ((uint32_t)0x00002000U)         /* Use Tuning for SDR50 */
#define SDHOST_CAP1STS_RTTIMCNT                                ((uint32_t)0x00000F00U)         /* Timer Count for Re-Tuning */
#define SDHOST_CAP1STS_RTTIMCNT_0                              ((uint32_t)0x00000100U)         /* Timer Count for Re-Tuning Bit0 */
#define SDHOST_CAP1STS_RTTIMCNT_1                              ((uint32_t)0x00000200U)         /* Timer Count for Re-Tuning Bit1 */
#define SDHOST_CAP1STS_RTTIMCNT_2                              ((uint32_t)0x00000400U)         /* Timer Count for Re-Tuning Bit2 */
#define SDHOST_CAP1STS_RTTIMCNT_3                              ((uint32_t)0x00000800U)         /* Timer Count for Re-Tuning Bit3 */
#define SDHOST_CAP1STS_DDR50                                   ((uint32_t)0x00000004U)         /* DDR50 Support */
#define SDHOST_CAP1STS_SDR104                                  ((uint32_t)0x00000002U)         /* SDR104 Support */
#define SDHOST_CAP1STS_SDR50                                   ((uint32_t)0x00000001U)         /* SDR50 Support */

/** Bit definition for SDHOST_STSFE register **/
#define SDHOST_STSFE_ADMAE                                     ((uint32_t)0x02000000U)         /* Force Event for ADMA Error */
#define SDHOST_STSFE_ACMDE                                     ((uint32_t)0x01000000U)         /* Force Event for Auto CMD Error */
#define SDHOST_STSFE_DEBE                                      ((uint32_t)0x00400000U)         /* Force Event for Data End Bit Error */
#define SDHOST_STSFE_DCRCE                                     ((uint32_t)0x00200000U)         /* Force Event for Data CRC Error */
#define SDHOST_STSFE_DTE                                       ((uint32_t)0x00100000U)         /* Force Event for Data Timeout Error */
#define SDHOST_STSFE_CINXE                                     ((uint32_t)0x00080000U)         /* Force Event for Command Index Error */
#define SDHOST_STSFE_CEBE                                      ((uint32_t)0x00040000U)         /* Force Event for Command End Bit Error */
#define SDHOST_STSFE_CCRCE                                     ((uint32_t)0x00020000U)         /* Force Event for Command CRC Error */
#define SDHOST_STSFE_CTE                                       ((uint32_t)0x00010000U)         /* Force Event for Command Timeout Error */
#define SDHOST_STSFE_ACMD12E                                   ((uint32_t)0x00000080U)         /* Force Event for command not issued by Auto CMD12 Error */
#define SDHOST_STSFE_ACMDINXE                                  ((uint32_t)0x00000010U)         /* Force Event for Auto CMD Index Error */
#define SDHOST_STSFE_ACMDEBE                                   ((uint32_t)0x00000008U)         /* Force Event for Auto CMD End bit Error */
#define SDHOST_STSFE_ACMDCRCE                                  ((uint32_t)0x00000004U)         /* Force Event for Auto CMD CRC Error */
#define SDHOST_STSFE_ACMDTE                                    ((uint32_t)0x00000002U)         /* Force Event for Auto CMD timeout Error */
#define SDHOST_STSFE_ACMD12NE                                  ((uint32_t)0x00000001U)         /* Force Event for Auto CMD12 NOT Executed */

/** Bit definition for SDHOST_ADMAESTS register **/
#define SDHOST_ADMAESTS_ADMALME                                 ((uint32_t)0x00000004U)         /* ADMA Length Mismatch Error */
#define SDHOST_ADMAESTS_ADMAE                                   ((uint32_t)0x00000003U)         /* ADMA Error State */
#define SDHOST_ADMAESTS_ADMAE_0                                 ((uint32_t)0x00000001U)         /* ADMA Error State Bit0 */
#define SDHOST_ADMAESTS_ADMAE_1                                 ((uint32_t)0x00000002U)         /* ADMA Error State Bit1 */

/** Bit definition for SDHOST_ASADD0 register **/
#define SDHOST_ASADD0_ADD0                                      ((uint32_t)0xFFFFFFFFU)         /* ADMA System Address Bit[31:0] */
/** Bit definition for SDHOST_ASADD1 register **/
#define SDHOST_ASADD1_ADD1                                      ((uint32_t)0xFFFFFFFFU)         /* ADMA System Address Bit[63:32] */

/** Bit definition for SDHOST_PV0STS register **/
#define SDHOST_PV0STS_CLKFS_DS                           ((uint32_t)0x03FF0000U)         /* SDCLK Frequency Select Value for Default Speed */
#define SDHOST_PV0STS_CLKFS_DS_0                         ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for Default Speed Bit0 */
#define SDHOST_PV0STS_CLKFS_DS_1                         ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for Default Speed Bit1 */
#define SDHOST_PV0STS_CLKFS_DS_2                         ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for Default Speed Bit2 */
#define SDHOST_PV0STS_CLKFS_DS_3                         ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for Default Speed Bit3 */
#define SDHOST_PV0STS_CLKFS_DS_4                         ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for Default Speed Bit4 */
#define SDHOST_PV0STS_CLKFS_DS_5                         ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for Default Speed Bit5 */
#define SDHOST_PV0STS_CLKFS_DS_6                         ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for Default Speed Bit6 */
#define SDHOST_PV0STS_CLKFS_DS_7                         ((uint32_t)0x00800000U)         /* SDCLK Frequency Select Value for Default Speed Bit7 */
#define SDHOST_PV0STS_CLKFS_DS_8                         ((uint32_t)0x01000000U)         /* SDCLK Frequency Select Value for Default Speed Bit8 */
#define SDHOST_PV0STS_CLKFS_DS_9                         ((uint32_t)0x02000000U)         /* SDCLK Frequency Select Value for Default Speed Bit9 */
#define SDHOST_PV0STS_CLKFS_INIT                         ((uint32_t)0x000003FFU)         /* SDCLK Frequency Select Value for Initialization */
#define SDHOST_PV0STS_CLKFS_INIT_0                       ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for Initialization Bit0 */
#define SDHOST_PV0STS_CLKFS_INIT_1                       ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for Initialization Bit1 */
#define SDHOST_PV0STS_CLKFS_INIT_2                       ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for Initialization Bit2 */
#define SDHOST_PV0STS_CLKFS_INIT_3                       ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for Initialization Bit3 */
#define SDHOST_PV0STS_CLKFS_INIT_4                       ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for Initialization Bit4 */
#define SDHOST_PV0STS_CLKFS_INIT_5                       ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for Initialization Bit5 */
#define SDHOST_PV0STS_CLKFS_INIT_6                       ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for Initialization Bit6 */
#define SDHOST_PV0STS_CLKFS_INIT_7                       ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for Initialization Bit7 */
#define SDHOST_PV0STS_CLKFS_INIT_8                       ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for Initialization Bit8 */
#define SDHOST_PV0STS_CLKFS_INIT_9                       ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for Initialization Bit9 */

/** Bit definition for SDHOST_PV1STS register **/
#define SDHOST_PV1STS_CLKFS_SDR12                        ((uint32_t)0x03FF0000U)         /* SDCLK Frequency Select Value for SDR12 */
#define SDHOST_PV1STS_CLKFS_SDR12_0                      ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for SDR12 Bit0 */
#define SDHOST_PV1STS_CLKFS_SDR12_1                      ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for SDR12 Bit1 */
#define SDHOST_PV1STS_CLKFS_SDR12_2                      ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for SDR12 Bit2 */
#define SDHOST_PV1STS_CLKFS_SDR12_3                      ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for SDR12 Bit3 */
#define SDHOST_PV1STS_CLKFS_SDR12_4                      ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for SDR12 Bit4 */
#define SDHOST_PV1STS_CLKFS_SDR12_5                      ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for SDR12 Bit5 */
#define SDHOST_PV1STS_CLKFS_SDR12_6                      ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for SDR12 Bit6 */
#define SDHOST_PV1STS_CLKFS_SDR12_7                      ((uint32_t)0x00800000U)         /* SDCLK Frequency Select Value for SDR12 Bit7 */
#define SDHOST_PV1STS_CLKFS_SDR12_8                      ((uint32_t)0x01000000U)         /* SDCLK Frequency Select Value for SDR12 Bit8 */
#define SDHOST_PV1STS_CLKFS_SDR12_9                      ((uint32_t)0x02000000U)         /* SDCLK Frequency Select Value for SDR12 Bit9 */
#define SDHOST_PV1STS_CLKFS_HS                           ((uint32_t)0x000003FFU)         /* SDCLK Frequency Select Value for High Speed */
#define SDHOST_PV1STS_CLKFS_HS_0                         ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for High Speed Bit0 */
#define SDHOST_PV1STS_CLKFS_HS_1                         ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for High Speed Bit1 */
#define SDHOST_PV1STS_CLKFS_HS_2                         ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for High Speed Bit2 */
#define SDHOST_PV1STS_CLKFS_HS_3                         ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for High Speed Bit3 */
#define SDHOST_PV1STS_CLKFS_HS_4                         ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for High Speed Bit4 */
#define SDHOST_PV1STS_CLKFS_HS_5                         ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for High Speed Bit5 */
#define SDHOST_PV1STS_CLKFS_HS_6                         ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for High Speed Bit6 */
#define SDHOST_PV1STS_CLKFS_HS_7                         ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for High Speed Bit7 */
#define SDHOST_PV1STS_CLKFS_HS_8                         ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for High Speed Bit8 */
#define SDHOST_PV1STS_CLKFS_HS_9                         ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for High Speed Bit9 */

/** Bit definition for SDHOST_PV2STS register **/
#define SDHOST_PV2STS_CLKFS_SDR50                        ((uint32_t)0x03FF0000U)         /* SDCLK Frequency Select Value for SDR50 */
#define SDHOST_PV2STS_CLKFS_SDR50_0                      ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for SDR50 Bit0 */
#define SDHOST_PV2STS_CLKFS_SDR50_1                      ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for SDR50 Bit1 */
#define SDHOST_PV2STS_CLKFS_SDR50_2                      ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for SDR50 Bit2 */
#define SDHOST_PV2STS_CLKFS_SDR50_3                      ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for SDR50 Bit3 */
#define SDHOST_PV2STS_CLKFS_SDR50_4                      ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for SDR50 Bit4 */
#define SDHOST_PV2STS_CLKFS_SDR50_5                      ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for SDR50 Bit5 */
#define SDHOST_PV2STS_CLKFS_SDR50_6                      ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for SDR50 Bit6 */
#define SDHOST_PV2STS_CLKFS_SDR50_7                      ((uint32_t)0x00800000U)         /* SDCLK Frequency Select Value for SDR50 Bit7 */
#define SDHOST_PV2STS_CLKFS_SDR50_8                      ((uint32_t)0x01000000U)         /* SDCLK Frequency Select Value for SDR50 Bit8 */
#define SDHOST_PV2STS_CLKFS_SDR50_9                      ((uint32_t)0x02000000U)         /* SDCLK Frequency Select Value for SDR50 Bit9 */
#define SDHOST_PV2STS_CLKFS_SDR25                        ((uint32_t)0x000003FFU)         /* SDCLK Frequency Select Value for SDR25 */
#define SDHOST_PV2STS_CLKFS_SDR25_0                      ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for SDR25 Bit0 */
#define SDHOST_PV2STS_CLKFS_SDR25_1                      ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for SDR25 Bit1 */
#define SDHOST_PV2STS_CLKFS_SDR25_2                      ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for SDR25 Bit2 */
#define SDHOST_PV2STS_CLKFS_SDR25_3                      ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for SDR25 Bit3 */
#define SDHOST_PV2STS_CLKFS_SDR25_4                      ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for SDR25 Bit4 */
#define SDHOST_PV2STS_CLKFS_SDR25_5                      ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for SDR25 Bit5 */
#define SDHOST_PV2STS_CLKFS_SDR25_6                      ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for SDR25 Bit6 */
#define SDHOST_PV2STS_CLKFS_SDR25_7                      ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for SDR25 Bit7 */
#define SDHOST_PV2STS_CLKFS_SDR25_8                      ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for SDR25 Bit8 */
#define SDHOST_PV2STS_CLKFS_SDR25_9                      ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for SDR25 Bit9 */

/** Bit definition for SDHOST_PV3STS register **/
#define SDHOST_PV3STS_CLKFS_DDR50                        ((uint32_t)0x03FF0000U)         /* SDCLK Frequency Select Value for DDR50 */
#define SDHOST_PV3STS_CLKFS_DDR50_0                      ((uint32_t)0x00010000U)         /* SDCLK Frequency Select Value for DDR50 Bit0 */
#define SDHOST_PV3STS_CLKFS_DDR50_1                      ((uint32_t)0x00020000U)         /* SDCLK Frequency Select Value for DDR50 Bit1 */
#define SDHOST_PV3STS_CLKFS_DDR50_2                      ((uint32_t)0x00040000U)         /* SDCLK Frequency Select Value for DDR50 Bit2 */
#define SDHOST_PV3STS_CLKFS_DDR50_3                      ((uint32_t)0x00080000U)         /* SDCLK Frequency Select Value for DDR50 Bit3 */
#define SDHOST_PV3STS_CLKFS_DDR50_4                      ((uint32_t)0x00100000U)         /* SDCLK Frequency Select Value for DDR50 Bit4 */
#define SDHOST_PV3STS_CLKFS_DDR50_5                      ((uint32_t)0x00200000U)         /* SDCLK Frequency Select Value for DDR50 Bit5 */
#define SDHOST_PV3STS_CLKFS_DDR50_6                      ((uint32_t)0x00400000U)         /* SDCLK Frequency Select Value for DDR50 Bit6 */
#define SDHOST_PV3STS_CLKFS_DDR50_7                      ((uint32_t)0x00800000U)         /* SDCLK Frequency Select Value for DDR50 Bit7 */
#define SDHOST_PV3STS_CLKFS_DDR50_8                      ((uint32_t)0x01000000U)         /* SDCLK Frequency Select Value for DDR50 Bit8 */
#define SDHOST_PV3STS_CLKFS_DDR50_9                      ((uint32_t)0x02000000U)         /* SDCLK Frequency Select Value for DDR50 Bit9 */
#define SDHOST_PV3STS_CLKFS_SDR104                       ((uint32_t)0x000003FFU)         /* SDCLK Frequency Select Value for SDR104 */
#define SDHOST_PV3STS_CLKFS_SDR104_0                     ((uint32_t)0x00000001U)         /* SDCLK Frequency Select Value for SDR104 Bit0 */
#define SDHOST_PV3STS_CLKFS_SDR104_1                     ((uint32_t)0x00000002U)         /* SDCLK Frequency Select Value for SDR104 Bit1 */
#define SDHOST_PV3STS_CLKFS_SDR104_2                     ((uint32_t)0x00000004U)         /* SDCLK Frequency Select Value for SDR104 Bit2 */
#define SDHOST_PV3STS_CLKFS_SDR104_3                     ((uint32_t)0x00000008U)         /* SDCLK Frequency Select Value for SDR104 Bit3 */
#define SDHOST_PV3STS_CLKFS_SDR104_4                     ((uint32_t)0x00000010U)         /* SDCLK Frequency Select Value for SDR104 Bit4 */
#define SDHOST_PV3STS_CLKFS_SDR104_5                     ((uint32_t)0x00000020U)         /* SDCLK Frequency Select Value for SDR104 Bit5 */
#define SDHOST_PV3STS_CLKFS_SDR104_6                     ((uint32_t)0x00000040U)         /* SDCLK Frequency Select Value for SDR104 Bit6 */
#define SDHOST_PV3STS_CLKFS_SDR104_7                     ((uint32_t)0x00000080U)         /* SDCLK Frequency Select Value for SDR104 Bit7 */
#define SDHOST_PV3STS_CLKFS_SDR104_8                     ((uint32_t)0x00000100U)         /* SDCLK Frequency Select Value for SDR104 Bit8 */
#define SDHOST_PV3STS_CLKFS_SDR104_9                     ((uint32_t)0x00000200U)         /* SDCLK Frequency Select Value for SDR104 Bit9 */

/** Bit definition for SDHOST_BOOTTCTRL register **/
#define SDHOST_BOOTTCTRL_CNT                             ((uint32_t)0xFFFFFFFFU)         /* Boot Data Timeout Counter Value */
#define SDHOST_BOOTTCTRL_CNT_0                           ((uint32_t)0x00000001U)         /* Boot Data Timeout Counter Value Bit0  */
#define SDHOST_BOOTTCTRL_CNT_1                           ((uint32_t)0x00000002U)         /* Boot Data Timeout Counter Value Bit1  */
#define SDHOST_BOOTTCTRL_CNT_2                           ((uint32_t)0x00000004U)         /* Boot Data Timeout Counter Value Bit2  */
#define SDHOST_BOOTTCTRL_CNT_3                           ((uint32_t)0x00000008U)         /* Boot Data Timeout Counter Value Bit3  */
#define SDHOST_BOOTTCTRL_CNT_4                           ((uint32_t)0x00000010U)         /* Boot Data Timeout Counter Value Bit4  */
#define SDHOST_BOOTTCTRL_CNT_5                           ((uint32_t)0x00000020U)         /* Boot Data Timeout Counter Value Bit5  */
#define SDHOST_BOOTTCTRL_CNT_6                           ((uint32_t)0x00000040U)         /* Boot Data Timeout Counter Value Bit6  */
#define SDHOST_BOOTTCTRL_CNT_7                           ((uint32_t)0x00000080U)         /* Boot Data Timeout Counter Value Bit7  */
#define SDHOST_BOOTTCTRL_CNT_8                           ((uint32_t)0x00000100U)         /* Boot Data Timeout Counter Value Bit8  */
#define SDHOST_BOOTTCTRL_CNT_9                           ((uint32_t)0x00000200U)         /* Boot Data Timeout Counter Value Bit9  */
#define SDHOST_BOOTTCTRL_CNT_10                          ((uint32_t)0x00000400U)         /* Boot Data Timeout Counter Value Bit10 */
#define SDHOST_BOOTTCTRL_CNT_11                          ((uint32_t)0x00000800U)         /* Boot Data Timeout Counter Value Bit11 */
#define SDHOST_BOOTTCTRL_CNT_12                          ((uint32_t)0x00001000U)         /* Boot Data Timeout Counter Value Bit12 */
#define SDHOST_BOOTTCTRL_CNT_13                          ((uint32_t)0x00002000U)         /* Boot Data Timeout Counter Value Bit13 */
#define SDHOST_BOOTTCTRL_CNT_14                          ((uint32_t)0x00004000U)         /* Boot Data Timeout Counter Value Bit14 */
#define SDHOST_BOOTTCTRL_CNT_15                          ((uint32_t)0x00008000U)         /* Boot Data Timeout Counter Value Bit15 */
#define SDHOST_BOOTTCTRL_CNT_16                          ((uint32_t)0x00010000U)         /* Boot Data Timeout Counter Value Bit16 */
#define SDHOST_BOOTTCTRL_CNT_17                          ((uint32_t)0x00020000U)         /* Boot Data Timeout Counter Value Bit17 */
#define SDHOST_BOOTTCTRL_CNT_18                          ((uint32_t)0x00040000U)         /* Boot Data Timeout Counter Value Bit18 */
#define SDHOST_BOOTTCTRL_CNT_19                          ((uint32_t)0x00080000U)         /* Boot Data Timeout Counter Value Bit19 */
#define SDHOST_BOOTTCTRL_CNT_20                          ((uint32_t)0x00100000U)         /* Boot Data Timeout Counter Value Bit20 */
#define SDHOST_BOOTTCTRL_CNT_21                          ((uint32_t)0x00200000U)         /* Boot Data Timeout Counter Value Bit21 */
#define SDHOST_BOOTTCTRL_CNT_22                          ((uint32_t)0x00400000U)         /* Boot Data Timeout Counter Value Bit22 */
#define SDHOST_BOOTTCTRL_CNT_23                          ((uint32_t)0x00800000U)         /* Boot Data Timeout Counter Value Bit23 */
#define SDHOST_BOOTTCTRL_CNT_24                          ((uint32_t)0x01000000U)         /* Boot Data Timeout Counter Value Bit24 */
#define SDHOST_BOOTTCTRL_CNT_25                          ((uint32_t)0x02000000U)         /* Boot Data Timeout Counter Value Bit25 */
#define SDHOST_BOOTTCTRL_CNT_26                          ((uint32_t)0x04000000U)         /* Boot Data Timeout Counter Value Bit26 */
#define SDHOST_BOOTTCTRL_CNT_27                          ((uint32_t)0x08000000U)         /* Boot Data Timeout Counter Value Bit27 */
#define SDHOST_BOOTTCTRL_CNT_28                          ((uint32_t)0x10000000U)         /* Boot Data Timeout Counter Value Bit28 */
#define SDHOST_BOOTTCTRL_CNT_29                          ((uint32_t)0x20000000U)         /* Boot Data Timeout Counter Value Bit29 */
#define SDHOST_BOOTTCTRL_CNT_30                          ((uint32_t)0x40000000U)         /* Boot Data Timeout Counter Value Bit30 */
#define SDHOST_BOOTTCTRL_CNT_31                          ((uint32_t)0x80000000U)         /* Boot Data Timeout Counter Value Bit31 */



/******** DBG Module ********/
/******** Bit definition for DBG_ID register  ********/
#define DBG_ID_IDCODE                                    ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */

/******** Bit definition for DBG_CTRL register  ********/
#define DBG_CTRL_TRACE_CFG                               ((uint32_t)0x00000400U)         /* Bit[10] */
#define DBG_CTRL_TRACE_MODE                              ((uint32_t)0x00000300U)         /* Bit[9:8] */
#define DBG_CTRL_TRACE_MODE_0                            ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_CTRL_TRACE_MODE_1                            ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_CTRL_TRACE_IOEN                              ((uint32_t)0x00000080U)         /* Bit[7] */
#define DBG_CTRL_TRGOEN                                  ((uint32_t)0x00000040U)         /* Bit[6] */
#define DBG_CTRL_M7STBY                                  ((uint32_t)0x00000020U)         /* Bit[5] */
#define DBG_CTRL_M7STOP                                  ((uint32_t)0x00000010U)         /* Bit[4] */
#define DBG_CTRL_M7SLEEP                                 ((uint32_t)0x00000008U)         /* Bit[3] */
#define DBG_CTRL_M4STBY                                  ((uint32_t)0x00000004U)         /* Bit[2] */
#define DBG_CTRL_M4STOP                                  ((uint32_t)0x00000002U)         /* Bit[1] */
#define DBG_CTRL_M4SLEEP                                 ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for DBG_M7APB1FZ register  ********/
#define DBG_M7APB1FZ_CANFD5_STOP                             ((uint32_t)0x00040000U)         /* Bit18*/
#define DBG_M7APB1FZ_CANFD4_STOP                             ((uint32_t)0x00020000U)         /* Bit17*/
#define DBG_M7APB1FZ_CANFD2_STOP                             ((uint32_t)0x00010000U)         /* Bit16*/
#define DBG_M7APB1FZ_CANFD1_STOP                             ((uint32_t)0x00008000U)         /* Bit15*/
#define DBG_M7APB1FZ_WWDG2_STOP                              ((uint32_t)0x00004000U)         /* Bit14 */
#define DBG_M7APB1FZ_I2C3_STOP                               ((uint32_t)0x00002000U)         /* Bit13*/
#define DBG_M7APB1FZ_I2C2_STOP                               ((uint32_t)0x00001000U)         /* Bit12*/
#define DBG_M7APB1FZ_I2C1_STOP                               ((uint32_t)0x00000800U)         /* Bit11*/
#define DBG_M7APB1FZ_GTIMB3_STOP                             ((uint32_t)0x00000400U)         /* Bit10*/
#define DBG_M7APB1FZ_GTIMB2_STOP                             ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_M7APB1FZ_GTIMB1_STOP                             ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_M7APB1FZ_GTIMA7_STOP                             ((uint32_t)0x00000080U)         /* Bit7*/
#define DBG_M7APB1FZ_GTIMA6_STOP                             ((uint32_t)0x00000040U)         /* Bit6*/
#define DBG_M7APB1FZ_GTIMA5_STOP                             ((uint32_t)0x00000020U)         /* Bit5*/
#define DBG_M7APB1FZ_GTIMA4_STOP                             ((uint32_t)0x00000010U)         /* Bit4*/
#define DBG_M7APB1FZ_BTIM4_STOP                              ((uint32_t)0x00000008U)         /* Bit3*/
#define DBG_M7APB1FZ_BTIM3_STOP                              ((uint32_t)0x00000004U)         /* Bit2*/
#define DBG_M7APB1FZ_BTIM2_STOP                              ((uint32_t)0x00000002U)         /* Bit1*/
#define DBG_M7APB1FZ_BTIM1_STOP                              ((uint32_t)0x00000001U)         /* Bit0*/

/******** Bit definition for DBG_M4APB1FZ register  ********/
#define DBG_M4APB1FZ_CANFD5_STOP                             ((uint32_t)0x00040000U)         /* Bit18*/
#define DBG_M4APB1FZ_CANFD4_STOP                             ((uint32_t)0x00020000U)         /* Bit17*/
#define DBG_M4APB1FZ_CANFD2_STOP                             ((uint32_t)0x00010000U)         /* Bit16*/
#define DBG_M4APB1FZ_CANFD1_STOP                             ((uint32_t)0x00008000U)         /* Bit15*/
#define DBG_M4APB1FZ_WWDG2_STOP                              ((uint32_t)0x00004000U)         /* Bit14 */
#define DBG_M4APB1FZ_I2C3_STOP                               ((uint32_t)0x00002000U)         /* Bit13*/
#define DBG_M4APB1FZ_I2C2_STOP                               ((uint32_t)0x00001000U)         /* Bit12*/
#define DBG_M4APB1FZ_I2C1_STOP                               ((uint32_t)0x00000800U)         /* Bit11*/
#define DBG_M4APB1FZ_GTIMB3_STOP                             ((uint32_t)0x00000400U)         /* Bit10*/
#define DBG_M4APB1FZ_GTIMB2_STOP                             ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_M4APB1FZ_GTIMB1_STOP                             ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_M4APB1FZ_GTIMA7_STOP                             ((uint32_t)0x00000080U)         /* Bit7*/
#define DBG_M4APB1FZ_GTIMA6_STOP                             ((uint32_t)0x00000040U)         /* Bit6*/
#define DBG_M4APB1FZ_GTIMA5_STOP                             ((uint32_t)0x00000020U)         /* Bit5*/
#define DBG_M4APB1FZ_GTIMA4_STOP                             ((uint32_t)0x00000010U)         /* Bit4*/
#define DBG_M4APB1FZ_BTIM4_STOP                              ((uint32_t)0x00000008U)         /* Bit3*/
#define DBG_M4APB1FZ_BTIM3_STOP                              ((uint32_t)0x00000004U)         /* Bit2*/
#define DBG_M4APB1FZ_BTIM2_STOP                              ((uint32_t)0x00000002U)         /* Bit1*/
#define DBG_M4APB1FZ_BTIM1_STOP                              ((uint32_t)0x00000001U)         /* Bit0*/

/******** Bit definition for DBG_M7APB2FZ register  ********/
#define DBG_M7APB2FZ_CANFD8_STOP                             ((uint32_t)0x00002000U)         /* Bit13*/
#define DBG_M7APB2FZ_CANFD7_STOP                             ((uint32_t)0x00001000U)         /* Bit12*/
#define DBG_M7APB2FZ_CANFD4_STOP                             ((uint32_t)0x00000800U)         /* Bit11*/
#define DBG_M7APB2FZ_CANFD3_STOP                             ((uint32_t)0x00000400U)         /* Bit10*/
#define DBG_M7APB2FZ_I2C6_STOP                               ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_M7APB2FZ_I2C5_STOP                               ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_M7APB2FZ_I2C4_STOP                               ((uint32_t)0x00000080U)         /* Bit7*/
#define DBG_M7APB2FZ_ATIM2_STOP                              ((uint32_t)0x00000040U)         /* Bit6*/
#define DBG_M7APB2FZ_ATIM1_STOP                              ((uint32_t)0x00000020U)         /* Bit5*/
#define DBG_M7APB2FZ_GTIMA3_STOP                             ((uint32_t)0x00000010U)         /* Bit4*/
#define DBG_M7APB2FZ_GTIMA2_STOP                             ((uint32_t)0x00000008U)         /* Bit3*/
#define DBG_M7APB2FZ_GTIMA1_STOP                             ((uint32_t)0x00000004U)         /* Bit2*/
#define DBG_M7APB2FZ_SHRTIM2_STOP                            ((uint32_t)0x00000002U)         /* Bit1*/
#define DBG_M7APB2FZ_SHRTIM1_STOP                            ((uint32_t)0x00000001U)         /* Bit0*/
/******** Bit definition for DBG_M4APB2FZ register  ********/
#define DBG_M4APB2FZ_CANFD8_STOP                             ((uint32_t)0x00002000U)         /* Bit13*/
#define DBG_M4APB2FZ_CANFD7_STOP                             ((uint32_t)0x00001000U)         /* Bit12*/
#define DBG_M4APB2FZ_CANFD4_STOP                             ((uint32_t)0x00000800U)         /* Bit11*/
#define DBG_M4APB2FZ_CANFD3_STOP                             ((uint32_t)0x00000400U)         /* Bit10*/
#define DBG_M4APB2FZ_I2C6_STOP                               ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_M4APB2FZ_I2C5_STOP                               ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_M4APB2FZ_I2C4_STOP                               ((uint32_t)0x00000080U)         /* Bit7*/
#define DBG_M4APB2FZ_ATIM2_STOP                              ((uint32_t)0x00000040U)         /* Bit6*/
#define DBG_M4APB2FZ_ATIM1_STOP                              ((uint32_t)0x00000020U)         /* Bit5*/
#define DBG_M4APB2FZ_GTIMA3_STOP                             ((uint32_t)0x00000010U)         /* Bit4*/
#define DBG_M4APB2FZ_GTIMA2_STOP                             ((uint32_t)0x00000008U)         /* Bit3*/
#define DBG_M4APB2FZ_GTIMA1_STOP                             ((uint32_t)0x00000004U)         /* Bit2*/
#define DBG_M4APB2FZ_SHRTIM2_STOP                            ((uint32_t)0x00000002U)         /* Bit1*/
#define DBG_M4APB2FZ_SHRTIM1_STOP                            ((uint32_t)0x00000001U)         /* Bit0*/

/******** Bit definition for DBG_M7APB5FZ register  ********/
#define DBG_M7APB5FZ_RTC_STOP                                ((uint32_t)0x00002000U)         /* Bit13 */
#define DBG_M7APB5FZ_LPTIM5_STOP                             ((uint32_t)0x00001000U)         /* Bit12*/
#define DBG_M7APB5FZ_LPTIM4_STOP                             ((uint32_t)0x00000800U)         /* Bit11*/
#define DBG_M7APB5FZ_LPTIM3_STOP                             ((uint32_t)0x00000400U)         /* Bit10*/
#define DBG_M7APB5FZ_LPTIM2_STOP                             ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_M7APB5FZ_LPTIM1_STOP                             ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_M7APB5FZ_IWDG2_STOP                              ((uint32_t)0x00000080U)         /* Bit7*/
#define DBG_M7APB5FZ_IWDG1_STOP                              ((uint32_t)0x00000040U)         /* Bit6*/
#define DBG_M7APB5FZ_I2C10_STOP                              ((uint32_t)0x00000020U)         /* Bit5*/
#define DBG_M7APB5FZ_I2C9_STOP                               ((uint32_t)0x00000010U)         /* Bit4*/
#define DBG_M7APB5FZ_I2C8_STOP                               ((uint32_t)0x00000008U)         /* Bit3*/
#define DBG_M7APB5FZ_I2C7_STOP                               ((uint32_t)0x00000004U)         /* Bit2*/
#define DBG_M7APB5FZ_ATIM4_STOP                              ((uint32_t)0x00000002U)         /* Bit1*/
#define DBG_M7APB5FZ_ATIM3_STOP                              ((uint32_t)0x00000001U)         /* Bit0*/

/******** Bit definition for DBG_M4APB5FZ register  ********/
#define DBG_M4APB5FZ_RTC_STOP                                ((uint32_t)0x00002000U)         /* Bit13 */
#define DBG_M4APB5FZ_LPTIM5_STOP                             ((uint32_t)0x00001000U)         /* Bit12*/
#define DBG_M4APB5FZ_LPTIM4_STOP                             ((uint32_t)0x00000800U)         /* Bit11*/
#define DBG_M4APB5FZ_LPTIM3_STOP                             ((uint32_t)0x00000400U)         /* Bit10*/
#define DBG_M4APB5FZ_LPTIM2_STOP                             ((uint32_t)0x00000200U)         /* Bit9*/
#define DBG_M4APB5FZ_LPTIM1_STOP                             ((uint32_t)0x00000100U)         /* Bit8*/
#define DBG_M4APB5FZ_IWDG2_STOP                              ((uint32_t)0x00000080U)         /* Bit7*/
#define DBG_M4APB5FZ_IWDG1_STOP                              ((uint32_t)0x00000040U)         /* Bit6*/
#define DBG_M4APB5FZ_I2C10_STOP                              ((uint32_t)0x00000020U)         /* Bit5*/
#define DBG_M4APB5FZ_I2C9_STOP                               ((uint32_t)0x00000010U)         /* Bit4*/
#define DBG_M4APB5FZ_I2C8_STOP                               ((uint32_t)0x00000008U)         /* Bit3*/
#define DBG_M4APB5FZ_I2C7_STOP                               ((uint32_t)0x00000004U)         /* Bit2*/
#define DBG_M4APB5FZ_ATIM4_STOP                              ((uint32_t)0x00000002U)         /* Bit1*/
#define DBG_M4APB5FZ_ATIM3_STOP                              ((uint32_t)0x00000001U)         /* Bit0*/

/******** Bit definition for DBG_M7APB6FZ register  ********/
#define DBG_M7APB6FZ_WWDG1_STOP                              ((uint32_t)0x00000001U)         /* Bit[0] */

/******** Bit definition for DBG_M4APB6FZ register  ********/
#define DBG_M4APB6FZ_WWDG1_STOP                              ((uint32_t)0x00000001U)         /* Bit[0] */


/******** ECCMON Module ********/
/******** Bit definition for ECCMON_CTRL1 register  ********/
#define ECCMON_CTRL1_E2INTEN6                                ((uint32_t)0x20000000)         /* Bit[29] */
#define ECCMON_CTRL1_E2INTEN5                                ((uint32_t)0x10000000)         /* Bit[28] */
#define ECCMON_CTRL1_E2INTEN4                                ((uint32_t)0x08000000)         /* Bit[27] */
#define ECCMON_CTRL1_E2INTEN3                                ((uint32_t)0x04000000)         /* Bit[26] */
#define ECCMON_CTRL1_E2INTEN2                                ((uint32_t)0x02000000)         /* Bit[25] */
#define ECCMON_CTRL1_E2INTEN1                                ((uint32_t)0x01000000)         /* Bit[24] */
#define ECCMON_CTRL1_E1INTEN6                                ((uint32_t)0x00200000)         /* Bit[21] */
#define ECCMON_CTRL1_E1INTEN5                                ((uint32_t)0x00100000)         /* Bit[20] */
#define ECCMON_CTRL1_E1INTEN4                                ((uint32_t)0x00080000)         /* Bit[19] */
#define ECCMON_CTRL1_E1INTEN3                                ((uint32_t)0x00040000)         /* Bit[18] */
#define ECCMON_CTRL1_E1INTEN2                                ((uint32_t)0x00020000)         /* Bit[17] */
#define ECCMON_CTRL1_E1INTEN1                                ((uint32_t)0x00010000)         /* Bit[16] */
#define ECCMON_CTRL1_TDRBYP6                                 ((uint32_t)0x00002000)         /* Bit[13] */
#define ECCMON_CTRL1_TDRBYP5                                 ((uint32_t)0x00001000)         /* Bit[12] */
#define ECCMON_CTRL1_TDRBYP4                                 ((uint32_t)0x00000800)         /* Bit[11] */
#define ECCMON_CTRL1_TDRBYP3                                 ((uint32_t)0x00000400)         /* Bit[10] */
#define ECCMON_CTRL1_TDRBYP2                                 ((uint32_t)0x00000200)         /* Bit[9] */
#define ECCMON_CTRL1_TDRBYP1                                 ((uint32_t)0x00000100)         /* Bit[8] */
#define ECCMON_CTRL1_ECCEN6                                  ((uint32_t)0x00000020)         /* Bit[5] */
#define ECCMON_CTRL1_ECCEN5                                  ((uint32_t)0x00000010)         /* Bit[4] */
#define ECCMON_CTRL1_ECCEN4                                  ((uint32_t)0x00000008)         /* Bit[3] */
#define ECCMON_CTRL1_ECCEN3                                  ((uint32_t)0x00000004)         /* Bit[2] */
#define ECCMON_CTRL1_ECCEN2                                  ((uint32_t)0x00000002)         /* Bit[1] */
#define ECCMON_CTRL1_ECCEN1                                  ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for ECCMON_CTRL2 register  ********/
#define ECCMON_CTRL2_E2FOEN6                                 ((uint32_t)0x20000000)         /* Bit[29] */
#define ECCMON_CTRL2_E2FOEN5                                 ((uint32_t)0x10000000)         /* Bit[28] */
#define ECCMON_CTRL2_E2FOEN4                                 ((uint32_t)0x08000000)         /* Bit[27] */
#define ECCMON_CTRL2_E2FOEN3                                 ((uint32_t)0x04000000)         /* Bit[26] */
#define ECCMON_CTRL2_E2FOEN2                                 ((uint32_t)0x02000000)         /* Bit[25] */
#define ECCMON_CTRL2_E2FOEN1                                 ((uint32_t)0x01000000)         /* Bit[24] */
#define ECCMON_CTRL2_E1FOEN6                                 ((uint32_t)0x00200000)         /* Bit[21] */
#define ECCMON_CTRL2_E1FOEN5                                 ((uint32_t)0x00100000)         /* Bit[20] */
#define ECCMON_CTRL2_E1FOEN4                                 ((uint32_t)0x00080000)         /* Bit[19] */
#define ECCMON_CTRL2_E1FOEN3                                 ((uint32_t)0x00040000)         /* Bit[18] */
#define ECCMON_CTRL2_E1FOEN2                                 ((uint32_t)0x00020000)         /* Bit[17] */
#define ECCMON_CTRL2_E1FOEN1                                 ((uint32_t)0x00010000)         /* Bit[16] */
#define ECCMON_CTRL2_WROE2EN6                                ((uint32_t)0x00000020)         /* Bit[5] */
#define ECCMON_CTRL2_WROE2EN5                                ((uint32_t)0x00000010)         /* Bit[4] */
#define ECCMON_CTRL2_WROE2EN4                                ((uint32_t)0x00000008)         /* Bit[3] */
#define ECCMON_CTRL2_WROE2EN3                                ((uint32_t)0x00000004)         /* Bit[2] */
#define ECCMON_CTRL2_WROE2EN2                                ((uint32_t)0x00000002)         /* Bit[1] */
#define ECCMON_CTRL2_WROE2EN1                                ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for ECCMON_EINJ register  ********/
#define ECCMON_EINJ_ECSEL6                                  ((uint32_t)0x0C000000)         /* Bit[27:26] */
#define ECCMON_EINJ_ECSEL6_0                                ((uint32_t)0x04000000)         /* Bit26*/
#define ECCMON_EINJ_ECSEL6_1                                ((uint32_t)0x08000000)         /* Bit27*/
#define ECCMON_EINJ_ECSEL5                                  ((uint32_t)0x03000000)         /* Bit[25:24] */
#define ECCMON_EINJ_ECSEL5_0                                ((uint32_t)0x01000000)         /* Bit24*/
#define ECCMON_EINJ_ECSEL5_1                                ((uint32_t)0x02000000)         /* Bit25*/
#define ECCMON_EINJ_ECSEL4                                  ((uint32_t)0x00C00000)         /* Bit[23:22] */
#define ECCMON_EINJ_ECSEL4_0                                ((uint32_t)0x00400000)         /* Bit22*/
#define ECCMON_EINJ_ECSEL4_1                                ((uint32_t)0x00800000)         /* Bit23*/
#define ECCMON_EINJ_ECSEL3                                  ((uint32_t)0x00300000)         /* Bit[21:20] */
#define ECCMON_EINJ_ECSEL3_0                                ((uint32_t)0x00100000)         /* Bit20*/
#define ECCMON_EINJ_ECSEL3_1                                ((uint32_t)0x00200000)         /* Bit21*/
#define ECCMON_EINJ_ECSEL2                                  ((uint32_t)0x000C0000)         /* Bit[19:18] */
#define ECCMON_EINJ_ECSEL2_0                                ((uint32_t)0x00040000)         /* Bit18*/
#define ECCMON_EINJ_ECSEL2_1                                ((uint32_t)0x00080000)         /* Bit19*/
#define ECCMON_EINJ_ECSEL1                                  ((uint32_t)0x00030000)         /* Bit[17:16] */
#define ECCMON_EINJ_ECSEL1_0                                ((uint32_t)0x00010000)         /* Bit16*/
#define ECCMON_EINJ_ECSEL1_1                                ((uint32_t)0x00020000)         /* Bit17*/
#define ECCMON_EINJ_ERICTR6                                 ((uint32_t)0x00000C00)         /* Bit[11:10] */
#define ECCMON_EINJ_ERICTR6_0                               ((uint32_t)0x00000400)         /* Bit10*/
#define ECCMON_EINJ_ERICTR6_1                               ((uint32_t)0x00000800)         /* Bit11*/
#define ECCMON_EINJ_ERICTR5                                 ((uint32_t)0x00000300)         /* Bit[9:8] */
#define ECCMON_EINJ_ERICTR5_0                               ((uint32_t)0x00000100)         /* Bit8*/
#define ECCMON_EINJ_ERICTR5_1                               ((uint32_t)0x00000200)         /* Bit9*/
#define ECCMON_EINJ_ERICTR4                                 ((uint32_t)0x000000C0)         /* Bit[7:6] */
#define ECCMON_EINJ_ERICTR4_0                               ((uint32_t)0x00000040)         /* Bit6*/
#define ECCMON_EINJ_ERICTR4_1                               ((uint32_t)0x00000080)         /* Bit7*/
#define ECCMON_EINJ_ERICTR3                                 ((uint32_t)0x00000030)         /* Bit[5:4] */
#define ECCMON_EINJ_ERICTR3_0                               ((uint32_t)0x00000010)         /* Bit4*/
#define ECCMON_EINJ_ERICTR3_1                               ((uint32_t)0x00000020)         /* Bit5*/
#define ECCMON_EINJ_ERICTR2                                 ((uint32_t)0x0000000C)         /* Bit[3:2] */
#define ECCMON_EINJ_ERICTR2_0                               ((uint32_t)0x00000004)         /* Bit2*/
#define ECCMON_EINJ_ERICTR2_1                               ((uint32_t)0x00000008)         /* Bit3*/
#define ECCMON_EINJ_ERICTR1                                 ((uint32_t)0x00000003)         /* Bit[1:0] */
#define ECCMON_EINJ_ERICTR1_0                               ((uint32_t)0x00000001)         /* Bit0*/
#define ECCMON_EINJ_ERICTR1_1                               ((uint32_t)0x00000002)         /* Bit1*/

/******** Bit definition for ECCMON_INTFS register  ********/
#define ECCMON_INTFS_E2DCIF6                                 ((uint32_t)0x00200000)         /* Bit[21] */
#define ECCMON_INTFS_E2DCIF5                                 ((uint32_t)0x00100000)         /* Bit[20] */
#define ECCMON_INTFS_E2DCIF4                                 ((uint32_t)0x00080000)         /* Bit[19] */
#define ECCMON_INTFS_E2DCIF3                                 ((uint32_t)0x00040000)         /* Bit[18] */
#define ECCMON_INTFS_E2DCIF2                                 ((uint32_t)0x00020000)         /* Bit[17] */
#define ECCMON_INTFS_E2DCIF1                                 ((uint32_t)0x00010000)         /* Bit[16] */
#define ECCMON_INTFS_E1DCIF6                                 ((uint32_t)0x00000020)         /* Bit[5] */
#define ECCMON_INTFS_E1DCIF5                                 ((uint32_t)0x00000010)         /* Bit[4] */
#define ECCMON_INTFS_E1DCIF4                                 ((uint32_t)0x00000008)         /* Bit[3] */
#define ECCMON_INTFS_E1DCIF3                                 ((uint32_t)0x00000004)         /* Bit[2] */
#define ECCMON_INTFS_E1DCIF2                                 ((uint32_t)0x00000002)         /* Bit[1] */
#define ECCMON_INTFS_E1DCIF1                                 ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for ECCMON_INTF1 register  ********/
#define ECCMON_INTF1_E2DCIFR                                 ((uint32_t)0x00000008)         /* Bit[3] */
#define ECCMON_INTF1_E1DCIFR                                 ((uint32_t)0x00000004)         /* Bit[2] */
#define ECCMON_INTF1_E2DCIFW                                 ((uint32_t)0x00000002)         /* Bit[1] */
#define ECCMON_INTF1_E1DCIFW                                 ((uint32_t)0x00000001)         /* Bit[0] */

/******** Bit definition for ECCMON_FEADR1 register  ********/
#define ECCMON_FEADR1_E2EAD                                   ((uint32_t)0x80000000)         /* Bit[31] */
#define ECCMON_FEADR1_E1EAD                                   ((uint32_t)0x40000000)         /* Bit[30] */
#define ECCMON_FEADR1_EER                                     ((uint32_t)0x20000000)         /* Bit[29] */
#define ECCMON_FEADR1_EEW                                     ((uint32_t)0x10000000)         /* Bit[28] */
#define ECCMON_FEADR1_EFADR                                   ((uint32_t)0x0FFFFFFF)         /* Bit[27:0] */
#define ECCMON_FEADR1_EFADR_0                                 ((uint32_t)0x00000001)         /* Bit0*/
#define ECCMON_FEADR1_EFADR_1                                 ((uint32_t)0x00000002)         /* Bit1*/
#define ECCMON_FEADR1_EFADR_2                                 ((uint32_t)0x00000004)         /* Bit2*/
#define ECCMON_FEADR1_EFADR_3                                 ((uint32_t)0x00000008)         /* Bit3*/
#define ECCMON_FEADR1_EFADR_4                                 ((uint32_t)0x00000010)         /* Bit4*/
#define ECCMON_FEADR1_EFADR_5                                 ((uint32_t)0x00000020)         /* Bit5*/
#define ECCMON_FEADR1_EFADR_6                                 ((uint32_t)0x00000040)         /* Bit6*/
#define ECCMON_FEADR1_EFADR_7                                 ((uint32_t)0x00000080)         /* Bit7*/
#define ECCMON_FEADR1_EFADR_8                                 ((uint32_t)0x00000100)         /* Bit8*/
#define ECCMON_FEADR1_EFADR_9                                 ((uint32_t)0x00000200)         /* Bit9*/
#define ECCMON_FEADR1_EFADR_10                                ((uint32_t)0x00000400)         /* Bit10*/
#define ECCMON_FEADR1_EFADR_11                                ((uint32_t)0x00000800)         /* Bit11*/
#define ECCMON_FEADR1_EFADR_12                                ((uint32_t)0x00001000)         /* Bit12*/
#define ECCMON_FEADR1_EFADR_13                                ((uint32_t)0x00002000)         /* Bit13*/
#define ECCMON_FEADR1_EFADR_14                                ((uint32_t)0x00004000)         /* Bit14*/
#define ECCMON_FEADR1_EFADR_15                                ((uint32_t)0x00008000)         /* Bit15*/
#define ECCMON_FEADR1_EFADR_16                                ((uint32_t)0x00010000)         /* Bit16*/
#define ECCMON_FEADR1_EFADR_17                                ((uint32_t)0x00020000)         /* Bit17*/
#define ECCMON_FEADR1_EFADR_18                                ((uint32_t)0x00040000)         /* Bit18*/
#define ECCMON_FEADR1_EFADR_19                                ((uint32_t)0x00080000)         /* Bit19*/
#define ECCMON_FEADR1_EFADR_20                                ((uint32_t)0x00100000)         /* Bit20*/
#define ECCMON_FEADR1_EFADR_21                                ((uint32_t)0x00200000)         /* Bit21*/
#define ECCMON_FEADR1_EFADR_22                                ((uint32_t)0x00400000)         /* Bit22*/
#define ECCMON_FEADR1_EFADR_23                                ((uint32_t)0x00800000)         /* Bit23*/
#define ECCMON_FEADR1_EFADR_24                                ((uint32_t)0x01000000)         /* Bit24*/
#define ECCMON_FEADR1_EFADR_25                                ((uint32_t)0x02000000)         /* Bit25*/
#define ECCMON_FEADR1_EFADR_26                                ((uint32_t)0x04000000)         /* Bit26*/
#define ECCMON_FEADR1_EFADR_27                                ((uint32_t)0x08000000)         /* Bit27*/

/******** Bit definition for ECCMON_FEDATL1 register  ********/
#define ECCMON_FEDATL1_ERDATL                                  ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define ECCMON_FEDATL1_ERDATL_0                                ((uint32_t)0x00000001)         /* Bit0*/
#define ECCMON_FEDATL1_ERDATL_1                                ((uint32_t)0x00000002)         /* Bit1*/
#define ECCMON_FEDATL1_ERDATL_2                                ((uint32_t)0x00000004)         /* Bit2*/
#define ECCMON_FEDATL1_ERDATL_3                                ((uint32_t)0x00000008)         /* Bit3*/
#define ECCMON_FEDATL1_ERDATL_4                                ((uint32_t)0x00000010)         /* Bit4*/
#define ECCMON_FEDATL1_ERDATL_5                                ((uint32_t)0x00000020)         /* Bit5*/
#define ECCMON_FEDATL1_ERDATL_6                                ((uint32_t)0x00000040)         /* Bit6*/
#define ECCMON_FEDATL1_ERDATL_7                                ((uint32_t)0x00000080)         /* Bit7*/
#define ECCMON_FEDATL1_ERDATL_8                                ((uint32_t)0x00000100)         /* Bit8*/
#define ECCMON_FEDATL1_ERDATL_9                                ((uint32_t)0x00000200)         /* Bit9*/
#define ECCMON_FEDATL1_ERDATL_10                               ((uint32_t)0x00000400)         /* Bit10*/
#define ECCMON_FEDATL1_ERDATL_11                               ((uint32_t)0x00000800)         /* Bit11*/
#define ECCMON_FEDATL1_ERDATL_12                               ((uint32_t)0x00001000)         /* Bit12*/
#define ECCMON_FEDATL1_ERDATL_13                               ((uint32_t)0x00002000)         /* Bit13*/
#define ECCMON_FEDATL1_ERDATL_14                               ((uint32_t)0x00004000)         /* Bit14*/
#define ECCMON_FEDATL1_ERDATL_15                               ((uint32_t)0x00008000)         /* Bit15*/
#define ECCMON_FEDATL1_ERDATL_16                               ((uint32_t)0x00010000)         /* Bit16*/
#define ECCMON_FEDATL1_ERDATL_17                               ((uint32_t)0x00020000)         /* Bit17*/
#define ECCMON_FEDATL1_ERDATL_18                               ((uint32_t)0x00040000)         /* Bit18*/
#define ECCMON_FEDATL1_ERDATL_19                               ((uint32_t)0x00080000)         /* Bit19*/
#define ECCMON_FEDATL1_ERDATL_20                               ((uint32_t)0x00100000)         /* Bit20*/
#define ECCMON_FEDATL1_ERDATL_21                               ((uint32_t)0x00200000)         /* Bit21*/
#define ECCMON_FEDATL1_ERDATL_22                               ((uint32_t)0x00400000)         /* Bit22*/
#define ECCMON_FEDATL1_ERDATL_23                               ((uint32_t)0x00800000)         /* Bit23*/
#define ECCMON_FEDATL1_ERDATL_24                               ((uint32_t)0x01000000)         /* Bit24*/
#define ECCMON_FEDATL1_ERDATL_25                               ((uint32_t)0x02000000)         /* Bit25*/
#define ECCMON_FEDATL1_ERDATL_26                               ((uint32_t)0x04000000)         /* Bit26*/
#define ECCMON_FEDATL1_ERDATL_27                               ((uint32_t)0x08000000)         /* Bit27*/
#define ECCMON_FEDATL1_ERDATL_28                               ((uint32_t)0x10000000)         /* Bit28*/
#define ECCMON_FEDATL1_ERDATL_29                               ((uint32_t)0x20000000)         /* Bit29*/
#define ECCMON_FEDATL1_ERDATL_30                               ((uint32_t)0x40000000)         /* Bit30*/
#define ECCMON_FEDATL1_ERDATL_31                               ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for ECCMON_FEDATH1 register  ********/
#define ECCMON_FEDATH1_ERDATH                                  ((uint32_t)0xFFFFFFFF)         /* Bit[31:0] */
#define ECCMON_FEDATH1_ERDATH_0                                ((uint32_t)0x00000001)         /* Bit0*/
#define ECCMON_FEDATH1_ERDATH_1                                ((uint32_t)0x00000002)         /* Bit1*/
#define ECCMON_FEDATH1_ERDATH_2                                ((uint32_t)0x00000004)         /* Bit2*/
#define ECCMON_FEDATH1_ERDATH_3                                ((uint32_t)0x00000008)         /* Bit3*/
#define ECCMON_FEDATH1_ERDATH_4                                ((uint32_t)0x00000010)         /* Bit4*/
#define ECCMON_FEDATH1_ERDATH_5                                ((uint32_t)0x00000020)         /* Bit5*/
#define ECCMON_FEDATH1_ERDATH_6                                ((uint32_t)0x00000040)         /* Bit6*/
#define ECCMON_FEDATH1_ERDATH_7                                ((uint32_t)0x00000080)         /* Bit7*/
#define ECCMON_FEDATH1_ERDATH_8                                ((uint32_t)0x00000100)         /* Bit8*/
#define ECCMON_FEDATH1_ERDATH_9                                ((uint32_t)0x00000200)         /* Bit9*/
#define ECCMON_FEDATH1_ERDATH_10                               ((uint32_t)0x00000400)         /* Bit10*/
#define ECCMON_FEDATH1_ERDATH_11                               ((uint32_t)0x00000800)         /* Bit11*/
#define ECCMON_FEDATH1_ERDATH_12                               ((uint32_t)0x00001000)         /* Bit12*/
#define ECCMON_FEDATH1_ERDATH_13                               ((uint32_t)0x00002000)         /* Bit13*/
#define ECCMON_FEDATH1_ERDATH_14                               ((uint32_t)0x00004000)         /* Bit14*/
#define ECCMON_FEDATH1_ERDATH_15                               ((uint32_t)0x00008000)         /* Bit15*/
#define ECCMON_FEDATH1_ERDATH_16                               ((uint32_t)0x00010000)         /* Bit16*/
#define ECCMON_FEDATH1_ERDATH_17                               ((uint32_t)0x00020000)         /* Bit17*/
#define ECCMON_FEDATH1_ERDATH_18                               ((uint32_t)0x00040000)         /* Bit18*/
#define ECCMON_FEDATH1_ERDATH_19                               ((uint32_t)0x00080000)         /* Bit19*/
#define ECCMON_FEDATH1_ERDATH_20                               ((uint32_t)0x00100000)         /* Bit20*/
#define ECCMON_FEDATH1_ERDATH_21                               ((uint32_t)0x00200000)         /* Bit21*/
#define ECCMON_FEDATH1_ERDATH_22                               ((uint32_t)0x00400000)         /* Bit22*/
#define ECCMON_FEDATH1_ERDATH_23                               ((uint32_t)0x00800000)         /* Bit23*/
#define ECCMON_FEDATH1_ERDATH_24                               ((uint32_t)0x01000000)         /* Bit24*/
#define ECCMON_FEDATH1_ERDATH_25                               ((uint32_t)0x02000000)         /* Bit25*/
#define ECCMON_FEDATH1_ERDATH_26                               ((uint32_t)0x04000000)         /* Bit26*/
#define ECCMON_FEDATH1_ERDATH_27                               ((uint32_t)0x08000000)         /* Bit27*/
#define ECCMON_FEDATH1_ERDATH_28                               ((uint32_t)0x10000000)         /* Bit28*/
#define ECCMON_FEDATH1_ERDATH_29                               ((uint32_t)0x20000000)         /* Bit29*/
#define ECCMON_FEDATH1_ERDATH_30                               ((uint32_t)0x40000000)         /* Bit30*/
#define ECCMON_FEDATH1_ERDATH_31                               ((uint32_t)0x80000000)         /* Bit31*/

/******** Bit definition for ECCMON_FECOD1 register  ********/
#define ECCMON_FECOD1_ERCOD                                   ((uint32_t)0x0000007F)         /* Bit[6:0] */
#define ECCMON_FECOD1_ERCOD_0                                 ((uint32_t)0x00000001)         /* Bit0*/
#define ECCMON_FECOD1_ERCOD_1                                 ((uint32_t)0x00000002)         /* Bit1*/
#define ECCMON_FECOD1_ERCOD_2                                 ((uint32_t)0x00000004)         /* Bit2*/
#define ECCMON_FECOD1_ERCOD_3                                 ((uint32_t)0x00000008)         /* Bit3*/
#define ECCMON_FECOD1_ERCOD_4                                 ((uint32_t)0x00000010)         /* Bit4*/
#define ECCMON_FECOD1_ERCOD_5                                 ((uint32_t)0x00000020)         /* Bit5*/
#define ECCMON_FECOD1_ERCOD_6                                 ((uint32_t)0x00000040)         /* Bit6*/

/*** OPTC register ***/
/** Bit definition for OTPC_CTRL register  **/
#define OTPC_CTRL_BEEN                                    ((uint32_t)0x00000040U)         /* Bit[6] Busy Error Interrupt Control */
#define OTPC_CTRL_OOREEN                                  ((uint32_t)0x00000020U)         /* Bit[5] Operate Over Region Error Interrupt Control */
#define OTPC_CTRL_RDPEEN                                  ((uint32_t)0x00000010U)         /* Bit[4] Read Protected Error Interrupt Control */
#define OTPC_CTRL_WRPEEN                                  ((uint32_t)0x00000008U)         /* Bit[3] Write Protected Error Interrupt Control */
#define OTPC_CTRL_PGEEN                                   ((uint32_t)0x00000004U)         /* Bit[2] Program Error Interrupt Control */
#define OTPC_CTRL_PRMD                                    ((uint32_t)0x00000002U)         /* Bit[1] Read or Write Control */
#define OTPC_CTRL_LOCK                                    ((uint32_t)0x00000001U)         /* Bit[0] Lock Control */

/** Bit definition for OTPC_STS register  **/
#define OTPC_STS_BE                                      ((uint32_t)0x00000040U)         /* Bit[6] Busy Error Flag */
#define OTPC_STS_OORE                                    ((uint32_t)0x00000020U)         /* Bit[5] Operate Over Region Error Flag */
#define OTPC_STS_RDPE                                    ((uint32_t)0x00000010U)         /* Bit[4] Read Protected Error Flag */
#define OTPC_STS_WRPE                                    ((uint32_t)0x00000008U)         /* Bit[3] Write Protected Error Flag */
#define OTPC_STS_PGE                                     ((uint32_t)0x00000004U)         /* Bit[2] Program Error Flag */
#define OTPC_STS_KEYE                                    ((uint32_t)0x00000002U)         /* Bit[1] Unlock Err Flag */
#define OTPC_STS_BUSY                                    ((uint32_t)0x00000001U)         /* Bit[0] Busy Flag */

/** Bit definition for OTPC_KEY register  **/
#define OTPC_KEY_KEY                                     ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Unlock Key */

/** Bit definition for OTPC_USC register  **/
#define OTPC_USC_VAL                                     ((uint32_t)0x000001FFU)         /* Bit[8:0] 1us Counter */


/** Bit definition for OTPC_ADDR register  **/
#define OTPC_ADDR_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Operate Address of the OTP */

/** Bit definition for OTPC_RDATA register  **/
#define OTPC_RDATA_DAT                                     ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Read Data */

/** Bit definition for OTPC_WDATA register  **/
#define OTPC_WDATA_DAT                                     ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Program Data */

/** Bit definition for OTPC_SECJVLD register  **/
#define OTPC_SECJVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] SEC_JTAG Multi-Copies Valid Tag */

/** Bit definition for OTPC_SECMDVLD register  **/
#define OTPC_SECMDVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] SEC_MODE Multi-Copies Valid Tag */

/** Bit definition for OTPC_RDP2PVLD register  **/
#define OTPC_RDP2PVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] RDP2_PROG Multi-Copies Valid Tag */

/** Bit definition for OTPC_BTMVLD register  **/
#define OTPC_BTMVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] BTM  Multi-Copies Valid Tag */

/** Bit definition for OTPC_BORVLD register  **/
#define OTPC_BORVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] BOR  Multi-Copies Valid Tag */

/** Bit definition for OTPC_IWDGVLD register  **/
#define OTPC_IWDGVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] IWDG Multi-Copies Valid Tag */


/** Bit definition for OTPC_TCMSZVLD register  **/
#define OTPC_TCMSZVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] TCM SIZE  Multi-Copies Valid Tag */

/** Bit definition for OTPC_JTAGKVLD register  **/
#define OTPC_JTAGKVLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] JTAG_KEY  Multi-Copies Valid Tag */

/** Bit definition for OTPC_REKU1VLD register  **/
#define OTPC_REKU1VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] REK_UNIT1 Multi-Copies Valid Tag */

/** Bit definition for OTPC_REKU2VLD register  **/
#define OTPC_REKU2VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] REK_UNIT2 Multi-Copies Valid Tag */

/** Bit definition for OTPC_REKU3VLD register  **/
#define OTPC_REKU3VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] REK_UNIT3 Multi-Copies Valid Tag */

/** Bit definition for OTPC_REKU4V register  **/
#define OTPC_REKU4VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] REK_UNIT4 Multi-Copies Valid Tag */

/** Bit definition for OTPC_IDKU1VLD register  **/
#define OTPC_IDKU1VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] IDK_UNIT1 Multi-Copies Valid Tag */

/** Bit definition for OTPC_IDKU2VLD register  **/
#define OTPC_IDKU2VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] IDK_UNIT2 Multi-Copies Valid Tag */

/** Bit definition for OTPC_IDKU3VLD register  **/
#define OTPC_IDKU3VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] IDK_UNIT3 Multi-Copies Valid Tag */

/** Bit definition for OTPC_IDKU4VLD register  **/
#define OTPC_IDKU4VLD_IDX                                     ((uint32_t)0x0000FFFFU)         /* Bit[15:0] IDK_UNIT4 Multi-Copies Valid Tag */


/** Bit definition for OTPC_UMUU0 register  **/
#define OTPC_UMUU0_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU1 register  **/
#define OTPC_UMUU1_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU2 register  **/
#define OTPC_UMUU2_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU3 register  **/
#define OTPC_UMUU3_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU4 register  **/
#define OTPC_UMUU4_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU5 register  **/
#define OTPC_UMUU5_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU6 register  **/
#define OTPC_UMUU6_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_UMUU7 register  **/
#define OTPC_UMUU7_UU                                      ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] User Memory Unused Flag */

/** Bit definition for OTPC_CRLD1 register  **/
#define OTPC_CRLD1_NRIWDG                                  ((uint32_t)0x3FFF0000U)         /* Bit[29:16] SYS_CFG_NRST_IWDG_OTP Payload Data */
#define OTPC_CRLD1_NRIWDG_0                                ((uint32_t)0x00010000U)         /* Bit16*/
#define OTPC_CRLD1_NRIWDG_1                                ((uint32_t)0x00020000U)         /* Bit17*/
#define OTPC_CRLD1_NRIWDG_2                                ((uint32_t)0x00040000U)         /* Bit18*/
#define OTPC_CRLD1_NRIWDG_3                                ((uint32_t)0x00080000U)         /* Bit19*/
#define OTPC_CRLD1_NRIWDG_4                                ((uint32_t)0x00100000U)         /* Bit20*/
#define OTPC_CRLD1_NRIWDG_5                                ((uint32_t)0x00200000U)         /* Bit21*/
#define OTPC_CRLD1_NRIWDG_6                                ((uint32_t)0x00400000U)         /* Bit22*/
#define OTPC_CRLD1_NRIWDG_7                                ((uint32_t)0x00800000U)         /* Bit23*/
#define OTPC_CRLD1_NRIWDG_8                                ((uint32_t)0x01000000U)         /* Bit24*/
#define OTPC_CRLD1_NRIWDG_9                                ((uint32_t)0x02000000U)         /* Bit25*/
#define OTPC_CRLD1_NRIWDG_10                               ((uint32_t)0x04000000U)         /* Bit26*/
#define OTPC_CRLD1_NRIWDG_11                               ((uint32_t)0x08000000U)         /* Bit27*/
#define OTPC_CRLD1_NRIWDG_12                               ((uint32_t)0x10000000U)         /* Bit28*/
#define OTPC_CRLD1_NRIWDG_13                               ((uint32_t)0x20000000U)         /* Bit29*/
#define OTPC_CRLD1_BOR                                     ((uint32_t)0x00007000U)         /* Bit[14:12] SYS_CFG_BOR_OTP Payload Data*/
#define OTPC_CRLD1_BOR_0                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define OTPC_CRLD1_BOR_1                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define OTPC_CRLD1_BOR_2                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define OTPC_CRLD1_SJAG                                    ((uint32_t)0x0000000FU)         /* Bit[3:0] SEC_JTAG_CFG_OTP Payload Data */
#define OTPC_CRLD1_SJAG_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define OTPC_CRLD1_SJAG_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define OTPC_CRLD1_SJAG_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define OTPC_CRLD1_SJAG_3                                  ((uint32_t)0x00000008U)         /* Bit3*/

/** Bit definition for OTPC_CRLD2 register  **/
#define OTPC_CRLD2_L2MD                                    ((uint32_t)0x00001000U)         /* Bit[12] L2_Mode State */
#define OTPC_CRLD2_L1MD                                    ((uint32_t)0x00000800U)         /* Bit[11] L1_Mode State */
#define OTPC_CRLD2_L0MD                                    ((uint32_t)0x00000400U)         /* Bit[10] L0_Mode State */
#define OTPC_CRLD2_ROOTMD                                  ((uint32_t)0x00000200U)         /* Bit[9] ROOT_Mode State */
#define OTPC_CRLD2_INITMD                                  ((uint32_t)0x00000100U)         /* Bit[8] INIT_MOde State */
#define OTPC_CRLD2_TCMSZ                                   ((uint32_t)0x0000003FU)         /* Bit[5:0] TCM_SZ_CFG_OTP Payload Data */
#define OTPC_CRLD2_TCMSZ_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define OTPC_CRLD2_TCMSZ_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define OTPC_CRLD2_TCMSZ_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define OTPC_CRLD2_TCMSZ_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define OTPC_CRLD2_TCMSZ_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define OTPC_CRLD2_TCMSZ_5                                 ((uint32_t)0x00000020U)         /* Bit5*/



/*** MMU register ***/
/** Bit definition for MMU_CTRL register  **/
#define MMU_CTRL_RSTE                                    ((uint32_t)0x00000002U)         /* Bit[1] Rest MMU*/
#define MMU_CTRL_INTE                                    ((uint32_t)0x00000001U)         /* Bit[0] MMU Interrupt Enable*/

/** Bit definition for MMU_STS register  **/
#define MMU_STS_XSPIL                                   ((uint32_t)0x04000000U)         /* Bit[26] XSP1 Configuration Lock Flag*/
#define MMU_STS_ITRDE                                   ((uint32_t)0x02000000U)         /* Bit[25] ITCM Read Error Flag*/
#define MMU_STS_ITWRE                                   ((uint32_t)0x01000000U)         /* Bit[24] ITCM Write Error Flag*/
#define MMU_STS_BKRDE                                   ((uint32_t)0x00800000U)         /* Bit[23] Back Sram Read Error Flag*/
#define MMU_STS_BKWRE                                   ((uint32_t)0x00400000U)         /* Bit[22] Back Sram Write Error Flag*/
#define MMU_STS_H5RDE                                   ((uint32_t)0x00200000U)         /* Bit[21] AHB SRAM5 Read Error Flag*/
#define MMU_STS_H5WRE                                   ((uint32_t)0x00100000U)         /* Bit[20] AHB SRAM5 Write Error Flag*/
#define MMU_STS_H4RDE                                   ((uint32_t)0x00080000U)         /* Bit[19] AHB SRAM4 Read Error Flag*/
#define MMU_STS_H4WRE                                   ((uint32_t)0x00040000U)         /* Bit[18] AHB SRAM4 Write Error Flag*/
#define MMU_STS_H3RDE                                   ((uint32_t)0x00020000U)         /* Bit[17] AHB SRAM3 Read Error Flag*/
#define MMU_STS_H3WRE                                   ((uint32_t)0x00010000U)         /* Bit[16] AHB SRAM3 Write Error Flag*/
#define MMU_STS_H2RDE                                   ((uint32_t)0x00008000U)         /* Bit[15] AHB SRAM2 Read Error Flag*/
#define MMU_STS_H2WRE                                   ((uint32_t)0x00004000U)         /* Bit[14] AHB SRAM2 Write Error Flag*/
#define MMU_STS_H1RDE                                   ((uint32_t)0x00002000U)         /* Bit[13] AHB SRAM1 Read Error Flag*/
#define MMU_STS_H1WRE                                   ((uint32_t)0x00001000U)         /* Bit[12] AHB SRAM1 Write Error Flag*/
#define MMU_STS_X3RDE                                   ((uint32_t)0x00000800U)         /* Bit[11] AXI SRAM3 Read Error Flag*/
#define MMU_STS_X3WRE                                   ((uint32_t)0x00000400U)         /* Bit[10] AXI SRAM3 Write Error Flag*/
#define MMU_STS_X2RDE                                   ((uint32_t)0x00000200U)         /* Bit[9] AXI SRAM2 Read Error Flag*/
#define MMU_STS_X2WRE                                   ((uint32_t)0x00000100U)         /* Bit[8] AXI SRAM2 Write Error Flag*/
#define MMU_STS_X1RDE                                   ((uint32_t)0x00000080U)         /* Bit[7] AXI SRAM1 Read Error Flag*/
#define MMU_STS_X1WRE                                   ((uint32_t)0x00000040U)         /* Bit[6] AXI SRAM1 Write Error Flag*/
#define MMU_STS_OBL                                     ((uint32_t)0x00000020U)         /* Bit[5] OB FLASH Lock*/
#define MMU_STS_FLASHL                                  ((uint32_t)0x00000010U)         /* Bit[4] Flash Lock Flag*/
#define MMU_STS_XSPIRDE                                 ((uint32_t)0x00000008U)         /* Bit[3] XSPI Read Error Flag*/

/** Bit definition for MMU_RTADC1~4 register  **/
#define MMU_RTADC_RPROPERTY                             ((uint32_t)0x000000C0U)         /* Region x Property */
#define MMU_RTADC_RPROPERTY_0                           ((uint32_t)0x00000040U)         /* Region x Property Bit0 */
#define MMU_RTADC_RPROPERTY_1                           ((uint32_t)0x00000080U)         /* Region x Property Bit1 */

#define MMU_RTADC_RMOD                                  ((uint32_t)0x00000030U)         /* RTAD mode for RTAD Region x */
#define MMU_RTADC_RMOD_0                                ((uint32_t)0x00000010U)         /* RTAD mode for RTAD Region x Bit0 */
#define MMU_RTADC_RMOD_1                                ((uint32_t)0x00000020U)         /* RTAD mode for RTAD Region x Bit1 */

#define MMU_RTADC_RKEYL                                 ((uint32_t)0x00000004U)         /* RTAD key lock for RTAD Region x */
#define MMU_RTADC_RCFGL                                 ((uint32_t)0x00000002U)         /* RTAD configuration lock for RTAD Region x */
#define MMU_RTADC_REN                                   ((uint32_t)0x00000001U)         /* RTAD Region x Enable */

/** Bit definition for MMU_RTKXPX register  **/
#define MMU_RTKXPX_KEY                                     ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] RegionX PartX Key*/
#define MMU_RTKXPX_KEY_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_RTKXPX_KEY_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_RTKXPX_KEY_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_RTKXPX_KEY_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_RTKXPX_KEY_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_RTKXPX_KEY_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_RTKXPX_KEY_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_RTKXPX_KEY_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_RTKXPX_KEY_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_RTKXPX_KEY_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_RTKXPX_KEY_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_RTKXPX_KEY_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_RTKXPX_KEY_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_RTKXPX_KEY_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_RTKXPX_KEY_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_RTKXPX_KEY_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_RTKXPX_KEY_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_RTKXPX_KEY_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_RTKXPX_KEY_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_RTKXPX_KEY_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_RTKXPX_KEY_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_RTKXPX_KEY_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_RTKXPX_KEY_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_RTKXPX_KEY_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_RTKXPX_KEY_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_RTKXPX_KEY_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_RTKXPX_KEY_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_RTKXPX_KEY_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_RTKXPX_KEY_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_RTKXPX_KEY_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_RTKXPX_KEY_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_RTKXPX_KEY_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_RTRX register  **/
#define MMU_RTRX_REND                                    ((uint32_t)0x1FFF0000U)         /* Bit[28:16] RTAD Region x END for RTAD Region x */
#define MMU_RTRX_RBEG                                    ((uint32_t)0x00001FFFU)         /* Bit[12:0] RTAD Region x BEGIN for RTAD Region x*/

/** Bit definition for MMU_RTCRC register  **/
#define MMU_RTCRC_CRC                                     ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] RTAD CRC Poly*/
#define MMU_RTCRC_CRC_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_RTCRC_CRC_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_RTCRC_CRC_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_RTCRC_CRC_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_RTCRC_CRC_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_RTCRC_CRC_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_RTCRC_CRC_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_RTCRC_CRC_7                                   ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_RTCRC_CRC_8                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_RTCRC_CRC_9                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_RTCRC_CRC_10                                  ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_RTCRC_CRC_11                                  ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_RTCRC_CRC_12                                  ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_RTCRC_CRC_13                                  ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_RTCRC_CRC_14                                  ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_RTCRC_CRC_15                                  ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_RTCRC_CRC_16                                  ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_RTCRC_CRC_17                                  ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_RTCRC_CRC_18                                  ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_RTCRC_CRC_19                                  ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_RTCRC_CRC_20                                  ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_RTCRC_CRC_21                                  ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_RTCRC_CRC_22                                  ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_RTCRC_CRC_23                                  ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_RTCRC_CRC_24                                  ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_RTCRC_CRC_25                                  ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_RTCRC_CRC_26                                  ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_RTCRC_CRC_27                                  ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_RTCRC_CRC_28                                  ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_RTCRC_CRC_29                                  ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_RTCRC_CRC_30                                  ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_RTCRC_CRC_31                                  ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_ETH1ME register  **/
#define MMU_ETH1ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] ETH1 Master*/
#define MMU_ETH1ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_ETH1ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_ETH1ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_ETH1ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] ETH1 User ID*/
#define MMU_ETH1ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_ETH1ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_ETH1ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_ETH1ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_ETH1ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_ETH1ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_ETH1ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_ETH1ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_ETH1ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] ETH1 Memory Enable*/

/** Bit definition for MMU_ETH2ME register  **/
#define MMU_ETH2ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] ETH2 Master*/
#define MMU_ETH2ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_ETH2ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_ETH2ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_ETH2ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] ETH2 User ID*/
#define MMU_ETH2ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_ETH2ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_ETH2ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_ETH2ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_ETH2ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_ETH2ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_ETH2ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_ETH2ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_ETH2ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] ETH2 Memory Enable*/

/** Bit definition for MMU_USB1ME register  **/
#define MMU_USB1ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] USB1 Master*/
#define MMU_USB1ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_USB1ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_USB1ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_USB1ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] USB1 User ID*/
#define MMU_USB1ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_USB1ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_USB1ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_USB1ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_USB1ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_USB1ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_USB1ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_USB1ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_USB1ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] USB1 Memory Enable*/

/** Bit definition for MMU_USB2ME register  **/
#define MMU_USB2ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] USB2 Master*/
#define MMU_USB2ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_USB2ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_USB2ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_USB2ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] USB2 User ID*/
#define MMU_USB2ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_USB2ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_USB2ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_USB2ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_USB2ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_USB2ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_USB2ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_USB2ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_USB2ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] USB2 Memory Enable*/

/** Bit definition for MMU_SD1ME register  **/
#define MMU_SD1ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] SDMMC1 Master*/
#define MMU_SD1ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_SD1ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_SD1ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_SD1ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] SDMMC  User ID*/
#define MMU_SD1ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_SD1ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_SD1ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_SD1ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_SD1ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_SD1ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_SD1ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_SD1ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_SD1ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] SDMMC1 Memory Enable*/

/** Bit definition for MMU_SD2ME register  **/
#define MMU_SD2ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] SDMMC2 Master*/
#define MMU_SD2ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_SD2ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_SD2ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_SD2ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] SDMMC2 User ID*/
#define MMU_SD2ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_SD2ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_SD2ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_SD2ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_SD2ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_SD2ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_SD2ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_SD2ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_SD2ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] SDMMC2 Memory Enable*/

/** Bit definition for MMU_DVP1ME register  **/
#define MMU_DVP1ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] DVP1 Master*/
#define MMU_DVP1ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_DVP1ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_DVP1ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_DVP1ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] DVP1 User ID*/
#define MMU_DVP1ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_DVP1ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_DVP1ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_DVP1ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_DVP1ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_DVP1ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_DVP1ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_DVP1ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_DVP1ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] DVP1 Memory Enable*/

/** Bit definition for MMU_DVP2ME register  **/
#define MMU_DVP2ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] DVP2 Master*/
#define MMU_DVP2ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_DVP2ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_DVP2ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_DVP2ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] DVP2 User ID*/
#define MMU_DVP2ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_DVP2ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_DVP2ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_DVP2ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_DVP2ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_DVP2ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_DVP2ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_DVP2ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_DVP2ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] DVP2 Memory Enable*/

/** Bit definition for MMU_DMA1ME register  **/
#define MMU_DMA1ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] DMA1 Master*/
#define MMU_DMA1ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_DMA1ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_DMA1ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_DMA1ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] DMA1 User ID*/
#define MMU_DMA1ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_DMA1ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_DMA1ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_DMA1ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_DMA1ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_DMA1ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_DMA1ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_DMA1ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_DMA1ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] DMA1 Memory Enable*/

/** Bit definition for MMU_DMA2ME register  **/
#define MMU_DMA2ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] DMA2 Master*/
#define MMU_DMA2ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_DMA2ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_DMA2ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_DMA2ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] DMA2 User ID*/
#define MMU_DMA2ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_DMA2ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_DMA2ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_DMA2ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_DMA2ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_DMA2ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_DMA2ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_DMA2ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_DMA2ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] DMA2 Memory Enable*/

/** Bit definition for MMU_DMA3ME register  **/
#define MMU_DMA3ME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] DMA3 Master*/
#define MMU_DMA3ME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_DMA3ME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_DMA3ME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_DMA3ME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] DMA3 User ID*/
#define MMU_DMA3ME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_DMA3ME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_DMA3ME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_DMA3ME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_DMA3ME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_DMA3ME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_DMA3ME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_DMA3ME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_DMA3ME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] DMA3 Memory Enable*/

/** Bit definition for MMU_MDMAME register  **/
#define MMU_MDMAME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] MDMA Master*/
#define MMU_MDMAME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_MDMAME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_MDMAME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_MDMAME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] MDMA User ID*/
#define MMU_MDMAME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_MDMAME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_MDMAME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_MDMAME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_MDMAME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_MDMAME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_MDMAME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_MDMAME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_MDMAME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] MDMA Memory Enable*/

/** Bit definition for MMU_JPEGME register  **/
#define MMU_JPEGME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] JPEG Master*/
#define MMU_JPEGME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_JPEGME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_JPEGME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_JPEGME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] JPEG User ID*/
#define MMU_JPEGME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_JPEGME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_JPEGME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_JPEGME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_JPEGME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_JPEGME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_JPEGME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_JPEGME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_JPEGME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] JPEG Memory Enable*/

/** Bit definition for MMU_LCDME register  **/
#define MMU_LCDME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] LCDC Master*/
#define MMU_LCDME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_LCDME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_LCDME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_LCDME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] LCDC User ID*/
#define MMU_LCDME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_LCDME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_LCDME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_LCDME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_LCDME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_LCDME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_LCDME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_LCDME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_LCDME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] LCDC Memory Enable*/

/** Bit definition for MMU_GPUME register  **/
#define MMU_GPUME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] GPU Master*/
#define MMU_GPUME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_GPUME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_GPUME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_GPUME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] GPU User ID*/
#define MMU_GPUME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_GPUME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_GPUME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_GPUME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_GPUME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_GPUME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_GPUME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_GPUME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_GPUME_ME                                      ((uint32_t)0x00000001U)         /* Bit[0] GPU Memory Enable*/

/** Bit definition for MMU_SDPUME register  **/
#define MMU_SDPUME_MID                                     ((uint32_t)0x00070000U)         /* Bit[18:16] SDPU Master*/
#define MMU_SDPUME_MID_0                                   ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_SDPUME_MID_1                                   ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_SDPUME_MID_2                                   ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_SDPUME_UID                                     ((uint32_t)0x0000FF00U)         /* Bit[15:8] SDPU User ID*/
#define MMU_SDPUME_UID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_SDPUME_UID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_SDPUME_UID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_SDPUME_UID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_SDPUME_UID_4                                   ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_SDPUME_UID_5                                   ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_SDPUME_UID_6                                   ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_SDPUME_UID_7                                   ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_SDPUME_EN                                      ((uint32_t)0x00000001U)         /* Bit[0] SDPU Memory Enable*/

/** Bit definition for MMU_XRD register  **/
#define MMU_XRD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] XSPI Master ID*/
#define MMU_XRD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_XRD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_XRD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_XRD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_XRD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] XSPI UID*/
#define MMU_XRD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_XRD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_XRD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_XRD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_XRD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_XRD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_XRD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_XRD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_XRAD register  **/
#define MMU_XRAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] XSPI Read Error Address*/
#define MMU_XRAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_XRAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_XRAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_XRAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_XRAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_XRAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_XRAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_XRAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_XRAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_XRAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_XRAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_XRAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_XRAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_XRAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_XRAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_XRAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_XRAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_XRAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_XRAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_XRAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_XRAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_XRAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_XRAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_XRAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_XRAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_XRAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_XRAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_XRAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_XRAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_XRAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_XRAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_XRAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_XxWD register  **/
#define MMU_X1WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AXI SRAM1 Master ID*/
#define MMU_X1WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X1WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X1WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X1WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X1WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AXI SRAM1 UID*/
#define MMU_X1WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X1WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X1WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X1WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X1WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X1WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X1WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X1WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_X1RD register  **/
#define MMU_X1RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AXI SRAM1 Master ID*/
#define MMU_X1RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X1RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X1RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X1RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X1RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AXI SRAM1 UID*/
#define MMU_X1RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X1RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X1RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X1RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X1RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X1RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X1RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X1RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_X1WAD register  **/
#define MMU_X1WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AXI SRAM1 Write Error Address*/
#define MMU_X1WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X1WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X1WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X1WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X1WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X1WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X1WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X1WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_X1WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X1WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X1WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X1WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X1WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_X1WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_X1WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_X1WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_X1WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_X1WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_X1WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_X1WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_X1WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_X1WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_X1WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_X1WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_X1WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_X1WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_X1WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_X1WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_X1WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_X1WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_X1WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_X1WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_X1RAD register  **/
#define MMU_X1RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AXI SRAM1 Read Error Address*/
#define MMU_X1RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X1RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X1RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X1RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X1RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X1RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X1RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X1RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_X1RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X1RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X1RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X1RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X1RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_X1RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_X1RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_X1RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_X1RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_X1RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_X1RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_X1RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_X1RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_X1RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_X1RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_X1RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_X1RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_X1RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_X1RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_X1RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_X1RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_X1RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_X1RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_X1RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_X2WD register  **/
#define MMU_X2WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AXI SRAM2 Master ID*/
#define MMU_X2WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X2WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X2WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X2WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X2WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AXI SRAM2 UID*/
#define MMU_X2WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X2WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X2WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X2WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X2WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X2WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X2WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X2WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_X2RD register  **/
#define MMU_X2RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AXI SRAM2 Master ID*/
#define MMU_X2RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X2RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X2RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X2RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X2RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AXI SRAM2 UID*/
#define MMU_X2RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X2RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X2RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X2RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X2RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X2RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X2RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X2RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_X2WAD register  **/
#define MMU_X2WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AXI SRAM2 Write Error Address*/
#define MMU_X2WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X2WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X2WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X2WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X2WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X2WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X2WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X2WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_X2WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X2WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X2WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X2WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X2WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_X2WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_X2WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_X2WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_X2WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_X2WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_X2WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_X2WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_X2WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_X2WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_X2WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_X2WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_X2WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_X2WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_X2WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_X2WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_X2WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_X2WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_X2WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_X2WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_X2RAD register  **/
#define MMU_X2RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AXI SRAM2 Read Error Address*/
#define MMU_X2RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X2RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X2RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X2RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X2RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X2RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X2RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X2RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_X2RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X2RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X2RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X2RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X2RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_X2RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_X2RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_X2RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_X2RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_X2RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_X2RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_X2RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_X2RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_X2RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_X2RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_X2RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_X2RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_X2RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_X2RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_X2RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_X2RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_X2RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_X2RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_X2RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_X3WD register  **/
#define MMU_X3WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AXI SRAM3 Master ID*/
#define MMU_X3WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X3WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X3WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X3WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X3WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AXI SRAM3 UID*/
#define MMU_X3WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X3WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X3WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X3WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X3WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X3WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X3WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X3WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_X3RD register  **/
#define MMU_X3RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AXI SRAM3 Master ID*/
#define MMU_X3RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X3RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X3RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X3RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X3RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AXI SRAM3 UID*/
#define MMU_X3RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X3RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X3RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X3RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X3RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X3RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X3RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X3RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_X3WAD register  **/
#define MMU_X3WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AXI SRAM3 Write Error Address*/
#define MMU_X3WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X3WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X3WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X3WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X3WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X3WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X3WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X3WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_X3WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X3WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X3WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X3WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X3WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_X3WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_X3WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_X3WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_X3WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_X3WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_X3WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_X3WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_X3WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_X3WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_X3WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_X3WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_X3WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_X3WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_X3WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_X3WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_X3WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_X3WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_X3WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_X3WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_X3RAD register  **/
#define MMU_X3RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AXI SRAM3 Read Error Address*/
#define MMU_X3RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_X3RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_X3RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_X3RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_X3RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_X3RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_X3RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_X3RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_X3RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_X3RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_X3RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_X3RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_X3RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_X3RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_X3RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_X3RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_X3RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_X3RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_X3RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_X3RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_X3RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_X3RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_X3RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_X3RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_X3RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_X3RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_X3RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_X3RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_X3RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_X3RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_X3RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_X3RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H1WD register  **/
#define MMU_H1WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM1 Master ID*/
#define MMU_H1WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H1WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H1WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H1WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H1WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM1 UID*/
#define MMU_H1WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H1WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H1WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H1WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H1WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H1WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H1WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H1WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H1RD register  **/
#define MMU_H1RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM1 Master ID*/
#define MMU_H1RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H1RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H1RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H1RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H1RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM1 UID*/
#define MMU_H1RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H1RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H1RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H1RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H1RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H1RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H1RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H1RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H1WAD register  **/
#define MMU_H1WAD_ADDDR                                   ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM1 Write Error Address*/
#define MMU_H1WAD_ADDDR_0                                 ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H1WAD_ADDDR_1                                 ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H1WAD_ADDDR_2                                 ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H1WAD_ADDDR_3                                 ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H1WAD_ADDDR_4                                 ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H1WAD_ADDDR_5                                 ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H1WAD_ADDDR_6                                 ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H1WAD_ADDDR_7                                 ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H1WAD_ADDDR_8                                 ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H1WAD_ADDDR_9                                 ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H1WAD_ADDDR_10                                ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H1WAD_ADDDR_11                                ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H1WAD_ADDDR_12                                ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H1WAD_ADDDR_13                                ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H1WAD_ADDDR_14                                ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H1WAD_ADDDR_15                                ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H1WAD_ADDDR_16                                ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H1WAD_ADDDR_17                                ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H1WAD_ADDDR_18                                ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H1WAD_ADDDR_19                                ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H1WAD_ADDDR_20                                ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H1WAD_ADDDR_21                                ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H1WAD_ADDDR_22                                ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H1WAD_ADDDR_23                                ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H1WAD_ADDDR_24                                ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H1WAD_ADDDR_25                                ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H1WAD_ADDDR_26                                ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H1WAD_ADDDR_27                                ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H1WAD_ADDDR_28                                ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H1WAD_ADDDR_29                                ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H1WAD_ADDDR_30                                ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H1WAD_ADDDR_31                                ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H1RAD register  **/
#define MMU_H1RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM1 Read Error Address*/
#define MMU_H1RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H1RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H1RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H1RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H1RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H1RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H1RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H1RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H1RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H1RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H1RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H1RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H1RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H1RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H1RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H1RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H1RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H1RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H1RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H1RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H1RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H1RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H1RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H1RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H1RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H1RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H1RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H1RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H1RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H1RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H1RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H1RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H2WD register  **/
#define MMU_H2WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM2 Master ID*/
#define MMU_H2WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H2WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H2WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H2WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H2WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM2 UID*/
#define MMU_H2WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H2WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H2WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H2WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H2WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H2WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H2WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H2WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H2RD register  **/
#define MMU_H2RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM2 Master ID*/
#define MMU_H2RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H2RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H2RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H2RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H2RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM2 UID*/
#define MMU_H2RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H2RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H2RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H2RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H2RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H2RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H2RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H2RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H2WAD register  **/
#define MMU_H2WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM2 Write Error Address*/
#define MMU_H2WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H2WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H2WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H2WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H2WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H2WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H2WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H2WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H2WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H2WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H2WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H2WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H2WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H2WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H2WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H2WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H2WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H2WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H2WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H2WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H2WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H2WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H2WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H2WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H2WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H2WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H2WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H2WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H2WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H2WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H2WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H2WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H2RAD register  **/
#define MMU_H2RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM2 Read Error Address*/
#define MMU_H2RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H2RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H2RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H2RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H2RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H2RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H2RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H2RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H2RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H2RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H2RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H2RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H2RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H2RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H2RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H2RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H2RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H2RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H2RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H2RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H2RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H2RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H2RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H2RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H2RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H2RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H2RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H2RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H2RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H2RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H2RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H2RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H3WD register  **/
#define MMU_H3WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM3 Master ID*/
#define MMU_H3WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H3WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H3WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H3WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H3WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM3 UID*/
#define MMU_H3WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H3WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H3WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H3WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H3WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H3WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H3WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H3WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H3RD register  **/
#define MMU_H3RD_ID                                      ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM3 Master ID*/
#define MMU_H3RD_ID_0                                    ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H3RD_ID_1                                    ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H3RD_ID_2                                    ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H3RD_ID_3                                    ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H3RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM3 UID*/
#define MMU_H3RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H3RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H3RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H3RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H3RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H3RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H3RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H3RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H3WAD register  **/
#define MMU_H3WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM3 Write Error Address*/
#define MMU_H3WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H3WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H3WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H3WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H3WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H3WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H3WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H3WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H3WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H3WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H3WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H3WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H3WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H3WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H3WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H3WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H3WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H3WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H3WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H3WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H3WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H3WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H3WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H3WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H3WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H3WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H3WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H3WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H3WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H3WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H3WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H3WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H3RAD register  **/
#define MMU_H3RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM3 Read Error Address*/
#define MMU_H3RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H3RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H3RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H3RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H3RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H3RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H3RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H3RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H3RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H3RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H3RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H3RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H3RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H3RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H3RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H3RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H3RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H3RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H3RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H3RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H3RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H3RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H3RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H3RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H3RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H3RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H3RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H3RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H3RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H3RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H3RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H3RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H4WD register  **/
#define MMU_H4WD_ID                                      ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM4 Master ID*/
#define MMU_H4WD_ID_0                                    ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H4WD_ID_1                                    ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H4WD_ID_2                                    ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H4WD_ID_3                                    ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H4WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM4 UID*/
#define MMU_H4WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H4WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H4WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H4WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H4WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H4WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H4WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H4WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H4RD register  **/
#define MMU_H4RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM4 Master ID*/
#define MMU_H4RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H4RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H4RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H4RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H4RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM4 UID*/
#define MMU_H4RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H4RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H4RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H4RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H4RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H4RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H4RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H4RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H4WAD register  **/
#define MMU_H4WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM4 Write Error Address*/
#define MMU_H4WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H4WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H4WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H4WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H4WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H4WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H4WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H4WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H4WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H4WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H4WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H4WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H4WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H4WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H4WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H4WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H4WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H4WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H4WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H4WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H4WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H4WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H4WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H4WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H4WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H4WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H4WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H4WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H4WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H4WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H4WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H4WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H4RAD register  **/
#define MMU_H4RAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM4 Read Error Address*/
#define MMU_H4RAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H4RAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H4RAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H4RAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H4RAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H4RAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H4RAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H4RAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H4RAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H4RAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H4RAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H4RAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H4RAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H4RAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H4RAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H4RAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H4RAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H4RAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H4RAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H4RAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H4RAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H4RAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H4RAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H4RAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H4RAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H4RAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H4RAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H4RAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H4RAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H4RAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H4RAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H4RAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_H5WD register  **/
#define MMU_H5WD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM5 Master ID*/
#define MMU_H5WD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H5WD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H5WD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H5WD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H5WD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM5 UID*/
#define MMU_H5WD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H5WD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H5WD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H5WD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H5WD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H5WD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H5WD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H5WD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H5RD register  **/
#define MMU_H5RD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] AHB SRAM5 Master ID*/
#define MMU_H5RD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H5RD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H5RD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H5RD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H5RD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] AHB SRAM5 UID*/
#define MMU_H5RD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H5RD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H5RD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H5RD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H5RD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H5RD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H5RD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H5RD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_H5WAD register  **/
#define MMU_H5WAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] AHB SRAM5 Read Error Address*/
#define MMU_H5WAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_H5WAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_H5WAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_H5WAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_H5WAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_H5WAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_H5WAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_H5WAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_H5WAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_H5WAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_H5WAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_H5WAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_H5WAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_H5WAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_H5WAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_H5WAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_H5WAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_H5WAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_H5WAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_H5WAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_H5WAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_H5WAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_H5WAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_H5WAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_H5WAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_H5WAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_H5WAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_H5WAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_H5WAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_H5WAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_H5WAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_H5WAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_BKWD register  **/
#define MMU_BKWD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] Backup SRAM Master ID*/
#define MMU_BKWD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_BKWD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_BKWD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_BKWD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_BKWD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] Backup SRAM UID*/
#define MMU_BKWD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_BKWD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_BKWD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_BKWD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_BKWD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_BKWD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_BKWD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_BKWD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_BKRD register  **/
#define MMU_BKRD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] Backup SRAM Master ID*/
#define MMU_BKRD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_BKRD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_BKRD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_BKRD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_BKRD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] Backup SRAM UID*/
#define MMU_BKRD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_BKRD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_BKRD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_BKRD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_BKRD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_BKRD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_BKRD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_BKRD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_BKWAD register  **/
#define MMU_BKWAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Backup SRAM Write Error Address*/
#define MMU_BKWAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_BKWAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_BKWAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_BKWAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_BKWAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_BKWAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_BKWAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_BKWAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_BKWAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_BKWAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_BKWAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_BKWAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_BKWAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_BKWAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_BKWAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_BKWAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_BKWAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_BKWAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_BKWAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_BKWAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_BKWAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_BKWAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_BKWAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_BKWAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_BKWAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_BKWAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_BKWAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_BKWAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_BKWAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_BKWAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_BKWAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_BKWAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_BKRAD register  **/
#define MMU_BKRAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] Backup SRAM Read Error Address*/
#define MMU_BKRAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_BKRAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_BKRAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_BKRAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_BKRAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_BKRAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_BKRAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_BKRAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_BKRAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_BKRAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_BKRAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_BKRAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_BKRAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_BKRAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_BKRAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_BKRAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_BKRAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_BKRAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_BKRAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_BKRAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_BKRAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_BKRAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_BKRAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_BKRAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_BKRAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_BKRAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_BKRAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_BKRAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_BKRAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_BKRAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_BKRAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_BKRAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_ITWD register  **/
#define MMU_ITWD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] ITCM Master ID*/
#define MMU_ITWD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_ITWD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_ITWD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_ITWD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_ITWD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] ITCM UID*/
#define MMU_ITWD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_ITWD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_ITWD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_ITWD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_ITWD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_ITWD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_ITWD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_ITWD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_ITRD register  **/
#define MMU_ITRD_MID                                     ((uint32_t)0x00000F00U)         /* Bit[11:8] ITCM Master ID*/
#define MMU_ITRD_MID_0                                   ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_ITRD_MID_1                                   ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_ITRD_MID_2                                   ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_ITRD_MID_3                                   ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_ITRD_UID                                     ((uint32_t)0x000000FFU)         /* Bit[7:0] ITCM UID*/
#define MMU_ITRD_UID_0                                   ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_ITRD_UID_1                                   ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_ITRD_UID_2                                   ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_ITRD_UID_3                                   ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_ITRD_UID_4                                   ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_ITRD_UID_5                                   ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_ITRD_UID_6                                   ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_ITRD_UID_7                                   ((uint32_t)0x00000080U)         /* Bit7*/

/** Bit definition for MMU_ITWAD register  **/
#define MMU_ITWAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] ITCM Write Error Address*/
#define MMU_ITWAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_ITWAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_ITWAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_ITWAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_ITWAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_ITWAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_ITWAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_ITWAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_ITWAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_ITWAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_ITWAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_ITWAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_ITWAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_ITWAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_ITWAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_ITWAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_ITWAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_ITWAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_ITWAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_ITWAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_ITWAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_ITWAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_ITWAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_ITWAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_ITWAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_ITWAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_ITWAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_ITWAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_ITWAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_ITWAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_ITWAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_ITWAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/

/** Bit definition for MMU_ITRAD register  **/
#define MMU_ITRAD_ADDR                                    ((uint32_t)0xFFFFFFFFU)         /* Bit[31:0] ITCM Read Error Address*/
#define MMU_ITRAD_ADDR_0                                  ((uint32_t)0x00000001U)         /* Bit0*/
#define MMU_ITRAD_ADDR_1                                  ((uint32_t)0x00000002U)         /* Bit1*/
#define MMU_ITRAD_ADDR_2                                  ((uint32_t)0x00000004U)         /* Bit2*/
#define MMU_ITRAD_ADDR_3                                  ((uint32_t)0x00000008U)         /* Bit3*/
#define MMU_ITRAD_ADDR_4                                  ((uint32_t)0x00000010U)         /* Bit4*/
#define MMU_ITRAD_ADDR_5                                  ((uint32_t)0x00000020U)         /* Bit5*/
#define MMU_ITRAD_ADDR_6                                  ((uint32_t)0x00000040U)         /* Bit6*/
#define MMU_ITRAD_ADDR_7                                  ((uint32_t)0x00000080U)         /* Bit7*/
#define MMU_ITRAD_ADDR_8                                  ((uint32_t)0x00000100U)         /* Bit8*/
#define MMU_ITRAD_ADDR_9                                  ((uint32_t)0x00000200U)         /* Bit9*/
#define MMU_ITRAD_ADDR_10                                 ((uint32_t)0x00000400U)         /* Bit10*/
#define MMU_ITRAD_ADDR_11                                 ((uint32_t)0x00000800U)         /* Bit11*/
#define MMU_ITRAD_ADDR_12                                 ((uint32_t)0x00001000U)         /* Bit12*/
#define MMU_ITRAD_ADDR_13                                 ((uint32_t)0x00002000U)         /* Bit13*/
#define MMU_ITRAD_ADDR_14                                 ((uint32_t)0x00004000U)         /* Bit14*/
#define MMU_ITRAD_ADDR_15                                 ((uint32_t)0x00008000U)         /* Bit15*/
#define MMU_ITRAD_ADDR_16                                 ((uint32_t)0x00010000U)         /* Bit16*/
#define MMU_ITRAD_ADDR_17                                 ((uint32_t)0x00020000U)         /* Bit17*/
#define MMU_ITRAD_ADDR_18                                 ((uint32_t)0x00040000U)         /* Bit18*/
#define MMU_ITRAD_ADDR_19                                 ((uint32_t)0x00080000U)         /* Bit19*/
#define MMU_ITRAD_ADDR_20                                 ((uint32_t)0x00100000U)         /* Bit20*/
#define MMU_ITRAD_ADDR_21                                 ((uint32_t)0x00200000U)         /* Bit21*/
#define MMU_ITRAD_ADDR_22                                 ((uint32_t)0x00400000U)         /* Bit22*/
#define MMU_ITRAD_ADDR_23                                 ((uint32_t)0x00800000U)         /* Bit23*/
#define MMU_ITRAD_ADDR_24                                 ((uint32_t)0x01000000U)         /* Bit24*/
#define MMU_ITRAD_ADDR_25                                 ((uint32_t)0x02000000U)         /* Bit25*/
#define MMU_ITRAD_ADDR_26                                 ((uint32_t)0x04000000U)         /* Bit26*/
#define MMU_ITRAD_ADDR_27                                 ((uint32_t)0x08000000U)         /* Bit27*/
#define MMU_ITRAD_ADDR_28                                 ((uint32_t)0x10000000U)         /* Bit28*/
#define MMU_ITRAD_ADDR_29                                 ((uint32_t)0x20000000U)         /* Bit29*/
#define MMU_ITRAD_ADDR_30                                 ((uint32_t)0x40000000U)         /* Bit30*/
#define MMU_ITRAD_ADDR_31                                 ((uint32_t)0x80000000U)         /* Bit31*/


/** Bit Offset register **/
#define REG_BIT0_OFFSET    ((uint32_t)0x00000000U)
#define REG_BIT1_OFFSET    ((uint32_t)0x00000001U)
#define REG_BIT2_OFFSET    ((uint32_t)0x00000002U)
#define REG_BIT3_OFFSET    ((uint32_t)0x00000003U)
#define REG_BIT4_OFFSET    ((uint32_t)0x00000004U)
#define REG_BIT5_OFFSET    ((uint32_t)0x00000005U)
#define REG_BIT6_OFFSET    ((uint32_t)0x00000006U)
#define REG_BIT7_OFFSET    ((uint32_t)0x00000007U)
#define REG_BIT8_OFFSET    ((uint32_t)0x00000008U)
#define REG_BIT9_OFFSET    ((uint32_t)0x00000009U)
#define REG_BIT10_OFFSET   ((uint32_t)0x0000000AU)
#define REG_BIT11_OFFSET   ((uint32_t)0x0000000BU)
#define REG_BIT12_OFFSET   ((uint32_t)0x0000000CU)
#define REG_BIT13_OFFSET   ((uint32_t)0x0000000DU)
#define REG_BIT14_OFFSET   ((uint32_t)0x0000000EU)
#define REG_BIT15_OFFSET   ((uint32_t)0x0000000FU)
#define REG_BIT16_OFFSET   ((uint32_t)0x00000010U)
#define REG_BIT17_OFFSET   ((uint32_t)0x00000011U)
#define REG_BIT18_OFFSET   ((uint32_t)0x00000012U)
#define REG_BIT19_OFFSET   ((uint32_t)0x00000013U)
#define REG_BIT20_OFFSET   ((uint32_t)0x00000014U)
#define REG_BIT21_OFFSET   ((uint32_t)0x00000015U)
#define REG_BIT22_OFFSET   ((uint32_t)0x00000016U)
#define REG_BIT23_OFFSET   ((uint32_t)0x00000017U)
#define REG_BIT24_OFFSET   ((uint32_t)0x00000018U)
#define REG_BIT25_OFFSET   ((uint32_t)0x00000019U)
#define REG_BIT26_OFFSET   ((uint32_t)0x0000001AU)
#define REG_BIT27_OFFSET   ((uint32_t)0x0000001BU)
#define REG_BIT28_OFFSET   ((uint32_t)0x0000001CU)
#define REG_BIT29_OFFSET   ((uint32_t)0x0000001DU)
#define REG_BIT30_OFFSET   ((uint32_t)0x0000001EU)
#define REG_BIT31_OFFSET   ((uint32_t)0x0000001FU)


/*** Exported_macro ***/

#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
    
#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
    
#define READ_BIT(REG, BIT)    ((REG) & (BIT))
    
#define CLEAR_REG(REG)        ((REG) = (0x0))
    
#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
    
#define READ_REG(REG)         ((REG))
    
#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))

#define POSITION_VAL(VAL)     (__CLZ(__RBIT(VAL)))

#define  DWT_CR      (*(__IO uint32_t *)0xE0001000U)
#define  DWT_CYCCNT  (*(__IO uint32_t *)0xE0001004U)
#define  DEM_CR      (*(__IO uint32_t *)0xE000EDFCU)
#define  DEM_CR_TRCENA        ((uint32_t)0x01000000U)
#define  DWT_CR_CYCCNTENA     ((uint32_t)0x00000001U)

#define CPU_DELAY_INTI()    do{                             \
                                /* Enable DWT*/             \
                                DEM_CR |= DEM_CR_TRCENA;    \
                                /* Clear DWT CYCCNT*/       \
                                DWT_CYCCNT = 0U;            \
                                /* Enable DWT CYCCNT*/      \
                                DWT_CR |= DWT_CR_CYCCNTENA; \
                            }while(0)                      

#define CPU_DELAY_DISABLE() do{                             \
                                /* Disable DWT*/            \
                                DEM_CR &= (uint32_t)(~(uint32_t)DEM_CR_TRCENA); \
                            }while(0)         

                            
/* Exported macro ------------------------------------------------------------*/
#ifdef  USE_FULL_ASSERT
/**
  * @brief  The assert_param macro is used for function's parameters check.
  * @param  expr: If expr is false, it calls assert_failed function
  *         which reports the name of the source file and the source
  *         line number of the call that failed.
  *         If expr is true, it returns no value.
  * @retval None
  */
  #define assert_param(expr) ((expr) ? (void)0 : assert_failed((uint8_t *)__FILE__, __LINE__))
/* Exported functions ------------------------------------------------------- */
  void assert_failed(uint8_t* file, uint32_t line);
#else
  #define assert_param(expr) ((void)0)
#endif /* USE_FULL_ASSERT */

#ifdef __cplusplus
}
#endif

#endif /* __N32H76X_78X_H__ */
